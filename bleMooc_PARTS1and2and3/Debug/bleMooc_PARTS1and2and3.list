
bleMooc_PARTS1and2and3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000adcc  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007ec  0800af0c  0800af0c  0001af0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800b6f8  0800b6f8  0001b6f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800b700  0800b700  0001b700  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800b704  0800b704  0001b704  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000088  20000004  0800b708  00020004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 TIMERSERVER_CONTEXT 00000099  2000008c  0800b790  0002008c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 BLE_DRIVER_CONTEXT 0000003e  20000128  0800b829  00020128  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 SYSTEM_DRIVER_CONTEXT 00000011  20000168  0800b867  00020168  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 BLE_APP_CONTEXT 00000088  2000017c  0800b878  0002017c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          000014d4  20000204  0800b900  00020204  2**2
                  ALLOC
 12 ._user_heap_stack 00001400  200016d8  0800b900  000216d8  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 14 MAPPING_TABLE 00000028  20030000  20030000  00030000  2**2
                  ALLOC
 15 MB_MEM1       000001b7  20030028  20030028  00030000  2**2
                  ALLOC
 16 MB_MEM2       00000877  200301e0  200301e0  00030000  2**2
                  ALLOC
 17 .debug_info   000452ee  00000000  00000000  00020234  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_abbrev 0000813c  00000000  00000000  00065522  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_aranges 00002860  00000000  00000000  0006d660  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_ranges 00002560  00000000  00000000  0006fec0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_macro  0002f336  00000000  00000000  00072420  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line   000309c6  00000000  00000000  000a1756  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_str    000f6fab  00000000  00000000  000d211c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .comment      00000053  00000000  00000000  001c90c7  2**0
                  CONTENTS, READONLY
 25 .debug_frame  0000ae9c  00000000  00000000  001c911c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000204 	.word	0x20000204
 800015c:	00000000 	.word	0x00000000
 8000160:	0800aef4 	.word	0x0800aef4

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000208 	.word	0x20000208
 800017c:	0800aef4 	.word	0x0800aef4

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <memchr>:
 8000190:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000194:	2a10      	cmp	r2, #16
 8000196:	db2b      	blt.n	80001f0 <memchr+0x60>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	d008      	beq.n	80001b0 <memchr+0x20>
 800019e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001a2:	3a01      	subs	r2, #1
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d02d      	beq.n	8000204 <memchr+0x74>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	b342      	cbz	r2, 8000200 <memchr+0x70>
 80001ae:	d1f6      	bne.n	800019e <memchr+0xe>
 80001b0:	b4f0      	push	{r4, r5, r6, r7}
 80001b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ba:	f022 0407 	bic.w	r4, r2, #7
 80001be:	f07f 0700 	mvns.w	r7, #0
 80001c2:	2300      	movs	r3, #0
 80001c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001c8:	3c08      	subs	r4, #8
 80001ca:	ea85 0501 	eor.w	r5, r5, r1
 80001ce:	ea86 0601 	eor.w	r6, r6, r1
 80001d2:	fa85 f547 	uadd8	r5, r5, r7
 80001d6:	faa3 f587 	sel	r5, r3, r7
 80001da:	fa86 f647 	uadd8	r6, r6, r7
 80001de:	faa5 f687 	sel	r6, r5, r7
 80001e2:	b98e      	cbnz	r6, 8000208 <memchr+0x78>
 80001e4:	d1ee      	bne.n	80001c4 <memchr+0x34>
 80001e6:	bcf0      	pop	{r4, r5, r6, r7}
 80001e8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001ec:	f002 0207 	and.w	r2, r2, #7
 80001f0:	b132      	cbz	r2, 8000200 <memchr+0x70>
 80001f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f6:	3a01      	subs	r2, #1
 80001f8:	ea83 0301 	eor.w	r3, r3, r1
 80001fc:	b113      	cbz	r3, 8000204 <memchr+0x74>
 80001fe:	d1f8      	bne.n	80001f2 <memchr+0x62>
 8000200:	2000      	movs	r0, #0
 8000202:	4770      	bx	lr
 8000204:	3801      	subs	r0, #1
 8000206:	4770      	bx	lr
 8000208:	2d00      	cmp	r5, #0
 800020a:	bf06      	itte	eq
 800020c:	4635      	moveq	r5, r6
 800020e:	3803      	subeq	r0, #3
 8000210:	3807      	subne	r0, #7
 8000212:	f015 0f01 	tst.w	r5, #1
 8000216:	d107      	bne.n	8000228 <memchr+0x98>
 8000218:	3001      	adds	r0, #1
 800021a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800021e:	bf02      	ittt	eq
 8000220:	3001      	addeq	r0, #1
 8000222:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000226:	3001      	addeq	r0, #1
 8000228:	bcf0      	pop	{r4, r5, r6, r7}
 800022a:	3801      	subs	r0, #1
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop

08000230 <__aeabi_uldivmod>:
 8000230:	b953      	cbnz	r3, 8000248 <__aeabi_uldivmod+0x18>
 8000232:	b94a      	cbnz	r2, 8000248 <__aeabi_uldivmod+0x18>
 8000234:	2900      	cmp	r1, #0
 8000236:	bf08      	it	eq
 8000238:	2800      	cmpeq	r0, #0
 800023a:	bf1c      	itt	ne
 800023c:	f04f 31ff 	movne.w	r1, #4294967295
 8000240:	f04f 30ff 	movne.w	r0, #4294967295
 8000244:	f000 b96e 	b.w	8000524 <__aeabi_idiv0>
 8000248:	f1ad 0c08 	sub.w	ip, sp, #8
 800024c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000250:	f000 f806 	bl	8000260 <__udivmoddi4>
 8000254:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000258:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800025c:	b004      	add	sp, #16
 800025e:	4770      	bx	lr

08000260 <__udivmoddi4>:
 8000260:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000264:	9d08      	ldr	r5, [sp, #32]
 8000266:	4604      	mov	r4, r0
 8000268:	468c      	mov	ip, r1
 800026a:	2b00      	cmp	r3, #0
 800026c:	f040 8083 	bne.w	8000376 <__udivmoddi4+0x116>
 8000270:	428a      	cmp	r2, r1
 8000272:	4617      	mov	r7, r2
 8000274:	d947      	bls.n	8000306 <__udivmoddi4+0xa6>
 8000276:	fab2 f282 	clz	r2, r2
 800027a:	b142      	cbz	r2, 800028e <__udivmoddi4+0x2e>
 800027c:	f1c2 0020 	rsb	r0, r2, #32
 8000280:	fa24 f000 	lsr.w	r0, r4, r0
 8000284:	4091      	lsls	r1, r2
 8000286:	4097      	lsls	r7, r2
 8000288:	ea40 0c01 	orr.w	ip, r0, r1
 800028c:	4094      	lsls	r4, r2
 800028e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000292:	0c23      	lsrs	r3, r4, #16
 8000294:	fbbc f6f8 	udiv	r6, ip, r8
 8000298:	fa1f fe87 	uxth.w	lr, r7
 800029c:	fb08 c116 	mls	r1, r8, r6, ip
 80002a0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002a4:	fb06 f10e 	mul.w	r1, r6, lr
 80002a8:	4299      	cmp	r1, r3
 80002aa:	d909      	bls.n	80002c0 <__udivmoddi4+0x60>
 80002ac:	18fb      	adds	r3, r7, r3
 80002ae:	f106 30ff 	add.w	r0, r6, #4294967295
 80002b2:	f080 8119 	bcs.w	80004e8 <__udivmoddi4+0x288>
 80002b6:	4299      	cmp	r1, r3
 80002b8:	f240 8116 	bls.w	80004e8 <__udivmoddi4+0x288>
 80002bc:	3e02      	subs	r6, #2
 80002be:	443b      	add	r3, r7
 80002c0:	1a5b      	subs	r3, r3, r1
 80002c2:	b2a4      	uxth	r4, r4
 80002c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80002c8:	fb08 3310 	mls	r3, r8, r0, r3
 80002cc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80002d4:	45a6      	cmp	lr, r4
 80002d6:	d909      	bls.n	80002ec <__udivmoddi4+0x8c>
 80002d8:	193c      	adds	r4, r7, r4
 80002da:	f100 33ff 	add.w	r3, r0, #4294967295
 80002de:	f080 8105 	bcs.w	80004ec <__udivmoddi4+0x28c>
 80002e2:	45a6      	cmp	lr, r4
 80002e4:	f240 8102 	bls.w	80004ec <__udivmoddi4+0x28c>
 80002e8:	3802      	subs	r0, #2
 80002ea:	443c      	add	r4, r7
 80002ec:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002f0:	eba4 040e 	sub.w	r4, r4, lr
 80002f4:	2600      	movs	r6, #0
 80002f6:	b11d      	cbz	r5, 8000300 <__udivmoddi4+0xa0>
 80002f8:	40d4      	lsrs	r4, r2
 80002fa:	2300      	movs	r3, #0
 80002fc:	e9c5 4300 	strd	r4, r3, [r5]
 8000300:	4631      	mov	r1, r6
 8000302:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000306:	b902      	cbnz	r2, 800030a <__udivmoddi4+0xaa>
 8000308:	deff      	udf	#255	; 0xff
 800030a:	fab2 f282 	clz	r2, r2
 800030e:	2a00      	cmp	r2, #0
 8000310:	d150      	bne.n	80003b4 <__udivmoddi4+0x154>
 8000312:	1bcb      	subs	r3, r1, r7
 8000314:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000318:	fa1f f887 	uxth.w	r8, r7
 800031c:	2601      	movs	r6, #1
 800031e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000322:	0c21      	lsrs	r1, r4, #16
 8000324:	fb0e 331c 	mls	r3, lr, ip, r3
 8000328:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800032c:	fb08 f30c 	mul.w	r3, r8, ip
 8000330:	428b      	cmp	r3, r1
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0xe4>
 8000334:	1879      	adds	r1, r7, r1
 8000336:	f10c 30ff 	add.w	r0, ip, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0xe2>
 800033c:	428b      	cmp	r3, r1
 800033e:	f200 80e9 	bhi.w	8000514 <__udivmoddi4+0x2b4>
 8000342:	4684      	mov	ip, r0
 8000344:	1ac9      	subs	r1, r1, r3
 8000346:	b2a3      	uxth	r3, r4
 8000348:	fbb1 f0fe 	udiv	r0, r1, lr
 800034c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000350:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000354:	fb08 f800 	mul.w	r8, r8, r0
 8000358:	45a0      	cmp	r8, r4
 800035a:	d907      	bls.n	800036c <__udivmoddi4+0x10c>
 800035c:	193c      	adds	r4, r7, r4
 800035e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x10a>
 8000364:	45a0      	cmp	r8, r4
 8000366:	f200 80d9 	bhi.w	800051c <__udivmoddi4+0x2bc>
 800036a:	4618      	mov	r0, r3
 800036c:	eba4 0408 	sub.w	r4, r4, r8
 8000370:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000374:	e7bf      	b.n	80002f6 <__udivmoddi4+0x96>
 8000376:	428b      	cmp	r3, r1
 8000378:	d909      	bls.n	800038e <__udivmoddi4+0x12e>
 800037a:	2d00      	cmp	r5, #0
 800037c:	f000 80b1 	beq.w	80004e2 <__udivmoddi4+0x282>
 8000380:	2600      	movs	r6, #0
 8000382:	e9c5 0100 	strd	r0, r1, [r5]
 8000386:	4630      	mov	r0, r6
 8000388:	4631      	mov	r1, r6
 800038a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038e:	fab3 f683 	clz	r6, r3
 8000392:	2e00      	cmp	r6, #0
 8000394:	d14a      	bne.n	800042c <__udivmoddi4+0x1cc>
 8000396:	428b      	cmp	r3, r1
 8000398:	d302      	bcc.n	80003a0 <__udivmoddi4+0x140>
 800039a:	4282      	cmp	r2, r0
 800039c:	f200 80b8 	bhi.w	8000510 <__udivmoddi4+0x2b0>
 80003a0:	1a84      	subs	r4, r0, r2
 80003a2:	eb61 0103 	sbc.w	r1, r1, r3
 80003a6:	2001      	movs	r0, #1
 80003a8:	468c      	mov	ip, r1
 80003aa:	2d00      	cmp	r5, #0
 80003ac:	d0a8      	beq.n	8000300 <__udivmoddi4+0xa0>
 80003ae:	e9c5 4c00 	strd	r4, ip, [r5]
 80003b2:	e7a5      	b.n	8000300 <__udivmoddi4+0xa0>
 80003b4:	f1c2 0320 	rsb	r3, r2, #32
 80003b8:	fa20 f603 	lsr.w	r6, r0, r3
 80003bc:	4097      	lsls	r7, r2
 80003be:	fa01 f002 	lsl.w	r0, r1, r2
 80003c2:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c6:	40d9      	lsrs	r1, r3
 80003c8:	4330      	orrs	r0, r6
 80003ca:	0c03      	lsrs	r3, r0, #16
 80003cc:	fbb1 f6fe 	udiv	r6, r1, lr
 80003d0:	fa1f f887 	uxth.w	r8, r7
 80003d4:	fb0e 1116 	mls	r1, lr, r6, r1
 80003d8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003dc:	fb06 f108 	mul.w	r1, r6, r8
 80003e0:	4299      	cmp	r1, r3
 80003e2:	fa04 f402 	lsl.w	r4, r4, r2
 80003e6:	d909      	bls.n	80003fc <__udivmoddi4+0x19c>
 80003e8:	18fb      	adds	r3, r7, r3
 80003ea:	f106 3cff 	add.w	ip, r6, #4294967295
 80003ee:	f080 808d 	bcs.w	800050c <__udivmoddi4+0x2ac>
 80003f2:	4299      	cmp	r1, r3
 80003f4:	f240 808a 	bls.w	800050c <__udivmoddi4+0x2ac>
 80003f8:	3e02      	subs	r6, #2
 80003fa:	443b      	add	r3, r7
 80003fc:	1a5b      	subs	r3, r3, r1
 80003fe:	b281      	uxth	r1, r0
 8000400:	fbb3 f0fe 	udiv	r0, r3, lr
 8000404:	fb0e 3310 	mls	r3, lr, r0, r3
 8000408:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800040c:	fb00 f308 	mul.w	r3, r0, r8
 8000410:	428b      	cmp	r3, r1
 8000412:	d907      	bls.n	8000424 <__udivmoddi4+0x1c4>
 8000414:	1879      	adds	r1, r7, r1
 8000416:	f100 3cff 	add.w	ip, r0, #4294967295
 800041a:	d273      	bcs.n	8000504 <__udivmoddi4+0x2a4>
 800041c:	428b      	cmp	r3, r1
 800041e:	d971      	bls.n	8000504 <__udivmoddi4+0x2a4>
 8000420:	3802      	subs	r0, #2
 8000422:	4439      	add	r1, r7
 8000424:	1acb      	subs	r3, r1, r3
 8000426:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800042a:	e778      	b.n	800031e <__udivmoddi4+0xbe>
 800042c:	f1c6 0c20 	rsb	ip, r6, #32
 8000430:	fa03 f406 	lsl.w	r4, r3, r6
 8000434:	fa22 f30c 	lsr.w	r3, r2, ip
 8000438:	431c      	orrs	r4, r3
 800043a:	fa20 f70c 	lsr.w	r7, r0, ip
 800043e:	fa01 f306 	lsl.w	r3, r1, r6
 8000442:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000446:	fa21 f10c 	lsr.w	r1, r1, ip
 800044a:	431f      	orrs	r7, r3
 800044c:	0c3b      	lsrs	r3, r7, #16
 800044e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000452:	fa1f f884 	uxth.w	r8, r4
 8000456:	fb0e 1119 	mls	r1, lr, r9, r1
 800045a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800045e:	fb09 fa08 	mul.w	sl, r9, r8
 8000462:	458a      	cmp	sl, r1
 8000464:	fa02 f206 	lsl.w	r2, r2, r6
 8000468:	fa00 f306 	lsl.w	r3, r0, r6
 800046c:	d908      	bls.n	8000480 <__udivmoddi4+0x220>
 800046e:	1861      	adds	r1, r4, r1
 8000470:	f109 30ff 	add.w	r0, r9, #4294967295
 8000474:	d248      	bcs.n	8000508 <__udivmoddi4+0x2a8>
 8000476:	458a      	cmp	sl, r1
 8000478:	d946      	bls.n	8000508 <__udivmoddi4+0x2a8>
 800047a:	f1a9 0902 	sub.w	r9, r9, #2
 800047e:	4421      	add	r1, r4
 8000480:	eba1 010a 	sub.w	r1, r1, sl
 8000484:	b2bf      	uxth	r7, r7
 8000486:	fbb1 f0fe 	udiv	r0, r1, lr
 800048a:	fb0e 1110 	mls	r1, lr, r0, r1
 800048e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000492:	fb00 f808 	mul.w	r8, r0, r8
 8000496:	45b8      	cmp	r8, r7
 8000498:	d907      	bls.n	80004aa <__udivmoddi4+0x24a>
 800049a:	19e7      	adds	r7, r4, r7
 800049c:	f100 31ff 	add.w	r1, r0, #4294967295
 80004a0:	d22e      	bcs.n	8000500 <__udivmoddi4+0x2a0>
 80004a2:	45b8      	cmp	r8, r7
 80004a4:	d92c      	bls.n	8000500 <__udivmoddi4+0x2a0>
 80004a6:	3802      	subs	r0, #2
 80004a8:	4427      	add	r7, r4
 80004aa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ae:	eba7 0708 	sub.w	r7, r7, r8
 80004b2:	fba0 8902 	umull	r8, r9, r0, r2
 80004b6:	454f      	cmp	r7, r9
 80004b8:	46c6      	mov	lr, r8
 80004ba:	4649      	mov	r1, r9
 80004bc:	d31a      	bcc.n	80004f4 <__udivmoddi4+0x294>
 80004be:	d017      	beq.n	80004f0 <__udivmoddi4+0x290>
 80004c0:	b15d      	cbz	r5, 80004da <__udivmoddi4+0x27a>
 80004c2:	ebb3 020e 	subs.w	r2, r3, lr
 80004c6:	eb67 0701 	sbc.w	r7, r7, r1
 80004ca:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004ce:	40f2      	lsrs	r2, r6
 80004d0:	ea4c 0202 	orr.w	r2, ip, r2
 80004d4:	40f7      	lsrs	r7, r6
 80004d6:	e9c5 2700 	strd	r2, r7, [r5]
 80004da:	2600      	movs	r6, #0
 80004dc:	4631      	mov	r1, r6
 80004de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004e2:	462e      	mov	r6, r5
 80004e4:	4628      	mov	r0, r5
 80004e6:	e70b      	b.n	8000300 <__udivmoddi4+0xa0>
 80004e8:	4606      	mov	r6, r0
 80004ea:	e6e9      	b.n	80002c0 <__udivmoddi4+0x60>
 80004ec:	4618      	mov	r0, r3
 80004ee:	e6fd      	b.n	80002ec <__udivmoddi4+0x8c>
 80004f0:	4543      	cmp	r3, r8
 80004f2:	d2e5      	bcs.n	80004c0 <__udivmoddi4+0x260>
 80004f4:	ebb8 0e02 	subs.w	lr, r8, r2
 80004f8:	eb69 0104 	sbc.w	r1, r9, r4
 80004fc:	3801      	subs	r0, #1
 80004fe:	e7df      	b.n	80004c0 <__udivmoddi4+0x260>
 8000500:	4608      	mov	r0, r1
 8000502:	e7d2      	b.n	80004aa <__udivmoddi4+0x24a>
 8000504:	4660      	mov	r0, ip
 8000506:	e78d      	b.n	8000424 <__udivmoddi4+0x1c4>
 8000508:	4681      	mov	r9, r0
 800050a:	e7b9      	b.n	8000480 <__udivmoddi4+0x220>
 800050c:	4666      	mov	r6, ip
 800050e:	e775      	b.n	80003fc <__udivmoddi4+0x19c>
 8000510:	4630      	mov	r0, r6
 8000512:	e74a      	b.n	80003aa <__udivmoddi4+0x14a>
 8000514:	f1ac 0c02 	sub.w	ip, ip, #2
 8000518:	4439      	add	r1, r7
 800051a:	e713      	b.n	8000344 <__udivmoddi4+0xe4>
 800051c:	3802      	subs	r0, #2
 800051e:	443c      	add	r4, r7
 8000520:	e724      	b.n	800036c <__udivmoddi4+0x10c>
 8000522:	bf00      	nop

08000524 <__aeabi_idiv0>:
 8000524:	4770      	bx	lr
 8000526:	bf00      	nop

08000528 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8000528:	b480      	push	{r7}
 800052a:	b083      	sub	sp, #12
 800052c:	af00      	add	r7, sp, #0
 800052e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8000530:	4b06      	ldr	r3, [pc, #24]	; (800054c <LL_EXTI_EnableIT_32_63+0x24>)
 8000532:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8000536:	4905      	ldr	r1, [pc, #20]	; (800054c <LL_EXTI_EnableIT_32_63+0x24>)
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	4313      	orrs	r3, r2
 800053c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8000540:	bf00      	nop
 8000542:	370c      	adds	r7, #12
 8000544:	46bd      	mov	sp, r7
 8000546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800054a:	4770      	bx	lr
 800054c:	58000800 	.word	0x58000800

08000550 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000550:	b480      	push	{r7}
 8000552:	b085      	sub	sp, #20
 8000554:	af00      	add	r7, sp, #0
 8000556:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000558:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800055c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800055e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	4313      	orrs	r3, r2
 8000566:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000568:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800056c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	4013      	ands	r3, r2
 8000572:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000574:	68fb      	ldr	r3, [r7, #12]
}
 8000576:	bf00      	nop
 8000578:	3714      	adds	r7, #20
 800057a:	46bd      	mov	sp, r7
 800057c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000580:	4770      	bx	lr

08000582 <LL_C2_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000582:	b480      	push	{r7}
 8000584:	b085      	sub	sp, #20
 8000586:	af00      	add	r7, sp, #0
 8000588:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB2ENR, Periphs);
 800058a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800058e:	f8d3 214c 	ldr.w	r2, [r3, #332]	; 0x14c
 8000592:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	4313      	orrs	r3, r2
 800059a:	f8c1 314c 	str.w	r3, [r1, #332]	; 0x14c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB2ENR, Periphs);
 800059e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80005a2:	f8d3 214c 	ldr.w	r2, [r3, #332]	; 0x14c
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	4013      	ands	r3, r2
 80005aa:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80005ac:	68fb      	ldr	r3, [r7, #12]
}
 80005ae:	bf00      	nop
 80005b0:	3714      	adds	r7, #20
 80005b2:	46bd      	mov	sp, r7
 80005b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b8:	4770      	bx	lr

080005ba <APPD_Init>:
static void APPD_BleDtbCfg( void );
/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void APPD_Init( void )
{
 80005ba:	b580      	push	{r7, lr}
 80005bc:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_Init */
#if (CFG_DEBUGGER_SUPPORTED == 1)
  /**
   * Keep debugger enabled while in any low power mode
   */
  HAL_DBGMCU_EnableDBGSleepMode();
 80005be:	f001 fa6b 	bl	8001a98 <HAL_DBGMCU_EnableDBGSleepMode>
  HAL_DBGMCU_EnableDBGStopMode();
 80005c2:	f001 fa6f 	bl	8001aa4 <HAL_DBGMCU_EnableDBGStopMode>

  /***************** ENABLE DEBUGGER *************************************/
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_48);
 80005c6:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80005ca:	f7ff ffad 	bl	8000528 <LL_EXTI_EnableIT_32_63>
  HAL_DBGMCU_DisableDBGStandbyMode();

#endif /* (CFG_DEBUGGER_SUPPORTED == 1) */

#if(CFG_DEBUG_TRACE != 0)
  DbgTraceInit();
 80005ce:	f007 f9c3 	bl	8007958 <DbgTraceInit>
#endif

  APPD_SetCPU2GpioConfig( );
 80005d2:	f000 f821 	bl	8000618 <APPD_SetCPU2GpioConfig>
  APPD_BleDtbCfg( );
 80005d6:	f000 f8c3 	bl	8000760 <APPD_BleDtbCfg>

/* USER CODE END APPD_Init */
  return;
 80005da:	bf00      	nop
}
 80005dc:	bd80      	pop	{r7, pc}
	...

080005e0 <APPD_EnableCPU2>:

void APPD_EnableCPU2( void )
{
 80005e0:	b5b0      	push	{r4, r5, r7, lr}
 80005e2:	b088      	sub	sp, #32
 80005e4:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_EnableCPU2 */
  SHCI_C2_DEBUG_Init_Cmd_Packet_t DebugCmdPacket =
 80005e6:	4b0b      	ldr	r3, [pc, #44]	; (8000614 <APPD_EnableCPU2+0x34>)
 80005e8:	1d3c      	adds	r4, r7, #4
 80005ea:	461d      	mov	r5, r3
 80005ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005f0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005f4:	c403      	stmia	r4!, {r0, r1}
 80005f6:	8022      	strh	r2, [r4, #0]
 80005f8:	3402      	adds	r4, #2
 80005fa:	0c13      	lsrs	r3, r2, #16
 80005fc:	7023      	strb	r3, [r4, #0]
    NBR_OF_TRACES_CONFIG_PARAMETERS,
    NBR_OF_GENERAL_CONFIG_PARAMETERS}
  };

  /**< Traces channel initialization */
  TL_TRACES_Init( );
 80005fe:	f007 f8bf 	bl	8007780 <TL_TRACES_Init>

  /** GPIO DEBUG Initialization */
  SHCI_C2_DEBUG_Init( &DebugCmdPacket  );
 8000602:	1d3b      	adds	r3, r7, #4
 8000604:	4618      	mov	r0, r3
 8000606:	f006 fc1e 	bl	8006e46 <SHCI_C2_DEBUG_Init>

/* USER CODE END APPD_EnableCPU2 */
  return;
 800060a:	bf00      	nop
}
 800060c:	3720      	adds	r7, #32
 800060e:	46bd      	mov	sp, r7
 8000610:	bdb0      	pop	{r4, r5, r7, pc}
 8000612:	bf00      	nop
 8000614:	0800af0c 	.word	0x0800af0c

08000618 <APPD_SetCPU2GpioConfig>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void APPD_SetCPU2GpioConfig( void )
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b088      	sub	sp, #32
 800061c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_SetCPU2GpioConfig */
  GPIO_InitTypeDef gpio_config = {0};
 800061e:	1d3b      	adds	r3, r7, #4
 8000620:	2200      	movs	r2, #0
 8000622:	601a      	str	r2, [r3, #0]
 8000624:	605a      	str	r2, [r3, #4]
 8000626:	609a      	str	r2, [r3, #8]
 8000628:	60da      	str	r2, [r3, #12]
 800062a:	611a      	str	r2, [r3, #16]
  uint8_t local_loop;
  uint16_t gpioa_pin_list;
  uint16_t gpiob_pin_list;
  uint16_t gpioc_pin_list;

  gpioa_pin_list = 0;
 800062c:	2300      	movs	r3, #0
 800062e:	83bb      	strh	r3, [r7, #28]
  gpiob_pin_list = 0;
 8000630:	2300      	movs	r3, #0
 8000632:	837b      	strh	r3, [r7, #26]
  gpioc_pin_list = 0;
 8000634:	2300      	movs	r3, #0
 8000636:	833b      	strh	r3, [r7, #24]

  for(local_loop = 0 ; local_loop < GPIO_CFG_NBR_OF_FEATURES; local_loop++)
 8000638:	2300      	movs	r3, #0
 800063a:	77fb      	strb	r3, [r7, #31]
 800063c:	e038      	b.n	80006b0 <APPD_SetCPU2GpioConfig+0x98>
  {
    if( aGpioConfigList[local_loop].enable != 0)
 800063e:	7ffb      	ldrb	r3, [r7, #31]
 8000640:	4a44      	ldr	r2, [pc, #272]	; (8000754 <APPD_SetCPU2GpioConfig+0x13c>)
 8000642:	00db      	lsls	r3, r3, #3
 8000644:	4413      	add	r3, r2
 8000646:	799b      	ldrb	r3, [r3, #6]
 8000648:	2b00      	cmp	r3, #0
 800064a:	d02b      	beq.n	80006a4 <APPD_SetCPU2GpioConfig+0x8c>
    {
      switch((uint32_t)aGpioConfigList[local_loop].port)
 800064c:	7ffb      	ldrb	r3, [r7, #31]
 800064e:	4a41      	ldr	r2, [pc, #260]	; (8000754 <APPD_SetCPU2GpioConfig+0x13c>)
 8000650:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000654:	4a40      	ldr	r2, [pc, #256]	; (8000758 <APPD_SetCPU2GpioConfig+0x140>)
 8000656:	4293      	cmp	r3, r2
 8000658:	d01b      	beq.n	8000692 <APPD_SetCPU2GpioConfig+0x7a>
 800065a:	4a3f      	ldr	r2, [pc, #252]	; (8000758 <APPD_SetCPU2GpioConfig+0x140>)
 800065c:	4293      	cmp	r3, r2
 800065e:	d823      	bhi.n	80006a8 <APPD_SetCPU2GpioConfig+0x90>
 8000660:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000664:	d003      	beq.n	800066e <APPD_SetCPU2GpioConfig+0x56>
 8000666:	4a3d      	ldr	r2, [pc, #244]	; (800075c <APPD_SetCPU2GpioConfig+0x144>)
 8000668:	4293      	cmp	r3, r2
 800066a:	d009      	beq.n	8000680 <APPD_SetCPU2GpioConfig+0x68>
        case (uint32_t)GPIOC:
            gpioc_pin_list |= aGpioConfigList[local_loop].pin;
          break;

        default:
          break;
 800066c:	e01c      	b.n	80006a8 <APPD_SetCPU2GpioConfig+0x90>
            gpioa_pin_list |= aGpioConfigList[local_loop].pin;
 800066e:	7ffb      	ldrb	r3, [r7, #31]
 8000670:	4a38      	ldr	r2, [pc, #224]	; (8000754 <APPD_SetCPU2GpioConfig+0x13c>)
 8000672:	00db      	lsls	r3, r3, #3
 8000674:	4413      	add	r3, r2
 8000676:	889a      	ldrh	r2, [r3, #4]
 8000678:	8bbb      	ldrh	r3, [r7, #28]
 800067a:	4313      	orrs	r3, r2
 800067c:	83bb      	strh	r3, [r7, #28]
          break;
 800067e:	e014      	b.n	80006aa <APPD_SetCPU2GpioConfig+0x92>
            gpiob_pin_list |= aGpioConfigList[local_loop].pin;
 8000680:	7ffb      	ldrb	r3, [r7, #31]
 8000682:	4a34      	ldr	r2, [pc, #208]	; (8000754 <APPD_SetCPU2GpioConfig+0x13c>)
 8000684:	00db      	lsls	r3, r3, #3
 8000686:	4413      	add	r3, r2
 8000688:	889a      	ldrh	r2, [r3, #4]
 800068a:	8b7b      	ldrh	r3, [r7, #26]
 800068c:	4313      	orrs	r3, r2
 800068e:	837b      	strh	r3, [r7, #26]
          break;
 8000690:	e00b      	b.n	80006aa <APPD_SetCPU2GpioConfig+0x92>
            gpioc_pin_list |= aGpioConfigList[local_loop].pin;
 8000692:	7ffb      	ldrb	r3, [r7, #31]
 8000694:	4a2f      	ldr	r2, [pc, #188]	; (8000754 <APPD_SetCPU2GpioConfig+0x13c>)
 8000696:	00db      	lsls	r3, r3, #3
 8000698:	4413      	add	r3, r2
 800069a:	889a      	ldrh	r2, [r3, #4]
 800069c:	8b3b      	ldrh	r3, [r7, #24]
 800069e:	4313      	orrs	r3, r2
 80006a0:	833b      	strh	r3, [r7, #24]
          break;
 80006a2:	e002      	b.n	80006aa <APPD_SetCPU2GpioConfig+0x92>
      }
    }
 80006a4:	bf00      	nop
 80006a6:	e000      	b.n	80006aa <APPD_SetCPU2GpioConfig+0x92>
          break;
 80006a8:	bf00      	nop
  for(local_loop = 0 ; local_loop < GPIO_CFG_NBR_OF_FEATURES; local_loop++)
 80006aa:	7ffb      	ldrb	r3, [r7, #31]
 80006ac:	3301      	adds	r3, #1
 80006ae:	77fb      	strb	r3, [r7, #31]
 80006b0:	7ffb      	ldrb	r3, [r7, #31]
 80006b2:	2b21      	cmp	r3, #33	; 0x21
 80006b4:	d9c3      	bls.n	800063e <APPD_SetCPU2GpioConfig+0x26>
  }

  gpio_config.Pull = GPIO_NOPULL;
 80006b6:	2300      	movs	r3, #0
 80006b8:	60fb      	str	r3, [r7, #12]
  gpio_config.Mode = GPIO_MODE_OUTPUT_PP;
 80006ba:	2301      	movs	r3, #1
 80006bc:	60bb      	str	r3, [r7, #8]
  gpio_config.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006be:	2303      	movs	r3, #3
 80006c0:	613b      	str	r3, [r7, #16]

  if(gpioa_pin_list != 0)
 80006c2:	8bbb      	ldrh	r3, [r7, #28]
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d014      	beq.n	80006f2 <APPD_SetCPU2GpioConfig+0xda>
  {
    gpio_config.Pin = gpioa_pin_list;
 80006c8:	8bbb      	ldrh	r3, [r7, #28]
 80006ca:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006cc:	2001      	movs	r0, #1
 80006ce:	f7ff ff3f 	bl	8000550 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOA_CLK_ENABLE();
 80006d2:	2001      	movs	r0, #1
 80006d4:	f7ff ff55 	bl	8000582 <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOA, &gpio_config);
 80006d8:	1d3b      	adds	r3, r7, #4
 80006da:	4619      	mov	r1, r3
 80006dc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006e0:	f001 fe80 	bl	80023e4 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOA, gpioa_pin_list, GPIO_PIN_RESET);
 80006e4:	8bbb      	ldrh	r3, [r7, #28]
 80006e6:	2200      	movs	r2, #0
 80006e8:	4619      	mov	r1, r3
 80006ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006ee:	f001 ffe9 	bl	80026c4 <HAL_GPIO_WritePin>
  }

  if(gpiob_pin_list != 0)
 80006f2:	8b7b      	ldrh	r3, [r7, #26]
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d012      	beq.n	800071e <APPD_SetCPU2GpioConfig+0x106>
  {
    gpio_config.Pin = gpiob_pin_list;
 80006f8:	8b7b      	ldrh	r3, [r7, #26]
 80006fa:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006fc:	2002      	movs	r0, #2
 80006fe:	f7ff ff27 	bl	8000550 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOB_CLK_ENABLE();
 8000702:	2002      	movs	r0, #2
 8000704:	f7ff ff3d 	bl	8000582 <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOB, &gpio_config);
 8000708:	1d3b      	adds	r3, r7, #4
 800070a:	4619      	mov	r1, r3
 800070c:	4813      	ldr	r0, [pc, #76]	; (800075c <APPD_SetCPU2GpioConfig+0x144>)
 800070e:	f001 fe69 	bl	80023e4 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOB, gpiob_pin_list, GPIO_PIN_RESET);
 8000712:	8b7b      	ldrh	r3, [r7, #26]
 8000714:	2200      	movs	r2, #0
 8000716:	4619      	mov	r1, r3
 8000718:	4810      	ldr	r0, [pc, #64]	; (800075c <APPD_SetCPU2GpioConfig+0x144>)
 800071a:	f001 ffd3 	bl	80026c4 <HAL_GPIO_WritePin>
  }

  if(gpioc_pin_list != 0)
 800071e:	8b3b      	ldrh	r3, [r7, #24]
 8000720:	2b00      	cmp	r3, #0
 8000722:	d013      	beq.n	800074c <APPD_SetCPU2GpioConfig+0x134>
  {
    gpio_config.Pin = gpioc_pin_list;
 8000724:	8b3b      	ldrh	r3, [r7, #24]
 8000726:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000728:	2004      	movs	r0, #4
 800072a:	f7ff ff11 	bl	8000550 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOC_CLK_ENABLE();
 800072e:	2004      	movs	r0, #4
 8000730:	f7ff ff27 	bl	8000582 <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOC, &gpio_config);
 8000734:	1d3b      	adds	r3, r7, #4
 8000736:	4619      	mov	r1, r3
 8000738:	4807      	ldr	r0, [pc, #28]	; (8000758 <APPD_SetCPU2GpioConfig+0x140>)
 800073a:	f001 fe53 	bl	80023e4 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOC, gpioc_pin_list, GPIO_PIN_RESET);
 800073e:	8b3b      	ldrh	r3, [r7, #24]
 8000740:	2200      	movs	r2, #0
 8000742:	4619      	mov	r1, r3
 8000744:	4804      	ldr	r0, [pc, #16]	; (8000758 <APPD_SetCPU2GpioConfig+0x140>)
 8000746:	f001 ffbd 	bl	80026c4 <HAL_GPIO_WritePin>
  }

/* USER CODE END APPD_SetCPU2GpioConfig */
  return;
 800074a:	bf00      	nop
 800074c:	bf00      	nop
}
 800074e:	3720      	adds	r7, #32
 8000750:	46bd      	mov	sp, r7
 8000752:	bd80      	pop	{r7, pc}
 8000754:	0800b3c8 	.word	0x0800b3c8
 8000758:	48000800 	.word	0x48000800
 800075c:	48000400 	.word	0x48000400

08000760 <APPD_BleDtbCfg>:

static void APPD_BleDtbCfg( void )
{
 8000760:	b480      	push	{r7}
 8000762:	af00      	add	r7, sp, #0
    HAL_GPIO_Init(GPIOB, &gpio_config);
  }
#endif

/* USER CODE END APPD_BleDtbCfg */
  return;
 8000764:	bf00      	nop
}
 8000766:	46bd      	mov	sp, r7
 8000768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800076c:	4770      	bx	lr

0800076e <DbgOutputInit>:
 * WRAP FUNCTIONS
 *
*************************************************************/
#if(CFG_DEBUG_TRACE != 0)
void DbgOutputInit( void )
{
 800076e:	b580      	push	{r7, lr}
 8000770:	af00      	add	r7, sp, #0
#endif
}
else if (CFG_DEBUG_TRACE_UART == hw_uart1)
{
#if(CFG_HW_USART1_ENABLED == 1)
    MX_USART1_UART_Init();
 8000772:	f001 f801 	bl	8001778 <MX_USART1_UART_Init>
#endif
}
#endif

/* USER CODE END DbgOutputInit */
  return;
 8000776:	bf00      	nop
}
 8000778:	bd80      	pop	{r7, pc}

0800077a <DbgOutputTraces>:

void DbgOutputTraces(  uint8_t *p_data, uint16_t size, void (*cb)(void) )
{
 800077a:	b580      	push	{r7, lr}
 800077c:	b084      	sub	sp, #16
 800077e:	af00      	add	r7, sp, #0
 8000780:	60f8      	str	r0, [r7, #12]
 8000782:	460b      	mov	r3, r1
 8000784:	607a      	str	r2, [r7, #4]
 8000786:	817b      	strh	r3, [r7, #10]
/* USER CODE END DbgOutputTraces */
  HW_UART_Transmit_DMA(CFG_DEBUG_TRACE_UART, p_data, size, cb);
 8000788:	897a      	ldrh	r2, [r7, #10]
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	68f9      	ldr	r1, [r7, #12]
 800078e:	2000      	movs	r0, #0
 8000790:	f000 fc82 	bl	8001098 <HW_UART_Transmit_DMA>

/* USER CODE END DbgOutputTraces */
  return;
 8000794:	bf00      	nop
}
 8000796:	3710      	adds	r7, #16
 8000798:	46bd      	mov	sp, r7
 800079a:	bd80      	pop	{r7, pc}

0800079c <LL_PWR_SMPS_Enable>:
  *         @ref LL_PWR_SMPS_SetMode() should be used instead.
  * @rmtoll CR5          SMPSEN        LL_PWR_SMPS_Enable
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SMPS_Enable(void)
{
 800079c:	b480      	push	{r7}
 800079e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR5, PWR_CR5_SMPSEN);
 80007a0:	4b05      	ldr	r3, [pc, #20]	; (80007b8 <LL_PWR_SMPS_Enable+0x1c>)
 80007a2:	69db      	ldr	r3, [r3, #28]
 80007a4:	4a04      	ldr	r2, [pc, #16]	; (80007b8 <LL_PWR_SMPS_Enable+0x1c>)
 80007a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80007aa:	61d3      	str	r3, [r2, #28]
}
 80007ac:	bf00      	nop
 80007ae:	46bd      	mov	sp, r7
 80007b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b4:	4770      	bx	lr
 80007b6:	bf00      	nop
 80007b8:	58000400 	.word	0x58000400

080007bc <LL_PWR_SMPS_SetStartupCurrent>:
  *         @arg @ref LL_PWR_SMPS_STARTUP_CURRENT_200MA
  *         @arg @ref LL_PWR_SMPS_STARTUP_CURRENT_220MA
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SMPS_SetStartupCurrent(uint32_t StartupCurrent)
{
 80007bc:	b480      	push	{r7}
 80007be:	b083      	sub	sp, #12
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR5, PWR_CR5_SMPSSC, StartupCurrent);
 80007c4:	4b06      	ldr	r3, [pc, #24]	; (80007e0 <LL_PWR_SMPS_SetStartupCurrent+0x24>)
 80007c6:	69db      	ldr	r3, [r3, #28]
 80007c8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80007cc:	4904      	ldr	r1, [pc, #16]	; (80007e0 <LL_PWR_SMPS_SetStartupCurrent+0x24>)
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	4313      	orrs	r3, r2
 80007d2:	61cb      	str	r3, [r1, #28]
}
 80007d4:	bf00      	nop
 80007d6:	370c      	adds	r7, #12
 80007d8:	46bd      	mov	sp, r7
 80007da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007de:	4770      	bx	lr
 80007e0:	58000400 	.word	0x58000400

080007e4 <LL_PWR_SMPS_SetOutputVoltageLevel>:
  *         @arg @ref LL_PWR_SMPS_OUTPUT_VOLTAGE_1V85
  *         @arg @ref LL_PWR_SMPS_OUTPUT_VOLTAGE_1V90
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SMPS_SetOutputVoltageLevel(uint32_t OutputVoltageLevel)
{
 80007e4:	b480      	push	{r7}
 80007e6:	b087      	sub	sp, #28
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	6078      	str	r0, [r7, #4]
  __IO const uint32_t OutputVoltageLevel_calibration = (((*SMPS_VOLTAGE_CAL_ADDR) & SMPS_VOLTAGE_CAL) >> SMPS_VOLTAGE_CAL_POS);  /* SMPS output voltage level calibrated in production */
 80007ec:	4b18      	ldr	r3, [pc, #96]	; (8000850 <LL_PWR_SMPS_SetOutputVoltageLevel+0x6c>)
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	0a1b      	lsrs	r3, r3, #8
 80007f2:	f003 030f 	and.w	r3, r3, #15
 80007f6:	60fb      	str	r3, [r7, #12]
  int32_t TrimmingSteps;                               /* Trimming steps between theorical output voltage and calibrated output voltage */
  int32_t OutputVoltageLevelTrimmed;                   /* SMPS output voltage level after calibration: trimming value added to required level */

  if(OutputVoltageLevel_calibration == 0UL)
 80007f8:	68fb      	ldr	r3, [r7, #12]
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d108      	bne.n	8000810 <LL_PWR_SMPS_SetOutputVoltageLevel+0x2c>
  {
    /* Device with SMPS output voltage not calibrated in production: Apply output voltage value directly */
    
    /* Update register */
    MODIFY_REG(PWR->CR5, PWR_CR5_SMPSVOS, OutputVoltageLevel);
 80007fe:	4b15      	ldr	r3, [pc, #84]	; (8000854 <LL_PWR_SMPS_SetOutputVoltageLevel+0x70>)
 8000800:	69db      	ldr	r3, [r3, #28]
 8000802:	f023 020f 	bic.w	r2, r3, #15
 8000806:	4913      	ldr	r1, [pc, #76]	; (8000854 <LL_PWR_SMPS_SetOutputVoltageLevel+0x70>)
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	4313      	orrs	r3, r2
 800080c:	61cb      	str	r3, [r1, #28]
    }

    /* Update register */
    MODIFY_REG(PWR->CR5, PWR_CR5_SMPSVOS, (uint32_t)OutputVoltageLevelTrimmed);
  }
}
 800080e:	e019      	b.n	8000844 <LL_PWR_SMPS_SetOutputVoltageLevel+0x60>
    TrimmingSteps = ((int32_t)OutputVoltageLevel_calibration - (int32_t)(LL_PWR_SMPS_OUTPUT_VOLTAGE_1V50 >> PWR_CR5_SMPSVOS_Pos));
 8000810:	68fb      	ldr	r3, [r7, #12]
 8000812:	3b06      	subs	r3, #6
 8000814:	613b      	str	r3, [r7, #16]
    OutputVoltageLevelTrimmed = ((int32_t)((uint32_t)(OutputVoltageLevel >> PWR_CR5_SMPSVOS_Pos)) + (int32_t)TrimmingSteps);
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	693a      	ldr	r2, [r7, #16]
 800081a:	4413      	add	r3, r2
 800081c:	617b      	str	r3, [r7, #20]
    if(OutputVoltageLevelTrimmed < 0)
 800081e:	697b      	ldr	r3, [r7, #20]
 8000820:	2b00      	cmp	r3, #0
 8000822:	da02      	bge.n	800082a <LL_PWR_SMPS_SetOutputVoltageLevel+0x46>
      OutputVoltageLevelTrimmed = 0;
 8000824:	2300      	movs	r3, #0
 8000826:	617b      	str	r3, [r7, #20]
 8000828:	e004      	b.n	8000834 <LL_PWR_SMPS_SetOutputVoltageLevel+0x50>
      if(OutputVoltageLevelTrimmed > (int32_t)PWR_CR5_SMPSVOS)
 800082a:	697b      	ldr	r3, [r7, #20]
 800082c:	2b0f      	cmp	r3, #15
 800082e:	dd01      	ble.n	8000834 <LL_PWR_SMPS_SetOutputVoltageLevel+0x50>
        OutputVoltageLevelTrimmed = (int32_t)PWR_CR5_SMPSVOS;
 8000830:	230f      	movs	r3, #15
 8000832:	617b      	str	r3, [r7, #20]
    MODIFY_REG(PWR->CR5, PWR_CR5_SMPSVOS, (uint32_t)OutputVoltageLevelTrimmed);
 8000834:	4b07      	ldr	r3, [pc, #28]	; (8000854 <LL_PWR_SMPS_SetOutputVoltageLevel+0x70>)
 8000836:	69db      	ldr	r3, [r3, #28]
 8000838:	f023 020f 	bic.w	r2, r3, #15
 800083c:	697b      	ldr	r3, [r7, #20]
 800083e:	4905      	ldr	r1, [pc, #20]	; (8000854 <LL_PWR_SMPS_SetOutputVoltageLevel+0x70>)
 8000840:	4313      	orrs	r3, r2
 8000842:	61cb      	str	r3, [r1, #28]
}
 8000844:	bf00      	nop
 8000846:	371c      	adds	r7, #28
 8000848:	46bd      	mov	sp, r7
 800084a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084e:	4770      	bx	lr
 8000850:	1fff7558 	.word	0x1fff7558
 8000854:	58000400 	.word	0x58000400

08000858 <LL_C2_PWR_SetPowerMode>:
  *
  *         (*) Not available on devices STM32WB15xx, STM32WB10xx
  * @retval None
  */
__STATIC_INLINE void LL_C2_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 8000858:	b480      	push	{r7}
 800085a:	b083      	sub	sp, #12
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 8000860:	4b07      	ldr	r3, [pc, #28]	; (8000880 <LL_C2_PWR_SetPowerMode+0x28>)
 8000862:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000866:	f023 0207 	bic.w	r2, r3, #7
 800086a:	4905      	ldr	r1, [pc, #20]	; (8000880 <LL_C2_PWR_SetPowerMode+0x28>)
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	4313      	orrs	r3, r2
 8000870:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8000874:	bf00      	nop
 8000876:	370c      	adds	r7, #12
 8000878:	46bd      	mov	sp, r7
 800087a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087e:	4770      	bx	lr
 8000880:	58000400 	.word	0x58000400

08000884 <LL_EXTI_DisableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_32_63(uint32_t ExtiLine)
{
 8000884:	b480      	push	{r7}
 8000886:	b083      	sub	sp, #12
 8000888:	af00      	add	r7, sp, #0
 800088a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 800088c:	4b07      	ldr	r3, [pc, #28]	; (80008ac <LL_EXTI_DisableIT_32_63+0x28>)
 800088e:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	43db      	mvns	r3, r3
 8000896:	4905      	ldr	r1, [pc, #20]	; (80008ac <LL_EXTI_DisableIT_32_63+0x28>)
 8000898:	4013      	ands	r3, r2
 800089a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 800089e:	bf00      	nop
 80008a0:	370c      	adds	r7, #12
 80008a2:	46bd      	mov	sp, r7
 80008a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a8:	4770      	bx	lr
 80008aa:	bf00      	nop
 80008ac:	58000800 	.word	0x58000800

080008b0 <LL_RCC_HSE_SetCapacitorTuning>:
  * @rmtoll HSECR        HSETUNE       LL_RCC_HSE_SetCapacitorTuning
  * @param  Value Between Min_Data = 0 and Max_Data = 63
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_SetCapacitorTuning(uint32_t Value)
{
 80008b0:	b480      	push	{r7}
 80008b2:	b083      	sub	sp, #12
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 80008b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80008bc:	4a0a      	ldr	r2, [pc, #40]	; (80008e8 <LL_RCC_HSE_SetCapacitorTuning+0x38>)
 80008be:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 80008c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80008c6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80008ca:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	021b      	lsls	r3, r3, #8
 80008d2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80008d6:	4313      	orrs	r3, r2
 80008d8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
}
 80008dc:	bf00      	nop
 80008de:	370c      	adds	r7, #12
 80008e0:	46bd      	mov	sp, r7
 80008e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e6:	4770      	bx	lr
 80008e8:	cafecafe 	.word	0xcafecafe

080008ec <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 80008ec:	b480      	push	{r7}
 80008ee:	b083      	sub	sp, #12
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 80008f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80008f8:	689b      	ldr	r3, [r3, #8]
 80008fa:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80008fe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	4313      	orrs	r3, r2
 8000906:	608b      	str	r3, [r1, #8]
}
 8000908:	bf00      	nop
 800090a:	370c      	adds	r7, #12
 800090c:	46bd      	mov	sp, r7
 800090e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000912:	4770      	bx	lr

08000914 <LL_RCC_ForceBackupDomainReset>:
  * @brief  Force the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ForceBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ForceBackupDomainReset(void)
{
 8000914:	b480      	push	{r7}
 8000916:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8000918:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800091c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000920:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000924:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000928:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800092c:	bf00      	nop
 800092e:	46bd      	mov	sp, r7
 8000930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000934:	4770      	bx	lr

08000936 <LL_RCC_ReleaseBackupDomainReset>:
  * @brief  Release the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ReleaseBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ReleaseBackupDomainReset(void)
{
 8000936:	b480      	push	{r7}
 8000938:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800093a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800093e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000942:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000946:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800094a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800094e:	bf00      	nop
 8000950:	46bd      	mov	sp, r7
 8000952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000956:	4770      	bx	lr

08000958 <LL_RCC_IsActiveFlag_PINRST>:
  * @brief  Check if RCC flag Pin reset is set or not.
  * @rmtoll CSR          PINRSTF       LL_RCC_IsActiveFlag_PINRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PINRST(void)
{
 8000958:	b480      	push	{r7}
 800095a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_PINRSTF) == (RCC_CSR_PINRSTF)) ? 1UL : 0UL);
 800095c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000960:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000964:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000968:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800096c:	d101      	bne.n	8000972 <LL_RCC_IsActiveFlag_PINRST+0x1a>
 800096e:	2301      	movs	r3, #1
 8000970:	e000      	b.n	8000974 <LL_RCC_IsActiveFlag_PINRST+0x1c>
 8000972:	2300      	movs	r3, #0
}
 8000974:	4618      	mov	r0, r3
 8000976:	46bd      	mov	sp, r7
 8000978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097c:	4770      	bx	lr

0800097e <LL_RCC_IsActiveFlag_SFTRST>:
  * @brief  Check if RCC flag Software reset is set or not.
  * @rmtoll CSR          SFTRSTF       LL_RCC_IsActiveFlag_SFTRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SFTRST(void)
{
 800097e:	b480      	push	{r7}
 8000980:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_SFTRSTF) == (RCC_CSR_SFTRSTF)) ? 1UL : 0UL);
 8000982:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000986:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800098a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800098e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8000992:	d101      	bne.n	8000998 <LL_RCC_IsActiveFlag_SFTRST+0x1a>
 8000994:	2301      	movs	r3, #1
 8000996:	e000      	b.n	800099a <LL_RCC_IsActiveFlag_SFTRST+0x1c>
 8000998:	2300      	movs	r3, #0
}
 800099a:	4618      	mov	r0, r3
 800099c:	46bd      	mov	sp, r7
 800099e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a2:	4770      	bx	lr

080009a4 <LL_AHB3_GRP1_EnableClock>:
{
 80009a4:	b480      	push	{r7}
 80009a6:	b085      	sub	sp, #20
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 80009ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80009b0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80009b2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	4313      	orrs	r3, r2
 80009ba:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 80009bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80009c0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	4013      	ands	r3, r2
 80009c6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80009c8:	68fb      	ldr	r3, [r7, #12]
}
 80009ca:	bf00      	nop
 80009cc:	3714      	adds	r7, #20
 80009ce:	46bd      	mov	sp, r7
 80009d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d4:	4770      	bx	lr

080009d6 <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80009d6:	b480      	push	{r7}
 80009d8:	b083      	sub	sp, #12
 80009da:	af00      	add	r7, sp, #0
 80009dc:	6078      	str	r0, [r7, #4]
 80009de:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	685a      	ldr	r2, [r3, #4]
 80009e4:	683b      	ldr	r3, [r7, #0]
 80009e6:	041b      	lsls	r3, r3, #16
 80009e8:	431a      	orrs	r2, r3
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	605a      	str	r2, [r3, #4]
}
 80009ee:	bf00      	nop
 80009f0:	370c      	adds	r7, #12
 80009f2:	46bd      	mov	sp, r7
 80009f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f8:	4770      	bx	lr

080009fa <LL_C1_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80009fa:	b480      	push	{r7}
 80009fc:	b083      	sub	sp, #12
 80009fe:	af00      	add	r7, sp, #0
 8000a00:	6078      	str	r0, [r7, #4]
 8000a02:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel);
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	685a      	ldr	r2, [r3, #4]
 8000a08:	683b      	ldr	r3, [r7, #0]
 8000a0a:	431a      	orrs	r2, r3
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	605a      	str	r2, [r3, #4]
}
 8000a10:	bf00      	nop
 8000a12:	370c      	adds	r7, #12
 8000a14:	46bd      	mov	sp, r7
 8000a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1a:	4770      	bx	lr

08000a1c <LL_C2_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	b083      	sub	sp, #12
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
 8000a24:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel << (IPCC_C2MR_CH1FM_Pos));
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	695a      	ldr	r2, [r3, #20]
 8000a2a:	683b      	ldr	r3, [r7, #0]
 8000a2c:	041b      	lsls	r3, r3, #16
 8000a2e:	431a      	orrs	r2, r3
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	615a      	str	r2, [r3, #20]
}
 8000a34:	bf00      	nop
 8000a36:	370c      	adds	r7, #12
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3e:	4770      	bx	lr

08000a40 <LL_C2_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8000a40:	b480      	push	{r7}
 8000a42:	b083      	sub	sp, #12
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
 8000a48:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel);
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	695a      	ldr	r2, [r3, #20]
 8000a4e:	683b      	ldr	r3, [r7, #0]
 8000a50:	431a      	orrs	r2, r3
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	615a      	str	r2, [r3, #20]
}
 8000a56:	bf00      	nop
 8000a58:	370c      	adds	r7, #12
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a60:	4770      	bx	lr

08000a62 <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8000a62:	b480      	push	{r7}
 8000a64:	b083      	sub	sp, #12
 8000a66:	af00      	add	r7, sp, #0
 8000a68:	6078      	str	r0, [r7, #4]
 8000a6a:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	683a      	ldr	r2, [r7, #0]
 8000a70:	609a      	str	r2, [r3, #8]
}
 8000a72:	bf00      	nop
 8000a74:	370c      	adds	r7, #12
 8000a76:	46bd      	mov	sp, r7
 8000a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7c:	4770      	bx	lr

08000a7e <LL_C2_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8000a7e:	b480      	push	{r7}
 8000a80:	b083      	sub	sp, #12
 8000a82:	af00      	add	r7, sp, #0
 8000a84:	6078      	str	r0, [r7, #4]
 8000a86:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C2SCR, Channel);
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	683a      	ldr	r2, [r7, #0]
 8000a8c:	619a      	str	r2, [r3, #24]
}
 8000a8e:	bf00      	nop
 8000a90:	370c      	adds	r7, #12
 8000a92:	46bd      	mov	sp, r7
 8000a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a98:	4770      	bx	lr

08000a9a <LL_RTC_EnableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_EnableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableWriteProtection(RTC_TypeDef *RTCx)
{
 8000a9a:	b480      	push	{r7}
 8000a9c:	b083      	sub	sp, #12
 8000a9e:	af00      	add	r7, sp, #0
 8000aa0:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	22ff      	movs	r2, #255	; 0xff
 8000aa6:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000aa8:	bf00      	nop
 8000aaa:	370c      	adds	r7, #12
 8000aac:	46bd      	mov	sp, r7
 8000aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab2:	4770      	bx	lr

08000ab4 <LL_RTC_DisableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_DisableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableWriteProtection(RTC_TypeDef *RTCx)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	b083      	sub	sp, #12
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	22ca      	movs	r2, #202	; 0xca
 8000ac0:	625a      	str	r2, [r3, #36]	; 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	2253      	movs	r2, #83	; 0x53
 8000ac6:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000ac8:	bf00      	nop
 8000aca:	370c      	adds	r7, #12
 8000acc:	46bd      	mov	sp, r7
 8000ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad2:	4770      	bx	lr

08000ad4 <LL_RTC_WAKEUP_SetClock>:
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE_WUT
  * @retval None
  */
__STATIC_INLINE void LL_RTC_WAKEUP_SetClock(RTC_TypeDef *RTCx, uint32_t WakeupClock)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	b083      	sub	sp, #12
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
 8000adc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->CR, RTC_CR_WUCKSEL, WakeupClock);
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	689b      	ldr	r3, [r3, #8]
 8000ae2:	f023 0207 	bic.w	r2, r3, #7
 8000ae6:	683b      	ldr	r3, [r7, #0]
 8000ae8:	431a      	orrs	r2, r3
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	609a      	str	r2, [r3, #8]
}
 8000aee:	bf00      	nop
 8000af0:	370c      	adds	r7, #12
 8000af2:	46bd      	mov	sp, r7
 8000af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af8:	4770      	bx	lr
	...

08000afc <MX_APPE_Config>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void MX_APPE_Config( void )
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	af00      	add	r7, sp, #0
  /**
   * The OPTVERR flag is wrongly set at power on
   * It shall be cleared before using any HAL_FLASH_xxx() api
   */
  __HAL_FLASH_CLEAR_FLAG( FLASH_FLAG_OPTVERR );
 8000b00:	4b04      	ldr	r3, [pc, #16]	; (8000b14 <MX_APPE_Config+0x18>)
 8000b02:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000b06:	611a      	str	r2, [r3, #16]

  /**
   * Reset some configurations so that the system behave in the same way
   * when either out of nReset or Power On
   */
  Reset_Device( );
 8000b08:	f000 f82c 	bl	8000b64 <Reset_Device>

  /* Configure HSE Tuning */
  Config_HSE();
 8000b0c:	f000 f86c 	bl	8000be8 <Config_HSE>

  return;
 8000b10:	bf00      	nop
}
 8000b12:	bd80      	pop	{r7, pc}
 8000b14:	58004000 	.word	0x58004000

08000b18 <MX_APPE_Init>:

void MX_APPE_Init( void )
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	af00      	add	r7, sp, #0
  System_Init( );       /**< System initialization */
 8000b1c:	f000 f878 	bl	8000c10 <System_Init>

  SystemPower_Config(); /**< Configure the system Power Mode */
 8000b20:	f000 f890 	bl	8000c44 <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 8000b24:	4904      	ldr	r1, [pc, #16]	; (8000b38 <MX_APPE_Init+0x20>)
 8000b26:	2000      	movs	r0, #0
 8000b28:	f000 f9d0 	bl	8000ecc <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */
  APPD_Init();//added by javi
 8000b2c:	f7ff fd45 	bl	80005ba <APPD_Init>
/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 8000b30:	f000 f896 	bl	8000c60 <appe_Tl_Init>
   * This system event is received with APPE_SysUserEvtRx()
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */
   return;
 8000b34:	bf00      	nop
}
 8000b36:	bd80      	pop	{r7, pc}
 8000b38:	200013bc 	.word	0x200013bc

08000b3c <Init_Smps>:

void Init_Smps( void )
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	af00      	add	r7, sp, #0
   *
   *  The SMPS configuration is not yet supported by CubeMx
   *  when SMPS output voltage is set to 1.4V, the RF output power is limited to 3.7dBm
   *  the SMPS output voltage shall be increased for higher RF output power
   */
  LL_PWR_SMPS_SetStartupCurrent(LL_PWR_SMPS_STARTUP_CURRENT_80MA);
 8000b40:	2000      	movs	r0, #0
 8000b42:	f7ff fe3b 	bl	80007bc <LL_PWR_SMPS_SetStartupCurrent>
  LL_PWR_SMPS_SetOutputVoltageLevel(LL_PWR_SMPS_OUTPUT_VOLTAGE_1V40);
 8000b46:	2004      	movs	r0, #4
 8000b48:	f7ff fe4c 	bl	80007e4 <LL_PWR_SMPS_SetOutputVoltageLevel>
  LL_PWR_SMPS_Enable();
 8000b4c:	f7ff fe26 	bl	800079c <LL_PWR_SMPS_Enable>
#endif

  return;
 8000b50:	bf00      	nop
}
 8000b52:	bd80      	pop	{r7, pc}

08000b54 <Init_Exti>:

void Init_Exti( void )
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	af00      	add	r7, sp, #0
  /**< Disable all wakeup interrupt on CPU1  except IPCC(36), HSEM(38) */
//  LL_EXTI_DisableIT_0_31(~0);
  LL_EXTI_DisableIT_32_63( (~0) & (~(LL_EXTI_LINE_36 | LL_EXTI_LINE_38)) );
 8000b58:	f06f 0050 	mvn.w	r0, #80	; 0x50
 8000b5c:	f7ff fe92 	bl	8000884 <LL_EXTI_DisableIT_32_63>

  return;
 8000b60:	bf00      	nop
}
 8000b62:	bd80      	pop	{r7, pc}

08000b64 <Reset_Device>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Reset_Device( void )
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	af00      	add	r7, sp, #0
#if ( CFG_HW_RESET_BY_FW == 1 )
  Reset_BackupDomain();
 8000b68:	f000 f804 	bl	8000b74 <Reset_BackupDomain>

  Reset_IPCC();
 8000b6c:	f000 f81a 	bl	8000ba4 <Reset_IPCC>
#endif /* CFG_HW_RESET_BY_FW */

  return;
 8000b70:	bf00      	nop
}
 8000b72:	bd80      	pop	{r7, pc}

08000b74 <Reset_BackupDomain>:

#if ( CFG_HW_RESET_BY_FW == 1 )
static void Reset_BackupDomain( void )
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	af00      	add	r7, sp, #0
  if ((LL_RCC_IsActiveFlag_PINRST() != FALSE) && (LL_RCC_IsActiveFlag_SFTRST() == FALSE))
 8000b78:	f7ff feee 	bl	8000958 <LL_RCC_IsActiveFlag_PINRST>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d00d      	beq.n	8000b9e <Reset_BackupDomain+0x2a>
 8000b82:	f7ff fefc 	bl	800097e <LL_RCC_IsActiveFlag_SFTRST>
 8000b86:	4603      	mov	r3, r0
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d108      	bne.n	8000b9e <Reset_BackupDomain+0x2a>
  {
    HAL_PWR_EnableBkUpAccess(); /**< Enable access to the RTC registers */
 8000b8c:	f001 fe74 	bl	8002878 <HAL_PWR_EnableBkUpAccess>

    /**
     *  Write twice the value to flush the APB-AHB bridge
     *  This bit shall be written in the register before writing the next one
     */
    HAL_PWR_EnableBkUpAccess();
 8000b90:	f001 fe72 	bl	8002878 <HAL_PWR_EnableBkUpAccess>

    __HAL_RCC_BACKUPRESET_FORCE();
 8000b94:	f7ff febe 	bl	8000914 <LL_RCC_ForceBackupDomainReset>
    __HAL_RCC_BACKUPRESET_RELEASE();
 8000b98:	f7ff fecd 	bl	8000936 <LL_RCC_ReleaseBackupDomainReset>
  }

  return;
 8000b9c:	bf00      	nop
 8000b9e:	bf00      	nop
}
 8000ba0:	bd80      	pop	{r7, pc}
	...

08000ba4 <Reset_IPCC>:

static void Reset_IPCC( void )
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock(LL_AHB3_GRP1_PERIPH_IPCC);
 8000ba8:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000bac:	f7ff fefa 	bl	80009a4 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_ClearFlag_CHx(
 8000bb0:	213f      	movs	r1, #63	; 0x3f
 8000bb2:	480c      	ldr	r0, [pc, #48]	; (8000be4 <Reset_IPCC+0x40>)
 8000bb4:	f7ff ff55 	bl	8000a62 <LL_C1_IPCC_ClearFlag_CHx>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_ClearFlag_CHx(
 8000bb8:	213f      	movs	r1, #63	; 0x3f
 8000bba:	480a      	ldr	r0, [pc, #40]	; (8000be4 <Reset_IPCC+0x40>)
 8000bbc:	f7ff ff5f 	bl	8000a7e <LL_C2_IPCC_ClearFlag_CHx>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C1_IPCC_DisableTransmitChannel(
 8000bc0:	213f      	movs	r1, #63	; 0x3f
 8000bc2:	4808      	ldr	r0, [pc, #32]	; (8000be4 <Reset_IPCC+0x40>)
 8000bc4:	f7ff ff07 	bl	80009d6 <LL_C1_IPCC_DisableTransmitChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_DisableTransmitChannel(
 8000bc8:	213f      	movs	r1, #63	; 0x3f
 8000bca:	4806      	ldr	r0, [pc, #24]	; (8000be4 <Reset_IPCC+0x40>)
 8000bcc:	f7ff ff26 	bl	8000a1c <LL_C2_IPCC_DisableTransmitChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C1_IPCC_DisableReceiveChannel(
 8000bd0:	213f      	movs	r1, #63	; 0x3f
 8000bd2:	4804      	ldr	r0, [pc, #16]	; (8000be4 <Reset_IPCC+0x40>)
 8000bd4:	f7ff ff11 	bl	80009fa <LL_C1_IPCC_DisableReceiveChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_DisableReceiveChannel(
 8000bd8:	213f      	movs	r1, #63	; 0x3f
 8000bda:	4802      	ldr	r0, [pc, #8]	; (8000be4 <Reset_IPCC+0x40>)
 8000bdc:	f7ff ff30 	bl	8000a40 <LL_C2_IPCC_DisableReceiveChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  return;
 8000be0:	bf00      	nop
}
 8000be2:	bd80      	pop	{r7, pc}
 8000be4:	58000c00 	.word	0x58000c00

08000be8 <Config_HSE>:
#endif /* CFG_HW_RESET_BY_FW */

static void Config_HSE(void)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b082      	sub	sp, #8
 8000bec:	af00      	add	r7, sp, #0
    OTP_ID0_t * p_otp;

  /**
   * Read HSE_Tuning from OTP
   */
  p_otp = (OTP_ID0_t *) OTP_Read(0);
 8000bee:	2000      	movs	r0, #0
 8000bf0:	f006 ff30 	bl	8007a54 <OTP_Read>
 8000bf4:	6078      	str	r0, [r7, #4]
  if (p_otp)
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d005      	beq.n	8000c08 <Config_HSE+0x20>
  {
    LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	799b      	ldrb	r3, [r3, #6]
 8000c00:	4618      	mov	r0, r3
 8000c02:	f7ff fe55 	bl	80008b0 <LL_RCC_HSE_SetCapacitorTuning>
  }

  return;
 8000c06:	bf00      	nop
 8000c08:	bf00      	nop
}
 8000c0a:	3708      	adds	r7, #8
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	bd80      	pop	{r7, pc}

08000c10 <System_Init>:

static void System_Init( void )
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	af00      	add	r7, sp, #0
  Init_Smps( );
 8000c14:	f7ff ff92 	bl	8000b3c <Init_Smps>

  Init_Exti( );
 8000c18:	f7ff ff9c 	bl	8000b54 <Init_Exti>

  Init_Rtc( );
 8000c1c:	f000 f802 	bl	8000c24 <Init_Rtc>

  return;
 8000c20:	bf00      	nop
}
 8000c22:	bd80      	pop	{r7, pc}

08000c24 <Init_Rtc>:

static void Init_Rtc( void )
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	af00      	add	r7, sp, #0
  /* Disable RTC registers write protection */
  LL_RTC_DisableWriteProtection(RTC);
 8000c28:	4805      	ldr	r0, [pc, #20]	; (8000c40 <Init_Rtc+0x1c>)
 8000c2a:	f7ff ff43 	bl	8000ab4 <LL_RTC_DisableWriteProtection>

  LL_RTC_WAKEUP_SetClock(RTC, CFG_RTC_WUCKSEL_DIVIDER);
 8000c2e:	2100      	movs	r1, #0
 8000c30:	4803      	ldr	r0, [pc, #12]	; (8000c40 <Init_Rtc+0x1c>)
 8000c32:	f7ff ff4f 	bl	8000ad4 <LL_RTC_WAKEUP_SetClock>

  /* Enable RTC registers write protection */
  LL_RTC_EnableWriteProtection(RTC);
 8000c36:	4802      	ldr	r0, [pc, #8]	; (8000c40 <Init_Rtc+0x1c>)
 8000c38:	f7ff ff2f 	bl	8000a9a <LL_RTC_EnableWriteProtection>

  return;
 8000c3c:	bf00      	nop
}
 8000c3e:	bd80      	pop	{r7, pc}
 8000c40:	40002800 	.word	0x40002800

08000c44 <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config(void)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	af00      	add	r7, sp, #0
  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 8000c48:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8000c4c:	f7ff fe4e 	bl	80008ec <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init();
 8000c50:	f008 fce0 	bl	8009614 <UTIL_LPM_Init>
  /* Initialize the CPU2 reset value before starting CPU2 with C2BOOT */
  LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);
 8000c54:	2004      	movs	r0, #4
 8000c56:	f7ff fdff 	bl	8000858 <LL_C2_PWR_SetPowerMode>
   *  Enable USB power
   */
  HAL_PWREx_EnableVddUSB();
#endif

  return;
 8000c5a:	bf00      	nop
}
 8000c5c:	bd80      	pop	{r7, pc}
	...

08000c60 <appe_Tl_Init>:

static void appe_Tl_Init( void )
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b088      	sub	sp, #32
 8000c64:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;
  /**< Reference table initialization */
  TL_Init();
 8000c66:	f006 fbd5 	bl	8007414 <TL_Init>

  /**< System channel initialization */
  UTIL_SEQ_RegTask( 1<< CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, shci_user_evt_proc );
 8000c6a:	4a11      	ldr	r2, [pc, #68]	; (8000cb0 <appe_Tl_Init+0x50>)
 8000c6c:	2100      	movs	r1, #0
 8000c6e:	2008      	movs	r0, #8
 8000c70:	f008 fdfc 	bl	800986c <UTIL_SEQ_RegTask>
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 8000c74:	4b0f      	ldr	r3, [pc, #60]	; (8000cb4 <appe_Tl_Init+0x54>)
 8000c76:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 8000c78:	4b0f      	ldr	r3, [pc, #60]	; (8000cb8 <appe_Tl_Init+0x58>)
 8000c7a:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 8000c7c:	463b      	mov	r3, r7
 8000c7e:	4619      	mov	r1, r3
 8000c80:	480e      	ldr	r0, [pc, #56]	; (8000cbc <appe_Tl_Init+0x5c>)
 8000c82:	f006 fa8d 	bl	80071a0 <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = BleSpareEvtBuffer;
 8000c86:	4b0e      	ldr	r3, [pc, #56]	; (8000cc0 <appe_Tl_Init+0x60>)
 8000c88:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 8000c8a:	4b0e      	ldr	r3, [pc, #56]	; (8000cc4 <appe_Tl_Init+0x64>)
 8000c8c:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 8000c8e:	4b0e      	ldr	r3, [pc, #56]	; (8000cc8 <appe_Tl_Init+0x68>)
 8000c90:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 8000c92:	f240 533c 	movw	r3, #1340	; 0x53c
 8000c96:	617b      	str	r3, [r7, #20]
  TL_MM_Init( &tl_mm_config );
 8000c98:	f107 0308 	add.w	r3, r7, #8
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	f006 fcfb 	bl	8007698 <TL_MM_Init>

  TL_Enable();
 8000ca2:	f006 fbb1 	bl	8007408 <TL_Enable>

  return;
 8000ca6:	bf00      	nop
}
 8000ca8:	3720      	adds	r7, #32
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bd80      	pop	{r7, pc}
 8000cae:	bf00      	nop
 8000cb0:	080071d9 	.word	0x080071d9
 8000cb4:	20030724 	.word	0x20030724
 8000cb8:	08000ccd 	.word	0x08000ccd
 8000cbc:	08000ce3 	.word	0x08000ce3
 8000cc0:	2003093c 	.word	0x2003093c
 8000cc4:	20030830 	.word	0x20030830
 8000cc8:	200301e8 	.word	0x200301e8

08000ccc <APPE_SysStatusNot>:

static void APPE_SysStatusNot( SHCI_TL_CmdStatus_t status )
{
 8000ccc:	b480      	push	{r7}
 8000cce:	b083      	sub	sp, #12
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);
  return;
 8000cd6:	bf00      	nop
}
 8000cd8:	370c      	adds	r7, #12
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce0:	4770      	bx	lr

08000ce2 <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * ( eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable )
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx( void * pPayload )
{
 8000ce2:	b580      	push	{r7, lr}
 8000ce4:	b082      	sub	sp, #8
 8000ce6:	af00      	add	r7, sp, #0
 8000ce8:	6078      	str	r0, [r7, #4]
  UNUSED(pPayload);
  /* Traces channel initialization */
  APPD_EnableCPU2( );
 8000cea:	f7ff fc79 	bl	80005e0 <APPD_EnableCPU2>

  APP_BLE_Init( );
 8000cee:	f007 fbbd 	bl	800846c <APP_BLE_Init>
  UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 8000cf2:	2100      	movs	r1, #0
 8000cf4:	2001      	movs	r0, #1
 8000cf6:	f008 fc9f 	bl	8009638 <UTIL_LPM_SetOffMode>
  return;
 8000cfa:	bf00      	nop
}
 8000cfc:	3708      	adds	r7, #8
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bd80      	pop	{r7, pc}

08000d02 <MX_APPE_Process>:
    __WFI( );
  }
}

void MX_APPE_Process(void)
{
 8000d02:	b580      	push	{r7, lr}
 8000d04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_APPE_Process_1 */

  /* USER CODE END MX_APPE_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8000d06:	f04f 30ff 	mov.w	r0, #4294967295
 8000d0a:	f008 fcc5 	bl	8009698 <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_APPE_Process_2 */

  /* USER CODE END MX_APPE_Process_2 */
}
 8000d0e:	bf00      	nop
 8000d10:	bd80      	pop	{r7, pc}

08000d12 <UTIL_SEQ_Idle>:

void UTIL_SEQ_Idle( void )
{
 8000d12:	b480      	push	{r7}
 8000d14:	af00      	add	r7, sp, #0
#if ( CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower( );
#endif
  return;
 8000d16:	bf00      	nop
}
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1e:	4770      	bx	lr

08000d20 <UTIL_SEQ_EvtIdle>:
  *
  * @param  evt_waited_bm : Event pending.
  * @retval None
  */
void UTIL_SEQ_EvtIdle( UTIL_SEQ_bm_t task_id_bm, UTIL_SEQ_bm_t evt_waited_bm )
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b082      	sub	sp, #8
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
 8000d28:	6039      	str	r1, [r7, #0]
  UTIL_SEQ_Run( UTIL_SEQ_DEFAULT );
 8000d2a:	f04f 30ff 	mov.w	r0, #4294967295
 8000d2e:	f008 fcb3 	bl	8009698 <UTIL_SEQ_Run>
}
 8000d32:	bf00      	nop
 8000d34:	3708      	adds	r7, #8
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd80      	pop	{r7, pc}

08000d3a <shci_notify_asynch_evt>:

void shci_notify_asynch_evt(void* pdata)
{
 8000d3a:	b580      	push	{r7, lr}
 8000d3c:	b082      	sub	sp, #8
 8000d3e:	af00      	add	r7, sp, #0
 8000d40:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask( 1<<CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 8000d42:	2100      	movs	r1, #0
 8000d44:	2008      	movs	r0, #8
 8000d46:	f008 fdb3 	bl	80098b0 <UTIL_SEQ_SetTask>
  return;
 8000d4a:	bf00      	nop
}
 8000d4c:	3708      	adds	r7, #8
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd80      	pop	{r7, pc}

08000d52 <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 8000d52:	b580      	push	{r7, lr}
 8000d54:	b082      	sub	sp, #8
 8000d56:	af00      	add	r7, sp, #0
 8000d58:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt( 1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID );
 8000d5a:	2002      	movs	r0, #2
 8000d5c:	f008 fe14 	bl	8009988 <UTIL_SEQ_SetEvt>
  return;
 8000d60:	bf00      	nop
}
 8000d62:	3708      	adds	r7, #8
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bd80      	pop	{r7, pc}

08000d68 <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b082      	sub	sp, #8
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt( 1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID );
 8000d70:	2002      	movs	r0, #2
 8000d72:	f008 fe29 	bl	80099c8 <UTIL_SEQ_WaitEvt>
  return;
 8000d76:	bf00      	nop
}
 8000d78:	3708      	adds	r7, #8
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd80      	pop	{r7, pc}

08000d7e <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN FD_WRAP_FUNCTIONS */
void HAL_GPIO_EXTI_Callback( uint16_t GPIO_Pin){
 8000d7e:	b580      	push	{r7, lr}
 8000d80:	b082      	sub	sp, #8
 8000d82:	af00      	add	r7, sp, #0
 8000d84:	4603      	mov	r3, r0
 8000d86:	80fb      	strh	r3, [r7, #6]
	switch(GPIO_Pin)
 8000d88:	88fb      	ldrh	r3, [r7, #6]
 8000d8a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000d8e:	d102      	bne.n	8000d96 <HAL_GPIO_EXTI_Callback+0x18>
	{
	case B1_USER_Pin:
		APP_BLE_Key_Button1_Action();
 8000d90:	f007 fe92 	bl	8008ab8 <APP_BLE_Key_Button1_Action>
		break;
 8000d94:	e000      	b.n	8000d98 <HAL_GPIO_EXTI_Callback+0x1a>
	default:
		break;
 8000d96:	bf00      	nop
	}
	return;
 8000d98:	bf00      	nop
}
 8000d9a:	3708      	adds	r7, #8
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bd80      	pop	{r7, pc}

08000da0 <LL_AHB1_GRP1_EnableClock>:
{
 8000da0:	b480      	push	{r7}
 8000da2:	b085      	sub	sp, #20
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000da8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000dac:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8000dae:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	4313      	orrs	r3, r2
 8000db6:	648b      	str	r3, [r1, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000db8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000dbc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	4013      	ands	r3, r2
 8000dc2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000dc4:	68fb      	ldr	r3, [r7, #12]
}
 8000dc6:	bf00      	nop
 8000dc8:	3714      	adds	r7, #20
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd0:	4770      	bx	lr

08000dd2 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000dd2:	b580      	push	{r7, lr}
 8000dd4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000dd6:	2004      	movs	r0, #4
 8000dd8:	f7ff ffe2 	bl	8000da0 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000ddc:	2002      	movs	r0, #2
 8000dde:	f7ff ffdf 	bl	8000da0 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA2_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel4_IRQn, 0, 0);
 8000de2:	2200      	movs	r2, #0
 8000de4:	2100      	movs	r1, #0
 8000de6:	203a      	movs	r0, #58	; 0x3a
 8000de8:	f000 ff79 	bl	8001cde <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel4_IRQn);
 8000dec:	203a      	movs	r0, #58	; 0x3a
 8000dee:	f000 ff90 	bl	8001d12 <HAL_NVIC_EnableIRQ>

}
 8000df2:	bf00      	nop
 8000df4:	bd80      	pop	{r7, pc}

08000df6 <LL_AHB2_GRP1_EnableClock>:
{
 8000df6:	b480      	push	{r7}
 8000df8:	b085      	sub	sp, #20
 8000dfa:	af00      	add	r7, sp, #0
 8000dfc:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000dfe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e02:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000e04:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	4313      	orrs	r3, r2
 8000e0c:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000e0e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e12:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	4013      	ands	r3, r2
 8000e18:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000e1a:	68fb      	ldr	r3, [r7, #12]
}
 8000e1c:	bf00      	nop
 8000e1e:	3714      	adds	r7, #20
 8000e20:	46bd      	mov	sp, r7
 8000e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e26:	4770      	bx	lr

08000e28 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b086      	sub	sp, #24
 8000e2c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e2e:	1d3b      	adds	r3, r7, #4
 8000e30:	2200      	movs	r2, #0
 8000e32:	601a      	str	r2, [r3, #0]
 8000e34:	605a      	str	r2, [r3, #4]
 8000e36:	609a      	str	r2, [r3, #8]
 8000e38:	60da      	str	r2, [r3, #12]
 8000e3a:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e3c:	2002      	movs	r0, #2
 8000e3e:	f7ff ffda 	bl	8000df6 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e42:	2004      	movs	r0, #4
 8000e44:	f7ff ffd7 	bl	8000df6 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_USER_Pin;
 8000e48:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e4c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e4e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000e52:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e54:	2301      	movs	r3, #1
 8000e56:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B1_USER_GPIO_Port, &GPIO_InitStruct);
 8000e58:	1d3b      	adds	r3, r7, #4
 8000e5a:	4619      	mov	r1, r3
 8000e5c:	4807      	ldr	r0, [pc, #28]	; (8000e7c <MX_GPIO_Init+0x54>)
 8000e5e:	f001 fac1 	bl	80023e4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000e62:	2200      	movs	r2, #0
 8000e64:	2100      	movs	r1, #0
 8000e66:	2028      	movs	r0, #40	; 0x28
 8000e68:	f000 ff39 	bl	8001cde <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000e6c:	2028      	movs	r0, #40	; 0x28
 8000e6e:	f000 ff50 	bl	8001d12 <HAL_NVIC_EnableIRQ>

}
 8000e72:	bf00      	nop
 8000e74:	3718      	adds	r7, #24
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd80      	pop	{r7, pc}
 8000e7a:	bf00      	nop
 8000e7c:	48000800 	.word	0x48000800

08000e80 <LL_EXTI_EnableIT_0_31>:
{
 8000e80:	b480      	push	{r7}
 8000e82:	b083      	sub	sp, #12
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8000e88:	4b06      	ldr	r3, [pc, #24]	; (8000ea4 <LL_EXTI_EnableIT_0_31+0x24>)
 8000e8a:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8000e8e:	4905      	ldr	r1, [pc, #20]	; (8000ea4 <LL_EXTI_EnableIT_0_31+0x24>)
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	4313      	orrs	r3, r2
 8000e94:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8000e98:	bf00      	nop
 8000e9a:	370c      	adds	r7, #12
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea2:	4770      	bx	lr
 8000ea4:	58000800 	.word	0x58000800

08000ea8 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	b083      	sub	sp, #12
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8000eb0:	4b05      	ldr	r3, [pc, #20]	; (8000ec8 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8000eb2:	681a      	ldr	r2, [r3, #0]
 8000eb4:	4904      	ldr	r1, [pc, #16]	; (8000ec8 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	4313      	orrs	r3, r2
 8000eba:	600b      	str	r3, [r1, #0]

}
 8000ebc:	bf00      	nop
 8000ebe:	370c      	adds	r7, #12
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec6:	4770      	bx	lr
 8000ec8:	58000800 	.word	0x58000800

08000ecc <HW_TS_Init>:

  return;
}

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *hrtc)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b088      	sub	sp, #32
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	6039      	str	r1, [r7, #0]
 8000ed6:	71fb      	strb	r3, [r7, #7]
  uint32_t localmaxwakeuptimersetup;

  /**
   * Get RTC handler
   */
  phrtc = hrtc;
 8000ed8:	4a64      	ldr	r2, [pc, #400]	; (800106c <HW_TS_Init+0x1a0>)
 8000eda:	683b      	ldr	r3, [r7, #0]
 8000edc:	6013      	str	r3, [r2, #0]

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8000ede:	4b63      	ldr	r3, [pc, #396]	; (800106c <HW_TS_Init+0x1a0>)
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	22ca      	movs	r2, #202	; 0xca
 8000ee6:	625a      	str	r2, [r3, #36]	; 0x24
 8000ee8:	4b60      	ldr	r3, [pc, #384]	; (800106c <HW_TS_Init+0x1a0>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	2253      	movs	r2, #83	; 0x53
 8000ef0:	625a      	str	r2, [r3, #36]	; 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8000ef2:	4b5f      	ldr	r3, [pc, #380]	; (8001070 <HW_TS_Init+0x1a4>)
 8000ef4:	689b      	ldr	r3, [r3, #8]
 8000ef6:	4a5e      	ldr	r2, [pc, #376]	; (8001070 <HW_TS_Init+0x1a4>)
 8000ef8:	f043 0320 	orr.w	r3, r3, #32
 8000efc:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 8000efe:	4b5c      	ldr	r3, [pc, #368]	; (8001070 <HW_TS_Init+0x1a4>)
 8000f00:	689b      	ldr	r3, [r3, #8]
 8000f02:	b2db      	uxtb	r3, r3
 8000f04:	f003 0307 	and.w	r3, r3, #7
 8000f08:	b2db      	uxtb	r3, r3
 8000f0a:	f1c3 0304 	rsb	r3, r3, #4
 8000f0e:	b2da      	uxtb	r2, r3
 8000f10:	4b58      	ldr	r3, [pc, #352]	; (8001074 <HW_TS_Init+0x1a8>)
 8000f12:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 8000f14:	4b56      	ldr	r3, [pc, #344]	; (8001070 <HW_TS_Init+0x1a4>)
 8000f16:	691b      	ldr	r3, [r3, #16]
 8000f18:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8000f1c:	f44f 02fe 	mov.w	r2, #8323072	; 0x7f0000
 8000f20:	613a      	str	r2, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f22:	693a      	ldr	r2, [r7, #16]
 8000f24:	fa92 f2a2 	rbit	r2, r2
 8000f28:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000f2a:	68fa      	ldr	r2, [r7, #12]
 8000f2c:	617a      	str	r2, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8000f2e:	697a      	ldr	r2, [r7, #20]
 8000f30:	2a00      	cmp	r2, #0
 8000f32:	d101      	bne.n	8000f38 <HW_TS_Init+0x6c>
  {
    return 32U;
 8000f34:	2220      	movs	r2, #32
 8000f36:	e003      	b.n	8000f40 <HW_TS_Init+0x74>
  }
  return __builtin_clz(value);
 8000f38:	697a      	ldr	r2, [r7, #20]
 8000f3a:	fab2 f282 	clz	r2, r2
 8000f3e:	b2d2      	uxtb	r2, r2
 8000f40:	40d3      	lsrs	r3, r2
 8000f42:	b2db      	uxtb	r3, r3
 8000f44:	3301      	adds	r3, #1
 8000f46:	b2da      	uxtb	r2, r3
 8000f48:	4b4b      	ldr	r3, [pc, #300]	; (8001078 <HW_TS_Init+0x1ac>)
 8000f4a:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 8000f4c:	4b48      	ldr	r3, [pc, #288]	; (8001070 <HW_TS_Init+0x1a4>)
 8000f4e:	691b      	ldr	r3, [r3, #16]
 8000f50:	b29b      	uxth	r3, r3
 8000f52:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000f56:	b29b      	uxth	r3, r3
 8000f58:	3301      	adds	r3, #1
 8000f5a:	b29a      	uxth	r2, r3
 8000f5c:	4b47      	ldr	r3, [pc, #284]	; (800107c <HW_TS_Init+0x1b0>)
 8000f5e:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 8000f60:	4b46      	ldr	r3, [pc, #280]	; (800107c <HW_TS_Init+0x1b0>)
 8000f62:	881b      	ldrh	r3, [r3, #0]
 8000f64:	3b01      	subs	r3, #1
 8000f66:	4a44      	ldr	r2, [pc, #272]	; (8001078 <HW_TS_Init+0x1ac>)
 8000f68:	7812      	ldrb	r2, [r2, #0]
 8000f6a:	fb02 f303 	mul.w	r3, r2, r3
 8000f6e:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8000f72:	4a40      	ldr	r2, [pc, #256]	; (8001074 <HW_TS_Init+0x1a8>)
 8000f74:	7812      	ldrb	r2, [r2, #0]
 8000f76:	40d3      	lsrs	r3, r2
 8000f78:	61bb      	str	r3, [r7, #24]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 8000f7a:	69bb      	ldr	r3, [r7, #24]
 8000f7c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8000f80:	4293      	cmp	r3, r2
 8000f82:	d904      	bls.n	8000f8e <HW_TS_Init+0xc2>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 8000f84:	4b3e      	ldr	r3, [pc, #248]	; (8001080 <HW_TS_Init+0x1b4>)
 8000f86:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000f8a:	801a      	strh	r2, [r3, #0]
 8000f8c:	e003      	b.n	8000f96 <HW_TS_Init+0xca>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 8000f8e:	69bb      	ldr	r3, [r7, #24]
 8000f90:	b29a      	uxth	r2, r3
 8000f92:	4b3b      	ldr	r3, [pc, #236]	; (8001080 <HW_TS_Init+0x1b4>)
 8000f94:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8000f96:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8000f9a:	f7ff ff85 	bl	8000ea8 <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8000f9e:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8000fa2:	f7ff ff6d 	bl	8000e80 <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 8000fa6:	79fb      	ldrb	r3, [r7, #7]
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d143      	bne.n	8001034 <HW_TS_Init+0x168>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8000fac:	4b35      	ldr	r3, [pc, #212]	; (8001084 <HW_TS_Init+0x1b8>)
 8000fae:	2201      	movs	r2, #1
 8000fb0:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8000fb2:	4b35      	ldr	r3, [pc, #212]	; (8001088 <HW_TS_Init+0x1bc>)
 8000fb4:	f04f 32ff 	mov.w	r2, #4294967295
 8000fb8:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8000fba:	2300      	movs	r3, #0
 8000fbc:	77fb      	strb	r3, [r7, #31]
 8000fbe:	e00c      	b.n	8000fda <HW_TS_Init+0x10e>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 8000fc0:	7ffa      	ldrb	r2, [r7, #31]
 8000fc2:	4932      	ldr	r1, [pc, #200]	; (800108c <HW_TS_Init+0x1c0>)
 8000fc4:	4613      	mov	r3, r2
 8000fc6:	005b      	lsls	r3, r3, #1
 8000fc8:	4413      	add	r3, r2
 8000fca:	00db      	lsls	r3, r3, #3
 8000fcc:	440b      	add	r3, r1
 8000fce:	330c      	adds	r3, #12
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8000fd4:	7ffb      	ldrb	r3, [r7, #31]
 8000fd6:	3301      	adds	r3, #1
 8000fd8:	77fb      	strb	r3, [r7, #31]
 8000fda:	7ffb      	ldrb	r3, [r7, #31]
 8000fdc:	2b05      	cmp	r3, #5
 8000fde:	d9ef      	bls.n	8000fc0 <HW_TS_Init+0xf4>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 8000fe0:	4b2b      	ldr	r3, [pc, #172]	; (8001090 <HW_TS_Init+0x1c4>)
 8000fe2:	2206      	movs	r2, #6
 8000fe4:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);                       /**<  Disable the Wakeup Timer */
 8000fe6:	4b21      	ldr	r3, [pc, #132]	; (800106c <HW_TS_Init+0x1a0>)
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	689a      	ldr	r2, [r3, #8]
 8000fee:	4b1f      	ldr	r3, [pc, #124]	; (800106c <HW_TS_Init+0x1a0>)
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000ff8:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 8000ffa:	4b1c      	ldr	r3, [pc, #112]	; (800106c <HW_TS_Init+0x1a0>)
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	68db      	ldr	r3, [r3, #12]
 8001002:	b2da      	uxtb	r2, r3
 8001004:	4b19      	ldr	r3, [pc, #100]	; (800106c <HW_TS_Init+0x1a0>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	f462 6290 	orn	r2, r2, #1152	; 0x480
 800100e:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 8001010:	4b20      	ldr	r3, [pc, #128]	; (8001094 <HW_TS_Init+0x1c8>)
 8001012:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001016:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 8001018:	2003      	movs	r0, #3
 800101a:	f000 fea2 	bl	8001d62 <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(phrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 800101e:	4b13      	ldr	r3, [pc, #76]	; (800106c <HW_TS_Init+0x1a0>)
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	689a      	ldr	r2, [r3, #8]
 8001026:	4b11      	ldr	r3, [pc, #68]	; (800106c <HW_TS_Init+0x1a0>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001030:	609a      	str	r2, [r3, #8]
 8001032:	e00a      	b.n	800104a <HW_TS_Init+0x17e>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTF) != RESET)
 8001034:	4b0d      	ldr	r3, [pc, #52]	; (800106c <HW_TS_Init+0x1a0>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	68db      	ldr	r3, [r3, #12]
 800103c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001040:	2b00      	cmp	r3, #0
 8001042:	d002      	beq.n	800104a <HW_TS_Init+0x17e>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8001044:	2003      	movs	r0, #3
 8001046:	f000 fe7e 	bl	8001d46 <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 800104a:	4b08      	ldr	r3, [pc, #32]	; (800106c <HW_TS_Init+0x1a0>)
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	22ff      	movs	r2, #255	; 0xff
 8001052:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 8001054:	2200      	movs	r2, #0
 8001056:	2103      	movs	r1, #3
 8001058:	2003      	movs	r0, #3
 800105a:	f000 fe40 	bl	8001cde <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 800105e:	2003      	movs	r0, #3
 8001060:	f000 fe57 	bl	8001d12 <HAL_NVIC_EnableIRQ>

  return;
 8001064:	bf00      	nop
}
 8001066:	3720      	adds	r7, #32
 8001068:	46bd      	mov	sp, r7
 800106a:	bd80      	pop	{r7, pc}
 800106c:	20000220 	.word	0x20000220
 8001070:	40002800 	.word	0x40002800
 8001074:	20000224 	.word	0x20000224
 8001078:	20000225 	.word	0x20000225
 800107c:	20000226 	.word	0x20000226
 8001080:	20000228 	.word	0x20000228
 8001084:	20000124 	.word	0x20000124
 8001088:	20000120 	.word	0x20000120
 800108c:	2000008c 	.word	0x2000008c
 8001090:	2000011c 	.word	0x2000011c
 8001094:	58000800 	.word	0x58000800

08001098 <HW_UART_Transmit_DMA>:

    return hw_status;
}

hw_status_t HW_UART_Transmit_DMA(hw_uart_id_t hw_uart_id, uint8_t *p_data, uint16_t size, void (*cb)(void))
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b086      	sub	sp, #24
 800109c:	af00      	add	r7, sp, #0
 800109e:	60b9      	str	r1, [r7, #8]
 80010a0:	607b      	str	r3, [r7, #4]
 80010a2:	4603      	mov	r3, r0
 80010a4:	73fb      	strb	r3, [r7, #15]
 80010a6:	4613      	mov	r3, r2
 80010a8:	81bb      	strh	r3, [r7, #12]
    HAL_StatusTypeDef hal_status = HAL_OK;
 80010aa:	2300      	movs	r3, #0
 80010ac:	75fb      	strb	r3, [r7, #23]
    hw_status_t hw_status = hw_uart_ok;
 80010ae:	2300      	movs	r3, #0
 80010b0:	75bb      	strb	r3, [r7, #22]

    switch (hw_uart_id)
 80010b2:	7bfb      	ldrb	r3, [r7, #15]
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d10e      	bne.n	80010d6 <HW_UART_Transmit_DMA+0x3e>
    {
#if (CFG_HW_USART1_ENABLED == 1)
        case hw_uart1:
            HW_huart1TxCb = cb;
 80010b8:	4a17      	ldr	r2, [pc, #92]	; (8001118 <HW_UART_Transmit_DMA+0x80>)
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	6013      	str	r3, [r2, #0]
            huart1.Instance = USART1;
 80010be:	4b17      	ldr	r3, [pc, #92]	; (800111c <HW_UART_Transmit_DMA+0x84>)
 80010c0:	4a17      	ldr	r2, [pc, #92]	; (8001120 <HW_UART_Transmit_DMA+0x88>)
 80010c2:	601a      	str	r2, [r3, #0]
            hal_status = HAL_UART_Transmit_DMA(&huart1, p_data, size);
 80010c4:	89bb      	ldrh	r3, [r7, #12]
 80010c6:	461a      	mov	r2, r3
 80010c8:	68b9      	ldr	r1, [r7, #8]
 80010ca:	4814      	ldr	r0, [pc, #80]	; (800111c <HW_UART_Transmit_DMA+0x84>)
 80010cc:	f003 fbb6 	bl	800483c <HAL_UART_Transmit_DMA>
 80010d0:	4603      	mov	r3, r0
 80010d2:	75fb      	strb	r3, [r7, #23]
            break;
 80010d4:	e000      	b.n	80010d8 <HW_UART_Transmit_DMA+0x40>
            hal_status = HAL_UART_Transmit_DMA(&hlpuart1, p_data, size);
            break;
#endif

        default:
            break;
 80010d6:	bf00      	nop
    }

    switch (hal_status)
 80010d8:	7dfb      	ldrb	r3, [r7, #23]
 80010da:	2b03      	cmp	r3, #3
 80010dc:	d816      	bhi.n	800110c <HW_UART_Transmit_DMA+0x74>
 80010de:	a201      	add	r2, pc, #4	; (adr r2, 80010e4 <HW_UART_Transmit_DMA+0x4c>)
 80010e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010e4:	080010f5 	.word	0x080010f5
 80010e8:	080010fb 	.word	0x080010fb
 80010ec:	08001101 	.word	0x08001101
 80010f0:	08001107 	.word	0x08001107
    {
        case HAL_OK:
            hw_status = hw_uart_ok;
 80010f4:	2300      	movs	r3, #0
 80010f6:	75bb      	strb	r3, [r7, #22]
            break;
 80010f8:	e009      	b.n	800110e <HW_UART_Transmit_DMA+0x76>

        case HAL_ERROR:
            hw_status = hw_uart_error;
 80010fa:	2301      	movs	r3, #1
 80010fc:	75bb      	strb	r3, [r7, #22]
            break;
 80010fe:	e006      	b.n	800110e <HW_UART_Transmit_DMA+0x76>

        case HAL_BUSY:
            hw_status = hw_uart_busy;
 8001100:	2302      	movs	r3, #2
 8001102:	75bb      	strb	r3, [r7, #22]
            break;
 8001104:	e003      	b.n	800110e <HW_UART_Transmit_DMA+0x76>

        case HAL_TIMEOUT:
            hw_status = hw_uart_to;
 8001106:	2303      	movs	r3, #3
 8001108:	75bb      	strb	r3, [r7, #22]
            break;
 800110a:	e000      	b.n	800110e <HW_UART_Transmit_DMA+0x76>

        default:
            break;
 800110c:	bf00      	nop
    }

    return hw_status;
 800110e:	7dbb      	ldrb	r3, [r7, #22]
}
 8001110:	4618      	mov	r0, r3
 8001112:	3718      	adds	r7, #24
 8001114:	46bd      	mov	sp, r7
 8001116:	bd80      	pop	{r7, pc}
 8001118:	2000137c 	.word	0x2000137c
 800111c:	20001440 	.word	0x20001440
 8001120:	40013800 	.word	0x40013800

08001124 <HAL_UART_TxCpltCallback>:

    return;
}

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b082      	sub	sp, #8
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
    switch ((uint32_t)huart->Instance)
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	461a      	mov	r2, r3
 8001132:	4b09      	ldr	r3, [pc, #36]	; (8001158 <HAL_UART_TxCpltCallback+0x34>)
 8001134:	429a      	cmp	r2, r3
 8001136:	d107      	bne.n	8001148 <HAL_UART_TxCpltCallback+0x24>
    {
#if (CFG_HW_USART1_ENABLED == 1)
        case (uint32_t)USART1:
            if(HW_huart1TxCb)
 8001138:	4b08      	ldr	r3, [pc, #32]	; (800115c <HAL_UART_TxCpltCallback+0x38>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	2b00      	cmp	r3, #0
 800113e:	d005      	beq.n	800114c <HAL_UART_TxCpltCallback+0x28>
            {
                HW_huart1TxCb();
 8001140:	4b06      	ldr	r3, [pc, #24]	; (800115c <HAL_UART_TxCpltCallback+0x38>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	4798      	blx	r3
            }
            break;
 8001146:	e001      	b.n	800114c <HAL_UART_TxCpltCallback+0x28>
            }
            break;
#endif

        default:
            break;
 8001148:	bf00      	nop
 800114a:	e000      	b.n	800114e <HAL_UART_TxCpltCallback+0x2a>
            break;
 800114c:	bf00      	nop
    }

    return;
 800114e:	bf00      	nop
}
 8001150:	3708      	adds	r7, #8
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop
 8001158:	40013800 	.word	0x40013800
 800115c:	2000137c 	.word	0x2000137c

08001160 <LL_AHB3_GRP1_EnableClock>:
{
 8001160:	b480      	push	{r7}
 8001162:	b085      	sub	sp, #20
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8001168:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800116c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800116e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	4313      	orrs	r3, r2
 8001176:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8001178:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800117c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	4013      	ands	r3, r2
 8001182:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001184:	68fb      	ldr	r3, [r7, #12]
}
 8001186:	bf00      	nop
 8001188:	3714      	adds	r7, #20
 800118a:	46bd      	mov	sp, r7
 800118c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001190:	4770      	bx	lr
	...

08001194 <MX_IPCC_Init>:

IPCC_HandleTypeDef hipcc;

/* IPCC init function */
void MX_IPCC_Init(void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	af00      	add	r7, sp, #0
  /* USER CODE END IPCC_Init 0 */

  /* USER CODE BEGIN IPCC_Init 1 */

  /* USER CODE END IPCC_Init 1 */
  hipcc.Instance = IPCC;
 8001198:	4b06      	ldr	r3, [pc, #24]	; (80011b4 <MX_IPCC_Init+0x20>)
 800119a:	4a07      	ldr	r2, [pc, #28]	; (80011b8 <MX_IPCC_Init+0x24>)
 800119c:	601a      	str	r2, [r3, #0]
  if (HAL_IPCC_Init(&hipcc) != HAL_OK)
 800119e:	4805      	ldr	r0, [pc, #20]	; (80011b4 <MX_IPCC_Init+0x20>)
 80011a0:	f001 fae4 	bl	800276c <HAL_IPCC_Init>
 80011a4:	4603      	mov	r3, r0
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d001      	beq.n	80011ae <MX_IPCC_Init+0x1a>
  {
    Error_Handler();
 80011aa:	f000 f8d7 	bl	800135c <Error_Handler>
  }
  /* USER CODE BEGIN IPCC_Init 2 */

  /* USER CODE END IPCC_Init 2 */

}
 80011ae:	bf00      	nop
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	20001380 	.word	0x20001380
 80011b8:	58000c00 	.word	0x58000c00

080011bc <HAL_IPCC_MspInit>:

void HAL_IPCC_MspInit(IPCC_HandleTypeDef* ipccHandle)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b082      	sub	sp, #8
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]

  if(ipccHandle->Instance==IPCC)
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	4a0d      	ldr	r2, [pc, #52]	; (8001200 <HAL_IPCC_MspInit+0x44>)
 80011ca:	4293      	cmp	r3, r2
 80011cc:	d113      	bne.n	80011f6 <HAL_IPCC_MspInit+0x3a>
  {
  /* USER CODE BEGIN IPCC_MspInit 0 */

  /* USER CODE END IPCC_MspInit 0 */
    /* IPCC clock enable */
    __HAL_RCC_IPCC_CLK_ENABLE();
 80011ce:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80011d2:	f7ff ffc5 	bl	8001160 <LL_AHB3_GRP1_EnableClock>

    /* IPCC interrupt Init */
    HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn, 0, 0);
 80011d6:	2200      	movs	r2, #0
 80011d8:	2100      	movs	r1, #0
 80011da:	202c      	movs	r0, #44	; 0x2c
 80011dc:	f000 fd7f 	bl	8001cde <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 80011e0:	202c      	movs	r0, #44	; 0x2c
 80011e2:	f000 fd96 	bl	8001d12 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn, 0, 0);
 80011e6:	2200      	movs	r2, #0
 80011e8:	2100      	movs	r1, #0
 80011ea:	202d      	movs	r0, #45	; 0x2d
 80011ec:	f000 fd77 	bl	8001cde <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 80011f0:	202d      	movs	r0, #45	; 0x2d
 80011f2:	f000 fd8e 	bl	8001d12 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN IPCC_MspInit 1 */

  /* USER CODE END IPCC_MspInit 1 */
  }
}
 80011f6:	bf00      	nop
 80011f8:	3708      	adds	r7, #8
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	bf00      	nop
 8001200:	58000c00 	.word	0x58000c00

08001204 <LL_RCC_LSE_SetDriveCapability>:
{
 8001204:	b480      	push	{r7}
 8001206:	b083      	sub	sp, #12
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 800120c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001210:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001214:	f023 0218 	bic.w	r2, r3, #24
 8001218:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	4313      	orrs	r3, r2
 8001220:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8001224:	bf00      	nop
 8001226:	370c      	adds	r7, #12
 8001228:	46bd      	mov	sp, r7
 800122a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122e:	4770      	bx	lr

08001230 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001234:	f000 fbaa 	bl	800198c <HAL_Init>
  /* Config code for STM32_WPAN (HSE Tuning must be done before system clock configuration) */
  MX_APPE_Config();
 8001238:	f7ff fc60 	bl	8000afc <MX_APPE_Config>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800123c:	f000 f810 	bl	8001260 <SystemClock_Config>

  /* IPCC initialisation */
   MX_IPCC_Init();
 8001240:	f7ff ffa8 	bl	8001194 <MX_IPCC_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_RF_Init();
 8001244:	f000 f88f 	bl	8001366 <MX_RF_Init>
  MX_RTC_Init();
 8001248:	f000 f8be 	bl	80013c8 <MX_RTC_Init>
  MX_GPIO_Init();
 800124c:	f7ff fdec 	bl	8000e28 <MX_GPIO_Init>
  MX_DMA_Init();
 8001250:	f7ff fdbf 	bl	8000dd2 <MX_DMA_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init code for STM32_WPAN */
  MX_APPE_Init();
 8001254:	f7ff fc60 	bl	8000b18 <MX_APPE_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_APPE_Process();
 8001258:	f7ff fd53 	bl	8000d02 <MX_APPE_Process>
 800125c:	e7fc      	b.n	8001258 <main+0x28>
	...

08001260 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b0ae      	sub	sp, #184	; 0xb8
 8001264:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001266:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800126a:	2248      	movs	r2, #72	; 0x48
 800126c:	2100      	movs	r1, #0
 800126e:	4618      	mov	r0, r3
 8001270:	f008 fc78 	bl	8009b64 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001274:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001278:	2200      	movs	r2, #0
 800127a:	601a      	str	r2, [r3, #0]
 800127c:	605a      	str	r2, [r3, #4]
 800127e:	609a      	str	r2, [r3, #8]
 8001280:	60da      	str	r2, [r3, #12]
 8001282:	611a      	str	r2, [r3, #16]
 8001284:	615a      	str	r2, [r3, #20]
 8001286:	619a      	str	r2, [r3, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001288:	1d3b      	adds	r3, r7, #4
 800128a:	2250      	movs	r2, #80	; 0x50
 800128c:	2100      	movs	r1, #0
 800128e:	4618      	mov	r0, r3
 8001290:	f008 fc68 	bl	8009b64 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001294:	f001 faf0 	bl	8002878 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001298:	2000      	movs	r0, #0
 800129a:	f7ff ffb3 	bl	8001204 <LL_RCC_LSE_SetDriveCapability>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800129e:	4b2e      	ldr	r3, [pc, #184]	; (8001358 <SystemClock_Config+0xf8>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80012a6:	4a2c      	ldr	r2, [pc, #176]	; (8001358 <SystemClock_Config+0xf8>)
 80012a8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80012ac:	6013      	str	r3, [r2, #0]
 80012ae:	4b2a      	ldr	r3, [pc, #168]	; (8001358 <SystemClock_Config+0xf8>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80012b6:	603b      	str	r3, [r7, #0]
 80012b8:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 80012ba:	2307      	movs	r3, #7
 80012bc:	673b      	str	r3, [r7, #112]	; 0x70
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80012be:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80012c2:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80012c4:	2301      	movs	r3, #1
 80012c6:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80012c8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80012cc:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80012ce:	2340      	movs	r3, #64	; 0x40
 80012d0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80012d4:	2300      	movs	r3, #0
 80012d6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012da:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80012de:	4618      	mov	r0, r3
 80012e0:	f001 fe5e 	bl	8002fa0 <HAL_RCC_OscConfig>
 80012e4:	4603      	mov	r3, r0
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d001      	beq.n	80012ee <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80012ea:	f000 f837 	bl	800135c <Error_Handler>
  }
  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 80012ee:	236f      	movs	r3, #111	; 0x6f
 80012f0:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 80012f2:	2302      	movs	r3, #2
 80012f4:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012f6:	2300      	movs	r3, #0
 80012f8:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80012fa:	2300      	movs	r3, #0
 80012fc:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012fe:	2300      	movs	r3, #0
 8001300:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8001302:	2300      	movs	r3, #0
 8001304:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8001306:	2300      	movs	r3, #0
 8001308:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800130a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800130e:	2101      	movs	r1, #1
 8001310:	4618      	mov	r0, r3
 8001312:	f002 f9d1 	bl	80036b8 <HAL_RCC_ClockConfig>
 8001316:	4603      	mov	r3, r0
 8001318:	2b00      	cmp	r3, #0
 800131a:	d001      	beq.n	8001320 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800131c:	f000 f81e 	bl	800135c <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP
 8001320:	f643 0301 	movw	r3, #14337	; 0x3801
 8001324:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART1;
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001326:	2300      	movs	r3, #0
 8001328:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800132a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800132e:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_LSE;
 8001330:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001334:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSE;
 8001336:	2302      	movs	r3, #2
 8001338:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 800133a:	2310      	movs	r3, #16
 800133c:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800133e:	1d3b      	adds	r3, r7, #4
 8001340:	4618      	mov	r0, r3
 8001342:	f002 fdfa 	bl	8003f3a <HAL_RCCEx_PeriphCLKConfig>
 8001346:	4603      	mov	r3, r0
 8001348:	2b00      	cmp	r3, #0
 800134a:	d001      	beq.n	8001350 <SystemClock_Config+0xf0>
  {
    Error_Handler();
 800134c:	f000 f806 	bl	800135c <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 8001350:	bf00      	nop
 8001352:	37b8      	adds	r7, #184	; 0xb8
 8001354:	46bd      	mov	sp, r7
 8001356:	bd80      	pop	{r7, pc}
 8001358:	58000400 	.word	0x58000400

0800135c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800135c:	b480      	push	{r7}
 800135e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001360:	b672      	cpsid	i
}
 8001362:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001364:	e7fe      	b.n	8001364 <Error_Handler+0x8>

08001366 <MX_RF_Init>:

/* USER CODE END 0 */

/* RF init function */
void MX_RF_Init(void)
{
 8001366:	b480      	push	{r7}
 8001368:	af00      	add	r7, sp, #0
  /* USER CODE END RF_Init 1 */
  /* USER CODE BEGIN RF_Init 2 */

  /* USER CODE END RF_Init 2 */

}
 800136a:	bf00      	nop
 800136c:	46bd      	mov	sp, r7
 800136e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001372:	4770      	bx	lr

08001374 <LL_RCC_EnableRTC>:
{
 8001374:	b480      	push	{r7}
 8001376:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8001378:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800137c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001380:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001384:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001388:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800138c:	bf00      	nop
 800138e:	46bd      	mov	sp, r7
 8001390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001394:	4770      	bx	lr

08001396 <LL_APB1_GRP1_EnableClock>:
{
 8001396:	b480      	push	{r7}
 8001398:	b085      	sub	sp, #20
 800139a:	af00      	add	r7, sp, #0
 800139c:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 800139e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013a2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80013a4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	4313      	orrs	r3, r2
 80013ac:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80013ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013b2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	4013      	ands	r3, r2
 80013b8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80013ba:	68fb      	ldr	r3, [r7, #12]
}
 80013bc:	bf00      	nop
 80013be:	3714      	adds	r7, #20
 80013c0:	46bd      	mov	sp, r7
 80013c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c6:	4770      	bx	lr

080013c8 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80013cc:	4b16      	ldr	r3, [pc, #88]	; (8001428 <MX_RTC_Init+0x60>)
 80013ce:	4a17      	ldr	r2, [pc, #92]	; (800142c <MX_RTC_Init+0x64>)
 80013d0:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80013d2:	4b15      	ldr	r3, [pc, #84]	; (8001428 <MX_RTC_Init+0x60>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 80013d8:	4b13      	ldr	r3, [pc, #76]	; (8001428 <MX_RTC_Init+0x60>)
 80013da:	220f      	movs	r2, #15
 80013dc:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 80013de:	4b12      	ldr	r3, [pc, #72]	; (8001428 <MX_RTC_Init+0x60>)
 80013e0:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80013e4:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80013e6:	4b10      	ldr	r3, [pc, #64]	; (8001428 <MX_RTC_Init+0x60>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80013ec:	4b0e      	ldr	r3, [pc, #56]	; (8001428 <MX_RTC_Init+0x60>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80013f2:	4b0d      	ldr	r3, [pc, #52]	; (8001428 <MX_RTC_Init+0x60>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80013f8:	4b0b      	ldr	r3, [pc, #44]	; (8001428 <MX_RTC_Init+0x60>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80013fe:	480a      	ldr	r0, [pc, #40]	; (8001428 <MX_RTC_Init+0x60>)
 8001400:	f003 f822 	bl	8004448 <HAL_RTC_Init>
 8001404:	4603      	mov	r3, r0
 8001406:	2b00      	cmp	r3, #0
 8001408:	d001      	beq.n	800140e <MX_RTC_Init+0x46>
  {
    Error_Handler();
 800140a:	f7ff ffa7 	bl	800135c <Error_Handler>
  }
  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 800140e:	2200      	movs	r2, #0
 8001410:	2100      	movs	r1, #0
 8001412:	4805      	ldr	r0, [pc, #20]	; (8001428 <MX_RTC_Init+0x60>)
 8001414:	f003 f906 	bl	8004624 <HAL_RTCEx_SetWakeUpTimer>
 8001418:	4603      	mov	r3, r0
 800141a:	2b00      	cmp	r3, #0
 800141c:	d001      	beq.n	8001422 <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 800141e:	f7ff ff9d 	bl	800135c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001422:	bf00      	nop
 8001424:	bd80      	pop	{r7, pc}
 8001426:	bf00      	nop
 8001428:	200013bc 	.word	0x200013bc
 800142c:	40002800 	.word	0x40002800

08001430 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b082      	sub	sp, #8
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	4a06      	ldr	r2, [pc, #24]	; (8001458 <HAL_RTC_MspInit+0x28>)
 800143e:	4293      	cmp	r3, r2
 8001440:	d105      	bne.n	800144e <HAL_RTC_MspInit+0x1e>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001442:	f7ff ff97 	bl	8001374 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8001446:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800144a:	f7ff ffa4 	bl	8001396 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 800144e:	bf00      	nop
 8001450:	3708      	adds	r7, #8
 8001452:	46bd      	mov	sp, r7
 8001454:	bd80      	pop	{r7, pc}
 8001456:	bf00      	nop
 8001458:	40002800 	.word	0x40002800

0800145c <LL_AHB3_GRP1_EnableClock>:
{
 800145c:	b480      	push	{r7}
 800145e:	b085      	sub	sp, #20
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8001464:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001468:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800146a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	4313      	orrs	r3, r2
 8001472:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8001474:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001478:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	4013      	ands	r3, r2
 800147e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001480:	68fb      	ldr	r3, [r7, #12]
}
 8001482:	bf00      	nop
 8001484:	3714      	adds	r7, #20
 8001486:	46bd      	mov	sp, r7
 8001488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148c:	4770      	bx	lr

0800148e <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800148e:	b580      	push	{r7, lr}
 8001490:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 8001492:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8001496:	f7ff ffe1 	bl	800145c <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 800149a:	2200      	movs	r2, #0
 800149c:	2100      	movs	r1, #0
 800149e:	202e      	movs	r0, #46	; 0x2e
 80014a0:	f000 fc1d 	bl	8001cde <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 80014a4:	202e      	movs	r0, #46	; 0x2e
 80014a6:	f000 fc34 	bl	8001d12 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014aa:	bf00      	nop
 80014ac:	bd80      	pop	{r7, pc}

080014ae <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014ae:	b480      	push	{r7}
 80014b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80014b2:	e7fe      	b.n	80014b2 <NMI_Handler+0x4>

080014b4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014b4:	b480      	push	{r7}
 80014b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014b8:	e7fe      	b.n	80014b8 <HardFault_Handler+0x4>

080014ba <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014ba:	b480      	push	{r7}
 80014bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014be:	e7fe      	b.n	80014be <MemManage_Handler+0x4>

080014c0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014c0:	b480      	push	{r7}
 80014c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014c4:	e7fe      	b.n	80014c4 <BusFault_Handler+0x4>

080014c6 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014c6:	b480      	push	{r7}
 80014c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014ca:	e7fe      	b.n	80014ca <UsageFault_Handler+0x4>

080014cc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014cc:	b480      	push	{r7}
 80014ce:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014d0:	bf00      	nop
 80014d2:	46bd      	mov	sp, r7
 80014d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d8:	4770      	bx	lr

080014da <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014da:	b480      	push	{r7}
 80014dc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014de:	bf00      	nop
 80014e0:	46bd      	mov	sp, r7
 80014e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e6:	4770      	bx	lr

080014e8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014e8:	b480      	push	{r7}
 80014ea:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014ec:	bf00      	nop
 80014ee:	46bd      	mov	sp, r7
 80014f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f4:	4770      	bx	lr

080014f6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014f6:	b580      	push	{r7, lr}
 80014f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014fa:	f000 faa1 	bl	8001a40 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014fe:	bf00      	nop
 8001500:	bd80      	pop	{r7, pc}
	...

08001504 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001508:	4802      	ldr	r0, [pc, #8]	; (8001514 <USART1_IRQHandler+0x10>)
 800150a:	f003 fa29 	bl	8004960 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800150e:	bf00      	nop
 8001510:	bd80      	pop	{r7, pc}
 8001512:	bf00      	nop
 8001514:	20001440 	.word	0x20001440

08001518 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 800151c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001520:	f001 f8e8 	bl	80026f4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001524:	bf00      	nop
 8001526:	bd80      	pop	{r7, pc}

08001528 <IPCC_C1_RX_IRQHandler>:

/**
  * @brief This function handles IPCC RX occupied interrupt.
  */
void IPCC_C1_RX_IRQHandler(void)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 0 */

  /* USER CODE END IPCC_C1_RX_IRQn 0 */
  HAL_IPCC_RX_IRQHandler(&hipcc);
 800152c:	f007 ff1e 	bl	800936c <HW_IPCC_Rx_Handler>
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 1 */

  /* USER CODE END IPCC_C1_RX_IRQn 1 */
}
 8001530:	bf00      	nop
 8001532:	bd80      	pop	{r7, pc}

08001534 <IPCC_C1_TX_IRQHandler>:

/**
  * @brief This function handles IPCC TX free interrupt.
  */
void IPCC_C1_TX_IRQHandler(void)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 0 */

  /* USER CODE END IPCC_C1_TX_IRQn 0 */
  HAL_IPCC_TX_IRQHandler(&hipcc);
 8001538:	f007 ff50 	bl	80093dc <HW_IPCC_Tx_Handler>
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 1 */

  /* USER CODE END IPCC_C1_TX_IRQn 1 */
}
 800153c:	bf00      	nop
 800153e:	bd80      	pop	{r7, pc}

08001540 <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 8001544:	f001 f8ee 	bl	8002724 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 8001548:	bf00      	nop
 800154a:	bd80      	pop	{r7, pc}

0800154c <DMA2_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA2 channel4 global interrupt.
  */
void DMA2_Channel4_IRQHandler(void)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel4_IRQn 0 */

  /* USER CODE END DMA2_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001550:	4802      	ldr	r0, [pc, #8]	; (800155c <DMA2_Channel4_IRQHandler+0x10>)
 8001552:	f000 fdf6 	bl	8002142 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel4_IRQn 1 */

  /* USER CODE END DMA2_Channel4_IRQn 1 */
}
 8001556:	bf00      	nop
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	200013e0 	.word	0x200013e0

08001560 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b086      	sub	sp, #24
 8001564:	af00      	add	r7, sp, #0
 8001566:	60f8      	str	r0, [r7, #12]
 8001568:	60b9      	str	r1, [r7, #8]
 800156a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800156c:	2300      	movs	r3, #0
 800156e:	617b      	str	r3, [r7, #20]
 8001570:	e00a      	b.n	8001588 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001572:	f3af 8000 	nop.w
 8001576:	4601      	mov	r1, r0
 8001578:	68bb      	ldr	r3, [r7, #8]
 800157a:	1c5a      	adds	r2, r3, #1
 800157c:	60ba      	str	r2, [r7, #8]
 800157e:	b2ca      	uxtb	r2, r1
 8001580:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001582:	697b      	ldr	r3, [r7, #20]
 8001584:	3301      	adds	r3, #1
 8001586:	617b      	str	r3, [r7, #20]
 8001588:	697a      	ldr	r2, [r7, #20]
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	429a      	cmp	r2, r3
 800158e:	dbf0      	blt.n	8001572 <_read+0x12>
	}

return len;
 8001590:	687b      	ldr	r3, [r7, #4]
}
 8001592:	4618      	mov	r0, r3
 8001594:	3718      	adds	r7, #24
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}

0800159a <_close>:
	}
	return len;
}

int _close(int file)
{
 800159a:	b480      	push	{r7}
 800159c:	b083      	sub	sp, #12
 800159e:	af00      	add	r7, sp, #0
 80015a0:	6078      	str	r0, [r7, #4]
	return -1;
 80015a2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80015a6:	4618      	mov	r0, r3
 80015a8:	370c      	adds	r7, #12
 80015aa:	46bd      	mov	sp, r7
 80015ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b0:	4770      	bx	lr

080015b2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80015b2:	b480      	push	{r7}
 80015b4:	b083      	sub	sp, #12
 80015b6:	af00      	add	r7, sp, #0
 80015b8:	6078      	str	r0, [r7, #4]
 80015ba:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80015c2:	605a      	str	r2, [r3, #4]
	return 0;
 80015c4:	2300      	movs	r3, #0
}
 80015c6:	4618      	mov	r0, r3
 80015c8:	370c      	adds	r7, #12
 80015ca:	46bd      	mov	sp, r7
 80015cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d0:	4770      	bx	lr

080015d2 <_isatty>:

int _isatty(int file)
{
 80015d2:	b480      	push	{r7}
 80015d4:	b083      	sub	sp, #12
 80015d6:	af00      	add	r7, sp, #0
 80015d8:	6078      	str	r0, [r7, #4]
	return 1;
 80015da:	2301      	movs	r3, #1
}
 80015dc:	4618      	mov	r0, r3
 80015de:	370c      	adds	r7, #12
 80015e0:	46bd      	mov	sp, r7
 80015e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e6:	4770      	bx	lr

080015e8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80015e8:	b480      	push	{r7}
 80015ea:	b085      	sub	sp, #20
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	60f8      	str	r0, [r7, #12]
 80015f0:	60b9      	str	r1, [r7, #8]
 80015f2:	607a      	str	r2, [r7, #4]
	return 0;
 80015f4:	2300      	movs	r3, #0
}
 80015f6:	4618      	mov	r0, r3
 80015f8:	3714      	adds	r7, #20
 80015fa:	46bd      	mov	sp, r7
 80015fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001600:	4770      	bx	lr
	...

08001604 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b086      	sub	sp, #24
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800160c:	4a14      	ldr	r2, [pc, #80]	; (8001660 <_sbrk+0x5c>)
 800160e:	4b15      	ldr	r3, [pc, #84]	; (8001664 <_sbrk+0x60>)
 8001610:	1ad3      	subs	r3, r2, r3
 8001612:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001614:	697b      	ldr	r3, [r7, #20]
 8001616:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001618:	4b13      	ldr	r3, [pc, #76]	; (8001668 <_sbrk+0x64>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	2b00      	cmp	r3, #0
 800161e:	d102      	bne.n	8001626 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001620:	4b11      	ldr	r3, [pc, #68]	; (8001668 <_sbrk+0x64>)
 8001622:	4a12      	ldr	r2, [pc, #72]	; (800166c <_sbrk+0x68>)
 8001624:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001626:	4b10      	ldr	r3, [pc, #64]	; (8001668 <_sbrk+0x64>)
 8001628:	681a      	ldr	r2, [r3, #0]
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	4413      	add	r3, r2
 800162e:	693a      	ldr	r2, [r7, #16]
 8001630:	429a      	cmp	r2, r3
 8001632:	d207      	bcs.n	8001644 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001634:	f008 fa5e 	bl	8009af4 <__errno>
 8001638:	4603      	mov	r3, r0
 800163a:	220c      	movs	r2, #12
 800163c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800163e:	f04f 33ff 	mov.w	r3, #4294967295
 8001642:	e009      	b.n	8001658 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001644:	4b08      	ldr	r3, [pc, #32]	; (8001668 <_sbrk+0x64>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800164a:	4b07      	ldr	r3, [pc, #28]	; (8001668 <_sbrk+0x64>)
 800164c:	681a      	ldr	r2, [r3, #0]
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	4413      	add	r3, r2
 8001652:	4a05      	ldr	r2, [pc, #20]	; (8001668 <_sbrk+0x64>)
 8001654:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001656:	68fb      	ldr	r3, [r7, #12]
}
 8001658:	4618      	mov	r0, r3
 800165a:	3718      	adds	r7, #24
 800165c:	46bd      	mov	sp, r7
 800165e:	bd80      	pop	{r7, pc}
 8001660:	20030000 	.word	0x20030000
 8001664:	00000400 	.word	0x00000400
 8001668:	2000022c 	.word	0x2000022c
 800166c:	200016d8 	.word	0x200016d8

08001670 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001670:	b480      	push	{r7}
 8001672:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 8001674:	4b24      	ldr	r3, [pc, #144]	; (8001708 <SystemInit+0x98>)
 8001676:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800167a:	4a23      	ldr	r2, [pc, #140]	; (8001708 <SystemInit+0x98>)
 800167c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001680:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001684:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800168e:	f043 0301 	orr.w	r3, r3, #1
 8001692:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8001694:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001698:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 800169c:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 800169e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016a2:	681a      	ldr	r2, [r3, #0]
 80016a4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80016a8:	4b18      	ldr	r3, [pc, #96]	; (800170c <SystemInit+0x9c>)
 80016aa:	4013      	ands	r3, r2
 80016ac:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 80016ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80016b6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80016ba:	f023 0305 	bic.w	r3, r3, #5
 80016be:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 80016c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016c6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80016ca:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80016ce:	f023 0301 	bic.w	r3, r3, #1
 80016d2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
    
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 80016d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016da:	4a0d      	ldr	r2, [pc, #52]	; (8001710 <SystemInit+0xa0>)
 80016dc:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 80016de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016e2:	4a0b      	ldr	r2, [pc, #44]	; (8001710 <SystemInit+0xa0>)
 80016e4:	611a      	str	r2, [r3, #16]
#endif
  
  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80016e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80016f0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016f4:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80016f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016fa:	2200      	movs	r2, #0
 80016fc:	619a      	str	r2, [r3, #24]
}
 80016fe:	bf00      	nop
 8001700:	46bd      	mov	sp, r7
 8001702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001706:	4770      	bx	lr
 8001708:	e000ed00 	.word	0xe000ed00
 800170c:	faf6fefb 	.word	0xfaf6fefb
 8001710:	22041000 	.word	0x22041000

08001714 <LL_AHB2_GRP1_EnableClock>:
{
 8001714:	b480      	push	{r7}
 8001716:	b085      	sub	sp, #20
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800171c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001720:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001722:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	4313      	orrs	r3, r2
 800172a:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800172c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001730:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	4013      	ands	r3, r2
 8001736:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001738:	68fb      	ldr	r3, [r7, #12]
}
 800173a:	bf00      	nop
 800173c:	3714      	adds	r7, #20
 800173e:	46bd      	mov	sp, r7
 8001740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001744:	4770      	bx	lr

08001746 <LL_APB2_GRP1_EnableClock>:
{
 8001746:	b480      	push	{r7}
 8001748:	b085      	sub	sp, #20
 800174a:	af00      	add	r7, sp, #0
 800174c:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 800174e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001752:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001754:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	4313      	orrs	r3, r2
 800175c:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800175e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001762:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	4013      	ands	r3, r2
 8001768:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800176a:	68fb      	ldr	r3, [r7, #12]
}
 800176c:	bf00      	nop
 800176e:	3714      	adds	r7, #20
 8001770:	46bd      	mov	sp, r7
 8001772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001776:	4770      	bx	lr

08001778 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800177c:	4b22      	ldr	r3, [pc, #136]	; (8001808 <MX_USART1_UART_Init+0x90>)
 800177e:	4a23      	ldr	r2, [pc, #140]	; (800180c <MX_USART1_UART_Init+0x94>)
 8001780:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001782:	4b21      	ldr	r3, [pc, #132]	; (8001808 <MX_USART1_UART_Init+0x90>)
 8001784:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001788:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800178a:	4b1f      	ldr	r3, [pc, #124]	; (8001808 <MX_USART1_UART_Init+0x90>)
 800178c:	2200      	movs	r2, #0
 800178e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001790:	4b1d      	ldr	r3, [pc, #116]	; (8001808 <MX_USART1_UART_Init+0x90>)
 8001792:	2200      	movs	r2, #0
 8001794:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001796:	4b1c      	ldr	r3, [pc, #112]	; (8001808 <MX_USART1_UART_Init+0x90>)
 8001798:	2200      	movs	r2, #0
 800179a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800179c:	4b1a      	ldr	r3, [pc, #104]	; (8001808 <MX_USART1_UART_Init+0x90>)
 800179e:	220c      	movs	r2, #12
 80017a0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017a2:	4b19      	ldr	r3, [pc, #100]	; (8001808 <MX_USART1_UART_Init+0x90>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80017a8:	4b17      	ldr	r3, [pc, #92]	; (8001808 <MX_USART1_UART_Init+0x90>)
 80017aa:	2200      	movs	r2, #0
 80017ac:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80017ae:	4b16      	ldr	r3, [pc, #88]	; (8001808 <MX_USART1_UART_Init+0x90>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80017b4:	4b14      	ldr	r3, [pc, #80]	; (8001808 <MX_USART1_UART_Init+0x90>)
 80017b6:	2200      	movs	r2, #0
 80017b8:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80017ba:	4b13      	ldr	r3, [pc, #76]	; (8001808 <MX_USART1_UART_Init+0x90>)
 80017bc:	2200      	movs	r2, #0
 80017be:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80017c0:	4811      	ldr	r0, [pc, #68]	; (8001808 <MX_USART1_UART_Init+0x90>)
 80017c2:	f002 ffea 	bl	800479a <HAL_UART_Init>
 80017c6:	4603      	mov	r3, r0
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d001      	beq.n	80017d0 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80017cc:	f7ff fdc6 	bl	800135c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80017d0:	2100      	movs	r1, #0
 80017d2:	480d      	ldr	r0, [pc, #52]	; (8001808 <MX_USART1_UART_Init+0x90>)
 80017d4:	f004 f991 	bl	8005afa <HAL_UARTEx_SetTxFifoThreshold>
 80017d8:	4603      	mov	r3, r0
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d001      	beq.n	80017e2 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80017de:	f7ff fdbd 	bl	800135c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80017e2:	2100      	movs	r1, #0
 80017e4:	4808      	ldr	r0, [pc, #32]	; (8001808 <MX_USART1_UART_Init+0x90>)
 80017e6:	f004 f9c6 	bl	8005b76 <HAL_UARTEx_SetRxFifoThreshold>
 80017ea:	4603      	mov	r3, r0
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d001      	beq.n	80017f4 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80017f0:	f7ff fdb4 	bl	800135c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80017f4:	4804      	ldr	r0, [pc, #16]	; (8001808 <MX_USART1_UART_Init+0x90>)
 80017f6:	f004 f947 	bl	8005a88 <HAL_UARTEx_DisableFifoMode>
 80017fa:	4603      	mov	r3, r0
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d001      	beq.n	8001804 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001800:	f7ff fdac 	bl	800135c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001804:	bf00      	nop
 8001806:	bd80      	pop	{r7, pc}
 8001808:	20001440 	.word	0x20001440
 800180c:	40013800 	.word	0x40013800

08001810 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b088      	sub	sp, #32
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001818:	f107 030c 	add.w	r3, r7, #12
 800181c:	2200      	movs	r2, #0
 800181e:	601a      	str	r2, [r3, #0]
 8001820:	605a      	str	r2, [r3, #4]
 8001822:	609a      	str	r2, [r3, #8]
 8001824:	60da      	str	r2, [r3, #12]
 8001826:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	4a27      	ldr	r2, [pc, #156]	; (80018cc <HAL_UART_MspInit+0xbc>)
 800182e:	4293      	cmp	r3, r2
 8001830:	d147      	bne.n	80018c2 <HAL_UART_MspInit+0xb2>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001832:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001836:	f7ff ff86 	bl	8001746 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800183a:	2002      	movs	r0, #2
 800183c:	f7ff ff6a 	bl	8001714 <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8001840:	23c0      	movs	r3, #192	; 0xc0
 8001842:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001844:	2302      	movs	r3, #2
 8001846:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001848:	2300      	movs	r3, #0
 800184a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800184c:	2300      	movs	r3, #0
 800184e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001850:	2307      	movs	r3, #7
 8001852:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001854:	f107 030c 	add.w	r3, r7, #12
 8001858:	4619      	mov	r1, r3
 800185a:	481d      	ldr	r0, [pc, #116]	; (80018d0 <HAL_UART_MspInit+0xc0>)
 800185c:	f000 fdc2 	bl	80023e4 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Channel4;
 8001860:	4b1c      	ldr	r3, [pc, #112]	; (80018d4 <HAL_UART_MspInit+0xc4>)
 8001862:	4a1d      	ldr	r2, [pc, #116]	; (80018d8 <HAL_UART_MspInit+0xc8>)
 8001864:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8001866:	4b1b      	ldr	r3, [pc, #108]	; (80018d4 <HAL_UART_MspInit+0xc4>)
 8001868:	220f      	movs	r2, #15
 800186a:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800186c:	4b19      	ldr	r3, [pc, #100]	; (80018d4 <HAL_UART_MspInit+0xc4>)
 800186e:	2210      	movs	r2, #16
 8001870:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001872:	4b18      	ldr	r3, [pc, #96]	; (80018d4 <HAL_UART_MspInit+0xc4>)
 8001874:	2200      	movs	r2, #0
 8001876:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001878:	4b16      	ldr	r3, [pc, #88]	; (80018d4 <HAL_UART_MspInit+0xc4>)
 800187a:	2280      	movs	r2, #128	; 0x80
 800187c:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800187e:	4b15      	ldr	r3, [pc, #84]	; (80018d4 <HAL_UART_MspInit+0xc4>)
 8001880:	2200      	movs	r2, #0
 8001882:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001884:	4b13      	ldr	r3, [pc, #76]	; (80018d4 <HAL_UART_MspInit+0xc4>)
 8001886:	2200      	movs	r2, #0
 8001888:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 800188a:	4b12      	ldr	r3, [pc, #72]	; (80018d4 <HAL_UART_MspInit+0xc4>)
 800188c:	2200      	movs	r2, #0
 800188e:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001890:	4b10      	ldr	r3, [pc, #64]	; (80018d4 <HAL_UART_MspInit+0xc4>)
 8001892:	2200      	movs	r2, #0
 8001894:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8001896:	480f      	ldr	r0, [pc, #60]	; (80018d4 <HAL_UART_MspInit+0xc4>)
 8001898:	f000 fa72 	bl	8001d80 <HAL_DMA_Init>
 800189c:	4603      	mov	r3, r0
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d001      	beq.n	80018a6 <HAL_UART_MspInit+0x96>
    {
      Error_Handler();
 80018a2:	f7ff fd5b 	bl	800135c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	4a0a      	ldr	r2, [pc, #40]	; (80018d4 <HAL_UART_MspInit+0xc4>)
 80018aa:	679a      	str	r2, [r3, #120]	; 0x78
 80018ac:	4a09      	ldr	r2, [pc, #36]	; (80018d4 <HAL_UART_MspInit+0xc4>)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80018b2:	2200      	movs	r2, #0
 80018b4:	2100      	movs	r1, #0
 80018b6:	2024      	movs	r0, #36	; 0x24
 80018b8:	f000 fa11 	bl	8001cde <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80018bc:	2024      	movs	r0, #36	; 0x24
 80018be:	f000 fa28 	bl	8001d12 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80018c2:	bf00      	nop
 80018c4:	3720      	adds	r7, #32
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd80      	pop	{r7, pc}
 80018ca:	bf00      	nop
 80018cc:	40013800 	.word	0x40013800
 80018d0:	48000400 	.word	0x48000400
 80018d4:	200013e0 	.word	0x200013e0
 80018d8:	40020444 	.word	0x40020444

080018dc <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 80018dc:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018de:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018e0:	3304      	adds	r3, #4

080018e2 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018e2:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018e4:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 80018e6:	d3f9      	bcc.n	80018dc <CopyDataInit>
  bx lr
 80018e8:	4770      	bx	lr

080018ea <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 80018ea:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 80018ec:	3004      	adds	r0, #4

080018ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 80018ee:	4288      	cmp	r0, r1
  bcc FillZerobss
 80018f0:	d3fb      	bcc.n	80018ea <FillZerobss>
  bx lr
 80018f2:	4770      	bx	lr

080018f4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80018f4:	480c      	ldr	r0, [pc, #48]	; (8001928 <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 80018f6:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 80018f8:	f7ff feba 	bl	8001670 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 80018fc:	480b      	ldr	r0, [pc, #44]	; (800192c <LoopForever+0x8>)
 80018fe:	490c      	ldr	r1, [pc, #48]	; (8001930 <LoopForever+0xc>)
 8001900:	4a0c      	ldr	r2, [pc, #48]	; (8001934 <LoopForever+0x10>)
 8001902:	2300      	movs	r3, #0
 8001904:	f7ff ffed 	bl	80018e2 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8001908:	480b      	ldr	r0, [pc, #44]	; (8001938 <LoopForever+0x14>)
 800190a:	490c      	ldr	r1, [pc, #48]	; (800193c <LoopForever+0x18>)
 800190c:	2300      	movs	r3, #0
 800190e:	f7ff ffee 	bl	80018ee <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8001912:	480b      	ldr	r0, [pc, #44]	; (8001940 <LoopForever+0x1c>)
 8001914:	490b      	ldr	r1, [pc, #44]	; (8001944 <LoopForever+0x20>)
 8001916:	2300      	movs	r3, #0
 8001918:	f7ff ffe9 	bl	80018ee <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800191c:	f008 f8f0 	bl	8009b00 <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 8001920:	f7ff fc86 	bl	8001230 <main>

08001924 <LoopForever>:

LoopForever:
  b LoopForever
 8001924:	e7fe      	b.n	8001924 <LoopForever>
 8001926:	0000      	.short	0x0000
  ldr   r0, =_estack
 8001928:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 800192c:	20000004 	.word	0x20000004
 8001930:	2000008c 	.word	0x2000008c
 8001934:	0800b708 	.word	0x0800b708
  INIT_BSS _sbss, _ebss
 8001938:	20000204 	.word	0x20000204
 800193c:	200016d8 	.word	0x200016d8
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8001940:	200301e0 	.word	0x200301e0
 8001944:	20030a57 	.word	0x20030a57

08001948 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001948:	e7fe      	b.n	8001948 <ADC1_IRQHandler>
	...

0800194c <LL_DBGMCU_EnableDBGSleepMode>:
  * @brief  Enable the Debug Module during SLEEP mode
  * @rmtoll DBGMCU_CR    DBG_SLEEP     LL_DBGMCU_EnableDBGSleepMode
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_EnableDBGSleepMode(void)
{
 800194c:	b480      	push	{r7}
 800194e:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 8001950:	4b05      	ldr	r3, [pc, #20]	; (8001968 <LL_DBGMCU_EnableDBGSleepMode+0x1c>)
 8001952:	685b      	ldr	r3, [r3, #4]
 8001954:	4a04      	ldr	r2, [pc, #16]	; (8001968 <LL_DBGMCU_EnableDBGSleepMode+0x1c>)
 8001956:	f043 0301 	orr.w	r3, r3, #1
 800195a:	6053      	str	r3, [r2, #4]
}
 800195c:	bf00      	nop
 800195e:	46bd      	mov	sp, r7
 8001960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001964:	4770      	bx	lr
 8001966:	bf00      	nop
 8001968:	e0042000 	.word	0xe0042000

0800196c <LL_DBGMCU_EnableDBGStopMode>:
  * @brief  Enable the Debug Module during STOP mode
  * @rmtoll DBGMCU_CR    DBG_STOP      LL_DBGMCU_EnableDBGStopMode
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_EnableDBGStopMode(void)
{
 800196c:	b480      	push	{r7}
 800196e:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 8001970:	4b05      	ldr	r3, [pc, #20]	; (8001988 <LL_DBGMCU_EnableDBGStopMode+0x1c>)
 8001972:	685b      	ldr	r3, [r3, #4]
 8001974:	4a04      	ldr	r2, [pc, #16]	; (8001988 <LL_DBGMCU_EnableDBGStopMode+0x1c>)
 8001976:	f043 0302 	orr.w	r3, r3, #2
 800197a:	6053      	str	r3, [r2, #4]
}
 800197c:	bf00      	nop
 800197e:	46bd      	mov	sp, r7
 8001980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001984:	4770      	bx	lr
 8001986:	bf00      	nop
 8001988:	e0042000 	.word	0xe0042000

0800198c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b082      	sub	sp, #8
 8001990:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001992:	2300      	movs	r3, #0
 8001994:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001996:	4b0c      	ldr	r3, [pc, #48]	; (80019c8 <HAL_Init+0x3c>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	4a0b      	ldr	r2, [pc, #44]	; (80019c8 <HAL_Init+0x3c>)
 800199c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019a0:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019a2:	2003      	movs	r0, #3
 80019a4:	f000 f990 	bl	8001cc8 <HAL_NVIC_SetPriorityGrouping>
  
  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80019a8:	200f      	movs	r0, #15
 80019aa:	f000 f80f 	bl	80019cc <HAL_InitTick>
 80019ae:	4603      	mov	r3, r0
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d002      	beq.n	80019ba <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80019b4:	2301      	movs	r3, #1
 80019b6:	71fb      	strb	r3, [r7, #7]
 80019b8:	e001      	b.n	80019be <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80019ba:	f7ff fd68 	bl	800148e <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80019be:	79fb      	ldrb	r3, [r7, #7]
}
 80019c0:	4618      	mov	r0, r3
 80019c2:	3708      	adds	r7, #8
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bd80      	pop	{r7, pc}
 80019c8:	58004000 	.word	0x58004000

080019cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b084      	sub	sp, #16
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80019d4:	2300      	movs	r3, #0
 80019d6:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 80019d8:	4b17      	ldr	r3, [pc, #92]	; (8001a38 <HAL_InitTick+0x6c>)
 80019da:	781b      	ldrb	r3, [r3, #0]
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d024      	beq.n	8001a2a <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/ (1000U / (uint32_t)uwTickFreq)) == 0U)
 80019e0:	f002 f816 	bl	8003a10 <HAL_RCC_GetHCLKFreq>
 80019e4:	4602      	mov	r2, r0
 80019e6:	4b14      	ldr	r3, [pc, #80]	; (8001a38 <HAL_InitTick+0x6c>)
 80019e8:	781b      	ldrb	r3, [r3, #0]
 80019ea:	4619      	mov	r1, r3
 80019ec:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019f0:	fbb3 f3f1 	udiv	r3, r3, r1
 80019f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80019f8:	4618      	mov	r0, r3
 80019fa:	f000 f998 	bl	8001d2e <HAL_SYSTICK_Config>
 80019fe:	4603      	mov	r3, r0
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d10f      	bne.n	8001a24 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	2b0f      	cmp	r3, #15
 8001a08:	d809      	bhi.n	8001a1e <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	6879      	ldr	r1, [r7, #4]
 8001a0e:	f04f 30ff 	mov.w	r0, #4294967295
 8001a12:	f000 f964 	bl	8001cde <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001a16:	4a09      	ldr	r2, [pc, #36]	; (8001a3c <HAL_InitTick+0x70>)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	6013      	str	r3, [r2, #0]
 8001a1c:	e007      	b.n	8001a2e <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8001a1e:	2301      	movs	r3, #1
 8001a20:	73fb      	strb	r3, [r7, #15]
 8001a22:	e004      	b.n	8001a2e <HAL_InitTick+0x62>
      }
    }
    else
    {  
      status = HAL_ERROR;
 8001a24:	2301      	movs	r3, #1
 8001a26:	73fb      	strb	r3, [r7, #15]
 8001a28:	e001      	b.n	8001a2e <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001a2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a30:	4618      	mov	r0, r3
 8001a32:	3710      	adds	r7, #16
 8001a34:	46bd      	mov	sp, r7
 8001a36:	bd80      	pop	{r7, pc}
 8001a38:	2000000c 	.word	0x2000000c
 8001a3c:	20000008 	.word	0x20000008

08001a40 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a40:	b480      	push	{r7}
 8001a42:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001a44:	4b06      	ldr	r3, [pc, #24]	; (8001a60 <HAL_IncTick+0x20>)
 8001a46:	781b      	ldrb	r3, [r3, #0]
 8001a48:	461a      	mov	r2, r3
 8001a4a:	4b06      	ldr	r3, [pc, #24]	; (8001a64 <HAL_IncTick+0x24>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	4413      	add	r3, r2
 8001a50:	4a04      	ldr	r2, [pc, #16]	; (8001a64 <HAL_IncTick+0x24>)
 8001a52:	6013      	str	r3, [r2, #0]
}
 8001a54:	bf00      	nop
 8001a56:	46bd      	mov	sp, r7
 8001a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5c:	4770      	bx	lr
 8001a5e:	bf00      	nop
 8001a60:	2000000c 	.word	0x2000000c
 8001a64:	200014d0 	.word	0x200014d0

08001a68 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	af00      	add	r7, sp, #0
  return uwTick;
 8001a6c:	4b03      	ldr	r3, [pc, #12]	; (8001a7c <HAL_GetTick+0x14>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
}
 8001a70:	4618      	mov	r0, r3
 8001a72:	46bd      	mov	sp, r7
 8001a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a78:	4770      	bx	lr
 8001a7a:	bf00      	nop
 8001a7c:	200014d0 	.word	0x200014d0

08001a80 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8001a80:	b480      	push	{r7}
 8001a82:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8001a84:	4b03      	ldr	r3, [pc, #12]	; (8001a94 <HAL_GetTickPrio+0x14>)
 8001a86:	681b      	ldr	r3, [r3, #0]
}
 8001a88:	4618      	mov	r0, r3
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a90:	4770      	bx	lr
 8001a92:	bf00      	nop
 8001a94:	20000008 	.word	0x20000008

08001a98 <HAL_DBGMCU_EnableDBGSleepMode>:
/**
  * @brief  Enable the Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGSleepMode();
 8001a9c:	f7ff ff56 	bl	800194c <LL_DBGMCU_EnableDBGSleepMode>
}
 8001aa0:	bf00      	nop
 8001aa2:	bd80      	pop	{r7, pc}

08001aa4 <HAL_DBGMCU_EnableDBGStopMode>:
/**
  * @brief  Enable the Debug Module during STOP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStopMode(void)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGStopMode();
 8001aa8:	f7ff ff60 	bl	800196c <LL_DBGMCU_EnableDBGStopMode>
}
 8001aac:	bf00      	nop
 8001aae:	bd80      	pop	{r7, pc}

08001ab0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	b085      	sub	sp, #20
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	f003 0307 	and.w	r3, r3, #7
 8001abe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ac0:	4b0c      	ldr	r3, [pc, #48]	; (8001af4 <__NVIC_SetPriorityGrouping+0x44>)
 8001ac2:	68db      	ldr	r3, [r3, #12]
 8001ac4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ac6:	68ba      	ldr	r2, [r7, #8]
 8001ac8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001acc:	4013      	ands	r3, r2
 8001ace:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ad4:	68bb      	ldr	r3, [r7, #8]
 8001ad6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ad8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001adc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ae0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ae2:	4a04      	ldr	r2, [pc, #16]	; (8001af4 <__NVIC_SetPriorityGrouping+0x44>)
 8001ae4:	68bb      	ldr	r3, [r7, #8]
 8001ae6:	60d3      	str	r3, [r2, #12]
}
 8001ae8:	bf00      	nop
 8001aea:	3714      	adds	r7, #20
 8001aec:	46bd      	mov	sp, r7
 8001aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af2:	4770      	bx	lr
 8001af4:	e000ed00 	.word	0xe000ed00

08001af8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001af8:	b480      	push	{r7}
 8001afa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001afc:	4b04      	ldr	r3, [pc, #16]	; (8001b10 <__NVIC_GetPriorityGrouping+0x18>)
 8001afe:	68db      	ldr	r3, [r3, #12]
 8001b00:	0a1b      	lsrs	r3, r3, #8
 8001b02:	f003 0307 	and.w	r3, r3, #7
}
 8001b06:	4618      	mov	r0, r3
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0e:	4770      	bx	lr
 8001b10:	e000ed00 	.word	0xe000ed00

08001b14 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b14:	b480      	push	{r7}
 8001b16:	b083      	sub	sp, #12
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	db0b      	blt.n	8001b3e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b26:	79fb      	ldrb	r3, [r7, #7]
 8001b28:	f003 021f 	and.w	r2, r3, #31
 8001b2c:	4907      	ldr	r1, [pc, #28]	; (8001b4c <__NVIC_EnableIRQ+0x38>)
 8001b2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b32:	095b      	lsrs	r3, r3, #5
 8001b34:	2001      	movs	r0, #1
 8001b36:	fa00 f202 	lsl.w	r2, r0, r2
 8001b3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001b3e:	bf00      	nop
 8001b40:	370c      	adds	r7, #12
 8001b42:	46bd      	mov	sp, r7
 8001b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b48:	4770      	bx	lr
 8001b4a:	bf00      	nop
 8001b4c:	e000e100 	.word	0xe000e100

08001b50 <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8001b50:	b480      	push	{r7}
 8001b52:	b083      	sub	sp, #12
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	4603      	mov	r3, r0
 8001b58:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	db0c      	blt.n	8001b7c <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b62:	79fb      	ldrb	r3, [r7, #7]
 8001b64:	f003 021f 	and.w	r2, r3, #31
 8001b68:	4907      	ldr	r1, [pc, #28]	; (8001b88 <__NVIC_SetPendingIRQ+0x38>)
 8001b6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b6e:	095b      	lsrs	r3, r3, #5
 8001b70:	2001      	movs	r0, #1
 8001b72:	fa00 f202 	lsl.w	r2, r0, r2
 8001b76:	3340      	adds	r3, #64	; 0x40
 8001b78:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001b7c:	bf00      	nop
 8001b7e:	370c      	adds	r7, #12
 8001b80:	46bd      	mov	sp, r7
 8001b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b86:	4770      	bx	lr
 8001b88:	e000e100 	.word	0xe000e100

08001b8c <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	b083      	sub	sp, #12
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	4603      	mov	r3, r0
 8001b94:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	db0c      	blt.n	8001bb8 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b9e:	79fb      	ldrb	r3, [r7, #7]
 8001ba0:	f003 021f 	and.w	r2, r3, #31
 8001ba4:	4907      	ldr	r1, [pc, #28]	; (8001bc4 <__NVIC_ClearPendingIRQ+0x38>)
 8001ba6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001baa:	095b      	lsrs	r3, r3, #5
 8001bac:	2001      	movs	r0, #1
 8001bae:	fa00 f202 	lsl.w	r2, r0, r2
 8001bb2:	3360      	adds	r3, #96	; 0x60
 8001bb4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001bb8:	bf00      	nop
 8001bba:	370c      	adds	r7, #12
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc2:	4770      	bx	lr
 8001bc4:	e000e100 	.word	0xe000e100

08001bc8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	b083      	sub	sp, #12
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	4603      	mov	r3, r0
 8001bd0:	6039      	str	r1, [r7, #0]
 8001bd2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	db0a      	blt.n	8001bf2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	b2da      	uxtb	r2, r3
 8001be0:	490c      	ldr	r1, [pc, #48]	; (8001c14 <__NVIC_SetPriority+0x4c>)
 8001be2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001be6:	0112      	lsls	r2, r2, #4
 8001be8:	b2d2      	uxtb	r2, r2
 8001bea:	440b      	add	r3, r1
 8001bec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001bf0:	e00a      	b.n	8001c08 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	b2da      	uxtb	r2, r3
 8001bf6:	4908      	ldr	r1, [pc, #32]	; (8001c18 <__NVIC_SetPriority+0x50>)
 8001bf8:	79fb      	ldrb	r3, [r7, #7]
 8001bfa:	f003 030f 	and.w	r3, r3, #15
 8001bfe:	3b04      	subs	r3, #4
 8001c00:	0112      	lsls	r2, r2, #4
 8001c02:	b2d2      	uxtb	r2, r2
 8001c04:	440b      	add	r3, r1
 8001c06:	761a      	strb	r2, [r3, #24]
}
 8001c08:	bf00      	nop
 8001c0a:	370c      	adds	r7, #12
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c12:	4770      	bx	lr
 8001c14:	e000e100 	.word	0xe000e100
 8001c18:	e000ed00 	.word	0xe000ed00

08001c1c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	b089      	sub	sp, #36	; 0x24
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	60f8      	str	r0, [r7, #12]
 8001c24:	60b9      	str	r1, [r7, #8]
 8001c26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	f003 0307 	and.w	r3, r3, #7
 8001c2e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c30:	69fb      	ldr	r3, [r7, #28]
 8001c32:	f1c3 0307 	rsb	r3, r3, #7
 8001c36:	2b04      	cmp	r3, #4
 8001c38:	bf28      	it	cs
 8001c3a:	2304      	movcs	r3, #4
 8001c3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c3e:	69fb      	ldr	r3, [r7, #28]
 8001c40:	3304      	adds	r3, #4
 8001c42:	2b06      	cmp	r3, #6
 8001c44:	d902      	bls.n	8001c4c <NVIC_EncodePriority+0x30>
 8001c46:	69fb      	ldr	r3, [r7, #28]
 8001c48:	3b03      	subs	r3, #3
 8001c4a:	e000      	b.n	8001c4e <NVIC_EncodePriority+0x32>
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c50:	f04f 32ff 	mov.w	r2, #4294967295
 8001c54:	69bb      	ldr	r3, [r7, #24]
 8001c56:	fa02 f303 	lsl.w	r3, r2, r3
 8001c5a:	43da      	mvns	r2, r3
 8001c5c:	68bb      	ldr	r3, [r7, #8]
 8001c5e:	401a      	ands	r2, r3
 8001c60:	697b      	ldr	r3, [r7, #20]
 8001c62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c64:	f04f 31ff 	mov.w	r1, #4294967295
 8001c68:	697b      	ldr	r3, [r7, #20]
 8001c6a:	fa01 f303 	lsl.w	r3, r1, r3
 8001c6e:	43d9      	mvns	r1, r3
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c74:	4313      	orrs	r3, r2
         );
}
 8001c76:	4618      	mov	r0, r3
 8001c78:	3724      	adds	r7, #36	; 0x24
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c80:	4770      	bx	lr
	...

08001c84 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b082      	sub	sp, #8
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	3b01      	subs	r3, #1
 8001c90:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c94:	d301      	bcc.n	8001c9a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c96:	2301      	movs	r3, #1
 8001c98:	e00f      	b.n	8001cba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c9a:	4a0a      	ldr	r2, [pc, #40]	; (8001cc4 <SysTick_Config+0x40>)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	3b01      	subs	r3, #1
 8001ca0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ca2:	210f      	movs	r1, #15
 8001ca4:	f04f 30ff 	mov.w	r0, #4294967295
 8001ca8:	f7ff ff8e 	bl	8001bc8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001cac:	4b05      	ldr	r3, [pc, #20]	; (8001cc4 <SysTick_Config+0x40>)
 8001cae:	2200      	movs	r2, #0
 8001cb0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001cb2:	4b04      	ldr	r3, [pc, #16]	; (8001cc4 <SysTick_Config+0x40>)
 8001cb4:	2207      	movs	r2, #7
 8001cb6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001cb8:	2300      	movs	r3, #0
}
 8001cba:	4618      	mov	r0, r3
 8001cbc:	3708      	adds	r7, #8
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd80      	pop	{r7, pc}
 8001cc2:	bf00      	nop
 8001cc4:	e000e010 	.word	0xe000e010

08001cc8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b082      	sub	sp, #8
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001cd0:	6878      	ldr	r0, [r7, #4]
 8001cd2:	f7ff feed 	bl	8001ab0 <__NVIC_SetPriorityGrouping>
}
 8001cd6:	bf00      	nop
 8001cd8:	3708      	adds	r7, #8
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bd80      	pop	{r7, pc}

08001cde <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cde:	b580      	push	{r7, lr}
 8001ce0:	b086      	sub	sp, #24
 8001ce2:	af00      	add	r7, sp, #0
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	60b9      	str	r1, [r7, #8]
 8001ce8:	607a      	str	r2, [r7, #4]
 8001cea:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001cec:	f7ff ff04 	bl	8001af8 <__NVIC_GetPriorityGrouping>
 8001cf0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001cf2:	687a      	ldr	r2, [r7, #4]
 8001cf4:	68b9      	ldr	r1, [r7, #8]
 8001cf6:	6978      	ldr	r0, [r7, #20]
 8001cf8:	f7ff ff90 	bl	8001c1c <NVIC_EncodePriority>
 8001cfc:	4602      	mov	r2, r0
 8001cfe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d02:	4611      	mov	r1, r2
 8001d04:	4618      	mov	r0, r3
 8001d06:	f7ff ff5f 	bl	8001bc8 <__NVIC_SetPriority>
}
 8001d0a:	bf00      	nop
 8001d0c:	3718      	adds	r7, #24
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bd80      	pop	{r7, pc}

08001d12 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d12:	b580      	push	{r7, lr}
 8001d14:	b082      	sub	sp, #8
 8001d16:	af00      	add	r7, sp, #0
 8001d18:	4603      	mov	r3, r0
 8001d1a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d20:	4618      	mov	r0, r3
 8001d22:	f7ff fef7 	bl	8001b14 <__NVIC_EnableIRQ>
}
 8001d26:	bf00      	nop
 8001d28:	3708      	adds	r7, #8
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bd80      	pop	{r7, pc}

08001d2e <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d2e:	b580      	push	{r7, lr}
 8001d30:	b082      	sub	sp, #8
 8001d32:	af00      	add	r7, sp, #0
 8001d34:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001d36:	6878      	ldr	r0, [r7, #4]
 8001d38:	f7ff ffa4 	bl	8001c84 <SysTick_Config>
 8001d3c:	4603      	mov	r3, r0
}
 8001d3e:	4618      	mov	r0, r3
 8001d40:	3708      	adds	r7, #8
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}

08001d46 <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8001d46:	b580      	push	{r7, lr}
 8001d48:	b082      	sub	sp, #8
 8001d4a:	af00      	add	r7, sp, #0
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 8001d50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d54:	4618      	mov	r0, r3
 8001d56:	f7ff fefb 	bl	8001b50 <__NVIC_SetPendingIRQ>
}
 8001d5a:	bf00      	nop
 8001d5c:	3708      	adds	r7, #8
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bd80      	pop	{r7, pc}

08001d62 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8001d62:	b580      	push	{r7, lr}
 8001d64:	b082      	sub	sp, #8
 8001d66:	af00      	add	r7, sp, #0
 8001d68:	4603      	mov	r3, r0
 8001d6a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8001d6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d70:	4618      	mov	r0, r3
 8001d72:	f7ff ff0b 	bl	8001b8c <__NVIC_ClearPendingIRQ>
}
 8001d76:	bf00      	nop
 8001d78:	3708      	adds	r7, #8
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}
	...

08001d80 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b084      	sub	sp, #16
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d101      	bne.n	8001d92 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001d8e:	2301      	movs	r3, #1
 8001d90:	e08e      	b.n	8001eb0 <HAL_DMA_Init+0x130>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

#if defined(DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	461a      	mov	r2, r3
 8001d98:	4b47      	ldr	r3, [pc, #284]	; (8001eb8 <HAL_DMA_Init+0x138>)
 8001d9a:	429a      	cmp	r2, r3
 8001d9c:	d80f      	bhi.n	8001dbe <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	461a      	mov	r2, r3
 8001da4:	4b45      	ldr	r3, [pc, #276]	; (8001ebc <HAL_DMA_Init+0x13c>)
 8001da6:	4413      	add	r3, r2
 8001da8:	4a45      	ldr	r2, [pc, #276]	; (8001ec0 <HAL_DMA_Init+0x140>)
 8001daa:	fba2 2303 	umull	r2, r3, r2, r3
 8001dae:	091b      	lsrs	r3, r3, #4
 8001db0:	009a      	lsls	r2, r3, #2
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	4a42      	ldr	r2, [pc, #264]	; (8001ec4 <HAL_DMA_Init+0x144>)
 8001dba:	641a      	str	r2, [r3, #64]	; 0x40
 8001dbc:	e00e      	b.n	8001ddc <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	461a      	mov	r2, r3
 8001dc4:	4b40      	ldr	r3, [pc, #256]	; (8001ec8 <HAL_DMA_Init+0x148>)
 8001dc6:	4413      	add	r3, r2
 8001dc8:	4a3d      	ldr	r2, [pc, #244]	; (8001ec0 <HAL_DMA_Init+0x140>)
 8001dca:	fba2 2303 	umull	r2, r3, r2, r3
 8001dce:	091b      	lsrs	r3, r3, #4
 8001dd0:	009a      	lsls	r2, r3, #2
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	4a3c      	ldr	r2, [pc, #240]	; (8001ecc <HAL_DMA_Init+0x14c>)
 8001dda:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	2202      	movs	r2, #2
 8001de0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8001df2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001df6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001e00:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	691b      	ldr	r3, [r3, #16]
 8001e06:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e0c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	699b      	ldr	r3, [r3, #24]
 8001e12:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e18:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	6a1b      	ldr	r3, [r3, #32]
 8001e1e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001e20:	68fa      	ldr	r2, [r7, #12]
 8001e22:	4313      	orrs	r3, r2
 8001e24:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	68fa      	ldr	r2, [r7, #12]
 8001e2c:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001e2e:	6878      	ldr	r0, [r7, #4]
 8001e30:	f000 fa74 	bl	800231c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	689b      	ldr	r3, [r3, #8]
 8001e38:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001e3c:	d102      	bne.n	8001e44 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	2200      	movs	r2, #0
 8001e42:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	685a      	ldr	r2, [r3, #4]
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e4c:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8001e50:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e56:	687a      	ldr	r2, [r7, #4]
 8001e58:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001e5a:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	685b      	ldr	r3, [r3, #4]
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d010      	beq.n	8001e86 <HAL_DMA_Init+0x106>
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	685b      	ldr	r3, [r3, #4]
 8001e68:	2b04      	cmp	r3, #4
 8001e6a:	d80c      	bhi.n	8001e86 <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001e6c:	6878      	ldr	r0, [r7, #4]
 8001e6e:	f000 fa93 	bl	8002398 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e76:	2200      	movs	r2, #0
 8001e78:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e7e:	687a      	ldr	r2, [r7, #4]
 8001e80:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001e82:	605a      	str	r2, [r3, #4]
 8001e84:	e008      	b.n	8001e98 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	2200      	movs	r2, #0
 8001e8a:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	2200      	movs	r2, #0
 8001e90:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	2200      	movs	r2, #0
 8001e96:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	2201      	movs	r2, #1
 8001ea2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8001eae:	2300      	movs	r3, #0
}
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	3710      	adds	r7, #16
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	bd80      	pop	{r7, pc}
 8001eb8:	40020407 	.word	0x40020407
 8001ebc:	bffdfff8 	.word	0xbffdfff8
 8001ec0:	cccccccd 	.word	0xcccccccd
 8001ec4:	40020000 	.word	0x40020000
 8001ec8:	bffdfbf8 	.word	0xbffdfbf8
 8001ecc:	40020400 	.word	0x40020400

08001ed0 <HAL_DMA_Start_IT>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b086      	sub	sp, #24
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	60f8      	str	r0, [r7, #12]
 8001ed8:	60b9      	str	r1, [r7, #8]
 8001eda:	607a      	str	r2, [r7, #4]
 8001edc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001ee8:	2b01      	cmp	r3, #1
 8001eea:	d101      	bne.n	8001ef0 <HAL_DMA_Start_IT+0x20>
 8001eec:	2302      	movs	r3, #2
 8001eee:	e066      	b.n	8001fbe <HAL_DMA_Start_IT+0xee>
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	2201      	movs	r2, #1
 8001ef4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001efe:	b2db      	uxtb	r3, r3
 8001f00:	2b01      	cmp	r3, #1
 8001f02:	d155      	bne.n	8001fb0 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	2202      	movs	r2, #2
 8001f08:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	2200      	movs	r2, #0
 8001f10:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	681a      	ldr	r2, [r3, #0]
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f022 0201 	bic.w	r2, r2, #1
 8001f20:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	687a      	ldr	r2, [r7, #4]
 8001f26:	68b9      	ldr	r1, [r7, #8]
 8001f28:	68f8      	ldr	r0, [r7, #12]
 8001f2a:	f000 f9b9 	bl	80022a0 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d008      	beq.n	8001f48 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	681a      	ldr	r2, [r3, #0]
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f042 020e 	orr.w	r2, r2, #14
 8001f44:	601a      	str	r2, [r3, #0]
 8001f46:	e00f      	b.n	8001f68 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	681a      	ldr	r2, [r3, #0]
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f022 0204 	bic.w	r2, r2, #4
 8001f56:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	681a      	ldr	r2, [r3, #0]
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f042 020a 	orr.w	r2, r2, #10
 8001f66:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d007      	beq.n	8001f86 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f7a:	681a      	ldr	r2, [r3, #0]
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f80:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001f84:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d007      	beq.n	8001f9e <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f92:	681a      	ldr	r2, [r3, #0]
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f98:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001f9c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	681a      	ldr	r2, [r3, #0]
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f042 0201 	orr.w	r2, r2, #1
 8001fac:	601a      	str	r2, [r3, #0]
 8001fae:	e005      	b.n	8001fbc <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8001fb8:	2302      	movs	r3, #2
 8001fba:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8001fbc:	7dfb      	ldrb	r3, [r7, #23]
}
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	3718      	adds	r7, #24
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	bd80      	pop	{r7, pc}

08001fc6 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001fc6:	b480      	push	{r7}
 8001fc8:	b083      	sub	sp, #12
 8001fca:	af00      	add	r7, sp, #0
 8001fcc:	6078      	str	r0, [r7, #4]

  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d101      	bne.n	8001fd8 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8001fd4:	2301      	movs	r3, #1
 8001fd6:	e04f      	b.n	8002078 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001fde:	b2db      	uxtb	r3, r3
 8001fe0:	2b02      	cmp	r3, #2
 8001fe2:	d008      	beq.n	8001ff6 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	2204      	movs	r2, #4
 8001fe8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	2200      	movs	r2, #0
 8001fee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	e040      	b.n	8002078 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	681a      	ldr	r2, [r3, #0]
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f022 020e 	bic.w	r2, r2, #14
 8002004:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800200a:	681a      	ldr	r2, [r3, #0]
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002010:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002014:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	681a      	ldr	r2, [r3, #0]
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f022 0201 	bic.w	r2, r2, #1
 8002024:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800202a:	f003 021c 	and.w	r2, r3, #28
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002032:	2101      	movs	r1, #1
 8002034:	fa01 f202 	lsl.w	r2, r1, r2
 8002038:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800203e:	687a      	ldr	r2, [r7, #4]
 8002040:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002042:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002048:	2b00      	cmp	r3, #0
 800204a:	d00c      	beq.n	8002066 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002050:	681a      	ldr	r2, [r3, #0]
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002056:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800205a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002060:	687a      	ldr	r2, [r7, #4]
 8002062:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002064:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2201      	movs	r2, #1
 800206a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	2200      	movs	r2, #0
 8002072:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 8002076:	2300      	movs	r3, #0
}
 8002078:	4618      	mov	r0, r3
 800207a:	370c      	adds	r7, #12
 800207c:	46bd      	mov	sp, r7
 800207e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002082:	4770      	bx	lr

08002084 <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b084      	sub	sp, #16
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800208c:	2300      	movs	r3, #0
 800208e:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002096:	b2db      	uxtb	r3, r3
 8002098:	2b02      	cmp	r3, #2
 800209a:	d005      	beq.n	80020a8 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	2204      	movs	r2, #4
 80020a0:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80020a2:	2301      	movs	r3, #1
 80020a4:	73fb      	strb	r3, [r7, #15]
 80020a6:	e047      	b.n	8002138 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	681a      	ldr	r2, [r3, #0]
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f022 020e 	bic.w	r2, r2, #14
 80020b6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	681a      	ldr	r2, [r3, #0]
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f022 0201 	bic.w	r2, r2, #1
 80020c6:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020cc:	681a      	ldr	r2, [r3, #0]
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020d2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80020d6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020dc:	f003 021c 	and.w	r2, r3, #28
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020e4:	2101      	movs	r1, #1
 80020e6:	fa01 f202 	lsl.w	r2, r1, r2
 80020ea:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020f0:	687a      	ldr	r2, [r7, #4]
 80020f2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80020f4:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d00c      	beq.n	8002118 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002102:	681a      	ldr	r2, [r3, #0]
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002108:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800210c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002112:	687a      	ldr	r2, [r7, #4]
 8002114:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002116:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2201      	movs	r2, #1
 800211c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	2200      	movs	r2, #0
 8002124:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800212c:	2b00      	cmp	r3, #0
 800212e:	d003      	beq.n	8002138 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002134:	6878      	ldr	r0, [r7, #4]
 8002136:	4798      	blx	r3
    }
  }
  return status;
 8002138:	7bfb      	ldrb	r3, [r7, #15]
}
 800213a:	4618      	mov	r0, r3
 800213c:	3710      	adds	r7, #16
 800213e:	46bd      	mov	sp, r7
 8002140:	bd80      	pop	{r7, pc}

08002142 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002142:	b580      	push	{r7, lr}
 8002144:	b084      	sub	sp, #16
 8002146:	af00      	add	r7, sp, #0
 8002148:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800215e:	f003 031c 	and.w	r3, r3, #28
 8002162:	2204      	movs	r2, #4
 8002164:	409a      	lsls	r2, r3
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	4013      	ands	r3, r2
 800216a:	2b00      	cmp	r3, #0
 800216c:	d026      	beq.n	80021bc <HAL_DMA_IRQHandler+0x7a>
 800216e:	68bb      	ldr	r3, [r7, #8]
 8002170:	f003 0304 	and.w	r3, r3, #4
 8002174:	2b00      	cmp	r3, #0
 8002176:	d021      	beq.n	80021bc <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f003 0320 	and.w	r3, r3, #32
 8002182:	2b00      	cmp	r3, #0
 8002184:	d107      	bne.n	8002196 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	681a      	ldr	r2, [r3, #0]
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f022 0204 	bic.w	r2, r2, #4
 8002194:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800219a:	f003 021c 	and.w	r2, r3, #28
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021a2:	2104      	movs	r1, #4
 80021a4:	fa01 f202 	lsl.w	r2, r1, r2
 80021a8:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d071      	beq.n	8002296 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021b6:	6878      	ldr	r0, [r7, #4]
 80021b8:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80021ba:	e06c      	b.n	8002296 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021c0:	f003 031c 	and.w	r3, r3, #28
 80021c4:	2202      	movs	r2, #2
 80021c6:	409a      	lsls	r2, r3
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	4013      	ands	r3, r2
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d02e      	beq.n	800222e <HAL_DMA_IRQHandler+0xec>
 80021d0:	68bb      	ldr	r3, [r7, #8]
 80021d2:	f003 0302 	and.w	r3, r3, #2
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d029      	beq.n	800222e <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f003 0320 	and.w	r3, r3, #32
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d10b      	bne.n	8002200 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	681a      	ldr	r2, [r3, #0]
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f022 020a 	bic.w	r2, r2, #10
 80021f6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2201      	movs	r2, #1
 80021fc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002204:	f003 021c 	and.w	r2, r3, #28
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800220c:	2102      	movs	r1, #2
 800220e:	fa01 f202 	lsl.w	r2, r1, r2
 8002212:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	2200      	movs	r2, #0
 8002218:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002220:	2b00      	cmp	r3, #0
 8002222:	d038      	beq.n	8002296 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002228:	6878      	ldr	r0, [r7, #4]
 800222a:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800222c:	e033      	b.n	8002296 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))!= 0U) && ((source_it & DMA_IT_TE) != 0U))
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002232:	f003 031c 	and.w	r3, r3, #28
 8002236:	2208      	movs	r2, #8
 8002238:	409a      	lsls	r2, r3
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	4013      	ands	r3, r2
 800223e:	2b00      	cmp	r3, #0
 8002240:	d02a      	beq.n	8002298 <HAL_DMA_IRQHandler+0x156>
 8002242:	68bb      	ldr	r3, [r7, #8]
 8002244:	f003 0308 	and.w	r3, r3, #8
 8002248:	2b00      	cmp	r3, #0
 800224a:	d025      	beq.n	8002298 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	681a      	ldr	r2, [r3, #0]
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f022 020e 	bic.w	r2, r2, #14
 800225a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002260:	f003 021c 	and.w	r2, r3, #28
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002268:	2101      	movs	r1, #1
 800226a:	fa01 f202 	lsl.w	r2, r1, r2
 800226e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2201      	movs	r2, #1
 8002274:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	2201      	movs	r2, #1
 800227a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	2200      	movs	r2, #0
 8002282:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800228a:	2b00      	cmp	r3, #0
 800228c:	d004      	beq.n	8002298 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002292:	6878      	ldr	r0, [r7, #4]
 8002294:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002296:	bf00      	nop
 8002298:	bf00      	nop
}
 800229a:	3710      	adds	r7, #16
 800229c:	46bd      	mov	sp, r7
 800229e:	bd80      	pop	{r7, pc}

080022a0 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80022a0:	b480      	push	{r7}
 80022a2:	b085      	sub	sp, #20
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	60f8      	str	r0, [r7, #12]
 80022a8:	60b9      	str	r1, [r7, #8]
 80022aa:	607a      	str	r2, [r7, #4]
 80022ac:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022b2:	68fa      	ldr	r2, [r7, #12]
 80022b4:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80022b6:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d004      	beq.n	80022ca <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022c4:	68fa      	ldr	r2, [r7, #12]
 80022c6:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80022c8:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022ce:	f003 021c 	and.w	r2, r3, #28
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022d6:	2101      	movs	r1, #1
 80022d8:	fa01 f202 	lsl.w	r2, r1, r2
 80022dc:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	683a      	ldr	r2, [r7, #0]
 80022e4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	689b      	ldr	r3, [r3, #8]
 80022ea:	2b10      	cmp	r3, #16
 80022ec:	d108      	bne.n	8002300 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	687a      	ldr	r2, [r7, #4]
 80022f4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	68ba      	ldr	r2, [r7, #8]
 80022fc:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80022fe:	e007      	b.n	8002310 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	68ba      	ldr	r2, [r7, #8]
 8002306:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	687a      	ldr	r2, [r7, #4]
 800230e:	60da      	str	r2, [r3, #12]
}
 8002310:	bf00      	nop
 8002312:	3714      	adds	r7, #20
 8002314:	46bd      	mov	sp, r7
 8002316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231a:	4770      	bx	lr

0800231c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800231c:	b480      	push	{r7}
 800231e:	b085      	sub	sp, #20
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
#if defined(DMA2)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	461a      	mov	r2, r3
 800232a:	4b17      	ldr	r3, [pc, #92]	; (8002388 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800232c:	429a      	cmp	r2, r3
 800232e:	d80a      	bhi.n	8002346 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002334:	089b      	lsrs	r3, r3, #2
 8002336:	009b      	lsls	r3, r3, #2
 8002338:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800233c:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8002340:	687a      	ldr	r2, [r7, #4]
 8002342:	6493      	str	r3, [r2, #72]	; 0x48
 8002344:	e007      	b.n	8002356 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800234a:	089b      	lsrs	r3, r3, #2
 800234c:	009a      	lsls	r2, r3, #2
 800234e:	4b0f      	ldr	r3, [pc, #60]	; (800238c <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8002350:	4413      	add	r3, r2
 8002352:	687a      	ldr	r2, [r7, #4]
 8002354:	6493      	str	r3, [r2, #72]	; 0x48
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
#endif
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	b2db      	uxtb	r3, r3
 800235c:	3b08      	subs	r3, #8
 800235e:	4a0c      	ldr	r2, [pc, #48]	; (8002390 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8002360:	fba2 2303 	umull	r2, r3, r2, r3
 8002364:	091b      	lsrs	r3, r3, #4
 8002366:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	4a0a      	ldr	r2, [pc, #40]	; (8002394 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800236c:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	f003 031f 	and.w	r3, r3, #31
 8002374:	2201      	movs	r2, #1
 8002376:	409a      	lsls	r2, r3
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	651a      	str	r2, [r3, #80]	; 0x50
}
 800237c:	bf00      	nop
 800237e:	3714      	adds	r7, #20
 8002380:	46bd      	mov	sp, r7
 8002382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002386:	4770      	bx	lr
 8002388:	40020407 	.word	0x40020407
 800238c:	4002081c 	.word	0x4002081c
 8002390:	cccccccd 	.word	0xcccccccd
 8002394:	40020880 	.word	0x40020880

08002398 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002398:	b480      	push	{r7}
 800239a:	b085      	sub	sp, #20
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	685b      	ldr	r3, [r3, #4]
 80023a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80023a8:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80023aa:	68fa      	ldr	r2, [r7, #12]
 80023ac:	4b0b      	ldr	r3, [pc, #44]	; (80023dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80023ae:	4413      	add	r3, r2
 80023b0:	009b      	lsls	r3, r3, #2
 80023b2:	461a      	mov	r2, r3
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	4a09      	ldr	r2, [pc, #36]	; (80023e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x48>)
 80023bc:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	3b01      	subs	r3, #1
 80023c2:	f003 0303 	and.w	r3, r3, #3
 80023c6:	2201      	movs	r2, #1
 80023c8:	409a      	lsls	r2, r3
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80023ce:	bf00      	nop
 80023d0:	3714      	adds	r7, #20
 80023d2:	46bd      	mov	sp, r7
 80023d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d8:	4770      	bx	lr
 80023da:	bf00      	nop
 80023dc:	1000823f 	.word	0x1000823f
 80023e0:	40020940 	.word	0x40020940

080023e4 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80023e4:	b480      	push	{r7}
 80023e6:	b087      	sub	sp, #28
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
 80023ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80023ee:	2300      	movs	r3, #0
 80023f0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80023f2:	e14c      	b.n	800268e <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	681a      	ldr	r2, [r3, #0]
 80023f8:	2101      	movs	r1, #1
 80023fa:	697b      	ldr	r3, [r7, #20]
 80023fc:	fa01 f303 	lsl.w	r3, r1, r3
 8002400:	4013      	ands	r3, r2
 8002402:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	2b00      	cmp	r3, #0
 8002408:	f000 813e 	beq.w	8002688 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	685b      	ldr	r3, [r3, #4]
 8002410:	f003 0303 	and.w	r3, r3, #3
 8002414:	2b01      	cmp	r3, #1
 8002416:	d005      	beq.n	8002424 <HAL_GPIO_Init+0x40>
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	685b      	ldr	r3, [r3, #4]
 800241c:	f003 0303 	and.w	r3, r3, #3
 8002420:	2b02      	cmp	r3, #2
 8002422:	d130      	bne.n	8002486 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	689b      	ldr	r3, [r3, #8]
 8002428:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800242a:	697b      	ldr	r3, [r7, #20]
 800242c:	005b      	lsls	r3, r3, #1
 800242e:	2203      	movs	r2, #3
 8002430:	fa02 f303 	lsl.w	r3, r2, r3
 8002434:	43db      	mvns	r3, r3
 8002436:	693a      	ldr	r2, [r7, #16]
 8002438:	4013      	ands	r3, r2
 800243a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	68da      	ldr	r2, [r3, #12]
 8002440:	697b      	ldr	r3, [r7, #20]
 8002442:	005b      	lsls	r3, r3, #1
 8002444:	fa02 f303 	lsl.w	r3, r2, r3
 8002448:	693a      	ldr	r2, [r7, #16]
 800244a:	4313      	orrs	r3, r2
 800244c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	693a      	ldr	r2, [r7, #16]
 8002452:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800245a:	2201      	movs	r2, #1
 800245c:	697b      	ldr	r3, [r7, #20]
 800245e:	fa02 f303 	lsl.w	r3, r2, r3
 8002462:	43db      	mvns	r3, r3
 8002464:	693a      	ldr	r2, [r7, #16]
 8002466:	4013      	ands	r3, r2
 8002468:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	685b      	ldr	r3, [r3, #4]
 800246e:	091b      	lsrs	r3, r3, #4
 8002470:	f003 0201 	and.w	r2, r3, #1
 8002474:	697b      	ldr	r3, [r7, #20]
 8002476:	fa02 f303 	lsl.w	r3, r2, r3
 800247a:	693a      	ldr	r2, [r7, #16]
 800247c:	4313      	orrs	r3, r2
 800247e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	693a      	ldr	r2, [r7, #16]
 8002484:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	685b      	ldr	r3, [r3, #4]
 800248a:	f003 0303 	and.w	r3, r3, #3
 800248e:	2b03      	cmp	r3, #3
 8002490:	d017      	beq.n	80024c2 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	68db      	ldr	r3, [r3, #12]
 8002496:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002498:	697b      	ldr	r3, [r7, #20]
 800249a:	005b      	lsls	r3, r3, #1
 800249c:	2203      	movs	r2, #3
 800249e:	fa02 f303 	lsl.w	r3, r2, r3
 80024a2:	43db      	mvns	r3, r3
 80024a4:	693a      	ldr	r2, [r7, #16]
 80024a6:	4013      	ands	r3, r2
 80024a8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	689a      	ldr	r2, [r3, #8]
 80024ae:	697b      	ldr	r3, [r7, #20]
 80024b0:	005b      	lsls	r3, r3, #1
 80024b2:	fa02 f303 	lsl.w	r3, r2, r3
 80024b6:	693a      	ldr	r2, [r7, #16]
 80024b8:	4313      	orrs	r3, r2
 80024ba:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	693a      	ldr	r2, [r7, #16]
 80024c0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	685b      	ldr	r3, [r3, #4]
 80024c6:	f003 0303 	and.w	r3, r3, #3
 80024ca:	2b02      	cmp	r3, #2
 80024cc:	d123      	bne.n	8002516 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80024ce:	697b      	ldr	r3, [r7, #20]
 80024d0:	08da      	lsrs	r2, r3, #3
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	3208      	adds	r2, #8
 80024d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024da:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80024dc:	697b      	ldr	r3, [r7, #20]
 80024de:	f003 0307 	and.w	r3, r3, #7
 80024e2:	009b      	lsls	r3, r3, #2
 80024e4:	220f      	movs	r2, #15
 80024e6:	fa02 f303 	lsl.w	r3, r2, r3
 80024ea:	43db      	mvns	r3, r3
 80024ec:	693a      	ldr	r2, [r7, #16]
 80024ee:	4013      	ands	r3, r2
 80024f0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	691a      	ldr	r2, [r3, #16]
 80024f6:	697b      	ldr	r3, [r7, #20]
 80024f8:	f003 0307 	and.w	r3, r3, #7
 80024fc:	009b      	lsls	r3, r3, #2
 80024fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002502:	693a      	ldr	r2, [r7, #16]
 8002504:	4313      	orrs	r3, r2
 8002506:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002508:	697b      	ldr	r3, [r7, #20]
 800250a:	08da      	lsrs	r2, r3, #3
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	3208      	adds	r2, #8
 8002510:	6939      	ldr	r1, [r7, #16]
 8002512:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800251c:	697b      	ldr	r3, [r7, #20]
 800251e:	005b      	lsls	r3, r3, #1
 8002520:	2203      	movs	r2, #3
 8002522:	fa02 f303 	lsl.w	r3, r2, r3
 8002526:	43db      	mvns	r3, r3
 8002528:	693a      	ldr	r2, [r7, #16]
 800252a:	4013      	ands	r3, r2
 800252c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	685b      	ldr	r3, [r3, #4]
 8002532:	f003 0203 	and.w	r2, r3, #3
 8002536:	697b      	ldr	r3, [r7, #20]
 8002538:	005b      	lsls	r3, r3, #1
 800253a:	fa02 f303 	lsl.w	r3, r2, r3
 800253e:	693a      	ldr	r2, [r7, #16]
 8002540:	4313      	orrs	r3, r2
 8002542:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	693a      	ldr	r2, [r7, #16]
 8002548:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	685b      	ldr	r3, [r3, #4]
 800254e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002552:	2b00      	cmp	r3, #0
 8002554:	f000 8098 	beq.w	8002688 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8002558:	4a54      	ldr	r2, [pc, #336]	; (80026ac <HAL_GPIO_Init+0x2c8>)
 800255a:	697b      	ldr	r3, [r7, #20]
 800255c:	089b      	lsrs	r3, r3, #2
 800255e:	3302      	adds	r3, #2
 8002560:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002564:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002566:	697b      	ldr	r3, [r7, #20]
 8002568:	f003 0303 	and.w	r3, r3, #3
 800256c:	009b      	lsls	r3, r3, #2
 800256e:	220f      	movs	r2, #15
 8002570:	fa02 f303 	lsl.w	r3, r2, r3
 8002574:	43db      	mvns	r3, r3
 8002576:	693a      	ldr	r2, [r7, #16]
 8002578:	4013      	ands	r3, r2
 800257a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002582:	d019      	beq.n	80025b8 <HAL_GPIO_Init+0x1d4>
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	4a4a      	ldr	r2, [pc, #296]	; (80026b0 <HAL_GPIO_Init+0x2cc>)
 8002588:	4293      	cmp	r3, r2
 800258a:	d013      	beq.n	80025b4 <HAL_GPIO_Init+0x1d0>
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	4a49      	ldr	r2, [pc, #292]	; (80026b4 <HAL_GPIO_Init+0x2d0>)
 8002590:	4293      	cmp	r3, r2
 8002592:	d00d      	beq.n	80025b0 <HAL_GPIO_Init+0x1cc>
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	4a48      	ldr	r2, [pc, #288]	; (80026b8 <HAL_GPIO_Init+0x2d4>)
 8002598:	4293      	cmp	r3, r2
 800259a:	d007      	beq.n	80025ac <HAL_GPIO_Init+0x1c8>
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	4a47      	ldr	r2, [pc, #284]	; (80026bc <HAL_GPIO_Init+0x2d8>)
 80025a0:	4293      	cmp	r3, r2
 80025a2:	d101      	bne.n	80025a8 <HAL_GPIO_Init+0x1c4>
 80025a4:	2304      	movs	r3, #4
 80025a6:	e008      	b.n	80025ba <HAL_GPIO_Init+0x1d6>
 80025a8:	2307      	movs	r3, #7
 80025aa:	e006      	b.n	80025ba <HAL_GPIO_Init+0x1d6>
 80025ac:	2303      	movs	r3, #3
 80025ae:	e004      	b.n	80025ba <HAL_GPIO_Init+0x1d6>
 80025b0:	2302      	movs	r3, #2
 80025b2:	e002      	b.n	80025ba <HAL_GPIO_Init+0x1d6>
 80025b4:	2301      	movs	r3, #1
 80025b6:	e000      	b.n	80025ba <HAL_GPIO_Init+0x1d6>
 80025b8:	2300      	movs	r3, #0
 80025ba:	697a      	ldr	r2, [r7, #20]
 80025bc:	f002 0203 	and.w	r2, r2, #3
 80025c0:	0092      	lsls	r2, r2, #2
 80025c2:	4093      	lsls	r3, r2
 80025c4:	693a      	ldr	r2, [r7, #16]
 80025c6:	4313      	orrs	r3, r2
 80025c8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80025ca:	4938      	ldr	r1, [pc, #224]	; (80026ac <HAL_GPIO_Init+0x2c8>)
 80025cc:	697b      	ldr	r3, [r7, #20]
 80025ce:	089b      	lsrs	r3, r3, #2
 80025d0:	3302      	adds	r3, #2
 80025d2:	693a      	ldr	r2, [r7, #16]
 80025d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80025d8:	4b39      	ldr	r3, [pc, #228]	; (80026c0 <HAL_GPIO_Init+0x2dc>)
 80025da:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80025de:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	43db      	mvns	r3, r3
 80025e4:	693a      	ldr	r2, [r7, #16]
 80025e6:	4013      	ands	r3, r2
 80025e8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	685b      	ldr	r3, [r3, #4]
 80025ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d003      	beq.n	80025fe <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 80025f6:	693a      	ldr	r2, [r7, #16]
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	4313      	orrs	r3, r2
 80025fc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80025fe:	4a30      	ldr	r2, [pc, #192]	; (80026c0 <HAL_GPIO_Init+0x2dc>)
 8002600:	693b      	ldr	r3, [r7, #16]
 8002602:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8002606:	4b2e      	ldr	r3, [pc, #184]	; (80026c0 <HAL_GPIO_Init+0x2dc>)
 8002608:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800260c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	43db      	mvns	r3, r3
 8002612:	693a      	ldr	r2, [r7, #16]
 8002614:	4013      	ands	r3, r2
 8002616:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	685b      	ldr	r3, [r3, #4]
 800261c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002620:	2b00      	cmp	r3, #0
 8002622:	d003      	beq.n	800262c <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8002624:	693a      	ldr	r2, [r7, #16]
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	4313      	orrs	r3, r2
 800262a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800262c:	4a24      	ldr	r2, [pc, #144]	; (80026c0 <HAL_GPIO_Init+0x2dc>)
 800262e:	693b      	ldr	r3, [r7, #16]
 8002630:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002634:	4b22      	ldr	r3, [pc, #136]	; (80026c0 <HAL_GPIO_Init+0x2dc>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	43db      	mvns	r3, r3
 800263e:	693a      	ldr	r2, [r7, #16]
 8002640:	4013      	ands	r3, r2
 8002642:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	685b      	ldr	r3, [r3, #4]
 8002648:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800264c:	2b00      	cmp	r3, #0
 800264e:	d003      	beq.n	8002658 <HAL_GPIO_Init+0x274>
        {
          temp |= iocurrent;
 8002650:	693a      	ldr	r2, [r7, #16]
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	4313      	orrs	r3, r2
 8002656:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002658:	4a19      	ldr	r2, [pc, #100]	; (80026c0 <HAL_GPIO_Init+0x2dc>)
 800265a:	693b      	ldr	r3, [r7, #16]
 800265c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800265e:	4b18      	ldr	r3, [pc, #96]	; (80026c0 <HAL_GPIO_Init+0x2dc>)
 8002660:	685b      	ldr	r3, [r3, #4]
 8002662:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	43db      	mvns	r3, r3
 8002668:	693a      	ldr	r2, [r7, #16]
 800266a:	4013      	ands	r3, r2
 800266c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	685b      	ldr	r3, [r3, #4]
 8002672:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002676:	2b00      	cmp	r3, #0
 8002678:	d003      	beq.n	8002682 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 800267a:	693a      	ldr	r2, [r7, #16]
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	4313      	orrs	r3, r2
 8002680:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002682:	4a0f      	ldr	r2, [pc, #60]	; (80026c0 <HAL_GPIO_Init+0x2dc>)
 8002684:	693b      	ldr	r3, [r7, #16]
 8002686:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8002688:	697b      	ldr	r3, [r7, #20]
 800268a:	3301      	adds	r3, #1
 800268c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	681a      	ldr	r2, [r3, #0]
 8002692:	697b      	ldr	r3, [r7, #20]
 8002694:	fa22 f303 	lsr.w	r3, r2, r3
 8002698:	2b00      	cmp	r3, #0
 800269a:	f47f aeab 	bne.w	80023f4 <HAL_GPIO_Init+0x10>
  }
}
 800269e:	bf00      	nop
 80026a0:	bf00      	nop
 80026a2:	371c      	adds	r7, #28
 80026a4:	46bd      	mov	sp, r7
 80026a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026aa:	4770      	bx	lr
 80026ac:	40010000 	.word	0x40010000
 80026b0:	48000400 	.word	0x48000400
 80026b4:	48000800 	.word	0x48000800
 80026b8:	48000c00 	.word	0x48000c00
 80026bc:	48001000 	.word	0x48001000
 80026c0:	58000800 	.word	0x58000800

080026c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80026c4:	b480      	push	{r7}
 80026c6:	b083      	sub	sp, #12
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
 80026cc:	460b      	mov	r3, r1
 80026ce:	807b      	strh	r3, [r7, #2]
 80026d0:	4613      	mov	r3, r2
 80026d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80026d4:	787b      	ldrb	r3, [r7, #1]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d003      	beq.n	80026e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80026da:	887a      	ldrh	r2, [r7, #2]
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80026e0:	e002      	b.n	80026e8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80026e2:	887a      	ldrh	r2, [r7, #2]
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80026e8:	bf00      	nop
 80026ea:	370c      	adds	r7, #12
 80026ec:	46bd      	mov	sp, r7
 80026ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f2:	4770      	bx	lr

080026f4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b082      	sub	sp, #8
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	4603      	mov	r3, r0
 80026fc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80026fe:	4b08      	ldr	r3, [pc, #32]	; (8002720 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002700:	68da      	ldr	r2, [r3, #12]
 8002702:	88fb      	ldrh	r3, [r7, #6]
 8002704:	4013      	ands	r3, r2
 8002706:	2b00      	cmp	r3, #0
 8002708:	d006      	beq.n	8002718 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800270a:	4a05      	ldr	r2, [pc, #20]	; (8002720 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800270c:	88fb      	ldrh	r3, [r7, #6]
 800270e:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002710:	88fb      	ldrh	r3, [r7, #6]
 8002712:	4618      	mov	r0, r3
 8002714:	f7fe fb33 	bl	8000d7e <HAL_GPIO_EXTI_Callback>
  }
}
 8002718:	bf00      	nop
 800271a:	3708      	adds	r7, #8
 800271c:	46bd      	mov	sp, r7
 800271e:	bd80      	pop	{r7, pc}
 8002720:	58000800 	.word	0x58000800

08002724 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b082      	sub	sp, #8
 8002728:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 800272a:	4b0a      	ldr	r3, [pc, #40]	; (8002754 <HAL_HSEM_IRQHandler+0x30>)
 800272c:	68db      	ldr	r3, [r3, #12]
 800272e:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 8002730:	4b08      	ldr	r3, [pc, #32]	; (8002754 <HAL_HSEM_IRQHandler+0x30>)
 8002732:	681a      	ldr	r2, [r3, #0]
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	43db      	mvns	r3, r3
 8002738:	4906      	ldr	r1, [pc, #24]	; (8002754 <HAL_HSEM_IRQHandler+0x30>)
 800273a:	4013      	ands	r3, r2
 800273c:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 800273e:	4a05      	ldr	r2, [pc, #20]	; (8002754 <HAL_HSEM_IRQHandler+0x30>)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 8002744:	6878      	ldr	r0, [r7, #4]
 8002746:	f000 f807 	bl	8002758 <HAL_HSEM_FreeCallback>
}
 800274a:	bf00      	nop
 800274c:	3708      	adds	r7, #8
 800274e:	46bd      	mov	sp, r7
 8002750:	bd80      	pop	{r7, pc}
 8002752:	bf00      	nop
 8002754:	58001500 	.word	0x58001500

08002758 <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 8002758:	b480      	push	{r7}
 800275a:	b083      	sub	sp, #12
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 8002760:	bf00      	nop
 8002762:	370c      	adds	r7, #12
 8002764:	46bd      	mov	sp, r7
 8002766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276a:	4770      	bx	lr

0800276c <HAL_IPCC_Init>:
  * @brief  Initialize the IPCC peripheral.
  * @param  hipcc IPCC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_Init(IPCC_HandleTypeDef *hipcc)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b084      	sub	sp, #16
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
 8002774:	2300      	movs	r3, #0
 8002776:	73fb      	strb	r3, [r7, #15]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2b00      	cmp	r3, #0
 800277c:	d01e      	beq.n	80027bc <HAL_IPCC_Init+0x50>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

    IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 800277e:	4b13      	ldr	r3, [pc, #76]	; (80027cc <HAL_IPCC_Init+0x60>)
 8002780:	60bb      	str	r3, [r7, #8]

    if (hipcc->State == HAL_IPCC_STATE_RESET)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002788:	b2db      	uxtb	r3, r3
 800278a:	2b00      	cmp	r3, #0
 800278c:	d102      	bne.n	8002794 <HAL_IPCC_Init+0x28>
    {
      /* Init the low level hardware : CLOCK, NVIC */
      HAL_IPCC_MspInit(hipcc);
 800278e:	6878      	ldr	r0, [r7, #4]
 8002790:	f7fe fd14 	bl	80011bc <HAL_IPCC_MspInit>
    }

    /* Reset all registers of the current cpu to default state */
    IPCC_Reset_Register(currentInstance);
 8002794:	68b8      	ldr	r0, [r7, #8]
 8002796:	f000 f85b 	bl	8002850 <IPCC_Reset_Register>

    /* Activate the interrupts */
    currentInstance->CR |= (IPCC_CR_RXOIE | IPCC_CR_TXFIE);
 800279a:	68bb      	ldr	r3, [r7, #8]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f043 1201 	orr.w	r2, r3, #65537	; 0x10001
 80027a2:	68bb      	ldr	r3, [r7, #8]
 80027a4:	601a      	str	r2, [r3, #0]

    /* Clear callback pointers */
    IPCC_SetDefaultCallbacks(hipcc);
 80027a6:	6878      	ldr	r0, [r7, #4]
 80027a8:	f000 f82c 	bl	8002804 <IPCC_SetDefaultCallbacks>

    /* Reset all callback notification request */
    hipcc->callbackRequest = 0;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2200      	movs	r2, #0
 80027b0:	635a      	str	r2, [r3, #52]	; 0x34

    hipcc->State = HAL_IPCC_STATE_READY;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	2201      	movs	r2, #1
 80027b6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 80027ba:	e001      	b.n	80027c0 <HAL_IPCC_Init+0x54>
  }
  else
  {
    err = HAL_ERROR;
 80027bc:	2301      	movs	r3, #1
 80027be:	73fb      	strb	r3, [r7, #15]
  }

  return err;
 80027c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80027c2:	4618      	mov	r0, r3
 80027c4:	3710      	adds	r7, #16
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bd80      	pop	{r7, pc}
 80027ca:	bf00      	nop
 80027cc:	58000c00 	.word	0x58000c00

080027d0 <HAL_IPCC_RxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_RxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 80027d0:	b480      	push	{r7}
 80027d2:	b085      	sub	sp, #20
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	60f8      	str	r0, [r7, #12]
 80027d8:	60b9      	str	r1, [r7, #8]
 80027da:	4613      	mov	r3, r2
 80027dc:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_RxCallback can be implemented in the user file
   */
}
 80027de:	bf00      	nop
 80027e0:	3714      	adds	r7, #20
 80027e2:	46bd      	mov	sp, r7
 80027e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e8:	4770      	bx	lr

080027ea <HAL_IPCC_TxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_TxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 80027ea:	b480      	push	{r7}
 80027ec:	b085      	sub	sp, #20
 80027ee:	af00      	add	r7, sp, #0
 80027f0:	60f8      	str	r0, [r7, #12]
 80027f2:	60b9      	str	r1, [r7, #8]
 80027f4:	4613      	mov	r3, r2
 80027f6:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_TxCallback can be implemented in the user file
   */
}
 80027f8:	bf00      	nop
 80027fa:	3714      	adds	r7, #20
 80027fc:	46bd      	mov	sp, r7
 80027fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002802:	4770      	bx	lr

08002804 <IPCC_SetDefaultCallbacks>:
/**
  * @brief Reset all callbacks of the handle to NULL.
  * @param  hipcc IPCC handle
  */
void IPCC_SetDefaultCallbacks(IPCC_HandleTypeDef *hipcc)
{
 8002804:	b480      	push	{r7}
 8002806:	b085      	sub	sp, #20
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
  uint32_t i;
  /* Set all callbacks to default */
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 800280c:	2300      	movs	r3, #0
 800280e:	60fb      	str	r3, [r7, #12]
 8002810:	e00f      	b.n	8002832 <IPCC_SetDefaultCallbacks+0x2e>
  {
    hipcc->ChannelCallbackRx[i] = HAL_IPCC_RxCallback;
 8002812:	687a      	ldr	r2, [r7, #4]
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	009b      	lsls	r3, r3, #2
 8002818:	4413      	add	r3, r2
 800281a:	4a0b      	ldr	r2, [pc, #44]	; (8002848 <IPCC_SetDefaultCallbacks+0x44>)
 800281c:	605a      	str	r2, [r3, #4]
    hipcc->ChannelCallbackTx[i] = HAL_IPCC_TxCallback;
 800281e:	687a      	ldr	r2, [r7, #4]
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	3306      	adds	r3, #6
 8002824:	009b      	lsls	r3, r3, #2
 8002826:	4413      	add	r3, r2
 8002828:	4a08      	ldr	r2, [pc, #32]	; (800284c <IPCC_SetDefaultCallbacks+0x48>)
 800282a:	605a      	str	r2, [r3, #4]
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	3301      	adds	r3, #1
 8002830:	60fb      	str	r3, [r7, #12]
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	2b05      	cmp	r3, #5
 8002836:	d9ec      	bls.n	8002812 <IPCC_SetDefaultCallbacks+0xe>
  }
}
 8002838:	bf00      	nop
 800283a:	bf00      	nop
 800283c:	3714      	adds	r7, #20
 800283e:	46bd      	mov	sp, r7
 8002840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002844:	4770      	bx	lr
 8002846:	bf00      	nop
 8002848:	080027d1 	.word	0x080027d1
 800284c:	080027eb 	.word	0x080027eb

08002850 <IPCC_Reset_Register>:
/**
  * @brief Reset IPCC register to default value for the concerned instance.
  * @param  Instance pointer to register
  */
void IPCC_Reset_Register(IPCC_CommonTypeDef *Instance)
{
 8002850:	b480      	push	{r7}
 8002852:	b083      	sub	sp, #12
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
  /* Disable RX and TX interrupts */
  Instance->CR  = 0x00000000U;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2200      	movs	r2, #0
 800285c:	601a      	str	r2, [r3, #0]

  /* Mask RX and TX interrupts */
  Instance->MR  = (IPCC_ALL_TX_BUF | IPCC_ALL_RX_BUF);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	f04f 123f 	mov.w	r2, #4128831	; 0x3f003f
 8002864:	605a      	str	r2, [r3, #4]

  /* Clear RX status */
  Instance->SCR = IPCC_ALL_RX_BUF;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	223f      	movs	r2, #63	; 0x3f
 800286a:	609a      	str	r2, [r3, #8]
}
 800286c:	bf00      	nop
 800286e:	370c      	adds	r7, #12
 8002870:	46bd      	mov	sp, r7
 8002872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002876:	4770      	bx	lr

08002878 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002878:	b480      	push	{r7}
 800287a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800287c:	4b05      	ldr	r3, [pc, #20]	; (8002894 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	4a04      	ldr	r2, [pc, #16]	; (8002894 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002882:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002886:	6013      	str	r3, [r2, #0]
}
 8002888:	bf00      	nop
 800288a:	46bd      	mov	sp, r7
 800288c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002890:	4770      	bx	lr
 8002892:	bf00      	nop
 8002894:	58000400 	.word	0x58000400

08002898 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002898:	b480      	push	{r7}
 800289a:	af00      	add	r7, sp, #0
  return  (PWR->CR1 & PWR_CR1_VOS);
 800289c:	4b04      	ldr	r3, [pc, #16]	; (80028b0 <HAL_PWREx_GetVoltageRange+0x18>)
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 80028a4:	4618      	mov	r0, r3
 80028a6:	46bd      	mov	sp, r7
 80028a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ac:	4770      	bx	lr
 80028ae:	bf00      	nop
 80028b0:	58000400 	.word	0x58000400

080028b4 <LL_RCC_HSE_IsEnabledDiv2>:
{
 80028b4:	b480      	push	{r7}
 80028b6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 80028b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80028c2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80028c6:	d101      	bne.n	80028cc <LL_RCC_HSE_IsEnabledDiv2+0x18>
 80028c8:	2301      	movs	r3, #1
 80028ca:	e000      	b.n	80028ce <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 80028cc:	2300      	movs	r3, #0
}
 80028ce:	4618      	mov	r0, r3
 80028d0:	46bd      	mov	sp, r7
 80028d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d6:	4770      	bx	lr

080028d8 <LL_RCC_HSE_Enable>:
{
 80028d8:	b480      	push	{r7}
 80028da:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80028dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80028e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028ea:	6013      	str	r3, [r2, #0]
}
 80028ec:	bf00      	nop
 80028ee:	46bd      	mov	sp, r7
 80028f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f4:	4770      	bx	lr

080028f6 <LL_RCC_HSE_Disable>:
{
 80028f6:	b480      	push	{r7}
 80028f8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 80028fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002904:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002908:	6013      	str	r3, [r2, #0]
}
 800290a:	bf00      	nop
 800290c:	46bd      	mov	sp, r7
 800290e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002912:	4770      	bx	lr

08002914 <LL_RCC_HSE_IsReady>:
{
 8002914:	b480      	push	{r7}
 8002916:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8002918:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002922:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002926:	d101      	bne.n	800292c <LL_RCC_HSE_IsReady+0x18>
 8002928:	2301      	movs	r3, #1
 800292a:	e000      	b.n	800292e <LL_RCC_HSE_IsReady+0x1a>
 800292c:	2300      	movs	r3, #0
}
 800292e:	4618      	mov	r0, r3
 8002930:	46bd      	mov	sp, r7
 8002932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002936:	4770      	bx	lr

08002938 <LL_RCC_HSI_Enable>:
{
 8002938:	b480      	push	{r7}
 800293a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800293c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002946:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800294a:	6013      	str	r3, [r2, #0]
}
 800294c:	bf00      	nop
 800294e:	46bd      	mov	sp, r7
 8002950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002954:	4770      	bx	lr

08002956 <LL_RCC_HSI_Disable>:
{
 8002956:	b480      	push	{r7}
 8002958:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 800295a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002964:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002968:	6013      	str	r3, [r2, #0]
}
 800296a:	bf00      	nop
 800296c:	46bd      	mov	sp, r7
 800296e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002972:	4770      	bx	lr

08002974 <LL_RCC_HSI_IsReady>:
{
 8002974:	b480      	push	{r7}
 8002976:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8002978:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002982:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002986:	d101      	bne.n	800298c <LL_RCC_HSI_IsReady+0x18>
 8002988:	2301      	movs	r3, #1
 800298a:	e000      	b.n	800298e <LL_RCC_HSI_IsReady+0x1a>
 800298c:	2300      	movs	r3, #0
}
 800298e:	4618      	mov	r0, r3
 8002990:	46bd      	mov	sp, r7
 8002992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002996:	4770      	bx	lr

08002998 <LL_RCC_HSI_SetCalibTrimming>:
{
 8002998:	b480      	push	{r7}
 800299a:	b083      	sub	sp, #12
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 80029a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029a4:	685b      	ldr	r3, [r3, #4]
 80029a6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	061b      	lsls	r3, r3, #24
 80029ae:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80029b2:	4313      	orrs	r3, r2
 80029b4:	604b      	str	r3, [r1, #4]
}
 80029b6:	bf00      	nop
 80029b8:	370c      	adds	r7, #12
 80029ba:	46bd      	mov	sp, r7
 80029bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c0:	4770      	bx	lr

080029c2 <LL_RCC_HSI48_Enable>:
{
 80029c2:	b480      	push	{r7}
 80029c4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 80029c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029ca:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80029ce:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80029d2:	f043 0301 	orr.w	r3, r3, #1
 80029d6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 80029da:	bf00      	nop
 80029dc:	46bd      	mov	sp, r7
 80029de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e2:	4770      	bx	lr

080029e4 <LL_RCC_HSI48_Disable>:
{
 80029e4:	b480      	push	{r7}
 80029e6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 80029e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029ec:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80029f0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80029f4:	f023 0301 	bic.w	r3, r3, #1
 80029f8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 80029fc:	bf00      	nop
 80029fe:	46bd      	mov	sp, r7
 8002a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a04:	4770      	bx	lr

08002a06 <LL_RCC_HSI48_IsReady>:
{
 8002a06:	b480      	push	{r7}
 8002a08:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8002a0a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a0e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002a12:	f003 0302 	and.w	r3, r3, #2
 8002a16:	2b02      	cmp	r3, #2
 8002a18:	d101      	bne.n	8002a1e <LL_RCC_HSI48_IsReady+0x18>
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	e000      	b.n	8002a20 <LL_RCC_HSI48_IsReady+0x1a>
 8002a1e:	2300      	movs	r3, #0
}
 8002a20:	4618      	mov	r0, r3
 8002a22:	46bd      	mov	sp, r7
 8002a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a28:	4770      	bx	lr

08002a2a <LL_RCC_LSE_Enable>:
{
 8002a2a:	b480      	push	{r7}
 8002a2c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002a2e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a36:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002a3a:	f043 0301 	orr.w	r3, r3, #1
 8002a3e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002a42:	bf00      	nop
 8002a44:	46bd      	mov	sp, r7
 8002a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4a:	4770      	bx	lr

08002a4c <LL_RCC_LSE_Disable>:
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002a50:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a58:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002a5c:	f023 0301 	bic.w	r3, r3, #1
 8002a60:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002a64:	bf00      	nop
 8002a66:	46bd      	mov	sp, r7
 8002a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6c:	4770      	bx	lr

08002a6e <LL_RCC_LSE_EnableBypass>:
{
 8002a6e:	b480      	push	{r7}
 8002a70:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002a72:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a7a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002a7e:	f043 0304 	orr.w	r3, r3, #4
 8002a82:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002a86:	bf00      	nop
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8e:	4770      	bx	lr

08002a90 <LL_RCC_LSE_DisableBypass>:
{
 8002a90:	b480      	push	{r7}
 8002a92:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002a94:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a9c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002aa0:	f023 0304 	bic.w	r3, r3, #4
 8002aa4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002aa8:	bf00      	nop
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab0:	4770      	bx	lr

08002ab2 <LL_RCC_LSE_IsReady>:
{
 8002ab2:	b480      	push	{r7}
 8002ab4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8002ab6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002aba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002abe:	f003 0302 	and.w	r3, r3, #2
 8002ac2:	2b02      	cmp	r3, #2
 8002ac4:	d101      	bne.n	8002aca <LL_RCC_LSE_IsReady+0x18>
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	e000      	b.n	8002acc <LL_RCC_LSE_IsReady+0x1a>
 8002aca:	2300      	movs	r3, #0
}
 8002acc:	4618      	mov	r0, r3
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad4:	4770      	bx	lr

08002ad6 <LL_RCC_LSI1_Enable>:
{
 8002ad6:	b480      	push	{r7}
 8002ad8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8002ada:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ade:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ae2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002ae6:	f043 0301 	orr.w	r3, r3, #1
 8002aea:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8002aee:	bf00      	nop
 8002af0:	46bd      	mov	sp, r7
 8002af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af6:	4770      	bx	lr

08002af8 <LL_RCC_LSI1_Disable>:
{
 8002af8:	b480      	push	{r7}
 8002afa:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8002afc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b00:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b04:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002b08:	f023 0301 	bic.w	r3, r3, #1
 8002b0c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8002b10:	bf00      	nop
 8002b12:	46bd      	mov	sp, r7
 8002b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b18:	4770      	bx	lr

08002b1a <LL_RCC_LSI1_IsReady>:
{
 8002b1a:	b480      	push	{r7}
 8002b1c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8002b1e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b22:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b26:	f003 0302 	and.w	r3, r3, #2
 8002b2a:	2b02      	cmp	r3, #2
 8002b2c:	d101      	bne.n	8002b32 <LL_RCC_LSI1_IsReady+0x18>
 8002b2e:	2301      	movs	r3, #1
 8002b30:	e000      	b.n	8002b34 <LL_RCC_LSI1_IsReady+0x1a>
 8002b32:	2300      	movs	r3, #0
}
 8002b34:	4618      	mov	r0, r3
 8002b36:	46bd      	mov	sp, r7
 8002b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3c:	4770      	bx	lr

08002b3e <LL_RCC_LSI2_Enable>:
{
 8002b3e:	b480      	push	{r7}
 8002b40:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8002b42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b46:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b4a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002b4e:	f043 0304 	orr.w	r3, r3, #4
 8002b52:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8002b56:	bf00      	nop
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5e:	4770      	bx	lr

08002b60 <LL_RCC_LSI2_Disable>:
{
 8002b60:	b480      	push	{r7}
 8002b62:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8002b64:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b68:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b6c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002b70:	f023 0304 	bic.w	r3, r3, #4
 8002b74:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8002b78:	bf00      	nop
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b80:	4770      	bx	lr

08002b82 <LL_RCC_LSI2_IsReady>:
{
 8002b82:	b480      	push	{r7}
 8002b84:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8002b86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b8e:	f003 0308 	and.w	r3, r3, #8
 8002b92:	2b08      	cmp	r3, #8
 8002b94:	d101      	bne.n	8002b9a <LL_RCC_LSI2_IsReady+0x18>
 8002b96:	2301      	movs	r3, #1
 8002b98:	e000      	b.n	8002b9c <LL_RCC_LSI2_IsReady+0x1a>
 8002b9a:	2300      	movs	r3, #0
}
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba4:	4770      	bx	lr

08002ba6 <LL_RCC_LSI2_SetTrimming>:
{
 8002ba6:	b480      	push	{r7}
 8002ba8:	b083      	sub	sp, #12
 8002baa:	af00      	add	r7, sp, #0
 8002bac:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8002bae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bb2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002bb6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	021b      	lsls	r3, r3, #8
 8002bbe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002bc2:	4313      	orrs	r3, r2
 8002bc4:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8002bc8:	bf00      	nop
 8002bca:	370c      	adds	r7, #12
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd2:	4770      	bx	lr

08002bd4 <LL_RCC_MSI_Enable>:
{
 8002bd4:	b480      	push	{r7}
 8002bd6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8002bd8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002be2:	f043 0301 	orr.w	r3, r3, #1
 8002be6:	6013      	str	r3, [r2, #0]
}
 8002be8:	bf00      	nop
 8002bea:	46bd      	mov	sp, r7
 8002bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf0:	4770      	bx	lr

08002bf2 <LL_RCC_MSI_Disable>:
{
 8002bf2:	b480      	push	{r7}
 8002bf4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8002bf6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002c00:	f023 0301 	bic.w	r3, r3, #1
 8002c04:	6013      	str	r3, [r2, #0]
}
 8002c06:	bf00      	nop
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0e:	4770      	bx	lr

08002c10 <LL_RCC_MSI_IsReady>:
{
 8002c10:	b480      	push	{r7}
 8002c12:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8002c14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f003 0302 	and.w	r3, r3, #2
 8002c1e:	2b02      	cmp	r3, #2
 8002c20:	d101      	bne.n	8002c26 <LL_RCC_MSI_IsReady+0x16>
 8002c22:	2301      	movs	r3, #1
 8002c24:	e000      	b.n	8002c28 <LL_RCC_MSI_IsReady+0x18>
 8002c26:	2300      	movs	r3, #0
}
 8002c28:	4618      	mov	r0, r3
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c30:	4770      	bx	lr

08002c32 <LL_RCC_MSI_SetRange>:
{
 8002c32:	b480      	push	{r7}
 8002c34:	b083      	sub	sp, #12
 8002c36:	af00      	add	r7, sp, #0
 8002c38:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8002c3a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c44:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	4313      	orrs	r3, r2
 8002c4c:	600b      	str	r3, [r1, #0]
}
 8002c4e:	bf00      	nop
 8002c50:	370c      	adds	r7, #12
 8002c52:	46bd      	mov	sp, r7
 8002c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c58:	4770      	bx	lr

08002c5a <LL_RCC_MSI_GetRange>:
{
 8002c5a:	b480      	push	{r7}
 8002c5c:	b083      	sub	sp, #12
 8002c5e:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8002c60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002c6a:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2bb0      	cmp	r3, #176	; 0xb0
 8002c70:	d901      	bls.n	8002c76 <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 8002c72:	23b0      	movs	r3, #176	; 0xb0
 8002c74:	607b      	str	r3, [r7, #4]
  return msiRange;
 8002c76:	687b      	ldr	r3, [r7, #4]
}
 8002c78:	4618      	mov	r0, r3
 8002c7a:	370c      	adds	r7, #12
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c82:	4770      	bx	lr

08002c84 <LL_RCC_MSI_SetCalibTrimming>:
{
 8002c84:	b480      	push	{r7}
 8002c86:	b083      	sub	sp, #12
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8002c8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c90:	685b      	ldr	r3, [r3, #4]
 8002c92:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	021b      	lsls	r3, r3, #8
 8002c9a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002c9e:	4313      	orrs	r3, r2
 8002ca0:	604b      	str	r3, [r1, #4]
}
 8002ca2:	bf00      	nop
 8002ca4:	370c      	adds	r7, #12
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cac:	4770      	bx	lr

08002cae <LL_RCC_SetSysClkSource>:
{
 8002cae:	b480      	push	{r7}
 8002cb0:	b083      	sub	sp, #12
 8002cb2:	af00      	add	r7, sp, #0
 8002cb4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8002cb6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cba:	689b      	ldr	r3, [r3, #8]
 8002cbc:	f023 0203 	bic.w	r2, r3, #3
 8002cc0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	4313      	orrs	r3, r2
 8002cc8:	608b      	str	r3, [r1, #8]
}
 8002cca:	bf00      	nop
 8002ccc:	370c      	adds	r7, #12
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd4:	4770      	bx	lr

08002cd6 <LL_RCC_GetSysClkSource>:
{
 8002cd6:	b480      	push	{r7}
 8002cd8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002cda:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cde:	689b      	ldr	r3, [r3, #8]
 8002ce0:	f003 030c 	and.w	r3, r3, #12
}
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cec:	4770      	bx	lr

08002cee <LL_RCC_SetAHBPrescaler>:
{
 8002cee:	b480      	push	{r7}
 8002cf0:	b083      	sub	sp, #12
 8002cf2:	af00      	add	r7, sp, #0
 8002cf4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8002cf6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cfa:	689b      	ldr	r3, [r3, #8]
 8002cfc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d00:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	4313      	orrs	r3, r2
 8002d08:	608b      	str	r3, [r1, #8]
}
 8002d0a:	bf00      	nop
 8002d0c:	370c      	adds	r7, #12
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d14:	4770      	bx	lr

08002d16 <LL_C2_RCC_SetAHBPrescaler>:
{
 8002d16:	b480      	push	{r7}
 8002d18:	b083      	sub	sp, #12
 8002d1a:	af00      	add	r7, sp, #0
 8002d1c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8002d1e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d22:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002d26:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d2a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	4313      	orrs	r3, r2
 8002d32:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8002d36:	bf00      	nop
 8002d38:	370c      	adds	r7, #12
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d40:	4770      	bx	lr

08002d42 <LL_RCC_SetAHB4Prescaler>:
{
 8002d42:	b480      	push	{r7}
 8002d44:	b083      	sub	sp, #12
 8002d46:	af00      	add	r7, sp, #0
 8002d48:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8002d4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d4e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002d52:	f023 020f 	bic.w	r2, r3, #15
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	091b      	lsrs	r3, r3, #4
 8002d5a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002d5e:	4313      	orrs	r3, r2
 8002d60:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8002d64:	bf00      	nop
 8002d66:	370c      	adds	r7, #12
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6e:	4770      	bx	lr

08002d70 <LL_RCC_SetAPB1Prescaler>:
{
 8002d70:	b480      	push	{r7}
 8002d72:	b083      	sub	sp, #12
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8002d78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d7c:	689b      	ldr	r3, [r3, #8]
 8002d7e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002d82:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	4313      	orrs	r3, r2
 8002d8a:	608b      	str	r3, [r1, #8]
}
 8002d8c:	bf00      	nop
 8002d8e:	370c      	adds	r7, #12
 8002d90:	46bd      	mov	sp, r7
 8002d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d96:	4770      	bx	lr

08002d98 <LL_RCC_SetAPB2Prescaler>:
{
 8002d98:	b480      	push	{r7}
 8002d9a:	b083      	sub	sp, #12
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8002da0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002da4:	689b      	ldr	r3, [r3, #8]
 8002da6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002daa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	4313      	orrs	r3, r2
 8002db2:	608b      	str	r3, [r1, #8]
}
 8002db4:	bf00      	nop
 8002db6:	370c      	adds	r7, #12
 8002db8:	46bd      	mov	sp, r7
 8002dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dbe:	4770      	bx	lr

08002dc0 <LL_RCC_GetAHBPrescaler>:
{
 8002dc0:	b480      	push	{r7}
 8002dc2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8002dc4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002dc8:	689b      	ldr	r3, [r3, #8]
 8002dca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8002dce:	4618      	mov	r0, r3
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd6:	4770      	bx	lr

08002dd8 <LL_RCC_GetAHB4Prescaler>:
{
 8002dd8:	b480      	push	{r7}
 8002dda:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8002ddc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002de0:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002de4:	011b      	lsls	r3, r3, #4
 8002de6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8002dea:	4618      	mov	r0, r3
 8002dec:	46bd      	mov	sp, r7
 8002dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df2:	4770      	bx	lr

08002df4 <LL_RCC_GetAPB1Prescaler>:
{
 8002df4:	b480      	push	{r7}
 8002df6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8002df8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002dfc:	689b      	ldr	r3, [r3, #8]
 8002dfe:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8002e02:	4618      	mov	r0, r3
 8002e04:	46bd      	mov	sp, r7
 8002e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0a:	4770      	bx	lr

08002e0c <LL_RCC_GetAPB2Prescaler>:
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8002e10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e14:	689b      	ldr	r3, [r3, #8]
 8002e16:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e22:	4770      	bx	lr

08002e24 <LL_RCC_PLL_Enable>:
{
 8002e24:	b480      	push	{r7}
 8002e26:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8002e28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002e32:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e36:	6013      	str	r3, [r2, #0]
}
 8002e38:	bf00      	nop
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e40:	4770      	bx	lr

08002e42 <LL_RCC_PLL_Disable>:
{
 8002e42:	b480      	push	{r7}
 8002e44:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8002e46:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002e50:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002e54:	6013      	str	r3, [r2, #0]
}
 8002e56:	bf00      	nop
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5e:	4770      	bx	lr

08002e60 <LL_RCC_PLL_IsReady>:
{
 8002e60:	b480      	push	{r7}
 8002e62:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8002e64:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e6e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002e72:	d101      	bne.n	8002e78 <LL_RCC_PLL_IsReady+0x18>
 8002e74:	2301      	movs	r3, #1
 8002e76:	e000      	b.n	8002e7a <LL_RCC_PLL_IsReady+0x1a>
 8002e78:	2300      	movs	r3, #0
}
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e82:	4770      	bx	lr

08002e84 <LL_RCC_PLL_GetN>:
{
 8002e84:	b480      	push	{r7}
 8002e86:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8002e88:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e8c:	68db      	ldr	r3, [r3, #12]
 8002e8e:	0a1b      	lsrs	r3, r3, #8
 8002e90:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8002e94:	4618      	mov	r0, r3
 8002e96:	46bd      	mov	sp, r7
 8002e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9c:	4770      	bx	lr

08002e9e <LL_RCC_PLL_GetR>:
{
 8002e9e:	b480      	push	{r7}
 8002ea0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8002ea2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ea6:	68db      	ldr	r3, [r3, #12]
 8002ea8:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8002eac:	4618      	mov	r0, r3
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb4:	4770      	bx	lr

08002eb6 <LL_RCC_PLL_GetDivider>:
{
 8002eb6:	b480      	push	{r7}
 8002eb8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8002eba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ebe:	68db      	ldr	r3, [r3, #12]
 8002ec0:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ecc:	4770      	bx	lr

08002ece <LL_RCC_PLL_GetMainSource>:
{
 8002ece:	b480      	push	{r7}
 8002ed0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8002ed2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ed6:	68db      	ldr	r3, [r3, #12]
 8002ed8:	f003 0303 	and.w	r3, r3, #3
}
 8002edc:	4618      	mov	r0, r3
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee4:	4770      	bx	lr

08002ee6 <LL_RCC_IsActiveFlag_HPRE>:
{
 8002ee6:	b480      	push	{r7}
 8002ee8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8002eea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002eee:	689b      	ldr	r3, [r3, #8]
 8002ef0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ef4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ef8:	d101      	bne.n	8002efe <LL_RCC_IsActiveFlag_HPRE+0x18>
 8002efa:	2301      	movs	r3, #1
 8002efc:	e000      	b.n	8002f00 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8002efe:	2300      	movs	r3, #0
}
 8002f00:	4618      	mov	r0, r3
 8002f02:	46bd      	mov	sp, r7
 8002f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f08:	4770      	bx	lr

08002f0a <LL_RCC_IsActiveFlag_C2HPRE>:
{
 8002f0a:	b480      	push	{r7}
 8002f0c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8002f0e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f12:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002f16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f1a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002f1e:	d101      	bne.n	8002f24 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8002f20:	2301      	movs	r3, #1
 8002f22:	e000      	b.n	8002f26 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8002f24:	2300      	movs	r3, #0
}
 8002f26:	4618      	mov	r0, r3
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2e:	4770      	bx	lr

08002f30 <LL_RCC_IsActiveFlag_SHDHPRE>:
{
 8002f30:	b480      	push	{r7}
 8002f32:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8002f34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f38:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002f3c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f44:	d101      	bne.n	8002f4a <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8002f46:	2301      	movs	r3, #1
 8002f48:	e000      	b.n	8002f4c <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8002f4a:	2300      	movs	r3, #0
}
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f54:	4770      	bx	lr

08002f56 <LL_RCC_IsActiveFlag_PPRE1>:
{
 8002f56:	b480      	push	{r7}
 8002f58:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8002f5a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f5e:	689b      	ldr	r3, [r3, #8]
 8002f60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f64:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002f68:	d101      	bne.n	8002f6e <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8002f6a:	2301      	movs	r3, #1
 8002f6c:	e000      	b.n	8002f70 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8002f6e:	2300      	movs	r3, #0
}
 8002f70:	4618      	mov	r0, r3
 8002f72:	46bd      	mov	sp, r7
 8002f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f78:	4770      	bx	lr

08002f7a <LL_RCC_IsActiveFlag_PPRE2>:
{
 8002f7a:	b480      	push	{r7}
 8002f7c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8002f7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f82:	689b      	ldr	r3, [r3, #8]
 8002f84:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f88:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002f8c:	d101      	bne.n	8002f92 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8002f8e:	2301      	movs	r3, #1
 8002f90:	e000      	b.n	8002f94 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8002f92:	2300      	movs	r3, #0
}
 8002f94:	4618      	mov	r0, r3
 8002f96:	46bd      	mov	sp, r7
 8002f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9c:	4770      	bx	lr
	...

08002fa0 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002fa0:	b590      	push	{r4, r7, lr}
 8002fa2:	b08d      	sub	sp, #52	; 0x34
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d101      	bne.n	8002fb2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002fae:	2301      	movs	r3, #1
 8002fb0:	e37e      	b.n	80036b0 <HAL_RCC_OscConfig+0x710>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f003 0320 	and.w	r3, r3, #32
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	f000 8092 	beq.w	80030e4 <HAL_RCC_OscConfig+0x144>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002fc0:	f7ff fe89 	bl	8002cd6 <LL_RCC_GetSysClkSource>
 8002fc4:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002fc6:	f7ff ff82 	bl	8002ece <LL_RCC_PLL_GetMainSource>
 8002fca:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8002fcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d005      	beq.n	8002fde <HAL_RCC_OscConfig+0x3e>
 8002fd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fd4:	2b0c      	cmp	r3, #12
 8002fd6:	d14c      	bne.n	8003072 <HAL_RCC_OscConfig+0xd2>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8002fd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fda:	2b01      	cmp	r3, #1
 8002fdc:	d149      	bne.n	8003072 <HAL_RCC_OscConfig+0xd2>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002fde:	f7ff fe17 	bl	8002c10 <LL_RCC_MSI_IsReady>
 8002fe2:	4603      	mov	r3, r0
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d005      	beq.n	8002ff4 <HAL_RCC_OscConfig+0x54>
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	69db      	ldr	r3, [r3, #28]
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d101      	bne.n	8002ff4 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8002ff0:	2301      	movs	r3, #1
 8002ff2:	e35d      	b.n	80036b0 <HAL_RCC_OscConfig+0x710>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8002ff8:	f7ff fe2f 	bl	8002c5a <LL_RCC_MSI_GetRange>
 8002ffc:	4603      	mov	r3, r0
 8002ffe:	429c      	cmp	r4, r3
 8003000:	d914      	bls.n	800302c <HAL_RCC_OscConfig+0x8c>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003006:	4618      	mov	r0, r3
 8003008:	f000 fd42 	bl	8003a90 <RCC_SetFlashLatencyFromMSIRange>
 800300c:	4603      	mov	r3, r0
 800300e:	2b00      	cmp	r3, #0
 8003010:	d001      	beq.n	8003016 <HAL_RCC_OscConfig+0x76>
          {
            return HAL_ERROR;
 8003012:	2301      	movs	r3, #1
 8003014:	e34c      	b.n	80036b0 <HAL_RCC_OscConfig+0x710>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800301a:	4618      	mov	r0, r3
 800301c:	f7ff fe09 	bl	8002c32 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6a1b      	ldr	r3, [r3, #32]
 8003024:	4618      	mov	r0, r3
 8003026:	f7ff fe2d 	bl	8002c84 <LL_RCC_MSI_SetCalibTrimming>
 800302a:	e013      	b.n	8003054 <HAL_RCC_OscConfig+0xb4>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003030:	4618      	mov	r0, r3
 8003032:	f7ff fdfe 	bl	8002c32 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6a1b      	ldr	r3, [r3, #32]
 800303a:	4618      	mov	r0, r3
 800303c:	f7ff fe22 	bl	8002c84 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003044:	4618      	mov	r0, r3
 8003046:	f000 fd23 	bl	8003a90 <RCC_SetFlashLatencyFromMSIRange>
 800304a:	4603      	mov	r3, r0
 800304c:	2b00      	cmp	r3, #0
 800304e:	d001      	beq.n	8003054 <HAL_RCC_OscConfig+0xb4>
          {
            return HAL_ERROR;
 8003050:	2301      	movs	r3, #1
 8003052:	e32d      	b.n	80036b0 <HAL_RCC_OscConfig+0x710>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8003054:	f000 fcdc 	bl	8003a10 <HAL_RCC_GetHCLKFreq>
 8003058:	4603      	mov	r3, r0
 800305a:	4ab3      	ldr	r2, [pc, #716]	; (8003328 <HAL_RCC_OscConfig+0x388>)
 800305c:	6013      	str	r3, [r2, #0]
        
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800305e:	4bb3      	ldr	r3, [pc, #716]	; (800332c <HAL_RCC_OscConfig+0x38c>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	4618      	mov	r0, r3
 8003064:	f7fe fcb2 	bl	80019cc <HAL_InitTick>
 8003068:	4603      	mov	r3, r0
 800306a:	2b00      	cmp	r3, #0
 800306c:	d039      	beq.n	80030e2 <HAL_RCC_OscConfig+0x142>
        {
          return HAL_ERROR;
 800306e:	2301      	movs	r3, #1
 8003070:	e31e      	b.n	80036b0 <HAL_RCC_OscConfig+0x710>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	69db      	ldr	r3, [r3, #28]
 8003076:	2b00      	cmp	r3, #0
 8003078:	d01e      	beq.n	80030b8 <HAL_RCC_OscConfig+0x118>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800307a:	f7ff fdab 	bl	8002bd4 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800307e:	f7fe fcf3 	bl	8001a68 <HAL_GetTick>
 8003082:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8003084:	e008      	b.n	8003098 <HAL_RCC_OscConfig+0xf8>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003086:	f7fe fcef 	bl	8001a68 <HAL_GetTick>
 800308a:	4602      	mov	r2, r0
 800308c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800308e:	1ad3      	subs	r3, r2, r3
 8003090:	2b02      	cmp	r3, #2
 8003092:	d901      	bls.n	8003098 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8003094:	2303      	movs	r3, #3
 8003096:	e30b      	b.n	80036b0 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_MSI_IsReady() == 0U)
 8003098:	f7ff fdba 	bl	8002c10 <LL_RCC_MSI_IsReady>
 800309c:	4603      	mov	r3, r0
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d0f1      	beq.n	8003086 <HAL_RCC_OscConfig+0xe6>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030a6:	4618      	mov	r0, r3
 80030a8:	f7ff fdc3 	bl	8002c32 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6a1b      	ldr	r3, [r3, #32]
 80030b0:	4618      	mov	r0, r3
 80030b2:	f7ff fde7 	bl	8002c84 <LL_RCC_MSI_SetCalibTrimming>
 80030b6:	e015      	b.n	80030e4 <HAL_RCC_OscConfig+0x144>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80030b8:	f7ff fd9b 	bl	8002bf2 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80030bc:	f7fe fcd4 	bl	8001a68 <HAL_GetTick>
 80030c0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 80030c2:	e008      	b.n	80030d6 <HAL_RCC_OscConfig+0x136>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80030c4:	f7fe fcd0 	bl	8001a68 <HAL_GetTick>
 80030c8:	4602      	mov	r2, r0
 80030ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030cc:	1ad3      	subs	r3, r2, r3
 80030ce:	2b02      	cmp	r3, #2
 80030d0:	d901      	bls.n	80030d6 <HAL_RCC_OscConfig+0x136>
          {
            return HAL_TIMEOUT;
 80030d2:	2303      	movs	r3, #3
 80030d4:	e2ec      	b.n	80036b0 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_MSI_IsReady() != 0U)
 80030d6:	f7ff fd9b 	bl	8002c10 <LL_RCC_MSI_IsReady>
 80030da:	4603      	mov	r3, r0
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d1f1      	bne.n	80030c4 <HAL_RCC_OscConfig+0x124>
 80030e0:	e000      	b.n	80030e4 <HAL_RCC_OscConfig+0x144>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80030e2:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f003 0301 	and.w	r3, r3, #1
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d04e      	beq.n	800318e <HAL_RCC_OscConfig+0x1ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80030f0:	f7ff fdf1 	bl	8002cd6 <LL_RCC_GetSysClkSource>
 80030f4:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80030f6:	f7ff feea 	bl	8002ece <LL_RCC_PLL_GetMainSource>
 80030fa:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80030fc:	6a3b      	ldr	r3, [r7, #32]
 80030fe:	2b08      	cmp	r3, #8
 8003100:	d005      	beq.n	800310e <HAL_RCC_OscConfig+0x16e>
 8003102:	6a3b      	ldr	r3, [r7, #32]
 8003104:	2b0c      	cmp	r3, #12
 8003106:	d10d      	bne.n	8003124 <HAL_RCC_OscConfig+0x184>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8003108:	69fb      	ldr	r3, [r7, #28]
 800310a:	2b03      	cmp	r3, #3
 800310c:	d10a      	bne.n	8003124 <HAL_RCC_OscConfig+0x184>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800310e:	f7ff fc01 	bl	8002914 <LL_RCC_HSE_IsReady>
 8003112:	4603      	mov	r3, r0
 8003114:	2b00      	cmp	r3, #0
 8003116:	d039      	beq.n	800318c <HAL_RCC_OscConfig+0x1ec>
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	685b      	ldr	r3, [r3, #4]
 800311c:	2b00      	cmp	r3, #0
 800311e:	d135      	bne.n	800318c <HAL_RCC_OscConfig+0x1ec>
      {
        return HAL_ERROR;
 8003120:	2301      	movs	r3, #1
 8003122:	e2c5      	b.n	80036b0 <HAL_RCC_OscConfig+0x710>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	685b      	ldr	r3, [r3, #4]
 8003128:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800312c:	d102      	bne.n	8003134 <HAL_RCC_OscConfig+0x194>
 800312e:	f7ff fbd3 	bl	80028d8 <LL_RCC_HSE_Enable>
 8003132:	e001      	b.n	8003138 <HAL_RCC_OscConfig+0x198>
 8003134:	f7ff fbdf 	bl	80028f6 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	685b      	ldr	r3, [r3, #4]
 800313c:	2b00      	cmp	r3, #0
 800313e:	d012      	beq.n	8003166 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003140:	f7fe fc92 	bl	8001a68 <HAL_GetTick>
 8003144:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8003146:	e008      	b.n	800315a <HAL_RCC_OscConfig+0x1ba>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003148:	f7fe fc8e 	bl	8001a68 <HAL_GetTick>
 800314c:	4602      	mov	r2, r0
 800314e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003150:	1ad3      	subs	r3, r2, r3
 8003152:	2b64      	cmp	r3, #100	; 0x64
 8003154:	d901      	bls.n	800315a <HAL_RCC_OscConfig+0x1ba>
          {
            return HAL_TIMEOUT;
 8003156:	2303      	movs	r3, #3
 8003158:	e2aa      	b.n	80036b0 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSE_IsReady() == 0U)
 800315a:	f7ff fbdb 	bl	8002914 <LL_RCC_HSE_IsReady>
 800315e:	4603      	mov	r3, r0
 8003160:	2b00      	cmp	r3, #0
 8003162:	d0f1      	beq.n	8003148 <HAL_RCC_OscConfig+0x1a8>
 8003164:	e013      	b.n	800318e <HAL_RCC_OscConfig+0x1ee>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003166:	f7fe fc7f 	bl	8001a68 <HAL_GetTick>
 800316a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 800316c:	e008      	b.n	8003180 <HAL_RCC_OscConfig+0x1e0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800316e:	f7fe fc7b 	bl	8001a68 <HAL_GetTick>
 8003172:	4602      	mov	r2, r0
 8003174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003176:	1ad3      	subs	r3, r2, r3
 8003178:	2b64      	cmp	r3, #100	; 0x64
 800317a:	d901      	bls.n	8003180 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 800317c:	2303      	movs	r3, #3
 800317e:	e297      	b.n	80036b0 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSE_IsReady() != 0U)
 8003180:	f7ff fbc8 	bl	8002914 <LL_RCC_HSE_IsReady>
 8003184:	4603      	mov	r3, r0
 8003186:	2b00      	cmp	r3, #0
 8003188:	d1f1      	bne.n	800316e <HAL_RCC_OscConfig+0x1ce>
 800318a:	e000      	b.n	800318e <HAL_RCC_OscConfig+0x1ee>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800318c:	bf00      	nop
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f003 0302 	and.w	r3, r3, #2
 8003196:	2b00      	cmp	r3, #0
 8003198:	d051      	beq.n	800323e <HAL_RCC_OscConfig+0x29e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800319a:	f7ff fd9c 	bl	8002cd6 <LL_RCC_GetSysClkSource>
 800319e:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80031a0:	f7ff fe95 	bl	8002ece <LL_RCC_PLL_GetMainSource>
 80031a4:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80031a6:	69bb      	ldr	r3, [r7, #24]
 80031a8:	2b04      	cmp	r3, #4
 80031aa:	d005      	beq.n	80031b8 <HAL_RCC_OscConfig+0x218>
 80031ac:	69bb      	ldr	r3, [r7, #24]
 80031ae:	2b0c      	cmp	r3, #12
 80031b0:	d113      	bne.n	80031da <HAL_RCC_OscConfig+0x23a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 80031b2:	697b      	ldr	r3, [r7, #20]
 80031b4:	2b02      	cmp	r3, #2
 80031b6:	d110      	bne.n	80031da <HAL_RCC_OscConfig+0x23a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80031b8:	f7ff fbdc 	bl	8002974 <LL_RCC_HSI_IsReady>
 80031bc:	4603      	mov	r3, r0
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d005      	beq.n	80031ce <HAL_RCC_OscConfig+0x22e>
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	68db      	ldr	r3, [r3, #12]
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d101      	bne.n	80031ce <HAL_RCC_OscConfig+0x22e>
      {
        return HAL_ERROR;
 80031ca:	2301      	movs	r3, #1
 80031cc:	e270      	b.n	80036b0 <HAL_RCC_OscConfig+0x710>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	691b      	ldr	r3, [r3, #16]
 80031d2:	4618      	mov	r0, r3
 80031d4:	f7ff fbe0 	bl	8002998 <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80031d8:	e031      	b.n	800323e <HAL_RCC_OscConfig+0x29e>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	68db      	ldr	r3, [r3, #12]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d019      	beq.n	8003216 <HAL_RCC_OscConfig+0x276>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80031e2:	f7ff fba9 	bl	8002938 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031e6:	f7fe fc3f 	bl	8001a68 <HAL_GetTick>
 80031ea:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 80031ec:	e008      	b.n	8003200 <HAL_RCC_OscConfig+0x260>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80031ee:	f7fe fc3b 	bl	8001a68 <HAL_GetTick>
 80031f2:	4602      	mov	r2, r0
 80031f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031f6:	1ad3      	subs	r3, r2, r3
 80031f8:	2b02      	cmp	r3, #2
 80031fa:	d901      	bls.n	8003200 <HAL_RCC_OscConfig+0x260>
          {
            return HAL_TIMEOUT;
 80031fc:	2303      	movs	r3, #3
 80031fe:	e257      	b.n	80036b0 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSI_IsReady() == 0U)
 8003200:	f7ff fbb8 	bl	8002974 <LL_RCC_HSI_IsReady>
 8003204:	4603      	mov	r3, r0
 8003206:	2b00      	cmp	r3, #0
 8003208:	d0f1      	beq.n	80031ee <HAL_RCC_OscConfig+0x24e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	691b      	ldr	r3, [r3, #16]
 800320e:	4618      	mov	r0, r3
 8003210:	f7ff fbc2 	bl	8002998 <LL_RCC_HSI_SetCalibTrimming>
 8003214:	e013      	b.n	800323e <HAL_RCC_OscConfig+0x29e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003216:	f7ff fb9e 	bl	8002956 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800321a:	f7fe fc25 	bl	8001a68 <HAL_GetTick>
 800321e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8003220:	e008      	b.n	8003234 <HAL_RCC_OscConfig+0x294>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003222:	f7fe fc21 	bl	8001a68 <HAL_GetTick>
 8003226:	4602      	mov	r2, r0
 8003228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800322a:	1ad3      	subs	r3, r2, r3
 800322c:	2b02      	cmp	r3, #2
 800322e:	d901      	bls.n	8003234 <HAL_RCC_OscConfig+0x294>
          {
            return HAL_TIMEOUT;
 8003230:	2303      	movs	r3, #3
 8003232:	e23d      	b.n	80036b0 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSI_IsReady() != 0U)
 8003234:	f7ff fb9e 	bl	8002974 <LL_RCC_HSI_IsReady>
 8003238:	4603      	mov	r3, r0
 800323a:	2b00      	cmp	r3, #0
 800323c:	d1f1      	bne.n	8003222 <HAL_RCC_OscConfig+0x282>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f003 0308 	and.w	r3, r3, #8
 8003246:	2b00      	cmp	r3, #0
 8003248:	d106      	bne.n	8003258 <HAL_RCC_OscConfig+0x2b8>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8003252:	2b00      	cmp	r3, #0
 8003254:	f000 80a3 	beq.w	800339e <HAL_RCC_OscConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	695b      	ldr	r3, [r3, #20]
 800325c:	2b00      	cmp	r3, #0
 800325e:	d076      	beq.n	800334e <HAL_RCC_OscConfig+0x3ae>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f003 0310 	and.w	r3, r3, #16
 8003268:	2b00      	cmp	r3, #0
 800326a:	d046      	beq.n	80032fa <HAL_RCC_OscConfig+0x35a>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 800326c:	f7ff fc55 	bl	8002b1a <LL_RCC_LSI1_IsReady>
 8003270:	4603      	mov	r3, r0
 8003272:	2b00      	cmp	r3, #0
 8003274:	d113      	bne.n	800329e <HAL_RCC_OscConfig+0x2fe>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8003276:	f7ff fc2e 	bl	8002ad6 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800327a:	f7fe fbf5 	bl	8001a68 <HAL_GetTick>
 800327e:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8003280:	e008      	b.n	8003294 <HAL_RCC_OscConfig+0x2f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8003282:	f7fe fbf1 	bl	8001a68 <HAL_GetTick>
 8003286:	4602      	mov	r2, r0
 8003288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800328a:	1ad3      	subs	r3, r2, r3
 800328c:	2b02      	cmp	r3, #2
 800328e:	d901      	bls.n	8003294 <HAL_RCC_OscConfig+0x2f4>
            {
              return HAL_TIMEOUT;
 8003290:	2303      	movs	r3, #3
 8003292:	e20d      	b.n	80036b0 <HAL_RCC_OscConfig+0x710>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8003294:	f7ff fc41 	bl	8002b1a <LL_RCC_LSI1_IsReady>
 8003298:	4603      	mov	r3, r0
 800329a:	2b00      	cmp	r3, #0
 800329c:	d0f1      	beq.n	8003282 <HAL_RCC_OscConfig+0x2e2>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 800329e:	f7ff fc4e 	bl	8002b3e <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032a2:	f7fe fbe1 	bl	8001a68 <HAL_GetTick>
 80032a6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 80032a8:	e008      	b.n	80032bc <HAL_RCC_OscConfig+0x31c>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80032aa:	f7fe fbdd 	bl	8001a68 <HAL_GetTick>
 80032ae:	4602      	mov	r2, r0
 80032b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032b2:	1ad3      	subs	r3, r2, r3
 80032b4:	2b03      	cmp	r3, #3
 80032b6:	d901      	bls.n	80032bc <HAL_RCC_OscConfig+0x31c>
          {
            return HAL_TIMEOUT;
 80032b8:	2303      	movs	r3, #3
 80032ba:	e1f9      	b.n	80036b0 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI2_IsReady() == 0U)
 80032bc:	f7ff fc61 	bl	8002b82 <LL_RCC_LSI2_IsReady>
 80032c0:	4603      	mov	r3, r0
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d0f1      	beq.n	80032aa <HAL_RCC_OscConfig+0x30a>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	699b      	ldr	r3, [r3, #24]
 80032ca:	4618      	mov	r0, r3
 80032cc:	f7ff fc6b 	bl	8002ba6 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 80032d0:	f7ff fc12 	bl	8002af8 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032d4:	f7fe fbc8 	bl	8001a68 <HAL_GetTick>
 80032d8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 80032da:	e008      	b.n	80032ee <HAL_RCC_OscConfig+0x34e>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80032dc:	f7fe fbc4 	bl	8001a68 <HAL_GetTick>
 80032e0:	4602      	mov	r2, r0
 80032e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032e4:	1ad3      	subs	r3, r2, r3
 80032e6:	2b02      	cmp	r3, #2
 80032e8:	d901      	bls.n	80032ee <HAL_RCC_OscConfig+0x34e>
          {
            return HAL_TIMEOUT;
 80032ea:	2303      	movs	r3, #3
 80032ec:	e1e0      	b.n	80036b0 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI1_IsReady() != 0U)
 80032ee:	f7ff fc14 	bl	8002b1a <LL_RCC_LSI1_IsReady>
 80032f2:	4603      	mov	r3, r0
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d1f1      	bne.n	80032dc <HAL_RCC_OscConfig+0x33c>
 80032f8:	e051      	b.n	800339e <HAL_RCC_OscConfig+0x3fe>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 80032fa:	f7ff fbec 	bl	8002ad6 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032fe:	f7fe fbb3 	bl	8001a68 <HAL_GetTick>
 8003302:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8003304:	e008      	b.n	8003318 <HAL_RCC_OscConfig+0x378>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8003306:	f7fe fbaf 	bl	8001a68 <HAL_GetTick>
 800330a:	4602      	mov	r2, r0
 800330c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800330e:	1ad3      	subs	r3, r2, r3
 8003310:	2b02      	cmp	r3, #2
 8003312:	d901      	bls.n	8003318 <HAL_RCC_OscConfig+0x378>
          {
            return HAL_TIMEOUT;
 8003314:	2303      	movs	r3, #3
 8003316:	e1cb      	b.n	80036b0 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI1_IsReady() == 0U)
 8003318:	f7ff fbff 	bl	8002b1a <LL_RCC_LSI1_IsReady>
 800331c:	4603      	mov	r3, r0
 800331e:	2b00      	cmp	r3, #0
 8003320:	d0f1      	beq.n	8003306 <HAL_RCC_OscConfig+0x366>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8003322:	f7ff fc1d 	bl	8002b60 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8003326:	e00c      	b.n	8003342 <HAL_RCC_OscConfig+0x3a2>
 8003328:	20000004 	.word	0x20000004
 800332c:	20000008 	.word	0x20000008
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8003330:	f7fe fb9a 	bl	8001a68 <HAL_GetTick>
 8003334:	4602      	mov	r2, r0
 8003336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003338:	1ad3      	subs	r3, r2, r3
 800333a:	2b03      	cmp	r3, #3
 800333c:	d901      	bls.n	8003342 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800333e:	2303      	movs	r3, #3
 8003340:	e1b6      	b.n	80036b0 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8003342:	f7ff fc1e 	bl	8002b82 <LL_RCC_LSI2_IsReady>
 8003346:	4603      	mov	r3, r0
 8003348:	2b00      	cmp	r3, #0
 800334a:	d1f1      	bne.n	8003330 <HAL_RCC_OscConfig+0x390>
 800334c:	e027      	b.n	800339e <HAL_RCC_OscConfig+0x3fe>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 800334e:	f7ff fc07 	bl	8002b60 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003352:	f7fe fb89 	bl	8001a68 <HAL_GetTick>
 8003356:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8003358:	e008      	b.n	800336c <HAL_RCC_OscConfig+0x3cc>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800335a:	f7fe fb85 	bl	8001a68 <HAL_GetTick>
 800335e:	4602      	mov	r2, r0
 8003360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003362:	1ad3      	subs	r3, r2, r3
 8003364:	2b03      	cmp	r3, #3
 8003366:	d901      	bls.n	800336c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003368:	2303      	movs	r3, #3
 800336a:	e1a1      	b.n	80036b0 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSI2_IsReady() != 0U)
 800336c:	f7ff fc09 	bl	8002b82 <LL_RCC_LSI2_IsReady>
 8003370:	4603      	mov	r3, r0
 8003372:	2b00      	cmp	r3, #0
 8003374:	d1f1      	bne.n	800335a <HAL_RCC_OscConfig+0x3ba>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8003376:	f7ff fbbf 	bl	8002af8 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800337a:	f7fe fb75 	bl	8001a68 <HAL_GetTick>
 800337e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8003380:	e008      	b.n	8003394 <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8003382:	f7fe fb71 	bl	8001a68 <HAL_GetTick>
 8003386:	4602      	mov	r2, r0
 8003388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800338a:	1ad3      	subs	r3, r2, r3
 800338c:	2b02      	cmp	r3, #2
 800338e:	d901      	bls.n	8003394 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8003390:	2303      	movs	r3, #3
 8003392:	e18d      	b.n	80036b0 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8003394:	f7ff fbc1 	bl	8002b1a <LL_RCC_LSI1_IsReady>
 8003398:	4603      	mov	r3, r0
 800339a:	2b00      	cmp	r3, #0
 800339c:	d1f1      	bne.n	8003382 <HAL_RCC_OscConfig+0x3e2>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f003 0304 	and.w	r3, r3, #4
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d05b      	beq.n	8003462 <HAL_RCC_OscConfig+0x4c2>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80033aa:	4bb5      	ldr	r3, [pc, #724]	; (8003680 <HAL_RCC_OscConfig+0x6e0>)
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d114      	bne.n	80033e0 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80033b6:	f7ff fa5f 	bl	8002878 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80033ba:	f7fe fb55 	bl	8001a68 <HAL_GetTick>
 80033be:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80033c0:	e008      	b.n	80033d4 <HAL_RCC_OscConfig+0x434>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033c2:	f7fe fb51 	bl	8001a68 <HAL_GetTick>
 80033c6:	4602      	mov	r2, r0
 80033c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ca:	1ad3      	subs	r3, r2, r3
 80033cc:	2b02      	cmp	r3, #2
 80033ce:	d901      	bls.n	80033d4 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 80033d0:	2303      	movs	r3, #3
 80033d2:	e16d      	b.n	80036b0 <HAL_RCC_OscConfig+0x710>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80033d4:	4baa      	ldr	r3, [pc, #680]	; (8003680 <HAL_RCC_OscConfig+0x6e0>)
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d0f0      	beq.n	80033c2 <HAL_RCC_OscConfig+0x422>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	689b      	ldr	r3, [r3, #8]
 80033e4:	2b01      	cmp	r3, #1
 80033e6:	d102      	bne.n	80033ee <HAL_RCC_OscConfig+0x44e>
 80033e8:	f7ff fb1f 	bl	8002a2a <LL_RCC_LSE_Enable>
 80033ec:	e00c      	b.n	8003408 <HAL_RCC_OscConfig+0x468>
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	689b      	ldr	r3, [r3, #8]
 80033f2:	2b05      	cmp	r3, #5
 80033f4:	d104      	bne.n	8003400 <HAL_RCC_OscConfig+0x460>
 80033f6:	f7ff fb3a 	bl	8002a6e <LL_RCC_LSE_EnableBypass>
 80033fa:	f7ff fb16 	bl	8002a2a <LL_RCC_LSE_Enable>
 80033fe:	e003      	b.n	8003408 <HAL_RCC_OscConfig+0x468>
 8003400:	f7ff fb24 	bl	8002a4c <LL_RCC_LSE_Disable>
 8003404:	f7ff fb44 	bl	8002a90 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	689b      	ldr	r3, [r3, #8]
 800340c:	2b00      	cmp	r3, #0
 800340e:	d014      	beq.n	800343a <HAL_RCC_OscConfig+0x49a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003410:	f7fe fb2a 	bl	8001a68 <HAL_GetTick>
 8003414:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8003416:	e00a      	b.n	800342e <HAL_RCC_OscConfig+0x48e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003418:	f7fe fb26 	bl	8001a68 <HAL_GetTick>
 800341c:	4602      	mov	r2, r0
 800341e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003420:	1ad3      	subs	r3, r2, r3
 8003422:	f241 3288 	movw	r2, #5000	; 0x1388
 8003426:	4293      	cmp	r3, r2
 8003428:	d901      	bls.n	800342e <HAL_RCC_OscConfig+0x48e>
        {
          return HAL_TIMEOUT;
 800342a:	2303      	movs	r3, #3
 800342c:	e140      	b.n	80036b0 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSE_IsReady() == 0U)
 800342e:	f7ff fb40 	bl	8002ab2 <LL_RCC_LSE_IsReady>
 8003432:	4603      	mov	r3, r0
 8003434:	2b00      	cmp	r3, #0
 8003436:	d0ef      	beq.n	8003418 <HAL_RCC_OscConfig+0x478>
 8003438:	e013      	b.n	8003462 <HAL_RCC_OscConfig+0x4c2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800343a:	f7fe fb15 	bl	8001a68 <HAL_GetTick>
 800343e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8003440:	e00a      	b.n	8003458 <HAL_RCC_OscConfig+0x4b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003442:	f7fe fb11 	bl	8001a68 <HAL_GetTick>
 8003446:	4602      	mov	r2, r0
 8003448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800344a:	1ad3      	subs	r3, r2, r3
 800344c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003450:	4293      	cmp	r3, r2
 8003452:	d901      	bls.n	8003458 <HAL_RCC_OscConfig+0x4b8>
        {
          return HAL_TIMEOUT;
 8003454:	2303      	movs	r3, #3
 8003456:	e12b      	b.n	80036b0 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSE_IsReady() != 0U)
 8003458:	f7ff fb2b 	bl	8002ab2 <LL_RCC_LSE_IsReady>
 800345c:	4603      	mov	r3, r0
 800345e:	2b00      	cmp	r3, #0
 8003460:	d1ef      	bne.n	8003442 <HAL_RCC_OscConfig+0x4a2>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800346a:	2b00      	cmp	r3, #0
 800346c:	d02c      	beq.n	80034c8 <HAL_RCC_OscConfig+0x528>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003472:	2b00      	cmp	r3, #0
 8003474:	d014      	beq.n	80034a0 <HAL_RCC_OscConfig+0x500>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003476:	f7ff faa4 	bl	80029c2 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800347a:	f7fe faf5 	bl	8001a68 <HAL_GetTick>
 800347e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8003480:	e008      	b.n	8003494 <HAL_RCC_OscConfig+0x4f4>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003482:	f7fe faf1 	bl	8001a68 <HAL_GetTick>
 8003486:	4602      	mov	r2, r0
 8003488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800348a:	1ad3      	subs	r3, r2, r3
 800348c:	2b02      	cmp	r3, #2
 800348e:	d901      	bls.n	8003494 <HAL_RCC_OscConfig+0x4f4>
        {
          return HAL_TIMEOUT;
 8003490:	2303      	movs	r3, #3
 8003492:	e10d      	b.n	80036b0 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8003494:	f7ff fab7 	bl	8002a06 <LL_RCC_HSI48_IsReady>
 8003498:	4603      	mov	r3, r0
 800349a:	2b00      	cmp	r3, #0
 800349c:	d0f1      	beq.n	8003482 <HAL_RCC_OscConfig+0x4e2>
 800349e:	e013      	b.n	80034c8 <HAL_RCC_OscConfig+0x528>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80034a0:	f7ff faa0 	bl	80029e4 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034a4:	f7fe fae0 	bl	8001a68 <HAL_GetTick>
 80034a8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 80034aa:	e008      	b.n	80034be <HAL_RCC_OscConfig+0x51e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80034ac:	f7fe fadc 	bl	8001a68 <HAL_GetTick>
 80034b0:	4602      	mov	r2, r0
 80034b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034b4:	1ad3      	subs	r3, r2, r3
 80034b6:	2b02      	cmp	r3, #2
 80034b8:	d901      	bls.n	80034be <HAL_RCC_OscConfig+0x51e>
        {
          return HAL_TIMEOUT;
 80034ba:	2303      	movs	r3, #3
 80034bc:	e0f8      	b.n	80036b0 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_HSI48_IsReady() != 0U)
 80034be:	f7ff faa2 	bl	8002a06 <LL_RCC_HSI48_IsReady>
 80034c2:	4603      	mov	r3, r0
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d1f1      	bne.n	80034ac <HAL_RCC_OscConfig+0x50c>
#endif
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	f000 80ee 	beq.w	80036ae <HAL_RCC_OscConfig+0x70e>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80034d2:	f7ff fc00 	bl	8002cd6 <LL_RCC_GetSysClkSource>
 80034d6:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 80034d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80034dc:	68db      	ldr	r3, [r3, #12]
 80034de:	60fb      	str	r3, [r7, #12]
    
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034e4:	2b02      	cmp	r3, #2
 80034e6:	f040 80af 	bne.w	8003648 <HAL_RCC_OscConfig+0x6a8>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
      
      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	f003 0203 	and.w	r2, r3, #3
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034f4:	429a      	cmp	r2, r3
 80034f6:	d123      	bne.n	8003540 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003502:	429a      	cmp	r2, r3
 8003504:	d11c      	bne.n	8003540 <HAL_RCC_OscConfig+0x5a0>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	0a1b      	lsrs	r3, r3, #8
 800350a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003512:	429a      	cmp	r2, r3
 8003514:	d114      	bne.n	8003540 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8003520:	429a      	cmp	r2, r3
 8003522:	d10d      	bne.n	8003540 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800352e:	429a      	cmp	r2, r3
 8003530:	d106      	bne.n	8003540 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800353c:	429a      	cmp	r2, r3
 800353e:	d05d      	beq.n	80035fc <HAL_RCC_OscConfig+0x65c>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003540:	693b      	ldr	r3, [r7, #16]
 8003542:	2b0c      	cmp	r3, #12
 8003544:	d058      	beq.n	80035f8 <HAL_RCC_OscConfig+0x658>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003546:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003550:	2b00      	cmp	r3, #0
 8003552:	d001      	beq.n	8003558 <HAL_RCC_OscConfig+0x5b8>

          {
            return HAL_ERROR;
 8003554:	2301      	movs	r3, #1
 8003556:	e0ab      	b.n	80036b0 <HAL_RCC_OscConfig+0x710>
          }
          else
#endif
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003558:	f7ff fc73 	bl	8002e42 <LL_RCC_PLL_Disable>
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800355c:	f7fe fa84 	bl	8001a68 <HAL_GetTick>
 8003560:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003562:	e008      	b.n	8003576 <HAL_RCC_OscConfig+0x5d6>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003564:	f7fe fa80 	bl	8001a68 <HAL_GetTick>
 8003568:	4602      	mov	r2, r0
 800356a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800356c:	1ad3      	subs	r3, r2, r3
 800356e:	2b02      	cmp	r3, #2
 8003570:	d901      	bls.n	8003576 <HAL_RCC_OscConfig+0x5d6>
              {
                return HAL_TIMEOUT;
 8003572:	2303      	movs	r3, #3
 8003574:	e09c      	b.n	80036b0 <HAL_RCC_OscConfig+0x710>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003576:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003580:	2b00      	cmp	r3, #0
 8003582:	d1ef      	bne.n	8003564 <HAL_RCC_OscConfig+0x5c4>
              }
            }
            
            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003584:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003588:	68da      	ldr	r2, [r3, #12]
 800358a:	4b3e      	ldr	r3, [pc, #248]	; (8003684 <HAL_RCC_OscConfig+0x6e4>)
 800358c:	4013      	ands	r3, r2
 800358e:	687a      	ldr	r2, [r7, #4]
 8003590:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8003592:	687a      	ldr	r2, [r7, #4]
 8003594:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003596:	4311      	orrs	r1, r2
 8003598:	687a      	ldr	r2, [r7, #4]
 800359a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800359c:	0212      	lsls	r2, r2, #8
 800359e:	4311      	orrs	r1, r2
 80035a0:	687a      	ldr	r2, [r7, #4]
 80035a2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80035a4:	4311      	orrs	r1, r2
 80035a6:	687a      	ldr	r2, [r7, #4]
 80035a8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80035aa:	4311      	orrs	r1, r2
 80035ac:	687a      	ldr	r2, [r7, #4]
 80035ae:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80035b0:	430a      	orrs	r2, r1
 80035b2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80035b6:	4313      	orrs	r3, r2
 80035b8:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
            
            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80035ba:	f7ff fc33 	bl	8002e24 <LL_RCC_PLL_Enable>
            
            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80035be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80035c2:	68db      	ldr	r3, [r3, #12]
 80035c4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80035c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035cc:	60d3      	str	r3, [r2, #12]
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80035ce:	f7fe fa4b 	bl	8001a68 <HAL_GetTick>
 80035d2:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80035d4:	e008      	b.n	80035e8 <HAL_RCC_OscConfig+0x648>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035d6:	f7fe fa47 	bl	8001a68 <HAL_GetTick>
 80035da:	4602      	mov	r2, r0
 80035dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035de:	1ad3      	subs	r3, r2, r3
 80035e0:	2b02      	cmp	r3, #2
 80035e2:	d901      	bls.n	80035e8 <HAL_RCC_OscConfig+0x648>
              {
                return HAL_TIMEOUT;
 80035e4:	2303      	movs	r3, #3
 80035e6:	e063      	b.n	80036b0 <HAL_RCC_OscConfig+0x710>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80035e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d0ef      	beq.n	80035d6 <HAL_RCC_OscConfig+0x636>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80035f6:	e05a      	b.n	80036ae <HAL_RCC_OscConfig+0x70e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80035f8:	2301      	movs	r3, #1
 80035fa:	e059      	b.n	80036b0 <HAL_RCC_OscConfig+0x710>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80035fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003606:	2b00      	cmp	r3, #0
 8003608:	d151      	bne.n	80036ae <HAL_RCC_OscConfig+0x70e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800360a:	f7ff fc0b 	bl	8002e24 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800360e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003612:	68db      	ldr	r3, [r3, #12]
 8003614:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003618:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800361c:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800361e:	f7fe fa23 	bl	8001a68 <HAL_GetTick>
 8003622:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003624:	e008      	b.n	8003638 <HAL_RCC_OscConfig+0x698>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003626:	f7fe fa1f 	bl	8001a68 <HAL_GetTick>
 800362a:	4602      	mov	r2, r0
 800362c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800362e:	1ad3      	subs	r3, r2, r3
 8003630:	2b02      	cmp	r3, #2
 8003632:	d901      	bls.n	8003638 <HAL_RCC_OscConfig+0x698>
            {
              return HAL_TIMEOUT;
 8003634:	2303      	movs	r3, #3
 8003636:	e03b      	b.n	80036b0 <HAL_RCC_OscConfig+0x710>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003638:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003642:	2b00      	cmp	r3, #0
 8003644:	d0ef      	beq.n	8003626 <HAL_RCC_OscConfig+0x686>
 8003646:	e032      	b.n	80036ae <HAL_RCC_OscConfig+0x70e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003648:	693b      	ldr	r3, [r7, #16]
 800364a:	2b0c      	cmp	r3, #12
 800364c:	d02d      	beq.n	80036aa <HAL_RCC_OscConfig+0x70a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800364e:	f7ff fbf8 	bl	8002e42 <LL_RCC_PLL_Disable>
        

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8003652:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003656:	68db      	ldr	r3, [r3, #12]
 8003658:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800365c:	f023 0303 	bic.w	r3, r3, #3
 8003660:	60d3      	str	r3, [r2, #12]

#if defined(SAI1) && defined(USB)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_USBCLK | RCC_PLL_SAI1CLK);
 8003662:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003666:	68db      	ldr	r3, [r3, #12]
 8003668:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800366c:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 8003670:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003674:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK);
#endif

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003676:	f7fe f9f7 	bl	8001a68 <HAL_GetTick>
 800367a:	6278      	str	r0, [r7, #36]	; 0x24
        
        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800367c:	e00d      	b.n	800369a <HAL_RCC_OscConfig+0x6fa>
 800367e:	bf00      	nop
 8003680:	58000400 	.word	0x58000400
 8003684:	11c1808c 	.word	0x11c1808c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003688:	f7fe f9ee 	bl	8001a68 <HAL_GetTick>
 800368c:	4602      	mov	r2, r0
 800368e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003690:	1ad3      	subs	r3, r2, r3
 8003692:	2b02      	cmp	r3, #2
 8003694:	d901      	bls.n	800369a <HAL_RCC_OscConfig+0x6fa>
          {
            return HAL_TIMEOUT;
 8003696:	2303      	movs	r3, #3
 8003698:	e00a      	b.n	80036b0 <HAL_RCC_OscConfig+0x710>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800369a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d1ef      	bne.n	8003688 <HAL_RCC_OscConfig+0x6e8>
 80036a8:	e001      	b.n	80036ae <HAL_RCC_OscConfig+0x70e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80036aa:	2301      	movs	r3, #1
 80036ac:	e000      	b.n	80036b0 <HAL_RCC_OscConfig+0x710>
      }
    }
  }
  return HAL_OK;
 80036ae:	2300      	movs	r3, #0
}
 80036b0:	4618      	mov	r0, r3
 80036b2:	3734      	adds	r7, #52	; 0x34
 80036b4:	46bd      	mov	sp, r7
 80036b6:	bd90      	pop	{r4, r7, pc}

080036b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b084      	sub	sp, #16
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
 80036c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d101      	bne.n	80036cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80036c8:	2301      	movs	r3, #1
 80036ca:	e12d      	b.n	8003928 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80036cc:	4b98      	ldr	r3, [pc, #608]	; (8003930 <HAL_RCC_ClockConfig+0x278>)
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f003 0307 	and.w	r3, r3, #7
 80036d4:	683a      	ldr	r2, [r7, #0]
 80036d6:	429a      	cmp	r2, r3
 80036d8:	d91b      	bls.n	8003712 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036da:	4b95      	ldr	r3, [pc, #596]	; (8003930 <HAL_RCC_ClockConfig+0x278>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f023 0207 	bic.w	r2, r3, #7
 80036e2:	4993      	ldr	r1, [pc, #588]	; (8003930 <HAL_RCC_ClockConfig+0x278>)
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	4313      	orrs	r3, r2
 80036e8:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80036ea:	f7fe f9bd 	bl	8001a68 <HAL_GetTick>
 80036ee:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80036f0:	e008      	b.n	8003704 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80036f2:	f7fe f9b9 	bl	8001a68 <HAL_GetTick>
 80036f6:	4602      	mov	r2, r0
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	1ad3      	subs	r3, r2, r3
 80036fc:	2b02      	cmp	r3, #2
 80036fe:	d901      	bls.n	8003704 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8003700:	2303      	movs	r3, #3
 8003702:	e111      	b.n	8003928 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003704:	4b8a      	ldr	r3, [pc, #552]	; (8003930 <HAL_RCC_ClockConfig+0x278>)
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f003 0307 	and.w	r3, r3, #7
 800370c:	683a      	ldr	r2, [r7, #0]
 800370e:	429a      	cmp	r2, r3
 8003710:	d1ef      	bne.n	80036f2 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f003 0302 	and.w	r3, r3, #2
 800371a:	2b00      	cmp	r3, #0
 800371c:	d016      	beq.n	800374c <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	689b      	ldr	r3, [r3, #8]
 8003722:	4618      	mov	r0, r3
 8003724:	f7ff fae3 	bl	8002cee <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003728:	f7fe f99e 	bl	8001a68 <HAL_GetTick>
 800372c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800372e:	e008      	b.n	8003742 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003730:	f7fe f99a 	bl	8001a68 <HAL_GetTick>
 8003734:	4602      	mov	r2, r0
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	1ad3      	subs	r3, r2, r3
 800373a:	2b02      	cmp	r3, #2
 800373c:	d901      	bls.n	8003742 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 800373e:	2303      	movs	r3, #3
 8003740:	e0f2      	b.n	8003928 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8003742:	f7ff fbd0 	bl	8002ee6 <LL_RCC_IsActiveFlag_HPRE>
 8003746:	4603      	mov	r3, r0
 8003748:	2b00      	cmp	r3, #0
 800374a:	d0f1      	beq.n	8003730 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f003 0320 	and.w	r3, r3, #32
 8003754:	2b00      	cmp	r3, #0
 8003756:	d016      	beq.n	8003786 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	695b      	ldr	r3, [r3, #20]
 800375c:	4618      	mov	r0, r3
 800375e:	f7ff fada 	bl	8002d16 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003762:	f7fe f981 	bl	8001a68 <HAL_GetTick>
 8003766:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8003768:	e008      	b.n	800377c <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800376a:	f7fe f97d 	bl	8001a68 <HAL_GetTick>
 800376e:	4602      	mov	r2, r0
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	1ad3      	subs	r3, r2, r3
 8003774:	2b02      	cmp	r3, #2
 8003776:	d901      	bls.n	800377c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8003778:	2303      	movs	r3, #3
 800377a:	e0d5      	b.n	8003928 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 800377c:	f7ff fbc5 	bl	8002f0a <LL_RCC_IsActiveFlag_C2HPRE>
 8003780:	4603      	mov	r3, r0
 8003782:	2b00      	cmp	r3, #0
 8003784:	d0f1      	beq.n	800376a <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800378e:	2b00      	cmp	r3, #0
 8003790:	d016      	beq.n	80037c0 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	699b      	ldr	r3, [r3, #24]
 8003796:	4618      	mov	r0, r3
 8003798:	f7ff fad3 	bl	8002d42 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800379c:	f7fe f964 	bl	8001a68 <HAL_GetTick>
 80037a0:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80037a2:	e008      	b.n	80037b6 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80037a4:	f7fe f960 	bl	8001a68 <HAL_GetTick>
 80037a8:	4602      	mov	r2, r0
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	1ad3      	subs	r3, r2, r3
 80037ae:	2b02      	cmp	r3, #2
 80037b0:	d901      	bls.n	80037b6 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 80037b2:	2303      	movs	r3, #3
 80037b4:	e0b8      	b.n	8003928 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80037b6:	f7ff fbbb 	bl	8002f30 <LL_RCC_IsActiveFlag_SHDHPRE>
 80037ba:	4603      	mov	r3, r0
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d0f1      	beq.n	80037a4 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f003 0304 	and.w	r3, r3, #4
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d016      	beq.n	80037fa <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	68db      	ldr	r3, [r3, #12]
 80037d0:	4618      	mov	r0, r3
 80037d2:	f7ff facd 	bl	8002d70 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80037d6:	f7fe f947 	bl	8001a68 <HAL_GetTick>
 80037da:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80037dc:	e008      	b.n	80037f0 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80037de:	f7fe f943 	bl	8001a68 <HAL_GetTick>
 80037e2:	4602      	mov	r2, r0
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	1ad3      	subs	r3, r2, r3
 80037e8:	2b02      	cmp	r3, #2
 80037ea:	d901      	bls.n	80037f0 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 80037ec:	2303      	movs	r3, #3
 80037ee:	e09b      	b.n	8003928 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80037f0:	f7ff fbb1 	bl	8002f56 <LL_RCC_IsActiveFlag_PPRE1>
 80037f4:	4603      	mov	r3, r0
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d0f1      	beq.n	80037de <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f003 0308 	and.w	r3, r3, #8
 8003802:	2b00      	cmp	r3, #0
 8003804:	d017      	beq.n	8003836 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	691b      	ldr	r3, [r3, #16]
 800380a:	00db      	lsls	r3, r3, #3
 800380c:	4618      	mov	r0, r3
 800380e:	f7ff fac3 	bl	8002d98 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003812:	f7fe f929 	bl	8001a68 <HAL_GetTick>
 8003816:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8003818:	e008      	b.n	800382c <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800381a:	f7fe f925 	bl	8001a68 <HAL_GetTick>
 800381e:	4602      	mov	r2, r0
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	1ad3      	subs	r3, r2, r3
 8003824:	2b02      	cmp	r3, #2
 8003826:	d901      	bls.n	800382c <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8003828:	2303      	movs	r3, #3
 800382a:	e07d      	b.n	8003928 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800382c:	f7ff fba5 	bl	8002f7a <LL_RCC_IsActiveFlag_PPRE2>
 8003830:	4603      	mov	r3, r0
 8003832:	2b00      	cmp	r3, #0
 8003834:	d0f1      	beq.n	800381a <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f003 0301 	and.w	r3, r3, #1
 800383e:	2b00      	cmp	r3, #0
 8003840:	d043      	beq.n	80038ca <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	685b      	ldr	r3, [r3, #4]
 8003846:	2b02      	cmp	r3, #2
 8003848:	d106      	bne.n	8003858 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 800384a:	f7ff f863 	bl	8002914 <LL_RCC_HSE_IsReady>
 800384e:	4603      	mov	r3, r0
 8003850:	2b00      	cmp	r3, #0
 8003852:	d11e      	bne.n	8003892 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003854:	2301      	movs	r3, #1
 8003856:	e067      	b.n	8003928 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	685b      	ldr	r3, [r3, #4]
 800385c:	2b03      	cmp	r3, #3
 800385e:	d106      	bne.n	800386e <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8003860:	f7ff fafe 	bl	8002e60 <LL_RCC_PLL_IsReady>
 8003864:	4603      	mov	r3, r0
 8003866:	2b00      	cmp	r3, #0
 8003868:	d113      	bne.n	8003892 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800386a:	2301      	movs	r3, #1
 800386c:	e05c      	b.n	8003928 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	685b      	ldr	r3, [r3, #4]
 8003872:	2b00      	cmp	r3, #0
 8003874:	d106      	bne.n	8003884 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8003876:	f7ff f9cb 	bl	8002c10 <LL_RCC_MSI_IsReady>
 800387a:	4603      	mov	r3, r0
 800387c:	2b00      	cmp	r3, #0
 800387e:	d108      	bne.n	8003892 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003880:	2301      	movs	r3, #1
 8003882:	e051      	b.n	8003928 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8003884:	f7ff f876 	bl	8002974 <LL_RCC_HSI_IsReady>
 8003888:	4603      	mov	r3, r0
 800388a:	2b00      	cmp	r3, #0
 800388c:	d101      	bne.n	8003892 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800388e:	2301      	movs	r3, #1
 8003890:	e04a      	b.n	8003928 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	685b      	ldr	r3, [r3, #4]
 8003896:	4618      	mov	r0, r3
 8003898:	f7ff fa09 	bl	8002cae <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800389c:	f7fe f8e4 	bl	8001a68 <HAL_GetTick>
 80038a0:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038a2:	e00a      	b.n	80038ba <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80038a4:	f7fe f8e0 	bl	8001a68 <HAL_GetTick>
 80038a8:	4602      	mov	r2, r0
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	1ad3      	subs	r3, r2, r3
 80038ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d901      	bls.n	80038ba <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 80038b6:	2303      	movs	r3, #3
 80038b8:	e036      	b.n	8003928 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038ba:	f7ff fa0c 	bl	8002cd6 <LL_RCC_GetSysClkSource>
 80038be:	4602      	mov	r2, r0
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	685b      	ldr	r3, [r3, #4]
 80038c4:	009b      	lsls	r3, r3, #2
 80038c6:	429a      	cmp	r2, r3
 80038c8:	d1ec      	bne.n	80038a4 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80038ca:	4b19      	ldr	r3, [pc, #100]	; (8003930 <HAL_RCC_ClockConfig+0x278>)
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f003 0307 	and.w	r3, r3, #7
 80038d2:	683a      	ldr	r2, [r7, #0]
 80038d4:	429a      	cmp	r2, r3
 80038d6:	d21b      	bcs.n	8003910 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038d8:	4b15      	ldr	r3, [pc, #84]	; (8003930 <HAL_RCC_ClockConfig+0x278>)
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f023 0207 	bic.w	r2, r3, #7
 80038e0:	4913      	ldr	r1, [pc, #76]	; (8003930 <HAL_RCC_ClockConfig+0x278>)
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	4313      	orrs	r3, r2
 80038e6:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80038e8:	f7fe f8be 	bl	8001a68 <HAL_GetTick>
 80038ec:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80038ee:	e008      	b.n	8003902 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80038f0:	f7fe f8ba 	bl	8001a68 <HAL_GetTick>
 80038f4:	4602      	mov	r2, r0
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	1ad3      	subs	r3, r2, r3
 80038fa:	2b02      	cmp	r3, #2
 80038fc:	d901      	bls.n	8003902 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 80038fe:	2303      	movs	r3, #3
 8003900:	e012      	b.n	8003928 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003902:	4b0b      	ldr	r3, [pc, #44]	; (8003930 <HAL_RCC_ClockConfig+0x278>)
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f003 0307 	and.w	r3, r3, #7
 800390a:	683a      	ldr	r2, [r7, #0]
 800390c:	429a      	cmp	r2, r3
 800390e:	d1ef      	bne.n	80038f0 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8003910:	f000 f87e 	bl	8003a10 <HAL_RCC_GetHCLKFreq>
 8003914:	4603      	mov	r3, r0
 8003916:	4a07      	ldr	r2, [pc, #28]	; (8003934 <HAL_RCC_ClockConfig+0x27c>)
 8003918:	6013      	str	r3, [r2, #0]
  
  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 800391a:	f7fe f8b1 	bl	8001a80 <HAL_GetTickPrio>
 800391e:	4603      	mov	r3, r0
 8003920:	4618      	mov	r0, r3
 8003922:	f7fe f853 	bl	80019cc <HAL_InitTick>
 8003926:	4603      	mov	r3, r0
}
 8003928:	4618      	mov	r0, r3
 800392a:	3710      	adds	r7, #16
 800392c:	46bd      	mov	sp, r7
 800392e:	bd80      	pop	{r7, pc}
 8003930:	58004000 	.word	0x58004000
 8003934:	20000004 	.word	0x20000004

08003938 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003938:	b590      	push	{r4, r7, lr}
 800393a:	b085      	sub	sp, #20
 800393c:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq, pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800393e:	f7ff f9ca 	bl	8002cd6 <LL_RCC_GetSysClkSource>
 8003942:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2b00      	cmp	r3, #0
 8003948:	d10a      	bne.n	8003960 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800394a:	f7ff f986 	bl	8002c5a <LL_RCC_MSI_GetRange>
 800394e:	4603      	mov	r3, r0
 8003950:	091b      	lsrs	r3, r3, #4
 8003952:	f003 030f 	and.w	r3, r3, #15
 8003956:	4a2b      	ldr	r2, [pc, #172]	; (8003a04 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003958:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800395c:	60fb      	str	r3, [r7, #12]
 800395e:	e04b      	b.n	80039f8 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2b04      	cmp	r3, #4
 8003964:	d102      	bne.n	800396c <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003966:	4b28      	ldr	r3, [pc, #160]	; (8003a08 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003968:	60fb      	str	r3, [r7, #12]
 800396a:	e045      	b.n	80039f8 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2b08      	cmp	r3, #8
 8003970:	d10a      	bne.n	8003988 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8003972:	f7fe ff9f 	bl	80028b4 <LL_RCC_HSE_IsEnabledDiv2>
 8003976:	4603      	mov	r3, r0
 8003978:	2b01      	cmp	r3, #1
 800397a:	d102      	bne.n	8003982 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 800397c:	4b22      	ldr	r3, [pc, #136]	; (8003a08 <HAL_RCC_GetSysClockFreq+0xd0>)
 800397e:	60fb      	str	r3, [r7, #12]
 8003980:	e03a      	b.n	80039f8 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8003982:	4b22      	ldr	r3, [pc, #136]	; (8003a0c <HAL_RCC_GetSysClockFreq+0xd4>)
 8003984:	60fb      	str	r3, [r7, #12]
 8003986:	e037      	b.n	80039f8 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8003988:	f7ff faa1 	bl	8002ece <LL_RCC_PLL_GetMainSource>
 800398c:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 800398e:	683b      	ldr	r3, [r7, #0]
 8003990:	2b02      	cmp	r3, #2
 8003992:	d003      	beq.n	800399c <HAL_RCC_GetSysClockFreq+0x64>
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	2b03      	cmp	r3, #3
 8003998:	d003      	beq.n	80039a2 <HAL_RCC_GetSysClockFreq+0x6a>
 800399a:	e00d      	b.n	80039b8 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 800399c:	4b1a      	ldr	r3, [pc, #104]	; (8003a08 <HAL_RCC_GetSysClockFreq+0xd0>)
 800399e:	60bb      	str	r3, [r7, #8]
        break;
 80039a0:	e015      	b.n	80039ce <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80039a2:	f7fe ff87 	bl	80028b4 <LL_RCC_HSE_IsEnabledDiv2>
 80039a6:	4603      	mov	r3, r0
 80039a8:	2b01      	cmp	r3, #1
 80039aa:	d102      	bne.n	80039b2 <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 80039ac:	4b16      	ldr	r3, [pc, #88]	; (8003a08 <HAL_RCC_GetSysClockFreq+0xd0>)
 80039ae:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 80039b0:	e00d      	b.n	80039ce <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 80039b2:	4b16      	ldr	r3, [pc, #88]	; (8003a0c <HAL_RCC_GetSysClockFreq+0xd4>)
 80039b4:	60bb      	str	r3, [r7, #8]
        break;
 80039b6:	e00a      	b.n	80039ce <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80039b8:	f7ff f94f 	bl	8002c5a <LL_RCC_MSI_GetRange>
 80039bc:	4603      	mov	r3, r0
 80039be:	091b      	lsrs	r3, r3, #4
 80039c0:	f003 030f 	and.w	r3, r3, #15
 80039c4:	4a0f      	ldr	r2, [pc, #60]	; (8003a04 <HAL_RCC_GetSysClockFreq+0xcc>)
 80039c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039ca:	60bb      	str	r3, [r7, #8]
        break;
 80039cc:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
 80039ce:	f7ff fa59 	bl	8002e84 <LL_RCC_PLL_GetN>
 80039d2:	4602      	mov	r2, r0
 80039d4:	68bb      	ldr	r3, [r7, #8]
 80039d6:	fb03 f402 	mul.w	r4, r3, r2
 80039da:	f7ff fa6c 	bl	8002eb6 <LL_RCC_PLL_GetDivider>
 80039de:	4603      	mov	r3, r0
 80039e0:	091b      	lsrs	r3, r3, #4
 80039e2:	3301      	adds	r3, #1
 80039e4:	fbb4 f4f3 	udiv	r4, r4, r3
 80039e8:	f7ff fa59 	bl	8002e9e <LL_RCC_PLL_GetR>
 80039ec:	4603      	mov	r3, r0
 80039ee:	0f5b      	lsrs	r3, r3, #29
 80039f0:	3301      	adds	r3, #1
 80039f2:	fbb4 f3f3 	udiv	r3, r4, r3
 80039f6:	60fb      	str	r3, [r7, #12]
  }

  return sysclockfreq;
 80039f8:	68fb      	ldr	r3, [r7, #12]
}
 80039fa:	4618      	mov	r0, r3
 80039fc:	3714      	adds	r7, #20
 80039fe:	46bd      	mov	sp, r7
 8003a00:	bd90      	pop	{r4, r7, pc}
 8003a02:	bf00      	nop
 8003a04:	0800b538 	.word	0x0800b538
 8003a08:	00f42400 	.word	0x00f42400
 8003a0c:	01e84800 	.word	0x01e84800

08003a10 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a10:	b598      	push	{r3, r4, r7, lr}
 8003a12:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8003a14:	f7ff ff90 	bl	8003938 <HAL_RCC_GetSysClockFreq>
 8003a18:	4604      	mov	r4, r0
 8003a1a:	f7ff f9d1 	bl	8002dc0 <LL_RCC_GetAHBPrescaler>
 8003a1e:	4603      	mov	r3, r0
 8003a20:	091b      	lsrs	r3, r3, #4
 8003a22:	f003 030f 	and.w	r3, r3, #15
 8003a26:	4a03      	ldr	r2, [pc, #12]	; (8003a34 <HAL_RCC_GetHCLKFreq+0x24>)
 8003a28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a2c:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8003a30:	4618      	mov	r0, r3
 8003a32:	bd98      	pop	{r3, r4, r7, pc}
 8003a34:	0800b4d8 	.word	0x0800b4d8

08003a38 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a38:	b598      	push	{r3, r4, r7, lr}
 8003a3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8003a3c:	f7ff ffe8 	bl	8003a10 <HAL_RCC_GetHCLKFreq>
 8003a40:	4604      	mov	r4, r0
 8003a42:	f7ff f9d7 	bl	8002df4 <LL_RCC_GetAPB1Prescaler>
 8003a46:	4603      	mov	r3, r0
 8003a48:	0a1b      	lsrs	r3, r3, #8
 8003a4a:	f003 0307 	and.w	r3, r3, #7
 8003a4e:	4a04      	ldr	r2, [pc, #16]	; (8003a60 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003a50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a54:	f003 031f 	and.w	r3, r3, #31
 8003a58:	fa24 f303 	lsr.w	r3, r4, r3
}
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	bd98      	pop	{r3, r4, r7, pc}
 8003a60:	0800b518 	.word	0x0800b518

08003a64 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003a64:	b598      	push	{r3, r4, r7, lr}
 8003a66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8003a68:	f7ff ffd2 	bl	8003a10 <HAL_RCC_GetHCLKFreq>
 8003a6c:	4604      	mov	r4, r0
 8003a6e:	f7ff f9cd 	bl	8002e0c <LL_RCC_GetAPB2Prescaler>
 8003a72:	4603      	mov	r3, r0
 8003a74:	0adb      	lsrs	r3, r3, #11
 8003a76:	f003 0307 	and.w	r3, r3, #7
 8003a7a:	4a04      	ldr	r2, [pc, #16]	; (8003a8c <HAL_RCC_GetPCLK2Freq+0x28>)
 8003a7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a80:	f003 031f 	and.w	r3, r3, #31
 8003a84:	fa24 f303 	lsr.w	r3, r4, r3
}
 8003a88:	4618      	mov	r0, r3
 8003a8a:	bd98      	pop	{r3, r4, r7, pc}
 8003a8c:	0800b518 	.word	0x0800b518

08003a90 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8003a90:	b590      	push	{r4, r7, lr}
 8003a92:	b085      	sub	sp, #20
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2bb0      	cmp	r3, #176	; 0xb0
 8003a9c:	d903      	bls.n	8003aa6 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8003a9e:	4b15      	ldr	r3, [pc, #84]	; (8003af4 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8003aa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aa2:	60fb      	str	r3, [r7, #12]
 8003aa4:	e007      	b.n	8003ab6 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	091b      	lsrs	r3, r3, #4
 8003aaa:	f003 030f 	and.w	r3, r3, #15
 8003aae:	4a11      	ldr	r2, [pc, #68]	; (8003af4 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8003ab0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ab4:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8003ab6:	f7ff f98f 	bl	8002dd8 <LL_RCC_GetAHB4Prescaler>
 8003aba:	4603      	mov	r3, r0
 8003abc:	091b      	lsrs	r3, r3, #4
 8003abe:	f003 030f 	and.w	r3, r3, #15
 8003ac2:	4a0d      	ldr	r2, [pc, #52]	; (8003af8 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8003ac4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ac8:	68fa      	ldr	r2, [r7, #12]
 8003aca:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ace:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8003ad0:	68bb      	ldr	r3, [r7, #8]
 8003ad2:	4a0a      	ldr	r2, [pc, #40]	; (8003afc <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8003ad4:	fba2 2303 	umull	r2, r3, r2, r3
 8003ad8:	0c9c      	lsrs	r4, r3, #18
 8003ada:	f7fe fedd 	bl	8002898 <HAL_PWREx_GetVoltageRange>
 8003ade:	4603      	mov	r3, r0
 8003ae0:	4619      	mov	r1, r3
 8003ae2:	4620      	mov	r0, r4
 8003ae4:	f000 f80c 	bl	8003b00 <RCC_SetFlashLatency>
 8003ae8:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif
}
 8003aea:	4618      	mov	r0, r3
 8003aec:	3714      	adds	r7, #20
 8003aee:	46bd      	mov	sp, r7
 8003af0:	bd90      	pop	{r4, r7, pc}
 8003af2:	bf00      	nop
 8003af4:	0800b538 	.word	0x0800b538
 8003af8:	0800b4d8 	.word	0x0800b4d8
 8003afc:	431bde83 	.word	0x431bde83

08003b00 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8003b00:	b590      	push	{r4, r7, lr}
 8003b02:	b093      	sub	sp, #76	; 0x4c
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
 8003b08:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8003b0a:	4b39      	ldr	r3, [pc, #228]	; (8003bf0 <RCC_SetFlashLatency+0xf0>)
 8003b0c:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8003b10:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003b12:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8003b16:	4a37      	ldr	r2, [pc, #220]	; (8003bf4 <RCC_SetFlashLatency+0xf4>)
 8003b18:	f107 031c 	add.w	r3, r7, #28
 8003b1c:	ca07      	ldmia	r2, {r0, r1, r2}
 8003b1e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8003b22:	4b35      	ldr	r3, [pc, #212]	; (8003bf8 <RCC_SetFlashLatency+0xf8>)
 8003b24:	f107 040c 	add.w	r4, r7, #12
 8003b28:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003b2a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8003b2e:	2300      	movs	r3, #0
 8003b30:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003b32:	683b      	ldr	r3, [r7, #0]
 8003b34:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b38:	d11c      	bne.n	8003b74 <RCC_SetFlashLatency+0x74>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	643b      	str	r3, [r7, #64]	; 0x40
 8003b3e:	e015      	b.n	8003b6c <RCC_SetFlashLatency+0x6c>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8003b40:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b42:	009b      	lsls	r3, r3, #2
 8003b44:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003b48:	4413      	add	r3, r2
 8003b4a:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8003b4e:	687a      	ldr	r2, [r7, #4]
 8003b50:	429a      	cmp	r2, r3
 8003b52:	d808      	bhi.n	8003b66 <RCC_SetFlashLatency+0x66>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8003b54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b56:	009b      	lsls	r3, r3, #2
 8003b58:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003b5c:	4413      	add	r3, r2
 8003b5e:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8003b62:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8003b64:	e022      	b.n	8003bac <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8003b66:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b68:	3301      	adds	r3, #1
 8003b6a:	643b      	str	r3, [r7, #64]	; 0x40
 8003b6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b6e:	2b03      	cmp	r3, #3
 8003b70:	d9e6      	bls.n	8003b40 <RCC_SetFlashLatency+0x40>
 8003b72:	e01b      	b.n	8003bac <RCC_SetFlashLatency+0xac>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8003b74:	2300      	movs	r3, #0
 8003b76:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003b78:	e015      	b.n	8003ba6 <RCC_SetFlashLatency+0xa6>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8003b7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b7c:	009b      	lsls	r3, r3, #2
 8003b7e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003b82:	4413      	add	r3, r2
 8003b84:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8003b88:	687a      	ldr	r2, [r7, #4]
 8003b8a:	429a      	cmp	r2, r3
 8003b8c:	d808      	bhi.n	8003ba0 <RCC_SetFlashLatency+0xa0>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8003b8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b90:	009b      	lsls	r3, r3, #2
 8003b92:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003b96:	4413      	add	r3, r2
 8003b98:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8003b9c:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8003b9e:	e005      	b.n	8003bac <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8003ba0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ba2:	3301      	adds	r3, #1
 8003ba4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003ba6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ba8:	2b02      	cmp	r3, #2
 8003baa:	d9e6      	bls.n	8003b7a <RCC_SetFlashLatency+0x7a>
      break;
    }
  }
#endif

  __HAL_FLASH_SET_LATENCY(latency);
 8003bac:	4b13      	ldr	r3, [pc, #76]	; (8003bfc <RCC_SetFlashLatency+0xfc>)
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f023 0207 	bic.w	r2, r3, #7
 8003bb4:	4911      	ldr	r1, [pc, #68]	; (8003bfc <RCC_SetFlashLatency+0xfc>)
 8003bb6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003bb8:	4313      	orrs	r3, r2
 8003bba:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003bbc:	f7fd ff54 	bl	8001a68 <HAL_GetTick>
 8003bc0:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8003bc2:	e008      	b.n	8003bd6 <RCC_SetFlashLatency+0xd6>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003bc4:	f7fd ff50 	bl	8001a68 <HAL_GetTick>
 8003bc8:	4602      	mov	r2, r0
 8003bca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bcc:	1ad3      	subs	r3, r2, r3
 8003bce:	2b02      	cmp	r3, #2
 8003bd0:	d901      	bls.n	8003bd6 <RCC_SetFlashLatency+0xd6>
    {
      return HAL_TIMEOUT;
 8003bd2:	2303      	movs	r3, #3
 8003bd4:	e007      	b.n	8003be6 <RCC_SetFlashLatency+0xe6>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8003bd6:	4b09      	ldr	r3, [pc, #36]	; (8003bfc <RCC_SetFlashLatency+0xfc>)
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f003 0307 	and.w	r3, r3, #7
 8003bde:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003be0:	429a      	cmp	r2, r3
 8003be2:	d1ef      	bne.n	8003bc4 <RCC_SetFlashLatency+0xc4>
    }
  }
  return HAL_OK;
 8003be4:	2300      	movs	r3, #0
}
 8003be6:	4618      	mov	r0, r3
 8003be8:	374c      	adds	r7, #76	; 0x4c
 8003bea:	46bd      	mov	sp, r7
 8003bec:	bd90      	pop	{r4, r7, pc}
 8003bee:	bf00      	nop
 8003bf0:	0800af28 	.word	0x0800af28
 8003bf4:	0800af38 	.word	0x0800af38
 8003bf8:	0800af44 	.word	0x0800af44
 8003bfc:	58004000 	.word	0x58004000

08003c00 <LL_RCC_LSE_IsEnabled>:
{
 8003c00:	b480      	push	{r7}
 8003c02:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8003c04:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c0c:	f003 0301 	and.w	r3, r3, #1
 8003c10:	2b01      	cmp	r3, #1
 8003c12:	d101      	bne.n	8003c18 <LL_RCC_LSE_IsEnabled+0x18>
 8003c14:	2301      	movs	r3, #1
 8003c16:	e000      	b.n	8003c1a <LL_RCC_LSE_IsEnabled+0x1a>
 8003c18:	2300      	movs	r3, #0
}
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c22:	4770      	bx	lr

08003c24 <LL_RCC_LSE_IsReady>:
{
 8003c24:	b480      	push	{r7}
 8003c26:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8003c28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c30:	f003 0302 	and.w	r3, r3, #2
 8003c34:	2b02      	cmp	r3, #2
 8003c36:	d101      	bne.n	8003c3c <LL_RCC_LSE_IsReady+0x18>
 8003c38:	2301      	movs	r3, #1
 8003c3a:	e000      	b.n	8003c3e <LL_RCC_LSE_IsReady+0x1a>
 8003c3c:	2300      	movs	r3, #0
}
 8003c3e:	4618      	mov	r0, r3
 8003c40:	46bd      	mov	sp, r7
 8003c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c46:	4770      	bx	lr

08003c48 <LL_RCC_SetRFWKPClockSource>:
{
 8003c48:	b480      	push	{r7}
 8003c4a:	b083      	sub	sp, #12
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8003c50:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c54:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c58:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003c5c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	4313      	orrs	r3, r2
 8003c64:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8003c68:	bf00      	nop
 8003c6a:	370c      	adds	r7, #12
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c72:	4770      	bx	lr

08003c74 <LL_RCC_SetSMPSClockSource>:
{
 8003c74:	b480      	push	{r7}
 8003c76:	b083      	sub	sp, #12
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8003c7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c82:	f023 0203 	bic.w	r2, r3, #3
 8003c86:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	4313      	orrs	r3, r2
 8003c8e:	624b      	str	r3, [r1, #36]	; 0x24
}
 8003c90:	bf00      	nop
 8003c92:	370c      	adds	r7, #12
 8003c94:	46bd      	mov	sp, r7
 8003c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9a:	4770      	bx	lr

08003c9c <LL_RCC_SetSMPSPrescaler>:
{
 8003c9c:	b480      	push	{r7}
 8003c9e:	b083      	sub	sp, #12
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8003ca4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003caa:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003cae:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	4313      	orrs	r3, r2
 8003cb6:	624b      	str	r3, [r1, #36]	; 0x24
}
 8003cb8:	bf00      	nop
 8003cba:	370c      	adds	r7, #12
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc2:	4770      	bx	lr

08003cc4 <LL_RCC_SetUSARTClockSource>:
{
 8003cc4:	b480      	push	{r7}
 8003cc6:	b083      	sub	sp, #12
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8003ccc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003cd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cd4:	f023 0203 	bic.w	r2, r3, #3
 8003cd8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	4313      	orrs	r3, r2
 8003ce0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003ce4:	bf00      	nop
 8003ce6:	370c      	adds	r7, #12
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cee:	4770      	bx	lr

08003cf0 <LL_RCC_SetLPUARTClockSource>:
{
 8003cf0:	b480      	push	{r7}
 8003cf2:	b083      	sub	sp, #12
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8003cf8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003cfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d00:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003d04:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	4313      	orrs	r3, r2
 8003d0c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003d10:	bf00      	nop
 8003d12:	370c      	adds	r7, #12
 8003d14:	46bd      	mov	sp, r7
 8003d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1a:	4770      	bx	lr

08003d1c <LL_RCC_SetI2CClockSource>:
{
 8003d1c:	b480      	push	{r7}
 8003d1e:	b083      	sub	sp, #12
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8003d24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d28:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	091b      	lsrs	r3, r3, #4
 8003d30:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8003d34:	43db      	mvns	r3, r3
 8003d36:	401a      	ands	r2, r3
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	011b      	lsls	r3, r3, #4
 8003d3c:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8003d40:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003d44:	4313      	orrs	r3, r2
 8003d46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003d4a:	bf00      	nop
 8003d4c:	370c      	adds	r7, #12
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d54:	4770      	bx	lr

08003d56 <LL_RCC_SetLPTIMClockSource>:
{
 8003d56:	b480      	push	{r7}
 8003d58:	b083      	sub	sp, #12
 8003d5a:	af00      	add	r7, sp, #0
 8003d5c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8003d5e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d62:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	0c1b      	lsrs	r3, r3, #16
 8003d6a:	041b      	lsls	r3, r3, #16
 8003d6c:	43db      	mvns	r3, r3
 8003d6e:	401a      	ands	r2, r3
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	041b      	lsls	r3, r3, #16
 8003d74:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003d78:	4313      	orrs	r3, r2
 8003d7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003d7e:	bf00      	nop
 8003d80:	370c      	adds	r7, #12
 8003d82:	46bd      	mov	sp, r7
 8003d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d88:	4770      	bx	lr

08003d8a <LL_RCC_SetSAIClockSource>:
{
 8003d8a:	b480      	push	{r7}
 8003d8c:	b083      	sub	sp, #12
 8003d8e:	af00      	add	r7, sp, #0
 8003d90:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8003d92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d9a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003d9e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	4313      	orrs	r3, r2
 8003da6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003daa:	bf00      	nop
 8003dac:	370c      	adds	r7, #12
 8003dae:	46bd      	mov	sp, r7
 8003db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db4:	4770      	bx	lr

08003db6 <LL_RCC_SetRNGClockSource>:
{
 8003db6:	b480      	push	{r7}
 8003db8:	b083      	sub	sp, #12
 8003dba:	af00      	add	r7, sp, #0
 8003dbc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8003dbe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003dc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dc6:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8003dca:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	4313      	orrs	r3, r2
 8003dd2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003dd6:	bf00      	nop
 8003dd8:	370c      	adds	r7, #12
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de0:	4770      	bx	lr

08003de2 <LL_RCC_SetCLK48ClockSource>:
{
 8003de2:	b480      	push	{r7}
 8003de4:	b083      	sub	sp, #12
 8003de6:	af00      	add	r7, sp, #0
 8003de8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8003dea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003dee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003df2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003df6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	4313      	orrs	r3, r2
 8003dfe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003e02:	bf00      	nop
 8003e04:	370c      	adds	r7, #12
 8003e06:	46bd      	mov	sp, r7
 8003e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0c:	4770      	bx	lr

08003e0e <LL_RCC_SetUSBClockSource>:
{
 8003e0e:	b580      	push	{r7, lr}
 8003e10:	b082      	sub	sp, #8
 8003e12:	af00      	add	r7, sp, #0
 8003e14:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8003e16:	6878      	ldr	r0, [r7, #4]
 8003e18:	f7ff ffe3 	bl	8003de2 <LL_RCC_SetCLK48ClockSource>
}
 8003e1c:	bf00      	nop
 8003e1e:	3708      	adds	r7, #8
 8003e20:	46bd      	mov	sp, r7
 8003e22:	bd80      	pop	{r7, pc}

08003e24 <LL_RCC_SetADCClockSource>:
{
 8003e24:	b480      	push	{r7}
 8003e26:	b083      	sub	sp, #12
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8003e2c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e34:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003e38:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	4313      	orrs	r3, r2
 8003e40:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003e44:	bf00      	nop
 8003e46:	370c      	adds	r7, #12
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4e:	4770      	bx	lr

08003e50 <LL_RCC_SetRTCClockSource>:
{
 8003e50:	b480      	push	{r7}
 8003e52:	b083      	sub	sp, #12
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8003e58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e60:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003e64:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	4313      	orrs	r3, r2
 8003e6c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8003e70:	bf00      	nop
 8003e72:	370c      	adds	r7, #12
 8003e74:	46bd      	mov	sp, r7
 8003e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7a:	4770      	bx	lr

08003e7c <LL_RCC_GetRTCClockSource>:
{
 8003e7c:	b480      	push	{r7}
 8003e7e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8003e80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e88:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e94:	4770      	bx	lr

08003e96 <LL_RCC_ForceBackupDomainReset>:
{
 8003e96:	b480      	push	{r7}
 8003e98:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8003e9a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ea2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003ea6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003eaa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003eae:	bf00      	nop
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb6:	4770      	bx	lr

08003eb8 <LL_RCC_ReleaseBackupDomainReset>:
{
 8003eb8:	b480      	push	{r7}
 8003eba:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8003ebc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ec0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ec4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003ec8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ecc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003ed0:	bf00      	nop
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed8:	4770      	bx	lr

08003eda <LL_RCC_PLLSAI1_Enable>:
{
 8003eda:	b480      	push	{r7}
 8003edc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8003ede:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003ee8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003eec:	6013      	str	r3, [r2, #0]
}
 8003eee:	bf00      	nop
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef6:	4770      	bx	lr

08003ef8 <LL_RCC_PLLSAI1_Disable>:
{
 8003ef8:	b480      	push	{r7}
 8003efa:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8003efc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003f06:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003f0a:	6013      	str	r3, [r2, #0]
}
 8003f0c:	bf00      	nop
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f14:	4770      	bx	lr

08003f16 <LL_RCC_PLLSAI1_IsReady>:
{
 8003f16:	b480      	push	{r7}
 8003f18:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8003f1a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003f24:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003f28:	d101      	bne.n	8003f2e <LL_RCC_PLLSAI1_IsReady+0x18>
 8003f2a:	2301      	movs	r3, #1
 8003f2c:	e000      	b.n	8003f30 <LL_RCC_PLLSAI1_IsReady+0x1a>
 8003f2e:	2300      	movs	r3, #0
}
 8003f30:	4618      	mov	r0, r3
 8003f32:	46bd      	mov	sp, r7
 8003f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f38:	4770      	bx	lr

08003f3a <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003f3a:	b580      	push	{r7, lr}
 8003f3c:	b088      	sub	sp, #32
 8003f3e:	af00      	add	r7, sp, #0
 8003f40:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8003f42:	2300      	movs	r3, #0
 8003f44:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8003f46:	2300      	movs	r3, #0
 8003f48:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d034      	beq.n	8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f5a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003f5e:	d021      	beq.n	8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8003f60:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003f64:	d81b      	bhi.n	8003f9e <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003f66:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003f6a:	d01d      	beq.n	8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8003f6c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003f70:	d815      	bhi.n	8003f9e <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d00b      	beq.n	8003f8e <HAL_RCCEx_PeriphCLKConfig+0x54>
 8003f76:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003f7a:	d110      	bne.n	8003f9e <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8003f7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f80:	68db      	ldr	r3, [r3, #12]
 8003f82:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003f86:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f8a:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8003f8c:	e00d      	b.n	8003faa <HAL_RCCEx_PeriphCLKConfig+0x70>

#if defined(SAI1)
      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	3304      	adds	r3, #4
 8003f92:	4618      	mov	r0, r3
 8003f94:	f000 f947 	bl	8004226 <RCCEx_PLLSAI1_ConfigNP>
 8003f98:	4603      	mov	r3, r0
 8003f9a:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8003f9c:	e005      	b.n	8003faa <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8003f9e:	2301      	movs	r3, #1
 8003fa0:	77fb      	strb	r3, [r7, #31]
        break;
 8003fa2:	e002      	b.n	8003faa <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8003fa4:	bf00      	nop
 8003fa6:	e000      	b.n	8003faa <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8003fa8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003faa:	7ffb      	ldrb	r3, [r7, #31]
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d105      	bne.n	8003fbc <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fb4:	4618      	mov	r0, r3
 8003fb6:	f7ff fee8 	bl	8003d8a <LL_RCC_SetSAIClockSource>
 8003fba:	e001      	b.n	8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fbc:	7ffb      	ldrb	r3, [r7, #31]
 8003fbe:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d046      	beq.n	800405a <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8003fcc:	f7ff ff56 	bl	8003e7c <LL_RCC_GetRTCClockSource>
 8003fd0:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fd6:	69ba      	ldr	r2, [r7, #24]
 8003fd8:	429a      	cmp	r2, r3
 8003fda:	d03c      	beq.n	8004056 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8003fdc:	f7fe fc4c 	bl	8002878 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8003fe0:	69bb      	ldr	r3, [r7, #24]
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d105      	bne.n	8003ff2 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fea:	4618      	mov	r0, r3
 8003fec:	f7ff ff30 	bl	8003e50 <LL_RCC_SetRTCClockSource>
 8003ff0:	e02e      	b.n	8004050 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8003ff2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ff6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ffa:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8003ffc:	f7ff ff4b 	bl	8003e96 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8004000:	f7ff ff5a 	bl	8003eb8 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8004004:	697b      	ldr	r3, [r7, #20]
 8004006:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800400e:	4313      	orrs	r3, r2
 8004010:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8004012:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004016:	697b      	ldr	r3, [r7, #20]
 8004018:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 800401c:	f7ff fdf0 	bl	8003c00 <LL_RCC_LSE_IsEnabled>
 8004020:	4603      	mov	r3, r0
 8004022:	2b01      	cmp	r3, #1
 8004024:	d114      	bne.n	8004050 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004026:	f7fd fd1f 	bl	8001a68 <HAL_GetTick>
 800402a:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 800402c:	e00b      	b.n	8004046 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800402e:	f7fd fd1b 	bl	8001a68 <HAL_GetTick>
 8004032:	4602      	mov	r2, r0
 8004034:	693b      	ldr	r3, [r7, #16]
 8004036:	1ad3      	subs	r3, r2, r3
 8004038:	f241 3288 	movw	r2, #5000	; 0x1388
 800403c:	4293      	cmp	r3, r2
 800403e:	d902      	bls.n	8004046 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 8004040:	2303      	movs	r3, #3
 8004042:	77fb      	strb	r3, [r7, #31]
              break;
 8004044:	e004      	b.n	8004050 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 8004046:	f7ff fded 	bl	8003c24 <LL_RCC_LSE_IsReady>
 800404a:	4603      	mov	r3, r0
 800404c:	2b01      	cmp	r3, #1
 800404e:	d1ee      	bne.n	800402e <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8004050:	7ffb      	ldrb	r3, [r7, #31]
 8004052:	77bb      	strb	r3, [r7, #30]
 8004054:	e001      	b.n	800405a <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004056:	7ffb      	ldrb	r3, [r7, #31]
 8004058:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f003 0301 	and.w	r3, r3, #1
 8004062:	2b00      	cmp	r3, #0
 8004064:	d004      	beq.n	8004070 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	699b      	ldr	r3, [r3, #24]
 800406a:	4618      	mov	r0, r3
 800406c:	f7ff fe2a 	bl	8003cc4 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f003 0302 	and.w	r3, r3, #2
 8004078:	2b00      	cmp	r3, #0
 800407a:	d004      	beq.n	8004086 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	69db      	ldr	r3, [r3, #28]
 8004080:	4618      	mov	r0, r3
 8004082:	f7ff fe35 	bl	8003cf0 <LL_RCC_SetLPUARTClockSource>
  }
#endif

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f003 0310 	and.w	r3, r3, #16
 800408e:	2b00      	cmp	r3, #0
 8004090:	d004      	beq.n	800409c <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004096:	4618      	mov	r0, r3
 8004098:	f7ff fe5d 	bl	8003d56 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f003 0320 	and.w	r3, r3, #32
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d004      	beq.n	80040b2 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040ac:	4618      	mov	r0, r3
 80040ae:	f7ff fe52 	bl	8003d56 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f003 0304 	and.w	r3, r3, #4
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d004      	beq.n	80040c8 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6a1b      	ldr	r3, [r3, #32]
 80040c2:	4618      	mov	r0, r3
 80040c4:	f7ff fe2a 	bl	8003d1c <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f003 0308 	and.w	r3, r3, #8
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d004      	beq.n	80040de <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040d8:	4618      	mov	r0, r3
 80040da:	f7ff fe1f 	bl	8003d1c <LL_RCC_SetI2CClockSource>
  }
#endif

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d022      	beq.n	8004130 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040ee:	4618      	mov	r0, r3
 80040f0:	f7ff fe8d 	bl	8003e0e <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040f8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80040fc:	d107      	bne.n	800410e <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 80040fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004102:	68db      	ldr	r3, [r3, #12]
 8004104:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004108:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800410c:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
  if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004112:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004116:	d10b      	bne.n	8004130 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	3304      	adds	r3, #4
 800411c:	4618      	mov	r0, r3
 800411e:	f000 f8dd 	bl	80042dc <RCCEx_PLLSAI1_ConfigNQ>
 8004122:	4603      	mov	r3, r0
 8004124:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 8004126:	7ffb      	ldrb	r3, [r7, #31]
 8004128:	2b00      	cmp	r3, #0
 800412a:	d001      	beq.n	8004130 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* set overall return value */
      status = ret;
 800412c:	7ffb      	ldrb	r3, [r7, #31]
 800412e:	77bb      	strb	r3, [r7, #30]
#endif
  }
#endif

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004138:	2b00      	cmp	r3, #0
 800413a:	d02b      	beq.n	8004194 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004140:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004144:	d008      	beq.n	8004158 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800414a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800414e:	d003      	beq.n	8004158 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004154:	2b00      	cmp	r3, #0
 8004156:	d105      	bne.n	8004164 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800415c:	4618      	mov	r0, r3
 800415e:	f7ff fe2a 	bl	8003db6 <LL_RCC_SetRNGClockSource>
 8004162:	e00a      	b.n	800417a <HAL_RCCEx_PeriphCLKConfig+0x240>
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004168:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800416c:	60fb      	str	r3, [r7, #12]
 800416e:	2000      	movs	r0, #0
 8004170:	f7ff fe21 	bl	8003db6 <LL_RCC_SetRNGClockSource>
 8004174:	68f8      	ldr	r0, [r7, #12]
 8004176:	f7ff fe34 	bl	8003de2 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800417e:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8004182:	d107      	bne.n	8004194 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8004184:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004188:	68db      	ldr	r3, [r3, #12]
 800418a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800418e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004192:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800419c:	2b00      	cmp	r3, #0
 800419e:	d022      	beq.n	80041e6 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041a4:	4618      	mov	r0, r3
 80041a6:	f7ff fe3d 	bl	8003e24 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041ae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80041b2:	d107      	bne.n	80041c4 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80041b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041b8:	68db      	ldr	r3, [r3, #12]
 80041ba:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80041be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041c2:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
  if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041c8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80041cc:	d10b      	bne.n	80041e6 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	3304      	adds	r3, #4
 80041d2:	4618      	mov	r0, r3
 80041d4:	f000 f8dd 	bl	8004392 <RCCEx_PLLSAI1_ConfigNR>
 80041d8:	4603      	mov	r3, r0
 80041da:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 80041dc:	7ffb      	ldrb	r3, [r7, #31]
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d001      	beq.n	80041e6 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* set overall return value */
      status = ret;
 80041e2:	7ffb      	ldrb	r3, [r7, #31]
 80041e4:	77bb      	strb	r3, [r7, #30]
  }
#endif
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d004      	beq.n	80041fc <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041f6:	4618      	mov	r0, r3
 80041f8:	f7ff fd26 	bl	8003c48 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004204:	2b00      	cmp	r3, #0
 8004206:	d009      	beq.n	800421c <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800420c:	4618      	mov	r0, r3
 800420e:	f7ff fd45 	bl	8003c9c <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004216:	4618      	mov	r0, r3
 8004218:	f7ff fd2c 	bl	8003c74 <LL_RCC_SetSMPSClockSource>
  }
#endif


  return status;
 800421c:	7fbb      	ldrb	r3, [r7, #30]
}
 800421e:	4618      	mov	r0, r3
 8004220:	3720      	adds	r7, #32
 8004222:	46bd      	mov	sp, r7
 8004224:	bd80      	pop	{r7, pc}

08004226 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8004226:	b580      	push	{r7, lr}
 8004228:	b084      	sub	sp, #16
 800422a:	af00      	add	r7, sp, #0
 800422c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800422e:	2300      	movs	r3, #0
 8004230:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8004232:	f7ff fe61 	bl	8003ef8 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004236:	f7fd fc17 	bl	8001a68 <HAL_GetTick>
 800423a:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800423c:	e009      	b.n	8004252 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800423e:	f7fd fc13 	bl	8001a68 <HAL_GetTick>
 8004242:	4602      	mov	r2, r0
 8004244:	68bb      	ldr	r3, [r7, #8]
 8004246:	1ad3      	subs	r3, r2, r3
 8004248:	2b02      	cmp	r3, #2
 800424a:	d902      	bls.n	8004252 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 800424c:	2303      	movs	r3, #3
 800424e:	73fb      	strb	r3, [r7, #15]
      break;
 8004250:	e004      	b.n	800425c <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8004252:	f7ff fe60 	bl	8003f16 <LL_RCC_PLLSAI1_IsReady>
 8004256:	4603      	mov	r3, r0
 8004258:	2b00      	cmp	r3, #0
 800425a:	d1f0      	bne.n	800423e <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 800425c:	7bfb      	ldrb	r3, [r7, #15]
 800425e:	2b00      	cmp	r3, #0
 8004260:	d137      	bne.n	80042d2 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8004262:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004266:	691b      	ldr	r3, [r3, #16]
 8004268:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	021b      	lsls	r3, r3, #8
 8004272:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004276:	4313      	orrs	r3, r2
 8004278:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 800427a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800427e:	691b      	ldr	r3, [r3, #16]
 8004280:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	685b      	ldr	r3, [r3, #4]
 8004288:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800428c:	4313      	orrs	r3, r2
 800428e:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8004290:	f7ff fe23 	bl	8003eda <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004294:	f7fd fbe8 	bl	8001a68 <HAL_GetTick>
 8004298:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800429a:	e009      	b.n	80042b0 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800429c:	f7fd fbe4 	bl	8001a68 <HAL_GetTick>
 80042a0:	4602      	mov	r2, r0
 80042a2:	68bb      	ldr	r3, [r7, #8]
 80042a4:	1ad3      	subs	r3, r2, r3
 80042a6:	2b02      	cmp	r3, #2
 80042a8:	d902      	bls.n	80042b0 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 80042aa:	2303      	movs	r3, #3
 80042ac:	73fb      	strb	r3, [r7, #15]
        break;
 80042ae:	e004      	b.n	80042ba <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80042b0:	f7ff fe31 	bl	8003f16 <LL_RCC_PLLSAI1_IsReady>
 80042b4:	4603      	mov	r3, r0
 80042b6:	2b01      	cmp	r3, #1
 80042b8:	d1f0      	bne.n	800429c <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 80042ba:	7bfb      	ldrb	r3, [r7, #15]
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d108      	bne.n	80042d2 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80042c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042c4:	691a      	ldr	r2, [r3, #16]
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	691b      	ldr	r3, [r3, #16]
 80042ca:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80042ce:	4313      	orrs	r3, r2
 80042d0:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80042d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80042d4:	4618      	mov	r0, r3
 80042d6:	3710      	adds	r7, #16
 80042d8:	46bd      	mov	sp, r7
 80042da:	bd80      	pop	{r7, pc}

080042dc <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80042dc:	b580      	push	{r7, lr}
 80042de:	b084      	sub	sp, #16
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80042e4:	2300      	movs	r3, #0
 80042e6:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80042e8:	f7ff fe06 	bl	8003ef8 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80042ec:	f7fd fbbc 	bl	8001a68 <HAL_GetTick>
 80042f0:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80042f2:	e009      	b.n	8004308 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80042f4:	f7fd fbb8 	bl	8001a68 <HAL_GetTick>
 80042f8:	4602      	mov	r2, r0
 80042fa:	68bb      	ldr	r3, [r7, #8]
 80042fc:	1ad3      	subs	r3, r2, r3
 80042fe:	2b02      	cmp	r3, #2
 8004300:	d902      	bls.n	8004308 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8004302:	2303      	movs	r3, #3
 8004304:	73fb      	strb	r3, [r7, #15]
      break;
 8004306:	e004      	b.n	8004312 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8004308:	f7ff fe05 	bl	8003f16 <LL_RCC_PLLSAI1_IsReady>
 800430c:	4603      	mov	r3, r0
 800430e:	2b00      	cmp	r3, #0
 8004310:	d1f0      	bne.n	80042f4 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8004312:	7bfb      	ldrb	r3, [r7, #15]
 8004314:	2b00      	cmp	r3, #0
 8004316:	d137      	bne.n	8004388 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8004318:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800431c:	691b      	ldr	r3, [r3, #16]
 800431e:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	021b      	lsls	r3, r3, #8
 8004328:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800432c:	4313      	orrs	r3, r2
 800432e:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8004330:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004334:	691b      	ldr	r3, [r3, #16]
 8004336:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	689b      	ldr	r3, [r3, #8]
 800433e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004342:	4313      	orrs	r3, r2
 8004344:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8004346:	f7ff fdc8 	bl	8003eda <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800434a:	f7fd fb8d 	bl	8001a68 <HAL_GetTick>
 800434e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8004350:	e009      	b.n	8004366 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004352:	f7fd fb89 	bl	8001a68 <HAL_GetTick>
 8004356:	4602      	mov	r2, r0
 8004358:	68bb      	ldr	r3, [r7, #8]
 800435a:	1ad3      	subs	r3, r2, r3
 800435c:	2b02      	cmp	r3, #2
 800435e:	d902      	bls.n	8004366 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8004360:	2303      	movs	r3, #3
 8004362:	73fb      	strb	r3, [r7, #15]
        break;
 8004364:	e004      	b.n	8004370 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8004366:	f7ff fdd6 	bl	8003f16 <LL_RCC_PLLSAI1_IsReady>
 800436a:	4603      	mov	r3, r0
 800436c:	2b01      	cmp	r3, #1
 800436e:	d1f0      	bne.n	8004352 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8004370:	7bfb      	ldrb	r3, [r7, #15]
 8004372:	2b00      	cmp	r3, #0
 8004374:	d108      	bne.n	8004388 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8004376:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800437a:	691a      	ldr	r2, [r3, #16]
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	691b      	ldr	r3, [r3, #16]
 8004380:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004384:	4313      	orrs	r3, r2
 8004386:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8004388:	7bfb      	ldrb	r3, [r7, #15]
}
 800438a:	4618      	mov	r0, r3
 800438c:	3710      	adds	r7, #16
 800438e:	46bd      	mov	sp, r7
 8004390:	bd80      	pop	{r7, pc}

08004392 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8004392:	b580      	push	{r7, lr}
 8004394:	b084      	sub	sp, #16
 8004396:	af00      	add	r7, sp, #0
 8004398:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800439a:	2300      	movs	r3, #0
 800439c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800439e:	f7ff fdab 	bl	8003ef8 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80043a2:	f7fd fb61 	bl	8001a68 <HAL_GetTick>
 80043a6:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80043a8:	e009      	b.n	80043be <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80043aa:	f7fd fb5d 	bl	8001a68 <HAL_GetTick>
 80043ae:	4602      	mov	r2, r0
 80043b0:	68bb      	ldr	r3, [r7, #8]
 80043b2:	1ad3      	subs	r3, r2, r3
 80043b4:	2b02      	cmp	r3, #2
 80043b6:	d902      	bls.n	80043be <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 80043b8:	2303      	movs	r3, #3
 80043ba:	73fb      	strb	r3, [r7, #15]
      break;
 80043bc:	e004      	b.n	80043c8 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80043be:	f7ff fdaa 	bl	8003f16 <LL_RCC_PLLSAI1_IsReady>
 80043c2:	4603      	mov	r3, r0
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d1f0      	bne.n	80043aa <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 80043c8:	7bfb      	ldrb	r3, [r7, #15]
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d137      	bne.n	800443e <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80043ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043d2:	691b      	ldr	r3, [r3, #16]
 80043d4:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	021b      	lsls	r3, r3, #8
 80043de:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80043e2:	4313      	orrs	r3, r2
 80043e4:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 80043e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043ea:	691b      	ldr	r3, [r3, #16]
 80043ec:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	68db      	ldr	r3, [r3, #12]
 80043f4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80043f8:	4313      	orrs	r3, r2
 80043fa:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80043fc:	f7ff fd6d 	bl	8003eda <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004400:	f7fd fb32 	bl	8001a68 <HAL_GetTick>
 8004404:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8004406:	e009      	b.n	800441c <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004408:	f7fd fb2e 	bl	8001a68 <HAL_GetTick>
 800440c:	4602      	mov	r2, r0
 800440e:	68bb      	ldr	r3, [r7, #8]
 8004410:	1ad3      	subs	r3, r2, r3
 8004412:	2b02      	cmp	r3, #2
 8004414:	d902      	bls.n	800441c <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8004416:	2303      	movs	r3, #3
 8004418:	73fb      	strb	r3, [r7, #15]
        break;
 800441a:	e004      	b.n	8004426 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800441c:	f7ff fd7b 	bl	8003f16 <LL_RCC_PLLSAI1_IsReady>
 8004420:	4603      	mov	r3, r0
 8004422:	2b01      	cmp	r3, #1
 8004424:	d1f0      	bne.n	8004408 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8004426:	7bfb      	ldrb	r3, [r7, #15]
 8004428:	2b00      	cmp	r3, #0
 800442a:	d108      	bne.n	800443e <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800442c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004430:	691a      	ldr	r2, [r3, #16]
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	691b      	ldr	r3, [r3, #16]
 8004436:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800443a:	4313      	orrs	r3, r2
 800443c:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800443e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004440:	4618      	mov	r0, r3
 8004442:	3710      	adds	r7, #16
 8004444:	46bd      	mov	sp, r7
 8004446:	bd80      	pop	{r7, pc}

08004448 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004448:	b580      	push	{r7, lr}
 800444a:	b082      	sub	sp, #8
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2b00      	cmp	r3, #0
 8004454:	d101      	bne.n	800445a <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 8004456:	2301      	movs	r3, #1
 8004458:	e090      	b.n	800457c <HAL_RTC_Init+0x134>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004460:	b2db      	uxtb	r3, r3
 8004462:	2b00      	cmp	r3, #0
 8004464:	d106      	bne.n	8004474 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	2200      	movs	r2, #0
 800446a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800446e:	6878      	ldr	r0, [r7, #4]
 8004470:	f7fc ffde 	bl	8001430 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2202      	movs	r2, #2
 8004478:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	22ca      	movs	r2, #202	; 0xca
 8004482:	625a      	str	r2, [r3, #36]	; 0x24
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	2253      	movs	r2, #83	; 0x53
 800448a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800448c:	6878      	ldr	r0, [r7, #4]
 800448e:	f000 f89f 	bl	80045d0 <RTC_EnterInitMode>
 8004492:	4603      	mov	r3, r0
 8004494:	2b00      	cmp	r3, #0
 8004496:	d009      	beq.n	80044ac <HAL_RTC_Init+0x64>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	22ff      	movs	r2, #255	; 0xff
 800449e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2204      	movs	r2, #4
 80044a4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    return HAL_ERROR;
 80044a8:	2301      	movs	r3, #1
 80044aa:	e067      	b.n	800457c <HAL_RTC_Init+0x134>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	689b      	ldr	r3, [r3, #8]
 80044b2:	687a      	ldr	r2, [r7, #4]
 80044b4:	6812      	ldr	r2, [r2, #0]
 80044b6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80044ba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80044be:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	6899      	ldr	r1, [r3, #8]
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	685a      	ldr	r2, [r3, #4]
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	691b      	ldr	r3, [r3, #16]
 80044ce:	431a      	orrs	r2, r3
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	699b      	ldr	r3, [r3, #24]
 80044d4:	431a      	orrs	r2, r3
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	430a      	orrs	r2, r1
 80044dc:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	687a      	ldr	r2, [r7, #4]
 80044e4:	68d2      	ldr	r2, [r2, #12]
 80044e6:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	6919      	ldr	r1, [r3, #16]
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	689b      	ldr	r3, [r3, #8]
 80044f2:	041a      	lsls	r2, r3, #16
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	430a      	orrs	r2, r1
 80044fa:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	68da      	ldr	r2, [r3, #12]
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800450a:	60da      	str	r2, [r3, #12]

#if defined(RTC_OR_ALARMOUTTYPE)
    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f022 0203 	bic.w	r2, r2, #3
 800451a:	64da      	str	r2, [r3, #76]	; 0x4c
#else
    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_OUT_RMP);
#endif
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	69da      	ldr	r2, [r3, #28]
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	695b      	ldr	r3, [r3, #20]
 800452a:	431a      	orrs	r2, r3
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	430a      	orrs	r2, r1
 8004532:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	689b      	ldr	r3, [r3, #8]
 800453a:	f003 0320 	and.w	r3, r3, #32
 800453e:	2b00      	cmp	r3, #0
 8004540:	d113      	bne.n	800456a <HAL_RTC_Init+0x122>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004542:	6878      	ldr	r0, [r7, #4]
 8004544:	f000 f81e 	bl	8004584 <HAL_RTC_WaitForSynchro>
 8004548:	4603      	mov	r3, r0
 800454a:	2b00      	cmp	r3, #0
 800454c:	d00d      	beq.n	800456a <HAL_RTC_Init+0x122>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	22ff      	movs	r2, #255	; 0xff
 8004554:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	2204      	movs	r2, #4
 800455a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	2200      	movs	r2, #0
 8004562:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8004566:	2301      	movs	r3, #1
 8004568:	e008      	b.n	800457c <HAL_RTC_Init+0x134>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	22ff      	movs	r2, #255	; 0xff
 8004570:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	2201      	movs	r2, #1
 8004576:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    return HAL_OK;
 800457a:	2300      	movs	r3, #0
  }
}
 800457c:	4618      	mov	r0, r3
 800457e:	3708      	adds	r7, #8
 8004580:	46bd      	mov	sp, r7
 8004582:	bd80      	pop	{r7, pc}

08004584 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8004584:	b580      	push	{r7, lr}
 8004586:	b084      	sub	sp, #16
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	68da      	ldr	r2, [r3, #12]
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800459a:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 800459c:	f7fd fa64 	bl	8001a68 <HAL_GetTick>
 80045a0:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80045a2:	e009      	b.n	80045b8 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80045a4:	f7fd fa60 	bl	8001a68 <HAL_GetTick>
 80045a8:	4602      	mov	r2, r0
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	1ad3      	subs	r3, r2, r3
 80045ae:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80045b2:	d901      	bls.n	80045b8 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 80045b4:	2303      	movs	r3, #3
 80045b6:	e007      	b.n	80045c8 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	68db      	ldr	r3, [r3, #12]
 80045be:	f003 0320 	and.w	r3, r3, #32
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d0ee      	beq.n	80045a4 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 80045c6:	2300      	movs	r3, #0
}
 80045c8:	4618      	mov	r0, r3
 80045ca:	3710      	adds	r7, #16
 80045cc:	46bd      	mov	sp, r7
 80045ce:	bd80      	pop	{r7, pc}

080045d0 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80045d0:	b580      	push	{r7, lr}
 80045d2:	b084      	sub	sp, #16
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	68db      	ldr	r3, [r3, #12]
 80045de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d119      	bne.n	800461a <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f04f 32ff 	mov.w	r2, #4294967295
 80045ee:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80045f0:	f7fd fa3a 	bl	8001a68 <HAL_GetTick>
 80045f4:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80045f6:	e009      	b.n	800460c <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80045f8:	f7fd fa36 	bl	8001a68 <HAL_GetTick>
 80045fc:	4602      	mov	r2, r0
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	1ad3      	subs	r3, r2, r3
 8004602:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004606:	d901      	bls.n	800460c <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 8004608:	2303      	movs	r3, #3
 800460a:	e007      	b.n	800461c <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	68db      	ldr	r3, [r3, #12]
 8004612:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004616:	2b00      	cmp	r3, #0
 8004618:	d0ee      	beq.n	80045f8 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 800461a:	2300      	movs	r3, #0
}
 800461c:	4618      	mov	r0, r3
 800461e:	3710      	adds	r7, #16
 8004620:	46bd      	mov	sp, r7
 8004622:	bd80      	pop	{r7, pc}

08004624 <HAL_RTCEx_SetWakeUpTimer>:
  * @param WakeUpCounter Wake up counter
  * @param WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8004624:	b580      	push	{r7, lr}
 8004626:	b086      	sub	sp, #24
 8004628:	af00      	add	r7, sp, #0
 800462a:	60f8      	str	r0, [r7, #12]
 800462c:	60b9      	str	r1, [r7, #8]
 800462e:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004636:	2b01      	cmp	r3, #1
 8004638:	d101      	bne.n	800463e <HAL_RTCEx_SetWakeUpTimer+0x1a>
 800463a:	2302      	movs	r3, #2
 800463c:	e089      	b.n	8004752 <HAL_RTCEx_SetWakeUpTimer+0x12e>
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	2201      	movs	r2, #1
 8004642:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	2202      	movs	r2, #2
 800464a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	22ca      	movs	r2, #202	; 0xca
 8004654:	625a      	str	r2, [r3, #36]	; 0x24
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	2253      	movs	r2, #83	; 0x53
 800465c:	625a      	str	r2, [r3, #36]	; 0x24

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	689b      	ldr	r3, [r3, #8]
 8004664:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004668:	2b00      	cmp	r3, #0
 800466a:	d020      	beq.n	80046ae <HAL_RTCEx_SetWakeUpTimer+0x8a>
  {
    tickstart = HAL_GetTick();
 800466c:	f7fd f9fc 	bl	8001a68 <HAL_GetTick>
 8004670:	6178      	str	r0, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 8004672:	e015      	b.n	80046a0 <HAL_RTCEx_SetWakeUpTimer+0x7c>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004674:	f7fd f9f8 	bl	8001a68 <HAL_GetTick>
 8004678:	4602      	mov	r2, r0
 800467a:	697b      	ldr	r3, [r7, #20]
 800467c:	1ad3      	subs	r3, r2, r3
 800467e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004682:	d90d      	bls.n	80046a0 <HAL_RTCEx_SetWakeUpTimer+0x7c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	22ff      	movs	r2, #255	; 0xff
 800468a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	2203      	movs	r2, #3
 8004690:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	2200      	movs	r2, #0
 8004698:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 800469c:	2303      	movs	r3, #3
 800469e:	e058      	b.n	8004752 <HAL_RTCEx_SetWakeUpTimer+0x12e>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	68db      	ldr	r3, [r3, #12]
 80046a6:	f003 0304 	and.w	r3, r3, #4
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d1e2      	bne.n	8004674 <HAL_RTCEx_SetWakeUpTimer+0x50>
      }
    }
  }

  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	689a      	ldr	r2, [r3, #8]
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80046bc:	609a      	str	r2, [r3, #8]

  tickstart = HAL_GetTick();
 80046be:	f7fd f9d3 	bl	8001a68 <HAL_GetTick>
 80046c2:	6178      	str	r0, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 80046c4:	e015      	b.n	80046f2 <HAL_RTCEx_SetWakeUpTimer+0xce>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80046c6:	f7fd f9cf 	bl	8001a68 <HAL_GetTick>
 80046ca:	4602      	mov	r2, r0
 80046cc:	697b      	ldr	r3, [r7, #20]
 80046ce:	1ad3      	subs	r3, r2, r3
 80046d0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80046d4:	d90d      	bls.n	80046f2 <HAL_RTCEx_SetWakeUpTimer+0xce>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	22ff      	movs	r2, #255	; 0xff
 80046dc:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	2203      	movs	r2, #3
 80046e2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	2200      	movs	r2, #0
 80046ea:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 80046ee:	2303      	movs	r3, #3
 80046f0:	e02f      	b.n	8004752 <HAL_RTCEx_SetWakeUpTimer+0x12e>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	68db      	ldr	r3, [r3, #12]
 80046f8:	f003 0304 	and.w	r3, r3, #4
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d0e2      	beq.n	80046c6 <HAL_RTCEx_SetWakeUpTimer+0xa2>
    }
  }

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	689a      	ldr	r2, [r3, #8]
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f022 0207 	bic.w	r2, r2, #7
 800470e:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	6899      	ldr	r1, [r3, #8]
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	687a      	ldr	r2, [r7, #4]
 800471c:	430a      	orrs	r2, r1
 800471e:	609a      	str	r2, [r3, #8]

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	68ba      	ldr	r2, [r7, #8]
 8004726:	615a      	str	r2, [r3, #20]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	689a      	ldr	r2, [r3, #8]
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004736:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	22ff      	movs	r2, #255	; 0xff
 800473e:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	2201      	movs	r2, #1
 8004744:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	2200      	movs	r2, #0
 800474c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8004750:	2300      	movs	r3, #0
}
 8004752:	4618      	mov	r0, r3
 8004754:	3718      	adds	r7, #24
 8004756:	46bd      	mov	sp, r7
 8004758:	bd80      	pop	{r7, pc}

0800475a <LL_RCC_GetUSARTClockSource>:
{
 800475a:	b480      	push	{r7}
 800475c:	b083      	sub	sp, #12
 800475e:	af00      	add	r7, sp, #0
 8004760:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 8004762:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004766:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	4013      	ands	r3, r2
}
 800476e:	4618      	mov	r0, r3
 8004770:	370c      	adds	r7, #12
 8004772:	46bd      	mov	sp, r7
 8004774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004778:	4770      	bx	lr

0800477a <LL_RCC_GetLPUARTClockSource>:
{
 800477a:	b480      	push	{r7}
 800477c:	b083      	sub	sp, #12
 800477e:	af00      	add	r7, sp, #0
 8004780:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8004782:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004786:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	4013      	ands	r3, r2
}
 800478e:	4618      	mov	r0, r3
 8004790:	370c      	adds	r7, #12
 8004792:	46bd      	mov	sp, r7
 8004794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004798:	4770      	bx	lr

0800479a <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800479a:	b580      	push	{r7, lr}
 800479c:	b082      	sub	sp, #8
 800479e:	af00      	add	r7, sp, #0
 80047a0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d101      	bne.n	80047ac <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80047a8:	2301      	movs	r3, #1
 80047aa:	e042      	b.n	8004832 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d106      	bne.n	80047c4 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	2200      	movs	r2, #0
 80047ba:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80047be:	6878      	ldr	r0, [r7, #4]
 80047c0:	f7fd f826 	bl	8001810 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2224      	movs	r2, #36	; 0x24
 80047c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	681a      	ldr	r2, [r3, #0]
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f022 0201 	bic.w	r2, r2, #1
 80047da:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80047dc:	6878      	ldr	r0, [r7, #4]
 80047de:	f000 fbf7 	bl	8004fd0 <UART_SetConfig>
 80047e2:	4603      	mov	r3, r0
 80047e4:	2b01      	cmp	r3, #1
 80047e6:	d101      	bne.n	80047ec <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80047e8:	2301      	movs	r3, #1
 80047ea:	e022      	b.n	8004832 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d002      	beq.n	80047fa <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80047f4:	6878      	ldr	r0, [r7, #4]
 80047f6:	f000 fdf1 	bl	80053dc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	685a      	ldr	r2, [r3, #4]
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004808:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	689a      	ldr	r2, [r3, #8]
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004818:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	681a      	ldr	r2, [r3, #0]
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f042 0201 	orr.w	r2, r2, #1
 8004828:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800482a:	6878      	ldr	r0, [r7, #4]
 800482c:	f000 fe78 	bl	8005520 <UART_CheckIdleState>
 8004830:	4603      	mov	r3, r0
}
 8004832:	4618      	mov	r0, r3
 8004834:	3708      	adds	r7, #8
 8004836:	46bd      	mov	sp, r7
 8004838:	bd80      	pop	{r7, pc}
	...

0800483c <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800483c:	b580      	push	{r7, lr}
 800483e:	b08a      	sub	sp, #40	; 0x28
 8004840:	af00      	add	r7, sp, #0
 8004842:	60f8      	str	r0, [r7, #12]
 8004844:	60b9      	str	r1, [r7, #8]
 8004846:	4613      	mov	r3, r2
 8004848:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004850:	2b20      	cmp	r3, #32
 8004852:	d17a      	bne.n	800494a <HAL_UART_Transmit_DMA+0x10e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004854:	68bb      	ldr	r3, [r7, #8]
 8004856:	2b00      	cmp	r3, #0
 8004858:	d002      	beq.n	8004860 <HAL_UART_Transmit_DMA+0x24>
 800485a:	88fb      	ldrh	r3, [r7, #6]
 800485c:	2b00      	cmp	r3, #0
 800485e:	d101      	bne.n	8004864 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8004860:	2301      	movs	r3, #1
 8004862:	e073      	b.n	800494c <HAL_UART_Transmit_DMA+0x110>
    }

    __HAL_LOCK(huart);
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800486a:	2b01      	cmp	r3, #1
 800486c:	d101      	bne.n	8004872 <HAL_UART_Transmit_DMA+0x36>
 800486e:	2302      	movs	r3, #2
 8004870:	e06c      	b.n	800494c <HAL_UART_Transmit_DMA+0x110>
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	2201      	movs	r2, #1
 8004876:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	68ba      	ldr	r2, [r7, #8]
 800487e:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	88fa      	ldrh	r2, [r7, #6]
 8004884:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	88fa      	ldrh	r2, [r7, #6]
 800488c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	2200      	movs	r2, #0
 8004894:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	2221      	movs	r2, #33	; 0x21
 800489c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmatx != NULL)
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d02c      	beq.n	8004902 <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80048ac:	4a29      	ldr	r2, [pc, #164]	; (8004954 <HAL_UART_Transmit_DMA+0x118>)
 80048ae:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80048b4:	4a28      	ldr	r2, [pc, #160]	; (8004958 <HAL_UART_Transmit_DMA+0x11c>)
 80048b6:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80048bc:	4a27      	ldr	r2, [pc, #156]	; (800495c <HAL_UART_Transmit_DMA+0x120>)
 80048be:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80048c4:	2200      	movs	r2, #0
 80048c6:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	6f98      	ldr	r0, [r3, #120]	; 0x78
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048d0:	4619      	mov	r1, r3
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	3328      	adds	r3, #40	; 0x28
 80048d8:	461a      	mov	r2, r3
 80048da:	88fb      	ldrh	r3, [r7, #6]
 80048dc:	f7fd faf8 	bl	8001ed0 <HAL_DMA_Start_IT>
 80048e0:	4603      	mov	r3, r0
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d00d      	beq.n	8004902 <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	2210      	movs	r2, #16
 80048ea:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	2200      	movs	r2, #0
 80048f2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	2220      	movs	r2, #32
 80048fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        return HAL_ERROR;
 80048fe:	2301      	movs	r3, #1
 8004900:	e024      	b.n	800494c <HAL_UART_Transmit_DMA+0x110>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	2240      	movs	r2, #64	; 0x40
 8004908:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	2200      	movs	r2, #0
 800490e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	3308      	adds	r3, #8
 8004918:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800491a:	697b      	ldr	r3, [r7, #20]
 800491c:	e853 3f00 	ldrex	r3, [r3]
 8004920:	613b      	str	r3, [r7, #16]
   return(result);
 8004922:	693b      	ldr	r3, [r7, #16]
 8004924:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004928:	627b      	str	r3, [r7, #36]	; 0x24
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	3308      	adds	r3, #8
 8004930:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004932:	623a      	str	r2, [r7, #32]
 8004934:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004936:	69f9      	ldr	r1, [r7, #28]
 8004938:	6a3a      	ldr	r2, [r7, #32]
 800493a:	e841 2300 	strex	r3, r2, [r1]
 800493e:	61bb      	str	r3, [r7, #24]
   return(result);
 8004940:	69bb      	ldr	r3, [r7, #24]
 8004942:	2b00      	cmp	r3, #0
 8004944:	d1e5      	bne.n	8004912 <HAL_UART_Transmit_DMA+0xd6>

    return HAL_OK;
 8004946:	2300      	movs	r3, #0
 8004948:	e000      	b.n	800494c <HAL_UART_Transmit_DMA+0x110>
  }
  else
  {
    return HAL_BUSY;
 800494a:	2302      	movs	r3, #2
  }
}
 800494c:	4618      	mov	r0, r3
 800494e:	3728      	adds	r7, #40	; 0x28
 8004950:	46bd      	mov	sp, r7
 8004952:	bd80      	pop	{r7, pc}
 8004954:	08005895 	.word	0x08005895
 8004958:	0800592f 	.word	0x0800592f
 800495c:	0800594b 	.word	0x0800594b

08004960 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004960:	b580      	push	{r7, lr}
 8004962:	b0ba      	sub	sp, #232	; 0xe8
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	69db      	ldr	r3, [r3, #28]
 800496e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	689b      	ldr	r3, [r3, #8]
 8004982:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004986:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800498a:	f640 030f 	movw	r3, #2063	; 0x80f
 800498e:	4013      	ands	r3, r2
 8004990:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8004994:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004998:	2b00      	cmp	r3, #0
 800499a:	d11b      	bne.n	80049d4 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800499c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80049a0:	f003 0320 	and.w	r3, r3, #32
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d015      	beq.n	80049d4 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80049a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80049ac:	f003 0320 	and.w	r3, r3, #32
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d105      	bne.n	80049c0 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80049b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80049b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d009      	beq.n	80049d4 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	f000 82d6 	beq.w	8004f76 <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049ce:	6878      	ldr	r0, [r7, #4]
 80049d0:	4798      	blx	r3
      }
      return;
 80049d2:	e2d0      	b.n	8004f76 <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80049d4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80049d8:	2b00      	cmp	r3, #0
 80049da:	f000 811f 	beq.w	8004c1c <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80049de:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80049e2:	4b8b      	ldr	r3, [pc, #556]	; (8004c10 <HAL_UART_IRQHandler+0x2b0>)
 80049e4:	4013      	ands	r3, r2
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d106      	bne.n	80049f8 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80049ea:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80049ee:	4b89      	ldr	r3, [pc, #548]	; (8004c14 <HAL_UART_IRQHandler+0x2b4>)
 80049f0:	4013      	ands	r3, r2
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	f000 8112 	beq.w	8004c1c <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80049f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80049fc:	f003 0301 	and.w	r3, r3, #1
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d011      	beq.n	8004a28 <HAL_UART_IRQHandler+0xc8>
 8004a04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d00b      	beq.n	8004a28 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	2201      	movs	r2, #1
 8004a16:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004a1e:	f043 0201 	orr.w	r2, r3, #1
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004a28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a2c:	f003 0302 	and.w	r3, r3, #2
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d011      	beq.n	8004a58 <HAL_UART_IRQHandler+0xf8>
 8004a34:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004a38:	f003 0301 	and.w	r3, r3, #1
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d00b      	beq.n	8004a58 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	2202      	movs	r2, #2
 8004a46:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004a4e:	f043 0204 	orr.w	r2, r3, #4
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004a58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a5c:	f003 0304 	and.w	r3, r3, #4
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d011      	beq.n	8004a88 <HAL_UART_IRQHandler+0x128>
 8004a64:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004a68:	f003 0301 	and.w	r3, r3, #1
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d00b      	beq.n	8004a88 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	2204      	movs	r2, #4
 8004a76:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004a7e:	f043 0202 	orr.w	r2, r3, #2
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004a88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a8c:	f003 0308 	and.w	r3, r3, #8
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d017      	beq.n	8004ac4 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004a94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a98:	f003 0320 	and.w	r3, r3, #32
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d105      	bne.n	8004aac <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8004aa0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8004aa4:	4b5a      	ldr	r3, [pc, #360]	; (8004c10 <HAL_UART_IRQHandler+0x2b0>)
 8004aa6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d00b      	beq.n	8004ac4 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	2208      	movs	r2, #8
 8004ab2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004aba:	f043 0208 	orr.w	r2, r3, #8
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004ac4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ac8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d012      	beq.n	8004af6 <HAL_UART_IRQHandler+0x196>
 8004ad0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ad4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d00c      	beq.n	8004af6 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004ae4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004aec:	f043 0220 	orr.w	r2, r3, #32
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	f000 823c 	beq.w	8004f7a <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004b02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b06:	f003 0320 	and.w	r3, r3, #32
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d013      	beq.n	8004b36 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004b0e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b12:	f003 0320 	and.w	r3, r3, #32
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d105      	bne.n	8004b26 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004b1a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004b1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d007      	beq.n	8004b36 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d003      	beq.n	8004b36 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b32:	6878      	ldr	r0, [r7, #4]
 8004b34:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004b3c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	689b      	ldr	r3, [r3, #8]
 8004b46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b4a:	2b40      	cmp	r3, #64	; 0x40
 8004b4c:	d005      	beq.n	8004b5a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004b4e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004b52:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d04f      	beq.n	8004bfa <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004b5a:	6878      	ldr	r0, [r7, #4]
 8004b5c:	f000 fe34 	bl	80057c8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	689b      	ldr	r3, [r3, #8]
 8004b66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b6a:	2b40      	cmp	r3, #64	; 0x40
 8004b6c:	d141      	bne.n	8004bf2 <HAL_UART_IRQHandler+0x292>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	3308      	adds	r3, #8
 8004b74:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b78:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004b7c:	e853 3f00 	ldrex	r3, [r3]
 8004b80:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004b84:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004b88:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b8c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	3308      	adds	r3, #8
 8004b96:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004b9a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004b9e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ba2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004ba6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004baa:	e841 2300 	strex	r3, r2, [r1]
 8004bae:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004bb2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d1d9      	bne.n	8004b6e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d013      	beq.n	8004bea <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004bc6:	4a14      	ldr	r2, [pc, #80]	; (8004c18 <HAL_UART_IRQHandler+0x2b8>)
 8004bc8:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004bce:	4618      	mov	r0, r3
 8004bd0:	f7fd fa58 	bl	8002084 <HAL_DMA_Abort_IT>
 8004bd4:	4603      	mov	r3, r0
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d017      	beq.n	8004c0a <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004bde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004be0:	687a      	ldr	r2, [r7, #4]
 8004be2:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8004be4:	4610      	mov	r0, r2
 8004be6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004be8:	e00f      	b.n	8004c0a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004bea:	6878      	ldr	r0, [r7, #4]
 8004bec:	f000 f9da 	bl	8004fa4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004bf0:	e00b      	b.n	8004c0a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004bf2:	6878      	ldr	r0, [r7, #4]
 8004bf4:	f000 f9d6 	bl	8004fa4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004bf8:	e007      	b.n	8004c0a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004bfa:	6878      	ldr	r0, [r7, #4]
 8004bfc:	f000 f9d2 	bl	8004fa4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2200      	movs	r2, #0
 8004c04:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8004c08:	e1b7      	b.n	8004f7a <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c0a:	bf00      	nop
    return;
 8004c0c:	e1b5      	b.n	8004f7a <HAL_UART_IRQHandler+0x61a>
 8004c0e:	bf00      	nop
 8004c10:	10000001 	.word	0x10000001
 8004c14:	04000120 	.word	0x04000120
 8004c18:	080059cb 	.word	0x080059cb

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004c20:	2b01      	cmp	r3, #1
 8004c22:	f040 814a 	bne.w	8004eba <HAL_UART_IRQHandler+0x55a>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 8004c26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c2a:	f003 0310 	and.w	r3, r3, #16
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	f000 8143 	beq.w	8004eba <HAL_UART_IRQHandler+0x55a>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 8004c34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004c38:	f003 0310 	and.w	r3, r3, #16
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	f000 813c 	beq.w	8004eba <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	2210      	movs	r2, #16
 8004c48:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	689b      	ldr	r3, [r3, #8]
 8004c50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c54:	2b40      	cmp	r3, #64	; 0x40
 8004c56:	f040 80b5 	bne.w	8004dc4 <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	685b      	ldr	r3, [r3, #4]
 8004c62:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if (  (nb_remaining_rx_data > 0U)
 8004c66:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	f000 8187 	beq.w	8004f7e <HAL_UART_IRQHandler+0x61e>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004c76:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004c7a:	429a      	cmp	r2, r3
 8004c7c:	f080 817f 	bcs.w	8004f7e <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004c86:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f003 0320 	and.w	r3, r3, #32
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	f040 8086 	bne.w	8004da8 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ca4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004ca8:	e853 3f00 	ldrex	r3, [r3]
 8004cac:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004cb0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004cb4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004cb8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	461a      	mov	r2, r3
 8004cc2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004cc6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004cca:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cce:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004cd2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004cd6:	e841 2300 	strex	r3, r2, [r1]
 8004cda:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004cde:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d1da      	bne.n	8004c9c <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	3308      	adds	r3, #8
 8004cec:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004cf0:	e853 3f00 	ldrex	r3, [r3]
 8004cf4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004cf6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004cf8:	f023 0301 	bic.w	r3, r3, #1
 8004cfc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	3308      	adds	r3, #8
 8004d06:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004d0a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004d0e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d10:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004d12:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004d16:	e841 2300 	strex	r3, r2, [r1]
 8004d1a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004d1c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d1e1      	bne.n	8004ce6 <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	3308      	adds	r3, #8
 8004d28:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d2a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004d2c:	e853 3f00 	ldrex	r3, [r3]
 8004d30:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004d32:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004d34:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d38:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	3308      	adds	r3, #8
 8004d42:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004d46:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004d48:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d4a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004d4c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004d4e:	e841 2300 	strex	r3, r2, [r1]
 8004d52:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004d54:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d1e3      	bne.n	8004d22 <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	2220      	movs	r2, #32
 8004d5e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	2200      	movs	r2, #0
 8004d66:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d70:	e853 3f00 	ldrex	r3, [r3]
 8004d74:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004d76:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004d78:	f023 0310 	bic.w	r3, r3, #16
 8004d7c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	461a      	mov	r2, r3
 8004d86:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004d8a:	65bb      	str	r3, [r7, #88]	; 0x58
 8004d8c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d8e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004d90:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004d92:	e841 2300 	strex	r3, r2, [r1]
 8004d96:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004d98:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d1e4      	bne.n	8004d68 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004da2:	4618      	mov	r0, r3
 8004da4:	f7fd f90f 	bl	8001fc6 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004db4:	b29b      	uxth	r3, r3
 8004db6:	1ad3      	subs	r3, r2, r3
 8004db8:	b29b      	uxth	r3, r3
 8004dba:	4619      	mov	r1, r3
 8004dbc:	6878      	ldr	r0, [r7, #4]
 8004dbe:	f000 f8fb 	bl	8004fb8 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8004dc2:	e0dc      	b.n	8004f7e <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004dd0:	b29b      	uxth	r3, r3
 8004dd2:	1ad3      	subs	r3, r2, r3
 8004dd4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if (  (huart->RxXferCount > 0U)
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004dde:	b29b      	uxth	r3, r3
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	f000 80ce 	beq.w	8004f82 <HAL_UART_IRQHandler+0x622>
          &&(nb_rx_data > 0U) )
 8004de6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	f000 80c9 	beq.w	8004f82 <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004df6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004df8:	e853 3f00 	ldrex	r3, [r3]
 8004dfc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004dfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e00:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004e04:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	461a      	mov	r2, r3
 8004e0e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004e12:	647b      	str	r3, [r7, #68]	; 0x44
 8004e14:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e16:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004e18:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004e1a:	e841 2300 	strex	r3, r2, [r1]
 8004e1e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004e20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d1e4      	bne.n	8004df0 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	3308      	adds	r3, #8
 8004e2c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e30:	e853 3f00 	ldrex	r3, [r3]
 8004e34:	623b      	str	r3, [r7, #32]
   return(result);
 8004e36:	6a3b      	ldr	r3, [r7, #32]
 8004e38:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e3c:	f023 0301 	bic.w	r3, r3, #1
 8004e40:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	3308      	adds	r3, #8
 8004e4a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004e4e:	633a      	str	r2, [r7, #48]	; 0x30
 8004e50:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e52:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004e54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004e56:	e841 2300 	strex	r3, r2, [r1]
 8004e5a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004e5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d1e1      	bne.n	8004e26 <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	2220      	movs	r2, #32
 8004e66:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2200      	movs	r2, #0
 8004e74:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e7c:	693b      	ldr	r3, [r7, #16]
 8004e7e:	e853 3f00 	ldrex	r3, [r3]
 8004e82:	60fb      	str	r3, [r7, #12]
   return(result);
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	f023 0310 	bic.w	r3, r3, #16
 8004e8a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	461a      	mov	r2, r3
 8004e94:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004e98:	61fb      	str	r3, [r7, #28]
 8004e9a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e9c:	69b9      	ldr	r1, [r7, #24]
 8004e9e:	69fa      	ldr	r2, [r7, #28]
 8004ea0:	e841 2300 	strex	r3, r2, [r1]
 8004ea4:	617b      	str	r3, [r7, #20]
   return(result);
 8004ea6:	697b      	ldr	r3, [r7, #20]
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d1e4      	bne.n	8004e76 <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004eac:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004eb0:	4619      	mov	r1, r3
 8004eb2:	6878      	ldr	r0, [r7, #4]
 8004eb4:	f000 f880 	bl	8004fb8 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8004eb8:	e063      	b.n	8004f82 <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004eba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ebe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d00e      	beq.n	8004ee4 <HAL_UART_IRQHandler+0x584>
 8004ec6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004eca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d008      	beq.n	8004ee4 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004eda:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004edc:	6878      	ldr	r0, [r7, #4]
 8004ede:	f000 fdb5 	bl	8005a4c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004ee2:	e051      	b.n	8004f88 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8004ee4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ee8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d014      	beq.n	8004f1a <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8004ef0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ef4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d105      	bne.n	8004f08 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8004efc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004f00:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d008      	beq.n	8004f1a <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d03a      	beq.n	8004f86 <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f14:	6878      	ldr	r0, [r7, #4]
 8004f16:	4798      	blx	r3
    }
    return;
 8004f18:	e035      	b.n	8004f86 <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004f1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d009      	beq.n	8004f3a <HAL_UART_IRQHandler+0x5da>
 8004f26:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d003      	beq.n	8004f3a <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 8004f32:	6878      	ldr	r0, [r7, #4]
 8004f34:	f000 fd5f 	bl	80059f6 <UART_EndTransmit_IT>
    return;
 8004f38:	e026      	b.n	8004f88 <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8004f3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f3e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d009      	beq.n	8004f5a <HAL_UART_IRQHandler+0x5fa>
 8004f46:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f4a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d003      	beq.n	8004f5a <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8004f52:	6878      	ldr	r0, [r7, #4]
 8004f54:	f000 fd8e 	bl	8005a74 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004f58:	e016      	b.n	8004f88 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8004f5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f5e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d010      	beq.n	8004f88 <HAL_UART_IRQHandler+0x628>
 8004f66:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	da0c      	bge.n	8004f88 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8004f6e:	6878      	ldr	r0, [r7, #4]
 8004f70:	f000 fd76 	bl	8005a60 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004f74:	e008      	b.n	8004f88 <HAL_UART_IRQHandler+0x628>
      return;
 8004f76:	bf00      	nop
 8004f78:	e006      	b.n	8004f88 <HAL_UART_IRQHandler+0x628>
    return;
 8004f7a:	bf00      	nop
 8004f7c:	e004      	b.n	8004f88 <HAL_UART_IRQHandler+0x628>
      return;
 8004f7e:	bf00      	nop
 8004f80:	e002      	b.n	8004f88 <HAL_UART_IRQHandler+0x628>
      return;
 8004f82:	bf00      	nop
 8004f84:	e000      	b.n	8004f88 <HAL_UART_IRQHandler+0x628>
    return;
 8004f86:	bf00      	nop
  }
}
 8004f88:	37e8      	adds	r7, #232	; 0xe8
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	bd80      	pop	{r7, pc}
 8004f8e:	bf00      	nop

08004f90 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004f90:	b480      	push	{r7}
 8004f92:	b083      	sub	sp, #12
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8004f98:	bf00      	nop
 8004f9a:	370c      	adds	r7, #12
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa2:	4770      	bx	lr

08004fa4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004fa4:	b480      	push	{r7}
 8004fa6:	b083      	sub	sp, #12
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004fac:	bf00      	nop
 8004fae:	370c      	adds	r7, #12
 8004fb0:	46bd      	mov	sp, r7
 8004fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb6:	4770      	bx	lr

08004fb8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004fb8:	b480      	push	{r7}
 8004fba:	b083      	sub	sp, #12
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	6078      	str	r0, [r7, #4]
 8004fc0:	460b      	mov	r3, r1
 8004fc2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004fc4:	bf00      	nop
 8004fc6:	370c      	adds	r7, #12
 8004fc8:	46bd      	mov	sp, r7
 8004fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fce:	4770      	bx	lr

08004fd0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004fd0:	b5b0      	push	{r4, r5, r7, lr}
 8004fd2:	b088      	sub	sp, #32
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004fd8:	2300      	movs	r3, #0
 8004fda:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	689a      	ldr	r2, [r3, #8]
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	691b      	ldr	r3, [r3, #16]
 8004fe4:	431a      	orrs	r2, r3
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	695b      	ldr	r3, [r3, #20]
 8004fea:	431a      	orrs	r2, r3
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	69db      	ldr	r3, [r3, #28]
 8004ff0:	4313      	orrs	r3, r2
 8004ff2:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	681a      	ldr	r2, [r3, #0]
 8004ffa:	4ba3      	ldr	r3, [pc, #652]	; (8005288 <UART_SetConfig+0x2b8>)
 8004ffc:	4013      	ands	r3, r2
 8004ffe:	687a      	ldr	r2, [r7, #4]
 8005000:	6812      	ldr	r2, [r2, #0]
 8005002:	69f9      	ldr	r1, [r7, #28]
 8005004:	430b      	orrs	r3, r1
 8005006:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	685b      	ldr	r3, [r3, #4]
 800500e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	68da      	ldr	r2, [r3, #12]
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	430a      	orrs	r2, r1
 800501c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	699b      	ldr	r3, [r3, #24]
 8005022:	61fb      	str	r3, [r7, #28]

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	4a98      	ldr	r2, [pc, #608]	; (800528c <UART_SetConfig+0x2bc>)
 800502a:	4293      	cmp	r3, r2
 800502c:	d004      	beq.n	8005038 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	6a1b      	ldr	r3, [r3, #32]
 8005032:	69fa      	ldr	r2, [r7, #28]
 8005034:	4313      	orrs	r3, r2
 8005036:	61fb      	str	r3, [r7, #28]
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	689b      	ldr	r3, [r3, #8]
 800503e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8005042:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8005046:	687a      	ldr	r2, [r7, #4]
 8005048:	6812      	ldr	r2, [r2, #0]
 800504a:	69f9      	ldr	r1, [r7, #28]
 800504c:	430b      	orrs	r3, r1
 800504e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005056:	f023 010f 	bic.w	r1, r3, #15
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	430a      	orrs	r2, r1
 8005064:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	4a89      	ldr	r2, [pc, #548]	; (8005290 <UART_SetConfig+0x2c0>)
 800506c:	4293      	cmp	r3, r2
 800506e:	d120      	bne.n	80050b2 <UART_SetConfig+0xe2>
 8005070:	2003      	movs	r0, #3
 8005072:	f7ff fb72 	bl	800475a <LL_RCC_GetUSARTClockSource>
 8005076:	4603      	mov	r3, r0
 8005078:	2b03      	cmp	r3, #3
 800507a:	d817      	bhi.n	80050ac <UART_SetConfig+0xdc>
 800507c:	a201      	add	r2, pc, #4	; (adr r2, 8005084 <UART_SetConfig+0xb4>)
 800507e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005082:	bf00      	nop
 8005084:	08005095 	.word	0x08005095
 8005088:	080050a1 	.word	0x080050a1
 800508c:	0800509b 	.word	0x0800509b
 8005090:	080050a7 	.word	0x080050a7
 8005094:	2301      	movs	r3, #1
 8005096:	76fb      	strb	r3, [r7, #27]
 8005098:	e038      	b.n	800510c <UART_SetConfig+0x13c>
 800509a:	2302      	movs	r3, #2
 800509c:	76fb      	strb	r3, [r7, #27]
 800509e:	e035      	b.n	800510c <UART_SetConfig+0x13c>
 80050a0:	2304      	movs	r3, #4
 80050a2:	76fb      	strb	r3, [r7, #27]
 80050a4:	e032      	b.n	800510c <UART_SetConfig+0x13c>
 80050a6:	2308      	movs	r3, #8
 80050a8:	76fb      	strb	r3, [r7, #27]
 80050aa:	e02f      	b.n	800510c <UART_SetConfig+0x13c>
 80050ac:	2310      	movs	r3, #16
 80050ae:	76fb      	strb	r3, [r7, #27]
 80050b0:	e02c      	b.n	800510c <UART_SetConfig+0x13c>
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	4a75      	ldr	r2, [pc, #468]	; (800528c <UART_SetConfig+0x2bc>)
 80050b8:	4293      	cmp	r3, r2
 80050ba:	d125      	bne.n	8005108 <UART_SetConfig+0x138>
 80050bc:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 80050c0:	f7ff fb5b 	bl	800477a <LL_RCC_GetLPUARTClockSource>
 80050c4:	4603      	mov	r3, r0
 80050c6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80050ca:	d017      	beq.n	80050fc <UART_SetConfig+0x12c>
 80050cc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80050d0:	d817      	bhi.n	8005102 <UART_SetConfig+0x132>
 80050d2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80050d6:	d00b      	beq.n	80050f0 <UART_SetConfig+0x120>
 80050d8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80050dc:	d811      	bhi.n	8005102 <UART_SetConfig+0x132>
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d003      	beq.n	80050ea <UART_SetConfig+0x11a>
 80050e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80050e6:	d006      	beq.n	80050f6 <UART_SetConfig+0x126>
 80050e8:	e00b      	b.n	8005102 <UART_SetConfig+0x132>
 80050ea:	2300      	movs	r3, #0
 80050ec:	76fb      	strb	r3, [r7, #27]
 80050ee:	e00d      	b.n	800510c <UART_SetConfig+0x13c>
 80050f0:	2302      	movs	r3, #2
 80050f2:	76fb      	strb	r3, [r7, #27]
 80050f4:	e00a      	b.n	800510c <UART_SetConfig+0x13c>
 80050f6:	2304      	movs	r3, #4
 80050f8:	76fb      	strb	r3, [r7, #27]
 80050fa:	e007      	b.n	800510c <UART_SetConfig+0x13c>
 80050fc:	2308      	movs	r3, #8
 80050fe:	76fb      	strb	r3, [r7, #27]
 8005100:	e004      	b.n	800510c <UART_SetConfig+0x13c>
 8005102:	2310      	movs	r3, #16
 8005104:	76fb      	strb	r3, [r7, #27]
 8005106:	e001      	b.n	800510c <UART_SetConfig+0x13c>
 8005108:	2310      	movs	r3, #16
 800510a:	76fb      	strb	r3, [r7, #27]

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	4a5e      	ldr	r2, [pc, #376]	; (800528c <UART_SetConfig+0x2bc>)
 8005112:	4293      	cmp	r3, r2
 8005114:	f040 808b 	bne.w	800522e <UART_SetConfig+0x25e>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005118:	7efb      	ldrb	r3, [r7, #27]
 800511a:	2b08      	cmp	r3, #8
 800511c:	d823      	bhi.n	8005166 <UART_SetConfig+0x196>
 800511e:	a201      	add	r2, pc, #4	; (adr r2, 8005124 <UART_SetConfig+0x154>)
 8005120:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005124:	08005149 	.word	0x08005149
 8005128:	08005167 	.word	0x08005167
 800512c:	08005151 	.word	0x08005151
 8005130:	08005167 	.word	0x08005167
 8005134:	08005157 	.word	0x08005157
 8005138:	08005167 	.word	0x08005167
 800513c:	08005167 	.word	0x08005167
 8005140:	08005167 	.word	0x08005167
 8005144:	0800515f 	.word	0x0800515f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005148:	f7fe fc76 	bl	8003a38 <HAL_RCC_GetPCLK1Freq>
 800514c:	6178      	str	r0, [r7, #20]
        break;
 800514e:	e00f      	b.n	8005170 <UART_SetConfig+0x1a0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005150:	4b50      	ldr	r3, [pc, #320]	; (8005294 <UART_SetConfig+0x2c4>)
 8005152:	617b      	str	r3, [r7, #20]
        break;
 8005154:	e00c      	b.n	8005170 <UART_SetConfig+0x1a0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005156:	f7fe fbef 	bl	8003938 <HAL_RCC_GetSysClockFreq>
 800515a:	6178      	str	r0, [r7, #20]
        break;
 800515c:	e008      	b.n	8005170 <UART_SetConfig+0x1a0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800515e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005162:	617b      	str	r3, [r7, #20]
        break;
 8005164:	e004      	b.n	8005170 <UART_SetConfig+0x1a0>
      default:
        pclk = 0U;
 8005166:	2300      	movs	r3, #0
 8005168:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800516a:	2301      	movs	r3, #1
 800516c:	76bb      	strb	r3, [r7, #26]
        break;
 800516e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005170:	697b      	ldr	r3, [r7, #20]
 8005172:	2b00      	cmp	r3, #0
 8005174:	f000 811a 	beq.w	80053ac <UART_SetConfig+0x3dc>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800517c:	4a46      	ldr	r2, [pc, #280]	; (8005298 <UART_SetConfig+0x2c8>)
 800517e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005182:	461a      	mov	r2, r3
 8005184:	697b      	ldr	r3, [r7, #20]
 8005186:	fbb3 f3f2 	udiv	r3, r3, r2
 800518a:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	685a      	ldr	r2, [r3, #4]
 8005190:	4613      	mov	r3, r2
 8005192:	005b      	lsls	r3, r3, #1
 8005194:	4413      	add	r3, r2
 8005196:	68ba      	ldr	r2, [r7, #8]
 8005198:	429a      	cmp	r2, r3
 800519a:	d305      	bcc.n	80051a8 <UART_SetConfig+0x1d8>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	685b      	ldr	r3, [r3, #4]
 80051a0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80051a2:	68ba      	ldr	r2, [r7, #8]
 80051a4:	429a      	cmp	r2, r3
 80051a6:	d902      	bls.n	80051ae <UART_SetConfig+0x1de>
      {
        ret = HAL_ERROR;
 80051a8:	2301      	movs	r3, #1
 80051aa:	76bb      	strb	r3, [r7, #26]
 80051ac:	e0fe      	b.n	80053ac <UART_SetConfig+0x3dc>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80051ae:	697b      	ldr	r3, [r7, #20]
 80051b0:	4618      	mov	r0, r3
 80051b2:	f04f 0100 	mov.w	r1, #0
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051ba:	4a37      	ldr	r2, [pc, #220]	; (8005298 <UART_SetConfig+0x2c8>)
 80051bc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80051c0:	b29a      	uxth	r2, r3
 80051c2:	f04f 0300 	mov.w	r3, #0
 80051c6:	f7fb f833 	bl	8000230 <__aeabi_uldivmod>
 80051ca:	4602      	mov	r2, r0
 80051cc:	460b      	mov	r3, r1
 80051ce:	4610      	mov	r0, r2
 80051d0:	4619      	mov	r1, r3
 80051d2:	f04f 0200 	mov.w	r2, #0
 80051d6:	f04f 0300 	mov.w	r3, #0
 80051da:	020b      	lsls	r3, r1, #8
 80051dc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80051e0:	0202      	lsls	r2, r0, #8
 80051e2:	6879      	ldr	r1, [r7, #4]
 80051e4:	6849      	ldr	r1, [r1, #4]
 80051e6:	0849      	lsrs	r1, r1, #1
 80051e8:	4608      	mov	r0, r1
 80051ea:	f04f 0100 	mov.w	r1, #0
 80051ee:	1814      	adds	r4, r2, r0
 80051f0:	eb43 0501 	adc.w	r5, r3, r1
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	685b      	ldr	r3, [r3, #4]
 80051f8:	461a      	mov	r2, r3
 80051fa:	f04f 0300 	mov.w	r3, #0
 80051fe:	4620      	mov	r0, r4
 8005200:	4629      	mov	r1, r5
 8005202:	f7fb f815 	bl	8000230 <__aeabi_uldivmod>
 8005206:	4602      	mov	r2, r0
 8005208:	460b      	mov	r3, r1
 800520a:	4613      	mov	r3, r2
 800520c:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800520e:	693b      	ldr	r3, [r7, #16]
 8005210:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005214:	d308      	bcc.n	8005228 <UART_SetConfig+0x258>
 8005216:	693b      	ldr	r3, [r7, #16]
 8005218:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800521c:	d204      	bcs.n	8005228 <UART_SetConfig+0x258>
        {
          huart->Instance->BRR = usartdiv;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	693a      	ldr	r2, [r7, #16]
 8005224:	60da      	str	r2, [r3, #12]
 8005226:	e0c1      	b.n	80053ac <UART_SetConfig+0x3dc>
        }
        else
        {
          ret = HAL_ERROR;
 8005228:	2301      	movs	r3, #1
 800522a:	76bb      	strb	r3, [r7, #26]
 800522c:	e0be      	b.n	80053ac <UART_SetConfig+0x3dc>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	69db      	ldr	r3, [r3, #28]
 8005232:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005236:	d16a      	bne.n	800530e <UART_SetConfig+0x33e>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 8005238:	7efb      	ldrb	r3, [r7, #27]
 800523a:	3b01      	subs	r3, #1
 800523c:	2b07      	cmp	r3, #7
 800523e:	d82d      	bhi.n	800529c <UART_SetConfig+0x2cc>
 8005240:	a201      	add	r2, pc, #4	; (adr r2, 8005248 <UART_SetConfig+0x278>)
 8005242:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005246:	bf00      	nop
 8005248:	08005269 	.word	0x08005269
 800524c:	08005271 	.word	0x08005271
 8005250:	0800529d 	.word	0x0800529d
 8005254:	08005277 	.word	0x08005277
 8005258:	0800529d 	.word	0x0800529d
 800525c:	0800529d 	.word	0x0800529d
 8005260:	0800529d 	.word	0x0800529d
 8005264:	0800527f 	.word	0x0800527f
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005268:	f7fe fbfc 	bl	8003a64 <HAL_RCC_GetPCLK2Freq>
 800526c:	6178      	str	r0, [r7, #20]
        break;
 800526e:	e01a      	b.n	80052a6 <UART_SetConfig+0x2d6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005270:	4b08      	ldr	r3, [pc, #32]	; (8005294 <UART_SetConfig+0x2c4>)
 8005272:	617b      	str	r3, [r7, #20]
        break;
 8005274:	e017      	b.n	80052a6 <UART_SetConfig+0x2d6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005276:	f7fe fb5f 	bl	8003938 <HAL_RCC_GetSysClockFreq>
 800527a:	6178      	str	r0, [r7, #20]
        break;
 800527c:	e013      	b.n	80052a6 <UART_SetConfig+0x2d6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800527e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005282:	617b      	str	r3, [r7, #20]
        break;
 8005284:	e00f      	b.n	80052a6 <UART_SetConfig+0x2d6>
 8005286:	bf00      	nop
 8005288:	cfff69f3 	.word	0xcfff69f3
 800528c:	40008000 	.word	0x40008000
 8005290:	40013800 	.word	0x40013800
 8005294:	00f42400 	.word	0x00f42400
 8005298:	0800b578 	.word	0x0800b578
      default:
        pclk = 0U;
 800529c:	2300      	movs	r3, #0
 800529e:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80052a0:	2301      	movs	r3, #1
 80052a2:	76bb      	strb	r3, [r7, #26]
        break;
 80052a4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80052a6:	697b      	ldr	r3, [r7, #20]
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d07f      	beq.n	80053ac <UART_SetConfig+0x3dc>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052b0:	4a48      	ldr	r2, [pc, #288]	; (80053d4 <UART_SetConfig+0x404>)
 80052b2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80052b6:	461a      	mov	r2, r3
 80052b8:	697b      	ldr	r3, [r7, #20]
 80052ba:	fbb3 f3f2 	udiv	r3, r3, r2
 80052be:	005a      	lsls	r2, r3, #1
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	685b      	ldr	r3, [r3, #4]
 80052c4:	085b      	lsrs	r3, r3, #1
 80052c6:	441a      	add	r2, r3
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	685b      	ldr	r3, [r3, #4]
 80052cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80052d0:	b29b      	uxth	r3, r3
 80052d2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80052d4:	693b      	ldr	r3, [r7, #16]
 80052d6:	2b0f      	cmp	r3, #15
 80052d8:	d916      	bls.n	8005308 <UART_SetConfig+0x338>
 80052da:	693b      	ldr	r3, [r7, #16]
 80052dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80052e0:	d212      	bcs.n	8005308 <UART_SetConfig+0x338>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80052e2:	693b      	ldr	r3, [r7, #16]
 80052e4:	b29b      	uxth	r3, r3
 80052e6:	f023 030f 	bic.w	r3, r3, #15
 80052ea:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80052ec:	693b      	ldr	r3, [r7, #16]
 80052ee:	085b      	lsrs	r3, r3, #1
 80052f0:	b29b      	uxth	r3, r3
 80052f2:	f003 0307 	and.w	r3, r3, #7
 80052f6:	b29a      	uxth	r2, r3
 80052f8:	89fb      	ldrh	r3, [r7, #14]
 80052fa:	4313      	orrs	r3, r2
 80052fc:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	89fa      	ldrh	r2, [r7, #14]
 8005304:	60da      	str	r2, [r3, #12]
 8005306:	e051      	b.n	80053ac <UART_SetConfig+0x3dc>
      }
      else
      {
        ret = HAL_ERROR;
 8005308:	2301      	movs	r3, #1
 800530a:	76bb      	strb	r3, [r7, #26]
 800530c:	e04e      	b.n	80053ac <UART_SetConfig+0x3dc>
      }
    }
  }
  else
  {
    switch (clocksource)
 800530e:	7efb      	ldrb	r3, [r7, #27]
 8005310:	3b01      	subs	r3, #1
 8005312:	2b07      	cmp	r3, #7
 8005314:	d821      	bhi.n	800535a <UART_SetConfig+0x38a>
 8005316:	a201      	add	r2, pc, #4	; (adr r2, 800531c <UART_SetConfig+0x34c>)
 8005318:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800531c:	0800533d 	.word	0x0800533d
 8005320:	08005345 	.word	0x08005345
 8005324:	0800535b 	.word	0x0800535b
 8005328:	0800534b 	.word	0x0800534b
 800532c:	0800535b 	.word	0x0800535b
 8005330:	0800535b 	.word	0x0800535b
 8005334:	0800535b 	.word	0x0800535b
 8005338:	08005353 	.word	0x08005353
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800533c:	f7fe fb92 	bl	8003a64 <HAL_RCC_GetPCLK2Freq>
 8005340:	6178      	str	r0, [r7, #20]
        break;
 8005342:	e00f      	b.n	8005364 <UART_SetConfig+0x394>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005344:	4b24      	ldr	r3, [pc, #144]	; (80053d8 <UART_SetConfig+0x408>)
 8005346:	617b      	str	r3, [r7, #20]
        break;
 8005348:	e00c      	b.n	8005364 <UART_SetConfig+0x394>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800534a:	f7fe faf5 	bl	8003938 <HAL_RCC_GetSysClockFreq>
 800534e:	6178      	str	r0, [r7, #20]
        break;
 8005350:	e008      	b.n	8005364 <UART_SetConfig+0x394>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005352:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005356:	617b      	str	r3, [r7, #20]
        break;
 8005358:	e004      	b.n	8005364 <UART_SetConfig+0x394>
      default:
        pclk = 0U;
 800535a:	2300      	movs	r3, #0
 800535c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800535e:	2301      	movs	r3, #1
 8005360:	76bb      	strb	r3, [r7, #26]
        break;
 8005362:	bf00      	nop
    }

    if (pclk != 0U)
 8005364:	697b      	ldr	r3, [r7, #20]
 8005366:	2b00      	cmp	r3, #0
 8005368:	d020      	beq.n	80053ac <UART_SetConfig+0x3dc>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800536e:	4a19      	ldr	r2, [pc, #100]	; (80053d4 <UART_SetConfig+0x404>)
 8005370:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005374:	461a      	mov	r2, r3
 8005376:	697b      	ldr	r3, [r7, #20]
 8005378:	fbb3 f2f2 	udiv	r2, r3, r2
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	685b      	ldr	r3, [r3, #4]
 8005380:	085b      	lsrs	r3, r3, #1
 8005382:	441a      	add	r2, r3
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	685b      	ldr	r3, [r3, #4]
 8005388:	fbb2 f3f3 	udiv	r3, r2, r3
 800538c:	b29b      	uxth	r3, r3
 800538e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005390:	693b      	ldr	r3, [r7, #16]
 8005392:	2b0f      	cmp	r3, #15
 8005394:	d908      	bls.n	80053a8 <UART_SetConfig+0x3d8>
 8005396:	693b      	ldr	r3, [r7, #16]
 8005398:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800539c:	d204      	bcs.n	80053a8 <UART_SetConfig+0x3d8>
      {
        huart->Instance->BRR = usartdiv;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	693a      	ldr	r2, [r7, #16]
 80053a4:	60da      	str	r2, [r3, #12]
 80053a6:	e001      	b.n	80053ac <UART_SetConfig+0x3dc>
      }
      else
      {
        ret = HAL_ERROR;
 80053a8:	2301      	movs	r3, #1
 80053aa:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	2201      	movs	r2, #1
 80053b0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	2201      	movs	r2, #1
 80053b8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	2200      	movs	r2, #0
 80053c0:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	2200      	movs	r2, #0
 80053c6:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80053c8:	7ebb      	ldrb	r3, [r7, #26]
}
 80053ca:	4618      	mov	r0, r3
 80053cc:	3720      	adds	r7, #32
 80053ce:	46bd      	mov	sp, r7
 80053d0:	bdb0      	pop	{r4, r5, r7, pc}
 80053d2:	bf00      	nop
 80053d4:	0800b578 	.word	0x0800b578
 80053d8:	00f42400 	.word	0x00f42400

080053dc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80053dc:	b480      	push	{r7}
 80053de:	b083      	sub	sp, #12
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053e8:	f003 0301 	and.w	r3, r3, #1
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d00a      	beq.n	8005406 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	685b      	ldr	r3, [r3, #4]
 80053f6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	430a      	orrs	r2, r1
 8005404:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800540a:	f003 0302 	and.w	r3, r3, #2
 800540e:	2b00      	cmp	r3, #0
 8005410:	d00a      	beq.n	8005428 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	685b      	ldr	r3, [r3, #4]
 8005418:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	430a      	orrs	r2, r1
 8005426:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800542c:	f003 0304 	and.w	r3, r3, #4
 8005430:	2b00      	cmp	r3, #0
 8005432:	d00a      	beq.n	800544a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	685b      	ldr	r3, [r3, #4]
 800543a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	430a      	orrs	r2, r1
 8005448:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800544e:	f003 0308 	and.w	r3, r3, #8
 8005452:	2b00      	cmp	r3, #0
 8005454:	d00a      	beq.n	800546c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	685b      	ldr	r3, [r3, #4]
 800545c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	430a      	orrs	r2, r1
 800546a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005470:	f003 0310 	and.w	r3, r3, #16
 8005474:	2b00      	cmp	r3, #0
 8005476:	d00a      	beq.n	800548e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	689b      	ldr	r3, [r3, #8]
 800547e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	430a      	orrs	r2, r1
 800548c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005492:	f003 0320 	and.w	r3, r3, #32
 8005496:	2b00      	cmp	r3, #0
 8005498:	d00a      	beq.n	80054b0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	689b      	ldr	r3, [r3, #8]
 80054a0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	430a      	orrs	r2, r1
 80054ae:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d01a      	beq.n	80054f2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	685b      	ldr	r3, [r3, #4]
 80054c2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	430a      	orrs	r2, r1
 80054d0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80054da:	d10a      	bne.n	80054f2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	685b      	ldr	r3, [r3, #4]
 80054e2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	430a      	orrs	r2, r1
 80054f0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d00a      	beq.n	8005514 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	685b      	ldr	r3, [r3, #4]
 8005504:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	430a      	orrs	r2, r1
 8005512:	605a      	str	r2, [r3, #4]
  }
}
 8005514:	bf00      	nop
 8005516:	370c      	adds	r7, #12
 8005518:	46bd      	mov	sp, r7
 800551a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551e:	4770      	bx	lr

08005520 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005520:	b580      	push	{r7, lr}
 8005522:	b086      	sub	sp, #24
 8005524:	af02      	add	r7, sp, #8
 8005526:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	2200      	movs	r2, #0
 800552c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005530:	f7fc fa9a 	bl	8001a68 <HAL_GetTick>
 8005534:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f003 0308 	and.w	r3, r3, #8
 8005540:	2b08      	cmp	r3, #8
 8005542:	d10e      	bne.n	8005562 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005544:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005548:	9300      	str	r3, [sp, #0]
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	2200      	movs	r2, #0
 800554e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005552:	6878      	ldr	r0, [r7, #4]
 8005554:	f000 f82f 	bl	80055b6 <UART_WaitOnFlagUntilTimeout>
 8005558:	4603      	mov	r3, r0
 800555a:	2b00      	cmp	r3, #0
 800555c:	d001      	beq.n	8005562 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800555e:	2303      	movs	r3, #3
 8005560:	e025      	b.n	80055ae <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f003 0304 	and.w	r3, r3, #4
 800556c:	2b04      	cmp	r3, #4
 800556e:	d10e      	bne.n	800558e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005570:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005574:	9300      	str	r3, [sp, #0]
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	2200      	movs	r2, #0
 800557a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800557e:	6878      	ldr	r0, [r7, #4]
 8005580:	f000 f819 	bl	80055b6 <UART_WaitOnFlagUntilTimeout>
 8005584:	4603      	mov	r3, r0
 8005586:	2b00      	cmp	r3, #0
 8005588:	d001      	beq.n	800558e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800558a:	2303      	movs	r3, #3
 800558c:	e00f      	b.n	80055ae <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	2220      	movs	r2, #32
 8005592:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	2220      	movs	r2, #32
 800559a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	2200      	movs	r2, #0
 80055a2:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	2200      	movs	r2, #0
 80055a8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80055ac:	2300      	movs	r3, #0
}
 80055ae:	4618      	mov	r0, r3
 80055b0:	3710      	adds	r7, #16
 80055b2:	46bd      	mov	sp, r7
 80055b4:	bd80      	pop	{r7, pc}

080055b6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80055b6:	b580      	push	{r7, lr}
 80055b8:	b09c      	sub	sp, #112	; 0x70
 80055ba:	af00      	add	r7, sp, #0
 80055bc:	60f8      	str	r0, [r7, #12]
 80055be:	60b9      	str	r1, [r7, #8]
 80055c0:	603b      	str	r3, [r7, #0]
 80055c2:	4613      	mov	r3, r2
 80055c4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80055c6:	e0a9      	b.n	800571c <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80055c8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80055ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055ce:	f000 80a5 	beq.w	800571c <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80055d2:	f7fc fa49 	bl	8001a68 <HAL_GetTick>
 80055d6:	4602      	mov	r2, r0
 80055d8:	683b      	ldr	r3, [r7, #0]
 80055da:	1ad3      	subs	r3, r2, r3
 80055dc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80055de:	429a      	cmp	r2, r3
 80055e0:	d302      	bcc.n	80055e8 <UART_WaitOnFlagUntilTimeout+0x32>
 80055e2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d140      	bne.n	800566a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80055f0:	e853 3f00 	ldrex	r3, [r3]
 80055f4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80055f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80055f8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80055fc:	667b      	str	r3, [r7, #100]	; 0x64
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	461a      	mov	r2, r3
 8005604:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005606:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005608:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800560a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800560c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800560e:	e841 2300 	strex	r3, r2, [r1]
 8005612:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005614:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005616:	2b00      	cmp	r3, #0
 8005618:	d1e6      	bne.n	80055e8 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	3308      	adds	r3, #8
 8005620:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005622:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005624:	e853 3f00 	ldrex	r3, [r3]
 8005628:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800562a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800562c:	f023 0301 	bic.w	r3, r3, #1
 8005630:	663b      	str	r3, [r7, #96]	; 0x60
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	3308      	adds	r3, #8
 8005638:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800563a:	64ba      	str	r2, [r7, #72]	; 0x48
 800563c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800563e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005640:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005642:	e841 2300 	strex	r3, r2, [r1]
 8005646:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005648:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800564a:	2b00      	cmp	r3, #0
 800564c:	d1e5      	bne.n	800561a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	2220      	movs	r2, #32
 8005652:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	2220      	movs	r2, #32
 800565a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	2200      	movs	r2, #0
 8005662:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8005666:	2303      	movs	r3, #3
 8005668:	e069      	b.n	800573e <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f003 0304 	and.w	r3, r3, #4
 8005674:	2b00      	cmp	r3, #0
 8005676:	d051      	beq.n	800571c <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	69db      	ldr	r3, [r3, #28]
 800567e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005682:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005686:	d149      	bne.n	800571c <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005690:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005698:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800569a:	e853 3f00 	ldrex	r3, [r3]
 800569e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80056a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056a2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80056a6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	461a      	mov	r2, r3
 80056ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80056b0:	637b      	str	r3, [r7, #52]	; 0x34
 80056b2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056b4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80056b6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80056b8:	e841 2300 	strex	r3, r2, [r1]
 80056bc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80056be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d1e6      	bne.n	8005692 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	3308      	adds	r3, #8
 80056ca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056cc:	697b      	ldr	r3, [r7, #20]
 80056ce:	e853 3f00 	ldrex	r3, [r3]
 80056d2:	613b      	str	r3, [r7, #16]
   return(result);
 80056d4:	693b      	ldr	r3, [r7, #16]
 80056d6:	f023 0301 	bic.w	r3, r3, #1
 80056da:	66bb      	str	r3, [r7, #104]	; 0x68
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	3308      	adds	r3, #8
 80056e2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80056e4:	623a      	str	r2, [r7, #32]
 80056e6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056e8:	69f9      	ldr	r1, [r7, #28]
 80056ea:	6a3a      	ldr	r2, [r7, #32]
 80056ec:	e841 2300 	strex	r3, r2, [r1]
 80056f0:	61bb      	str	r3, [r7, #24]
   return(result);
 80056f2:	69bb      	ldr	r3, [r7, #24]
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d1e5      	bne.n	80056c4 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	2220      	movs	r2, #32
 80056fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	2220      	movs	r2, #32
 8005704:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	2220      	movs	r2, #32
 800570c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	2200      	movs	r2, #0
 8005714:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8005718:	2303      	movs	r3, #3
 800571a:	e010      	b.n	800573e <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	69da      	ldr	r2, [r3, #28]
 8005722:	68bb      	ldr	r3, [r7, #8]
 8005724:	4013      	ands	r3, r2
 8005726:	68ba      	ldr	r2, [r7, #8]
 8005728:	429a      	cmp	r2, r3
 800572a:	bf0c      	ite	eq
 800572c:	2301      	moveq	r3, #1
 800572e:	2300      	movne	r3, #0
 8005730:	b2db      	uxtb	r3, r3
 8005732:	461a      	mov	r2, r3
 8005734:	79fb      	ldrb	r3, [r7, #7]
 8005736:	429a      	cmp	r2, r3
 8005738:	f43f af46 	beq.w	80055c8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800573c:	2300      	movs	r3, #0
}
 800573e:	4618      	mov	r0, r3
 8005740:	3770      	adds	r7, #112	; 0x70
 8005742:	46bd      	mov	sp, r7
 8005744:	bd80      	pop	{r7, pc}

08005746 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005746:	b480      	push	{r7}
 8005748:	b08f      	sub	sp, #60	; 0x3c
 800574a:	af00      	add	r7, sp, #0
 800574c:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005754:	6a3b      	ldr	r3, [r7, #32]
 8005756:	e853 3f00 	ldrex	r3, [r3]
 800575a:	61fb      	str	r3, [r7, #28]
   return(result);
 800575c:	69fb      	ldr	r3, [r7, #28]
 800575e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005762:	637b      	str	r3, [r7, #52]	; 0x34
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	461a      	mov	r2, r3
 800576a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800576c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800576e:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005770:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005772:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005774:	e841 2300 	strex	r3, r2, [r1]
 8005778:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800577a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800577c:	2b00      	cmp	r3, #0
 800577e:	d1e6      	bne.n	800574e <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	3308      	adds	r3, #8
 8005786:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	e853 3f00 	ldrex	r3, [r3]
 800578e:	60bb      	str	r3, [r7, #8]
   return(result);
 8005790:	68bb      	ldr	r3, [r7, #8]
 8005792:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8005796:	633b      	str	r3, [r7, #48]	; 0x30
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	3308      	adds	r3, #8
 800579e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80057a0:	61ba      	str	r2, [r7, #24]
 80057a2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057a4:	6979      	ldr	r1, [r7, #20]
 80057a6:	69ba      	ldr	r2, [r7, #24]
 80057a8:	e841 2300 	strex	r3, r2, [r1]
 80057ac:	613b      	str	r3, [r7, #16]
   return(result);
 80057ae:	693b      	ldr	r3, [r7, #16]
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d1e5      	bne.n	8005780 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	2220      	movs	r2, #32
 80057b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 80057bc:	bf00      	nop
 80057be:	373c      	adds	r7, #60	; 0x3c
 80057c0:	46bd      	mov	sp, r7
 80057c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c6:	4770      	bx	lr

080057c8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80057c8:	b480      	push	{r7}
 80057ca:	b095      	sub	sp, #84	; 0x54
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057d8:	e853 3f00 	ldrex	r3, [r3]
 80057dc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80057de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057e0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80057e4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	461a      	mov	r2, r3
 80057ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80057ee:	643b      	str	r3, [r7, #64]	; 0x40
 80057f0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057f2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80057f4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80057f6:	e841 2300 	strex	r3, r2, [r1]
 80057fa:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80057fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d1e6      	bne.n	80057d0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	3308      	adds	r3, #8
 8005808:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800580a:	6a3b      	ldr	r3, [r7, #32]
 800580c:	e853 3f00 	ldrex	r3, [r3]
 8005810:	61fb      	str	r3, [r7, #28]
   return(result);
 8005812:	69fb      	ldr	r3, [r7, #28]
 8005814:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005818:	f023 0301 	bic.w	r3, r3, #1
 800581c:	64bb      	str	r3, [r7, #72]	; 0x48
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	3308      	adds	r3, #8
 8005824:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005826:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005828:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800582a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800582c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800582e:	e841 2300 	strex	r3, r2, [r1]
 8005832:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005836:	2b00      	cmp	r3, #0
 8005838:	d1e3      	bne.n	8005802 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800583e:	2b01      	cmp	r3, #1
 8005840:	d118      	bne.n	8005874 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	e853 3f00 	ldrex	r3, [r3]
 800584e:	60bb      	str	r3, [r7, #8]
   return(result);
 8005850:	68bb      	ldr	r3, [r7, #8]
 8005852:	f023 0310 	bic.w	r3, r3, #16
 8005856:	647b      	str	r3, [r7, #68]	; 0x44
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	461a      	mov	r2, r3
 800585e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005860:	61bb      	str	r3, [r7, #24]
 8005862:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005864:	6979      	ldr	r1, [r7, #20]
 8005866:	69ba      	ldr	r2, [r7, #24]
 8005868:	e841 2300 	strex	r3, r2, [r1]
 800586c:	613b      	str	r3, [r7, #16]
   return(result);
 800586e:	693b      	ldr	r3, [r7, #16]
 8005870:	2b00      	cmp	r3, #0
 8005872:	d1e6      	bne.n	8005842 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	2220      	movs	r2, #32
 8005878:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	2200      	movs	r2, #0
 8005880:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	2200      	movs	r2, #0
 8005886:	671a      	str	r2, [r3, #112]	; 0x70
}
 8005888:	bf00      	nop
 800588a:	3754      	adds	r7, #84	; 0x54
 800588c:	46bd      	mov	sp, r7
 800588e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005892:	4770      	bx	lr

08005894 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005894:	b580      	push	{r7, lr}
 8005896:	b090      	sub	sp, #64	; 0x40
 8005898:	af00      	add	r7, sp, #0
 800589a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058a0:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	f003 0320 	and.w	r3, r3, #32
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d137      	bne.n	8005920 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 80058b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80058b2:	2200      	movs	r2, #0
 80058b4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80058b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	3308      	adds	r3, #8
 80058be:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058c2:	e853 3f00 	ldrex	r3, [r3]
 80058c6:	623b      	str	r3, [r7, #32]
   return(result);
 80058c8:	6a3b      	ldr	r3, [r7, #32]
 80058ca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80058ce:	63bb      	str	r3, [r7, #56]	; 0x38
 80058d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	3308      	adds	r3, #8
 80058d6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80058d8:	633a      	str	r2, [r7, #48]	; 0x30
 80058da:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058dc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80058de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80058e0:	e841 2300 	strex	r3, r2, [r1]
 80058e4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80058e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d1e5      	bne.n	80058b8 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80058ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058f2:	693b      	ldr	r3, [r7, #16]
 80058f4:	e853 3f00 	ldrex	r3, [r3]
 80058f8:	60fb      	str	r3, [r7, #12]
   return(result);
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005900:	637b      	str	r3, [r7, #52]	; 0x34
 8005902:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	461a      	mov	r2, r3
 8005908:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800590a:	61fb      	str	r3, [r7, #28]
 800590c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800590e:	69b9      	ldr	r1, [r7, #24]
 8005910:	69fa      	ldr	r2, [r7, #28]
 8005912:	e841 2300 	strex	r3, r2, [r1]
 8005916:	617b      	str	r3, [r7, #20]
   return(result);
 8005918:	697b      	ldr	r3, [r7, #20]
 800591a:	2b00      	cmp	r3, #0
 800591c:	d1e6      	bne.n	80058ec <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800591e:	e002      	b.n	8005926 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8005920:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8005922:	f7fb fbff 	bl	8001124 <HAL_UART_TxCpltCallback>
}
 8005926:	bf00      	nop
 8005928:	3740      	adds	r7, #64	; 0x40
 800592a:	46bd      	mov	sp, r7
 800592c:	bd80      	pop	{r7, pc}

0800592e <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800592e:	b580      	push	{r7, lr}
 8005930:	b084      	sub	sp, #16
 8005932:	af00      	add	r7, sp, #0
 8005934:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800593a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800593c:	68f8      	ldr	r0, [r7, #12]
 800593e:	f7ff fb27 	bl	8004f90 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005942:	bf00      	nop
 8005944:	3710      	adds	r7, #16
 8005946:	46bd      	mov	sp, r7
 8005948:	bd80      	pop	{r7, pc}

0800594a <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800594a:	b580      	push	{r7, lr}
 800594c:	b086      	sub	sp, #24
 800594e:	af00      	add	r7, sp, #0
 8005950:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005956:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8005958:	697b      	ldr	r3, [r7, #20]
 800595a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800595e:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8005960:	697b      	ldr	r3, [r7, #20]
 8005962:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005966:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8005968:	697b      	ldr	r3, [r7, #20]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	689b      	ldr	r3, [r3, #8]
 800596e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005972:	2b80      	cmp	r3, #128	; 0x80
 8005974:	d109      	bne.n	800598a <UART_DMAError+0x40>
 8005976:	693b      	ldr	r3, [r7, #16]
 8005978:	2b21      	cmp	r3, #33	; 0x21
 800597a:	d106      	bne.n	800598a <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800597c:	697b      	ldr	r3, [r7, #20]
 800597e:	2200      	movs	r2, #0
 8005980:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 8005984:	6978      	ldr	r0, [r7, #20]
 8005986:	f7ff fede 	bl	8005746 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800598a:	697b      	ldr	r3, [r7, #20]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	689b      	ldr	r3, [r3, #8]
 8005990:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005994:	2b40      	cmp	r3, #64	; 0x40
 8005996:	d109      	bne.n	80059ac <UART_DMAError+0x62>
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	2b22      	cmp	r3, #34	; 0x22
 800599c:	d106      	bne.n	80059ac <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800599e:	697b      	ldr	r3, [r7, #20]
 80059a0:	2200      	movs	r2, #0
 80059a2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 80059a6:	6978      	ldr	r0, [r7, #20]
 80059a8:	f7ff ff0e 	bl	80057c8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80059ac:	697b      	ldr	r3, [r7, #20]
 80059ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80059b2:	f043 0210 	orr.w	r2, r3, #16
 80059b6:	697b      	ldr	r3, [r7, #20]
 80059b8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80059bc:	6978      	ldr	r0, [r7, #20]
 80059be:	f7ff faf1 	bl	8004fa4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80059c2:	bf00      	nop
 80059c4:	3718      	adds	r7, #24
 80059c6:	46bd      	mov	sp, r7
 80059c8:	bd80      	pop	{r7, pc}

080059ca <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80059ca:	b580      	push	{r7, lr}
 80059cc:	b084      	sub	sp, #16
 80059ce:	af00      	add	r7, sp, #0
 80059d0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059d6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	2200      	movs	r2, #0
 80059dc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	2200      	movs	r2, #0
 80059e4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80059e8:	68f8      	ldr	r0, [r7, #12]
 80059ea:	f7ff fadb 	bl	8004fa4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80059ee:	bf00      	nop
 80059f0:	3710      	adds	r7, #16
 80059f2:	46bd      	mov	sp, r7
 80059f4:	bd80      	pop	{r7, pc}

080059f6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80059f6:	b580      	push	{r7, lr}
 80059f8:	b088      	sub	sp, #32
 80059fa:	af00      	add	r7, sp, #0
 80059fc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	e853 3f00 	ldrex	r3, [r3]
 8005a0a:	60bb      	str	r3, [r7, #8]
   return(result);
 8005a0c:	68bb      	ldr	r3, [r7, #8]
 8005a0e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005a12:	61fb      	str	r3, [r7, #28]
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	461a      	mov	r2, r3
 8005a1a:	69fb      	ldr	r3, [r7, #28]
 8005a1c:	61bb      	str	r3, [r7, #24]
 8005a1e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a20:	6979      	ldr	r1, [r7, #20]
 8005a22:	69ba      	ldr	r2, [r7, #24]
 8005a24:	e841 2300 	strex	r3, r2, [r1]
 8005a28:	613b      	str	r3, [r7, #16]
   return(result);
 8005a2a:	693b      	ldr	r3, [r7, #16]
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d1e6      	bne.n	80059fe <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	2220      	movs	r2, #32
 8005a34:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	2200      	movs	r2, #0
 8005a3c:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005a3e:	6878      	ldr	r0, [r7, #4]
 8005a40:	f7fb fb70 	bl	8001124 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005a44:	bf00      	nop
 8005a46:	3720      	adds	r7, #32
 8005a48:	46bd      	mov	sp, r7
 8005a4a:	bd80      	pop	{r7, pc}

08005a4c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005a4c:	b480      	push	{r7}
 8005a4e:	b083      	sub	sp, #12
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005a54:	bf00      	nop
 8005a56:	370c      	adds	r7, #12
 8005a58:	46bd      	mov	sp, r7
 8005a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5e:	4770      	bx	lr

08005a60 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8005a60:	b480      	push	{r7}
 8005a62:	b083      	sub	sp, #12
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8005a68:	bf00      	nop
 8005a6a:	370c      	adds	r7, #12
 8005a6c:	46bd      	mov	sp, r7
 8005a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a72:	4770      	bx	lr

08005a74 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8005a74:	b480      	push	{r7}
 8005a76:	b083      	sub	sp, #12
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8005a7c:	bf00      	nop
 8005a7e:	370c      	adds	r7, #12
 8005a80:	46bd      	mov	sp, r7
 8005a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a86:	4770      	bx	lr

08005a88 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005a88:	b480      	push	{r7}
 8005a8a:	b085      	sub	sp, #20
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005a96:	2b01      	cmp	r3, #1
 8005a98:	d101      	bne.n	8005a9e <HAL_UARTEx_DisableFifoMode+0x16>
 8005a9a:	2302      	movs	r3, #2
 8005a9c:	e027      	b.n	8005aee <HAL_UARTEx_DisableFifoMode+0x66>
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	2201      	movs	r2, #1
 8005aa2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	2224      	movs	r2, #36	; 0x24
 8005aaa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	681a      	ldr	r2, [r3, #0]
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	f022 0201 	bic.w	r2, r2, #1
 8005ac4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005acc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	2200      	movs	r2, #0
 8005ad2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	68fa      	ldr	r2, [r7, #12]
 8005ada:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	2220      	movs	r2, #32
 8005ae0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	2200      	movs	r2, #0
 8005ae8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005aec:	2300      	movs	r3, #0
}
 8005aee:	4618      	mov	r0, r3
 8005af0:	3714      	adds	r7, #20
 8005af2:	46bd      	mov	sp, r7
 8005af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af8:	4770      	bx	lr

08005afa <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005afa:	b580      	push	{r7, lr}
 8005afc:	b084      	sub	sp, #16
 8005afe:	af00      	add	r7, sp, #0
 8005b00:	6078      	str	r0, [r7, #4]
 8005b02:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005b0a:	2b01      	cmp	r3, #1
 8005b0c:	d101      	bne.n	8005b12 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005b0e:	2302      	movs	r3, #2
 8005b10:	e02d      	b.n	8005b6e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	2201      	movs	r2, #1
 8005b16:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	2224      	movs	r2, #36	; 0x24
 8005b1e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	681a      	ldr	r2, [r3, #0]
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	f022 0201 	bic.w	r2, r2, #1
 8005b38:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	689b      	ldr	r3, [r3, #8]
 8005b40:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	683a      	ldr	r2, [r7, #0]
 8005b4a:	430a      	orrs	r2, r1
 8005b4c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005b4e:	6878      	ldr	r0, [r7, #4]
 8005b50:	f000 f850 	bl	8005bf4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	68fa      	ldr	r2, [r7, #12]
 8005b5a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	2220      	movs	r2, #32
 8005b60:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	2200      	movs	r2, #0
 8005b68:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005b6c:	2300      	movs	r3, #0
}
 8005b6e:	4618      	mov	r0, r3
 8005b70:	3710      	adds	r7, #16
 8005b72:	46bd      	mov	sp, r7
 8005b74:	bd80      	pop	{r7, pc}

08005b76 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005b76:	b580      	push	{r7, lr}
 8005b78:	b084      	sub	sp, #16
 8005b7a:	af00      	add	r7, sp, #0
 8005b7c:	6078      	str	r0, [r7, #4]
 8005b7e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005b86:	2b01      	cmp	r3, #1
 8005b88:	d101      	bne.n	8005b8e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005b8a:	2302      	movs	r3, #2
 8005b8c:	e02d      	b.n	8005bea <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	2201      	movs	r2, #1
 8005b92:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	2224      	movs	r2, #36	; 0x24
 8005b9a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	681a      	ldr	r2, [r3, #0]
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	f022 0201 	bic.w	r2, r2, #1
 8005bb4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	689b      	ldr	r3, [r3, #8]
 8005bbc:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	683a      	ldr	r2, [r7, #0]
 8005bc6:	430a      	orrs	r2, r1
 8005bc8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005bca:	6878      	ldr	r0, [r7, #4]
 8005bcc:	f000 f812 	bl	8005bf4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	68fa      	ldr	r2, [r7, #12]
 8005bd6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	2220      	movs	r2, #32
 8005bdc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	2200      	movs	r2, #0
 8005be4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005be8:	2300      	movs	r3, #0
}
 8005bea:	4618      	mov	r0, r3
 8005bec:	3710      	adds	r7, #16
 8005bee:	46bd      	mov	sp, r7
 8005bf0:	bd80      	pop	{r7, pc}
	...

08005bf4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005bf4:	b480      	push	{r7}
 8005bf6:	b085      	sub	sp, #20
 8005bf8:	af00      	add	r7, sp, #0
 8005bfa:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d108      	bne.n	8005c16 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	2201      	movs	r2, #1
 8005c08:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	2201      	movs	r2, #1
 8005c10:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005c14:	e031      	b.n	8005c7a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005c16:	2308      	movs	r3, #8
 8005c18:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005c1a:	2308      	movs	r3, #8
 8005c1c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	689b      	ldr	r3, [r3, #8]
 8005c24:	0e5b      	lsrs	r3, r3, #25
 8005c26:	b2db      	uxtb	r3, r3
 8005c28:	f003 0307 	and.w	r3, r3, #7
 8005c2c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	689b      	ldr	r3, [r3, #8]
 8005c34:	0f5b      	lsrs	r3, r3, #29
 8005c36:	b2db      	uxtb	r3, r3
 8005c38:	f003 0307 	and.w	r3, r3, #7
 8005c3c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005c3e:	7bbb      	ldrb	r3, [r7, #14]
 8005c40:	7b3a      	ldrb	r2, [r7, #12]
 8005c42:	4911      	ldr	r1, [pc, #68]	; (8005c88 <UARTEx_SetNbDataToProcess+0x94>)
 8005c44:	5c8a      	ldrb	r2, [r1, r2]
 8005c46:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005c4a:	7b3a      	ldrb	r2, [r7, #12]
 8005c4c:	490f      	ldr	r1, [pc, #60]	; (8005c8c <UARTEx_SetNbDataToProcess+0x98>)
 8005c4e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005c50:	fb93 f3f2 	sdiv	r3, r3, r2
 8005c54:	b29a      	uxth	r2, r3
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005c5c:	7bfb      	ldrb	r3, [r7, #15]
 8005c5e:	7b7a      	ldrb	r2, [r7, #13]
 8005c60:	4909      	ldr	r1, [pc, #36]	; (8005c88 <UARTEx_SetNbDataToProcess+0x94>)
 8005c62:	5c8a      	ldrb	r2, [r1, r2]
 8005c64:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005c68:	7b7a      	ldrb	r2, [r7, #13]
 8005c6a:	4908      	ldr	r1, [pc, #32]	; (8005c8c <UARTEx_SetNbDataToProcess+0x98>)
 8005c6c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005c6e:	fb93 f3f2 	sdiv	r3, r3, r2
 8005c72:	b29a      	uxth	r2, r3
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8005c7a:	bf00      	nop
 8005c7c:	3714      	adds	r7, #20
 8005c7e:	46bd      	mov	sp, r7
 8005c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c84:	4770      	bx	lr
 8005c86:	bf00      	nop
 8005c88:	0800b590 	.word	0x0800b590
 8005c8c:	0800b598 	.word	0x0800b598

08005c90 <aci_gap_set_non_discoverable>:
 */

#include "ble_gap_aci.h"

tBleStatus aci_gap_set_non_discoverable( void )
{
 8005c90:	b580      	push	{r7, lr}
 8005c92:	b088      	sub	sp, #32
 8005c94:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8005c96:	2300      	movs	r3, #0
 8005c98:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8005c9a:	f107 0308 	add.w	r3, r7, #8
 8005c9e:	2218      	movs	r2, #24
 8005ca0:	2100      	movs	r1, #0
 8005ca2:	4618      	mov	r0, r3
 8005ca4:	f000 ff8b 	bl	8006bbe <Osal_MemSet>
  rq.ogf = 0x3f;
 8005ca8:	233f      	movs	r3, #63	; 0x3f
 8005caa:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x081;
 8005cac:	2381      	movs	r3, #129	; 0x81
 8005cae:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8005cb0:	1dfb      	adds	r3, r7, #7
 8005cb2:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8005cb4:	2301      	movs	r3, #1
 8005cb6:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8005cb8:	f107 0308 	add.w	r3, r7, #8
 8005cbc:	2100      	movs	r1, #0
 8005cbe:	4618      	mov	r0, r3
 8005cc0:	f001 f942 	bl	8006f48 <hci_send_req>
 8005cc4:	4603      	mov	r3, r0
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	da01      	bge.n	8005cce <aci_gap_set_non_discoverable+0x3e>
    return BLE_STATUS_TIMEOUT;
 8005cca:	23ff      	movs	r3, #255	; 0xff
 8005ccc:	e000      	b.n	8005cd0 <aci_gap_set_non_discoverable+0x40>
  return status;
 8005cce:	79fb      	ldrb	r3, [r7, #7]
}
 8005cd0:	4618      	mov	r0, r3
 8005cd2:	3720      	adds	r7, #32
 8005cd4:	46bd      	mov	sp, r7
 8005cd6:	bd80      	pop	{r7, pc}

08005cd8 <aci_gap_set_discoverable>:
                                     const uint8_t* Local_Name,
                                     uint8_t Service_Uuid_length,
                                     const uint8_t* Service_Uuid_List,
                                     uint16_t Slave_Conn_Interval_Min,
                                     uint16_t Slave_Conn_Interval_Max )
{
 8005cd8:	b5b0      	push	{r4, r5, r7, lr}
 8005cda:	b0ce      	sub	sp, #312	; 0x138
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	4605      	mov	r5, r0
 8005ce0:	460c      	mov	r4, r1
 8005ce2:	4610      	mov	r0, r2
 8005ce4:	4619      	mov	r1, r3
 8005ce6:	1dfb      	adds	r3, r7, #7
 8005ce8:	462a      	mov	r2, r5
 8005cea:	701a      	strb	r2, [r3, #0]
 8005cec:	1d3b      	adds	r3, r7, #4
 8005cee:	4622      	mov	r2, r4
 8005cf0:	801a      	strh	r2, [r3, #0]
 8005cf2:	1cbb      	adds	r3, r7, #2
 8005cf4:	4602      	mov	r2, r0
 8005cf6:	801a      	strh	r2, [r3, #0]
 8005cf8:	1dbb      	adds	r3, r7, #6
 8005cfa:	460a      	mov	r2, r1
 8005cfc:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_discoverable_cp0 *cp0 = (aci_gap_set_discoverable_cp0*)(cmd_buffer);
 8005cfe:	f107 0310 	add.w	r3, r7, #16
 8005d02:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 8005d06:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 8005d0a:	3308      	adds	r3, #8
 8005d0c:	f107 0210 	add.w	r2, r7, #16
 8005d10:	4413      	add	r3, r2
 8005d12:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 8005d16:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 8005d1a:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 8005d1e:	4413      	add	r3, r2
 8005d20:	3309      	adds	r3, #9
 8005d22:	f107 0210 	add.w	r2, r7, #16
 8005d26:	4413      	add	r3, r2
 8005d28:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8005d2c:	f107 030f 	add.w	r3, r7, #15
 8005d30:	2200      	movs	r2, #0
 8005d32:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8005d34:	2300      	movs	r3, #0
 8005d36:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Type = Advertising_Type;
 8005d3a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005d3e:	1dfa      	adds	r2, r7, #7
 8005d40:	7812      	ldrb	r2, [r2, #0]
 8005d42:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8005d44:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005d48:	3301      	adds	r3, #1
 8005d4a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Min = Advertising_Interval_Min;
 8005d4e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005d52:	1d3a      	adds	r2, r7, #4
 8005d54:	8812      	ldrh	r2, [r2, #0]
 8005d56:	f8a3 2001 	strh.w	r2, [r3, #1]
  index_input += 2;
 8005d5a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005d5e:	3302      	adds	r3, #2
 8005d60:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Max = Advertising_Interval_Max;
 8005d64:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005d68:	1cba      	adds	r2, r7, #2
 8005d6a:	8812      	ldrh	r2, [r2, #0]
 8005d6c:	f8a3 2003 	strh.w	r2, [r3, #3]
  index_input += 2;
 8005d70:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005d74:	3302      	adds	r3, #2
 8005d76:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Own_Address_Type = Own_Address_Type;
 8005d7a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005d7e:	1dba      	adds	r2, r7, #6
 8005d80:	7812      	ldrb	r2, [r2, #0]
 8005d82:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8005d84:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005d88:	3301      	adds	r3, #1
 8005d8a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Filter_Policy = Advertising_Filter_Policy;
 8005d8e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005d92:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 8005d96:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 8005d98:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005d9c:	3301      	adds	r3, #1
 8005d9e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Local_Name_Length = Local_Name_Length;
 8005da2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005da6:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 8005daa:	71da      	strb	r2, [r3, #7]
  index_input += 1;
 8005dac:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005db0:	3301      	adds	r3, #1
 8005db2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    Osal_MemCpy( (void*)&cp0->Local_Name, (const void*)Local_Name, Local_Name_Length );
 8005db6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005dba:	3308      	adds	r3, #8
 8005dbc:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 8005dc0:	f8d7 1150 	ldr.w	r1, [r7, #336]	; 0x150
 8005dc4:	4618      	mov	r0, r3
 8005dc6:	f000 feea 	bl	8006b9e <Osal_MemCpy>
    index_input += Local_Name_Length;
 8005dca:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 8005dce:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8005dd2:	4413      	add	r3, r2
 8005dd4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Uuid_length = Service_Uuid_length;
 8005dd8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8005ddc:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 8005de0:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 8005de2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005de6:	3301      	adds	r3, #1
 8005de8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    Osal_MemCpy( (void*)&cp1->Service_Uuid_List, (const void*)Service_Uuid_List, Service_Uuid_length );
 8005dec:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8005df0:	3301      	adds	r3, #1
 8005df2:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 8005df6:	f8d7 1158 	ldr.w	r1, [r7, #344]	; 0x158
 8005dfa:	4618      	mov	r0, r3
 8005dfc:	f000 fecf 	bl	8006b9e <Osal_MemCpy>
    index_input += Service_Uuid_length;
 8005e00:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 8005e04:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8005e08:	4413      	add	r3, r2
 8005e0a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Slave_Conn_Interval_Min = Slave_Conn_Interval_Min;
 8005e0e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e12:	f8b7 215c 	ldrh.w	r2, [r7, #348]	; 0x15c
 8005e16:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 8005e18:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005e1c:	3302      	adds	r3, #2
 8005e1e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Slave_Conn_Interval_Max = Slave_Conn_Interval_Max;
 8005e22:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e26:	f8b7 2160 	ldrh.w	r2, [r7, #352]	; 0x160
 8005e2a:	805a      	strh	r2, [r3, #2]
    }
    index_input += 2;
 8005e2c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005e30:	3302      	adds	r3, #2
 8005e32:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8005e36:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005e3a:	2218      	movs	r2, #24
 8005e3c:	2100      	movs	r1, #0
 8005e3e:	4618      	mov	r0, r3
 8005e40:	f000 febd 	bl	8006bbe <Osal_MemSet>
  rq.ogf = 0x3f;
 8005e44:	233f      	movs	r3, #63	; 0x3f
 8005e46:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x083;
 8005e4a:	2383      	movs	r3, #131	; 0x83
 8005e4c:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8005e50:	f107 0310 	add.w	r3, r7, #16
 8005e54:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8005e58:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005e5c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8005e60:	f107 030f 	add.w	r3, r7, #15
 8005e64:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8005e68:	2301      	movs	r3, #1
 8005e6a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8005e6e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005e72:	2100      	movs	r1, #0
 8005e74:	4618      	mov	r0, r3
 8005e76:	f001 f867 	bl	8006f48 <hci_send_req>
 8005e7a:	4603      	mov	r3, r0
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	da01      	bge.n	8005e84 <aci_gap_set_discoverable+0x1ac>
    return BLE_STATUS_TIMEOUT;
 8005e80:	23ff      	movs	r3, #255	; 0xff
 8005e82:	e002      	b.n	8005e8a <aci_gap_set_discoverable+0x1b2>
  return status;
 8005e84:	f107 030f 	add.w	r3, r7, #15
 8005e88:	781b      	ldrb	r3, [r3, #0]
}
 8005e8a:	4618      	mov	r0, r3
 8005e8c:	f507 779c 	add.w	r7, r7, #312	; 0x138
 8005e90:	46bd      	mov	sp, r7
 8005e92:	bdb0      	pop	{r4, r5, r7, pc}

08005e94 <aci_gap_set_io_capability>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_set_io_capability( uint8_t IO_Capability )
{
 8005e94:	b580      	push	{r7, lr}
 8005e96:	b0cc      	sub	sp, #304	; 0x130
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	4602      	mov	r2, r0
 8005e9c:	1dfb      	adds	r3, r7, #7
 8005e9e:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_io_capability_cp0 *cp0 = (aci_gap_set_io_capability_cp0*)(cmd_buffer);
 8005ea0:	f107 0310 	add.w	r3, r7, #16
 8005ea4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8005ea8:	f107 030f 	add.w	r3, r7, #15
 8005eac:	2200      	movs	r2, #0
 8005eae:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8005eb0:	2300      	movs	r3, #0
 8005eb2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->IO_Capability = IO_Capability;
 8005eb6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005eba:	1dfa      	adds	r2, r7, #7
 8005ebc:	7812      	ldrb	r2, [r2, #0]
 8005ebe:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8005ec0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005ec4:	3301      	adds	r3, #1
 8005ec6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8005eca:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005ece:	2218      	movs	r2, #24
 8005ed0:	2100      	movs	r1, #0
 8005ed2:	4618      	mov	r0, r3
 8005ed4:	f000 fe73 	bl	8006bbe <Osal_MemSet>
  rq.ogf = 0x3f;
 8005ed8:	233f      	movs	r3, #63	; 0x3f
 8005eda:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x085;
 8005ede:	2385      	movs	r3, #133	; 0x85
 8005ee0:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8005ee4:	f107 0310 	add.w	r3, r7, #16
 8005ee8:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8005eec:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005ef0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8005ef4:	f107 030f 	add.w	r3, r7, #15
 8005ef8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8005efc:	2301      	movs	r3, #1
 8005efe:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8005f02:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005f06:	2100      	movs	r1, #0
 8005f08:	4618      	mov	r0, r3
 8005f0a:	f001 f81d 	bl	8006f48 <hci_send_req>
 8005f0e:	4603      	mov	r3, r0
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	da01      	bge.n	8005f18 <aci_gap_set_io_capability+0x84>
    return BLE_STATUS_TIMEOUT;
 8005f14:	23ff      	movs	r3, #255	; 0xff
 8005f16:	e002      	b.n	8005f1e <aci_gap_set_io_capability+0x8a>
  return status;
 8005f18:	f107 030f 	add.w	r3, r7, #15
 8005f1c:	781b      	ldrb	r3, [r3, #0]
}
 8005f1e:	4618      	mov	r0, r3
 8005f20:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8005f24:	46bd      	mov	sp, r7
 8005f26:	bd80      	pop	{r7, pc}

08005f28 <aci_gap_set_authentication_requirement>:
                                                   uint8_t Min_Encryption_Key_Size,
                                                   uint8_t Max_Encryption_Key_Size,
                                                   uint8_t Use_Fixed_Pin,
                                                   uint32_t Fixed_Pin,
                                                   uint8_t Identity_Address_Type )
{
 8005f28:	b5b0      	push	{r4, r5, r7, lr}
 8005f2a:	b0cc      	sub	sp, #304	; 0x130
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	4605      	mov	r5, r0
 8005f30:	460c      	mov	r4, r1
 8005f32:	4610      	mov	r0, r2
 8005f34:	4619      	mov	r1, r3
 8005f36:	1dfb      	adds	r3, r7, #7
 8005f38:	462a      	mov	r2, r5
 8005f3a:	701a      	strb	r2, [r3, #0]
 8005f3c:	1dbb      	adds	r3, r7, #6
 8005f3e:	4622      	mov	r2, r4
 8005f40:	701a      	strb	r2, [r3, #0]
 8005f42:	1d7b      	adds	r3, r7, #5
 8005f44:	4602      	mov	r2, r0
 8005f46:	701a      	strb	r2, [r3, #0]
 8005f48:	1d3b      	adds	r3, r7, #4
 8005f4a:	460a      	mov	r2, r1
 8005f4c:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_authentication_requirement_cp0 *cp0 = (aci_gap_set_authentication_requirement_cp0*)(cmd_buffer);
 8005f4e:	f107 0310 	add.w	r3, r7, #16
 8005f52:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8005f56:	f107 030f 	add.w	r3, r7, #15
 8005f5a:	2200      	movs	r2, #0
 8005f5c:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8005f5e:	2300      	movs	r3, #0
 8005f60:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Bonding_Mode = Bonding_Mode;
 8005f64:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f68:	1dfa      	adds	r2, r7, #7
 8005f6a:	7812      	ldrb	r2, [r2, #0]
 8005f6c:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8005f6e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005f72:	3301      	adds	r3, #1
 8005f74:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->MITM_Mode = MITM_Mode;
 8005f78:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f7c:	1dba      	adds	r2, r7, #6
 8005f7e:	7812      	ldrb	r2, [r2, #0]
 8005f80:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8005f82:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005f86:	3301      	adds	r3, #1
 8005f88:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->SC_Support = SC_Support;
 8005f8c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f90:	1d7a      	adds	r2, r7, #5
 8005f92:	7812      	ldrb	r2, [r2, #0]
 8005f94:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8005f96:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005f9a:	3301      	adds	r3, #1
 8005f9c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->KeyPress_Notification_Support = KeyPress_Notification_Support;
 8005fa0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005fa4:	1d3a      	adds	r2, r7, #4
 8005fa6:	7812      	ldrb	r2, [r2, #0]
 8005fa8:	70da      	strb	r2, [r3, #3]
  index_input += 1;
 8005faa:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005fae:	3301      	adds	r3, #1
 8005fb0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Min_Encryption_Key_Size = Min_Encryption_Key_Size;
 8005fb4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005fb8:	f897 2140 	ldrb.w	r2, [r7, #320]	; 0x140
 8005fbc:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8005fbe:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005fc2:	3301      	adds	r3, #1
 8005fc4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Max_Encryption_Key_Size = Max_Encryption_Key_Size;
 8005fc8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005fcc:	f897 2144 	ldrb.w	r2, [r7, #324]	; 0x144
 8005fd0:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8005fd2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005fd6:	3301      	adds	r3, #1
 8005fd8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Use_Fixed_Pin = Use_Fixed_Pin;
 8005fdc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005fe0:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 8005fe4:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 8005fe6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005fea:	3301      	adds	r3, #1
 8005fec:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Fixed_Pin = Fixed_Pin;
 8005ff0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ff4:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8005ff8:	f8c3 2007 	str.w	r2, [r3, #7]
  index_input += 4;
 8005ffc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006000:	3304      	adds	r3, #4
 8006002:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Identity_Address_Type = Identity_Address_Type;
 8006006:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800600a:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 800600e:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 8006010:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006014:	3301      	adds	r3, #1
 8006016:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800601a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800601e:	2218      	movs	r2, #24
 8006020:	2100      	movs	r1, #0
 8006022:	4618      	mov	r0, r3
 8006024:	f000 fdcb 	bl	8006bbe <Osal_MemSet>
  rq.ogf = 0x3f;
 8006028:	233f      	movs	r3, #63	; 0x3f
 800602a:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x086;
 800602e:	2386      	movs	r3, #134	; 0x86
 8006030:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8006034:	f107 0310 	add.w	r3, r7, #16
 8006038:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800603c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006040:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8006044:	f107 030f 	add.w	r3, r7, #15
 8006048:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800604c:	2301      	movs	r3, #1
 800604e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8006052:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006056:	2100      	movs	r1, #0
 8006058:	4618      	mov	r0, r3
 800605a:	f000 ff75 	bl	8006f48 <hci_send_req>
 800605e:	4603      	mov	r3, r0
 8006060:	2b00      	cmp	r3, #0
 8006062:	da01      	bge.n	8006068 <aci_gap_set_authentication_requirement+0x140>
    return BLE_STATUS_TIMEOUT;
 8006064:	23ff      	movs	r3, #255	; 0xff
 8006066:	e002      	b.n	800606e <aci_gap_set_authentication_requirement+0x146>
  return status;
 8006068:	f107 030f 	add.w	r3, r7, #15
 800606c:	781b      	ldrb	r3, [r3, #0]
}
 800606e:	4618      	mov	r0, r3
 8006070:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8006074:	46bd      	mov	sp, r7
 8006076:	bdb0      	pop	{r4, r5, r7, pc}

08006078 <aci_gap_pass_key_resp>:
  return status;
}

tBleStatus aci_gap_pass_key_resp( uint16_t Connection_Handle,
                                  uint32_t Pass_Key )
{
 8006078:	b580      	push	{r7, lr}
 800607a:	b0cc      	sub	sp, #304	; 0x130
 800607c:	af00      	add	r7, sp, #0
 800607e:	4602      	mov	r2, r0
 8006080:	463b      	mov	r3, r7
 8006082:	6019      	str	r1, [r3, #0]
 8006084:	1dbb      	adds	r3, r7, #6
 8006086:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_pass_key_resp_cp0 *cp0 = (aci_gap_pass_key_resp_cp0*)(cmd_buffer);
 8006088:	f107 0310 	add.w	r3, r7, #16
 800608c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8006090:	f107 030f 	add.w	r3, r7, #15
 8006094:	2200      	movs	r2, #0
 8006096:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8006098:	2300      	movs	r3, #0
 800609a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 800609e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80060a2:	1dba      	adds	r2, r7, #6
 80060a4:	8812      	ldrh	r2, [r2, #0]
 80060a6:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 80060a8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80060ac:	3302      	adds	r3, #2
 80060ae:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Pass_Key = Pass_Key;
 80060b2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80060b6:	463a      	mov	r2, r7
 80060b8:	6812      	ldr	r2, [r2, #0]
 80060ba:	f8c3 2002 	str.w	r2, [r3, #2]
  index_input += 4;
 80060be:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80060c2:	3304      	adds	r3, #4
 80060c4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80060c8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80060cc:	2218      	movs	r2, #24
 80060ce:	2100      	movs	r1, #0
 80060d0:	4618      	mov	r0, r3
 80060d2:	f000 fd74 	bl	8006bbe <Osal_MemSet>
  rq.ogf = 0x3f;
 80060d6:	233f      	movs	r3, #63	; 0x3f
 80060d8:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x088;
 80060dc:	2388      	movs	r3, #136	; 0x88
 80060de:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80060e2:	f107 0310 	add.w	r3, r7, #16
 80060e6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80060ea:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80060ee:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80060f2:	f107 030f 	add.w	r3, r7, #15
 80060f6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80060fa:	2301      	movs	r3, #1
 80060fc:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8006100:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006104:	2100      	movs	r1, #0
 8006106:	4618      	mov	r0, r3
 8006108:	f000 ff1e 	bl	8006f48 <hci_send_req>
 800610c:	4603      	mov	r3, r0
 800610e:	2b00      	cmp	r3, #0
 8006110:	da01      	bge.n	8006116 <aci_gap_pass_key_resp+0x9e>
    return BLE_STATUS_TIMEOUT;
 8006112:	23ff      	movs	r3, #255	; 0xff
 8006114:	e002      	b.n	800611c <aci_gap_pass_key_resp+0xa4>
  return status;
 8006116:	f107 030f 	add.w	r3, r7, #15
 800611a:	781b      	ldrb	r3, [r3, #0]
}
 800611c:	4618      	mov	r0, r3
 800611e:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8006122:	46bd      	mov	sp, r7
 8006124:	bd80      	pop	{r7, pc}

08006126 <aci_gap_init>:
                         uint8_t privacy_enabled,
                         uint8_t device_name_char_len,
                         uint16_t* Service_Handle,
                         uint16_t* Dev_Name_Char_Handle,
                         uint16_t* Appearance_Char_Handle )
{
 8006126:	b590      	push	{r4, r7, lr}
 8006128:	b0cd      	sub	sp, #308	; 0x134
 800612a:	af00      	add	r7, sp, #0
 800612c:	4604      	mov	r4, r0
 800612e:	4608      	mov	r0, r1
 8006130:	4611      	mov	r1, r2
 8006132:	463a      	mov	r2, r7
 8006134:	6013      	str	r3, [r2, #0]
 8006136:	1dfb      	adds	r3, r7, #7
 8006138:	4622      	mov	r2, r4
 800613a:	701a      	strb	r2, [r3, #0]
 800613c:	1dbb      	adds	r3, r7, #6
 800613e:	4602      	mov	r2, r0
 8006140:	701a      	strb	r2, [r3, #0]
 8006142:	1d7b      	adds	r3, r7, #5
 8006144:	460a      	mov	r2, r1
 8006146:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 8006148:	f107 0310 	add.w	r3, r7, #16
 800614c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gap_init_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8006150:	f107 0308 	add.w	r3, r7, #8
 8006154:	2207      	movs	r2, #7
 8006156:	2100      	movs	r1, #0
 8006158:	4618      	mov	r0, r3
 800615a:	f000 fd30 	bl	8006bbe <Osal_MemSet>
  int index_input = 0;
 800615e:	2300      	movs	r3, #0
 8006160:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Role = Role;
 8006164:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006168:	1dfa      	adds	r2, r7, #7
 800616a:	7812      	ldrb	r2, [r2, #0]
 800616c:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800616e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006172:	3301      	adds	r3, #1
 8006174:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->privacy_enabled = privacy_enabled;
 8006178:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800617c:	1dba      	adds	r2, r7, #6
 800617e:	7812      	ldrb	r2, [r2, #0]
 8006180:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8006182:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006186:	3301      	adds	r3, #1
 8006188:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->device_name_char_len = device_name_char_len;
 800618c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006190:	1d7a      	adds	r2, r7, #5
 8006192:	7812      	ldrb	r2, [r2, #0]
 8006194:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8006196:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800619a:	3301      	adds	r3, #1
 800619c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80061a0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80061a4:	2218      	movs	r2, #24
 80061a6:	2100      	movs	r1, #0
 80061a8:	4618      	mov	r0, r3
 80061aa:	f000 fd08 	bl	8006bbe <Osal_MemSet>
  rq.ogf = 0x3f;
 80061ae:	233f      	movs	r3, #63	; 0x3f
 80061b0:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08a;
 80061b4:	238a      	movs	r3, #138	; 0x8a
 80061b6:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80061ba:	f107 0310 	add.w	r3, r7, #16
 80061be:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80061c2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80061c6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 80061ca:	f107 0308 	add.w	r3, r7, #8
 80061ce:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 80061d2:	2307      	movs	r3, #7
 80061d4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80061d8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80061dc:	2100      	movs	r1, #0
 80061de:	4618      	mov	r0, r3
 80061e0:	f000 feb2 	bl	8006f48 <hci_send_req>
 80061e4:	4603      	mov	r3, r0
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	da01      	bge.n	80061ee <aci_gap_init+0xc8>
    return BLE_STATUS_TIMEOUT;
 80061ea:	23ff      	movs	r3, #255	; 0xff
 80061ec:	e021      	b.n	8006232 <aci_gap_init+0x10c>
  if ( resp.Status )
 80061ee:	f107 0308 	add.w	r3, r7, #8
 80061f2:	781b      	ldrb	r3, [r3, #0]
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d003      	beq.n	8006200 <aci_gap_init+0xda>
    return resp.Status;
 80061f8:	f107 0308 	add.w	r3, r7, #8
 80061fc:	781b      	ldrb	r3, [r3, #0]
 80061fe:	e018      	b.n	8006232 <aci_gap_init+0x10c>
  *Service_Handle = resp.Service_Handle;
 8006200:	f107 0308 	add.w	r3, r7, #8
 8006204:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8006208:	b29a      	uxth	r2, r3
 800620a:	463b      	mov	r3, r7
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = resp.Dev_Name_Char_Handle;
 8006210:	f107 0308 	add.w	r3, r7, #8
 8006214:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8006218:	b29a      	uxth	r2, r3
 800621a:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800621e:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = resp.Appearance_Char_Handle;
 8006220:	f107 0308 	add.w	r3, r7, #8
 8006224:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8006228:	b29a      	uxth	r2, r3
 800622a:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800622e:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8006230:	2300      	movs	r3, #0
}
 8006232:	4618      	mov	r0, r3
 8006234:	f507 779a 	add.w	r7, r7, #308	; 0x134
 8006238:	46bd      	mov	sp, r7
 800623a:	bd90      	pop	{r4, r7, pc}

0800623c <aci_gap_update_adv_data>:
  return status;
}

tBleStatus aci_gap_update_adv_data( uint8_t AdvDataLen,
                                    const uint8_t* AdvData )
{
 800623c:	b580      	push	{r7, lr}
 800623e:	b0cc      	sub	sp, #304	; 0x130
 8006240:	af00      	add	r7, sp, #0
 8006242:	4602      	mov	r2, r0
 8006244:	463b      	mov	r3, r7
 8006246:	6019      	str	r1, [r3, #0]
 8006248:	1dfb      	adds	r3, r7, #7
 800624a:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_update_adv_data_cp0 *cp0 = (aci_gap_update_adv_data_cp0*)(cmd_buffer);
 800624c:	f107 0310 	add.w	r3, r7, #16
 8006250:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8006254:	f107 030f 	add.w	r3, r7, #15
 8006258:	2200      	movs	r2, #0
 800625a:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800625c:	2300      	movs	r3, #0
 800625e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->AdvDataLen = AdvDataLen;
 8006262:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006266:	1dfa      	adds	r2, r7, #7
 8006268:	7812      	ldrb	r2, [r2, #0]
 800626a:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800626c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006270:	3301      	adds	r3, #1
 8006272:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->AdvData, (const void*)AdvData, AdvDataLen );
 8006276:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800627a:	1c58      	adds	r0, r3, #1
 800627c:	1dfb      	adds	r3, r7, #7
 800627e:	781a      	ldrb	r2, [r3, #0]
 8006280:	463b      	mov	r3, r7
 8006282:	6819      	ldr	r1, [r3, #0]
 8006284:	f000 fc8b 	bl	8006b9e <Osal_MemCpy>
  index_input += AdvDataLen;
 8006288:	1dfb      	adds	r3, r7, #7
 800628a:	781b      	ldrb	r3, [r3, #0]
 800628c:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8006290:	4413      	add	r3, r2
 8006292:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8006296:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800629a:	2218      	movs	r2, #24
 800629c:	2100      	movs	r1, #0
 800629e:	4618      	mov	r0, r3
 80062a0:	f000 fc8d 	bl	8006bbe <Osal_MemSet>
  rq.ogf = 0x3f;
 80062a4:	233f      	movs	r3, #63	; 0x3f
 80062a6:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08e;
 80062aa:	238e      	movs	r3, #142	; 0x8e
 80062ac:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80062b0:	f107 0310 	add.w	r3, r7, #16
 80062b4:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80062b8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80062bc:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80062c0:	f107 030f 	add.w	r3, r7, #15
 80062c4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80062c8:	2301      	movs	r3, #1
 80062ca:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80062ce:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80062d2:	2100      	movs	r1, #0
 80062d4:	4618      	mov	r0, r3
 80062d6:	f000 fe37 	bl	8006f48 <hci_send_req>
 80062da:	4603      	mov	r3, r0
 80062dc:	2b00      	cmp	r3, #0
 80062de:	da01      	bge.n	80062e4 <aci_gap_update_adv_data+0xa8>
    return BLE_STATUS_TIMEOUT;
 80062e0:	23ff      	movs	r3, #255	; 0xff
 80062e2:	e002      	b.n	80062ea <aci_gap_update_adv_data+0xae>
  return status;
 80062e4:	f107 030f 	add.w	r3, r7, #15
 80062e8:	781b      	ldrb	r3, [r3, #0]
}
 80062ea:	4618      	mov	r0, r3
 80062ec:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80062f0:	46bd      	mov	sp, r7
 80062f2:	bd80      	pop	{r7, pc}

080062f4 <aci_gap_configure_whitelist>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_configure_whitelist( void )
{
 80062f4:	b580      	push	{r7, lr}
 80062f6:	b088      	sub	sp, #32
 80062f8:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 80062fa:	2300      	movs	r3, #0
 80062fc:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80062fe:	f107 0308 	add.w	r3, r7, #8
 8006302:	2218      	movs	r2, #24
 8006304:	2100      	movs	r1, #0
 8006306:	4618      	mov	r0, r3
 8006308:	f000 fc59 	bl	8006bbe <Osal_MemSet>
  rq.ogf = 0x3f;
 800630c:	233f      	movs	r3, #63	; 0x3f
 800630e:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x092;
 8006310:	2392      	movs	r3, #146	; 0x92
 8006312:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8006314:	1dfb      	adds	r3, r7, #7
 8006316:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8006318:	2301      	movs	r3, #1
 800631a:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800631c:	f107 0308 	add.w	r3, r7, #8
 8006320:	2100      	movs	r1, #0
 8006322:	4618      	mov	r0, r3
 8006324:	f000 fe10 	bl	8006f48 <hci_send_req>
 8006328:	4603      	mov	r3, r0
 800632a:	2b00      	cmp	r3, #0
 800632c:	da01      	bge.n	8006332 <aci_gap_configure_whitelist+0x3e>
    return BLE_STATUS_TIMEOUT;
 800632e:	23ff      	movs	r3, #255	; 0xff
 8006330:	e000      	b.n	8006334 <aci_gap_configure_whitelist+0x40>
  return status;
 8006332:	79fb      	ldrb	r3, [r7, #7]
}
 8006334:	4618      	mov	r0, r3
 8006336:	3720      	adds	r7, #32
 8006338:	46bd      	mov	sp, r7
 800633a:	bd80      	pop	{r7, pc}

0800633c <aci_gap_numeric_comparison_value_confirm_yesno>:
  return status;
}

tBleStatus aci_gap_numeric_comparison_value_confirm_yesno( uint16_t Connection_Handle,
                                                           uint8_t Confirm_Yes_No )
{
 800633c:	b580      	push	{r7, lr}
 800633e:	b0cc      	sub	sp, #304	; 0x130
 8006340:	af00      	add	r7, sp, #0
 8006342:	4602      	mov	r2, r0
 8006344:	1dbb      	adds	r3, r7, #6
 8006346:	801a      	strh	r2, [r3, #0]
 8006348:	1d7b      	adds	r3, r7, #5
 800634a:	460a      	mov	r2, r1
 800634c:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_numeric_comparison_value_confirm_yesno_cp0 *cp0 = (aci_gap_numeric_comparison_value_confirm_yesno_cp0*)(cmd_buffer);
 800634e:	f107 0310 	add.w	r3, r7, #16
 8006352:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8006356:	f107 030f 	add.w	r3, r7, #15
 800635a:	2200      	movs	r2, #0
 800635c:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800635e:	2300      	movs	r3, #0
 8006360:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 8006364:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006368:	1dba      	adds	r2, r7, #6
 800636a:	8812      	ldrh	r2, [r2, #0]
 800636c:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800636e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006372:	3302      	adds	r3, #2
 8006374:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Confirm_Yes_No = Confirm_Yes_No;
 8006378:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800637c:	1d7a      	adds	r2, r7, #5
 800637e:	7812      	ldrb	r2, [r2, #0]
 8006380:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8006382:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006386:	3301      	adds	r3, #1
 8006388:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800638c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006390:	2218      	movs	r2, #24
 8006392:	2100      	movs	r1, #0
 8006394:	4618      	mov	r0, r3
 8006396:	f000 fc12 	bl	8006bbe <Osal_MemSet>
  rq.ogf = 0x3f;
 800639a:	233f      	movs	r3, #63	; 0x3f
 800639c:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x0a5;
 80063a0:	23a5      	movs	r3, #165	; 0xa5
 80063a2:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80063a6:	f107 0310 	add.w	r3, r7, #16
 80063aa:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80063ae:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80063b2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80063b6:	f107 030f 	add.w	r3, r7, #15
 80063ba:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80063be:	2301      	movs	r3, #1
 80063c0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80063c4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80063c8:	2100      	movs	r1, #0
 80063ca:	4618      	mov	r0, r3
 80063cc:	f000 fdbc 	bl	8006f48 <hci_send_req>
 80063d0:	4603      	mov	r3, r0
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	da01      	bge.n	80063da <aci_gap_numeric_comparison_value_confirm_yesno+0x9e>
    return BLE_STATUS_TIMEOUT;
 80063d6:	23ff      	movs	r3, #255	; 0xff
 80063d8:	e002      	b.n	80063e0 <aci_gap_numeric_comparison_value_confirm_yesno+0xa4>
  return status;
 80063da:	f107 030f 	add.w	r3, r7, #15
 80063de:	781b      	ldrb	r3, [r3, #0]
}
 80063e0:	4618      	mov	r0, r3
 80063e2:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80063e6:	46bd      	mov	sp, r7
 80063e8:	bd80      	pop	{r7, pc}

080063ea <aci_gatt_init>:
 */

#include "ble_gatt_aci.h"

tBleStatus aci_gatt_init( void )
{
 80063ea:	b580      	push	{r7, lr}
 80063ec:	b088      	sub	sp, #32
 80063ee:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 80063f0:	2300      	movs	r3, #0
 80063f2:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80063f4:	f107 0308 	add.w	r3, r7, #8
 80063f8:	2218      	movs	r2, #24
 80063fa:	2100      	movs	r1, #0
 80063fc:	4618      	mov	r0, r3
 80063fe:	f000 fbde 	bl	8006bbe <Osal_MemSet>
  rq.ogf = 0x3f;
 8006402:	233f      	movs	r3, #63	; 0x3f
 8006404:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x101;
 8006406:	f240 1301 	movw	r3, #257	; 0x101
 800640a:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800640c:	1dfb      	adds	r3, r7, #7
 800640e:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8006410:	2301      	movs	r3, #1
 8006412:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8006414:	f107 0308 	add.w	r3, r7, #8
 8006418:	2100      	movs	r1, #0
 800641a:	4618      	mov	r0, r3
 800641c:	f000 fd94 	bl	8006f48 <hci_send_req>
 8006420:	4603      	mov	r3, r0
 8006422:	2b00      	cmp	r3, #0
 8006424:	da01      	bge.n	800642a <aci_gatt_init+0x40>
    return BLE_STATUS_TIMEOUT;
 8006426:	23ff      	movs	r3, #255	; 0xff
 8006428:	e000      	b.n	800642c <aci_gatt_init+0x42>
  return status;
 800642a:	79fb      	ldrb	r3, [r7, #7]
}
 800642c:	4618      	mov	r0, r3
 800642e:	3720      	adds	r7, #32
 8006430:	46bd      	mov	sp, r7
 8006432:	bd80      	pop	{r7, pc}

08006434 <aci_gatt_add_service>:
tBleStatus aci_gatt_add_service( uint8_t Service_UUID_Type,
                                 const Service_UUID_t* Service_UUID,
                                 uint8_t Service_Type,
                                 uint8_t Max_Attribute_Records,
                                 uint16_t* Service_Handle )
{
 8006434:	b590      	push	{r4, r7, lr}
 8006436:	b0cf      	sub	sp, #316	; 0x13c
 8006438:	af00      	add	r7, sp, #0
 800643a:	4604      	mov	r4, r0
 800643c:	4638      	mov	r0, r7
 800643e:	6001      	str	r1, [r0, #0]
 8006440:	4610      	mov	r0, r2
 8006442:	4619      	mov	r1, r3
 8006444:	1dfb      	adds	r3, r7, #7
 8006446:	4622      	mov	r2, r4
 8006448:	701a      	strb	r2, [r3, #0]
 800644a:	1dbb      	adds	r3, r7, #6
 800644c:	4602      	mov	r2, r0
 800644e:	701a      	strb	r2, [r3, #0]
 8006450:	1d7b      	adds	r3, r7, #5
 8006452:	460a      	mov	r2, r1
 8006454:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_service_cp0 *cp0 = (aci_gatt_add_service_cp0*)(cmd_buffer);
 8006456:	f107 0310 	add.w	r3, r7, #16
 800645a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 800645e:	1dfb      	adds	r3, r7, #7
 8006460:	781b      	ldrb	r3, [r3, #0]
 8006462:	2b01      	cmp	r3, #1
 8006464:	d007      	beq.n	8006476 <aci_gatt_add_service+0x42>
 8006466:	1dfb      	adds	r3, r7, #7
 8006468:	781b      	ldrb	r3, [r3, #0]
 800646a:	2b02      	cmp	r3, #2
 800646c:	d101      	bne.n	8006472 <aci_gatt_add_service+0x3e>
 800646e:	2311      	movs	r3, #17
 8006470:	e002      	b.n	8006478 <aci_gatt_add_service+0x44>
 8006472:	2301      	movs	r3, #1
 8006474:	e000      	b.n	8006478 <aci_gatt_add_service+0x44>
 8006476:	2303      	movs	r3, #3
 8006478:	f107 0210 	add.w	r2, r7, #16
 800647c:	4413      	add	r3, r2
 800647e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gatt_add_service_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8006482:	f107 030c 	add.w	r3, r7, #12
 8006486:	2203      	movs	r2, #3
 8006488:	2100      	movs	r1, #0
 800648a:	4618      	mov	r0, r3
 800648c:	f000 fb97 	bl	8006bbe <Osal_MemSet>
  int index_input = 0;
 8006490:	2300      	movs	r3, #0
 8006492:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_UUID_Type = Service_UUID_Type;
 8006496:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800649a:	1dfa      	adds	r2, r7, #7
 800649c:	7812      	ldrb	r2, [r2, #0]
 800649e:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80064a0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80064a4:	3301      	adds	r3, #1
 80064a6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Service_UUID_Type )
 80064aa:	1dfb      	adds	r3, r7, #7
 80064ac:	781b      	ldrb	r3, [r3, #0]
 80064ae:	2b01      	cmp	r3, #1
 80064b0:	d002      	beq.n	80064b8 <aci_gatt_add_service+0x84>
 80064b2:	2b02      	cmp	r3, #2
 80064b4:	d004      	beq.n	80064c0 <aci_gatt_add_service+0x8c>
 80064b6:	e007      	b.n	80064c8 <aci_gatt_add_service+0x94>
    {
      case 1: size = 2; break;
 80064b8:	2302      	movs	r3, #2
 80064ba:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 80064be:	e005      	b.n	80064cc <aci_gatt_add_service+0x98>
      case 2: size = 16; break;
 80064c0:	2310      	movs	r3, #16
 80064c2:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 80064c6:	e001      	b.n	80064cc <aci_gatt_add_service+0x98>
      default: return BLE_STATUS_ERROR;
 80064c8:	2347      	movs	r3, #71	; 0x47
 80064ca:	e05d      	b.n	8006588 <aci_gatt_add_service+0x154>
    }
    Osal_MemCpy( (void*)&cp0->Service_UUID, (const void*)Service_UUID, size );
 80064cc:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80064d0:	1c58      	adds	r0, r3, #1
 80064d2:	f897 2137 	ldrb.w	r2, [r7, #311]	; 0x137
 80064d6:	463b      	mov	r3, r7
 80064d8:	6819      	ldr	r1, [r3, #0]
 80064da:	f000 fb60 	bl	8006b9e <Osal_MemCpy>
    index_input += size;
 80064de:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 80064e2:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 80064e6:	4413      	add	r3, r2
 80064e8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Type = Service_Type;
 80064ec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80064f0:	1dba      	adds	r2, r7, #6
 80064f2:	7812      	ldrb	r2, [r2, #0]
 80064f4:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 80064f6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80064fa:	3301      	adds	r3, #1
 80064fc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Max_Attribute_Records = Max_Attribute_Records;
 8006500:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006504:	1d7a      	adds	r2, r7, #5
 8006506:	7812      	ldrb	r2, [r2, #0]
 8006508:	705a      	strb	r2, [r3, #1]
    }
    index_input += 1;
 800650a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800650e:	3301      	adds	r3, #1
 8006510:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8006514:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006518:	2218      	movs	r2, #24
 800651a:	2100      	movs	r1, #0
 800651c:	4618      	mov	r0, r3
 800651e:	f000 fb4e 	bl	8006bbe <Osal_MemSet>
  rq.ogf = 0x3f;
 8006522:	233f      	movs	r3, #63	; 0x3f
 8006524:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x102;
 8006528:	f44f 7381 	mov.w	r3, #258	; 0x102
 800652c:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8006530:	f107 0310 	add.w	r3, r7, #16
 8006534:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8006538:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800653c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 8006540:	f107 030c 	add.w	r3, r7, #12
 8006544:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 8006548:	2303      	movs	r3, #3
 800654a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800654e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006552:	2100      	movs	r1, #0
 8006554:	4618      	mov	r0, r3
 8006556:	f000 fcf7 	bl	8006f48 <hci_send_req>
 800655a:	4603      	mov	r3, r0
 800655c:	2b00      	cmp	r3, #0
 800655e:	da01      	bge.n	8006564 <aci_gatt_add_service+0x130>
    return BLE_STATUS_TIMEOUT;
 8006560:	23ff      	movs	r3, #255	; 0xff
 8006562:	e011      	b.n	8006588 <aci_gatt_add_service+0x154>
  if ( resp.Status )
 8006564:	f107 030c 	add.w	r3, r7, #12
 8006568:	781b      	ldrb	r3, [r3, #0]
 800656a:	2b00      	cmp	r3, #0
 800656c:	d003      	beq.n	8006576 <aci_gatt_add_service+0x142>
    return resp.Status;
 800656e:	f107 030c 	add.w	r3, r7, #12
 8006572:	781b      	ldrb	r3, [r3, #0]
 8006574:	e008      	b.n	8006588 <aci_gatt_add_service+0x154>
  *Service_Handle = resp.Service_Handle;
 8006576:	f107 030c 	add.w	r3, r7, #12
 800657a:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800657e:	b29a      	uxth	r2, r3
 8006580:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8006584:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8006586:	2300      	movs	r3, #0
}
 8006588:	4618      	mov	r0, r3
 800658a:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 800658e:	46bd      	mov	sp, r7
 8006590:	bd90      	pop	{r4, r7, pc}

08006592 <aci_gatt_add_char>:
                              uint8_t Security_Permissions,
                              uint8_t GATT_Evt_Mask,
                              uint8_t Enc_Key_Size,
                              uint8_t Is_Variable,
                              uint16_t* Char_Handle )
{
 8006592:	b590      	push	{r4, r7, lr}
 8006594:	b0d1      	sub	sp, #324	; 0x144
 8006596:	af00      	add	r7, sp, #0
 8006598:	4604      	mov	r4, r0
 800659a:	4608      	mov	r0, r1
 800659c:	f107 0108 	add.w	r1, r7, #8
 80065a0:	600a      	str	r2, [r1, #0]
 80065a2:	4619      	mov	r1, r3
 80065a4:	f107 030e 	add.w	r3, r7, #14
 80065a8:	4622      	mov	r2, r4
 80065aa:	801a      	strh	r2, [r3, #0]
 80065ac:	f107 030d 	add.w	r3, r7, #13
 80065b0:	4602      	mov	r2, r0
 80065b2:	701a      	strb	r2, [r3, #0]
 80065b4:	1dbb      	adds	r3, r7, #6
 80065b6:	460a      	mov	r2, r1
 80065b8:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_char_cp0 *cp0 = (aci_gatt_add_char_cp0*)(cmd_buffer);
 80065ba:	f107 0318 	add.w	r3, r7, #24
 80065be:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 80065c2:	f107 030d 	add.w	r3, r7, #13
 80065c6:	781b      	ldrb	r3, [r3, #0]
 80065c8:	2b01      	cmp	r3, #1
 80065ca:	d008      	beq.n	80065de <aci_gatt_add_char+0x4c>
 80065cc:	f107 030d 	add.w	r3, r7, #13
 80065d0:	781b      	ldrb	r3, [r3, #0]
 80065d2:	2b02      	cmp	r3, #2
 80065d4:	d101      	bne.n	80065da <aci_gatt_add_char+0x48>
 80065d6:	2313      	movs	r3, #19
 80065d8:	e002      	b.n	80065e0 <aci_gatt_add_char+0x4e>
 80065da:	2303      	movs	r3, #3
 80065dc:	e000      	b.n	80065e0 <aci_gatt_add_char+0x4e>
 80065de:	2305      	movs	r3, #5
 80065e0:	f107 0218 	add.w	r2, r7, #24
 80065e4:	4413      	add	r3, r2
 80065e6:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gatt_add_char_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 80065ea:	f107 0314 	add.w	r3, r7, #20
 80065ee:	2203      	movs	r2, #3
 80065f0:	2100      	movs	r1, #0
 80065f2:	4618      	mov	r0, r3
 80065f4:	f000 fae3 	bl	8006bbe <Osal_MemSet>
  int index_input = 0;
 80065f8:	2300      	movs	r3, #0
 80065fa:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Service_Handle = Service_Handle;
 80065fe:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8006602:	f107 020e 	add.w	r2, r7, #14
 8006606:	8812      	ldrh	r2, [r2, #0]
 8006608:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800660a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800660e:	3302      	adds	r3, #2
 8006610:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Char_UUID_Type = Char_UUID_Type;
 8006614:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8006618:	f107 020d 	add.w	r2, r7, #13
 800661c:	7812      	ldrb	r2, [r2, #0]
 800661e:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8006620:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8006624:	3301      	adds	r3, #1
 8006626:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Char_UUID_Type )
 800662a:	f107 030d 	add.w	r3, r7, #13
 800662e:	781b      	ldrb	r3, [r3, #0]
 8006630:	2b01      	cmp	r3, #1
 8006632:	d002      	beq.n	800663a <aci_gatt_add_char+0xa8>
 8006634:	2b02      	cmp	r3, #2
 8006636:	d004      	beq.n	8006642 <aci_gatt_add_char+0xb0>
 8006638:	e007      	b.n	800664a <aci_gatt_add_char+0xb8>
    {
      case 1: size = 2; break;
 800663a:	2302      	movs	r3, #2
 800663c:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 8006640:	e005      	b.n	800664e <aci_gatt_add_char+0xbc>
      case 2: size = 16; break;
 8006642:	2310      	movs	r3, #16
 8006644:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 8006648:	e001      	b.n	800664e <aci_gatt_add_char+0xbc>
      default: return BLE_STATUS_ERROR;
 800664a:	2347      	movs	r3, #71	; 0x47
 800664c:	e086      	b.n	800675c <aci_gatt_add_char+0x1ca>
    }
    Osal_MemCpy( (void*)&cp0->Char_UUID, (const void*)Char_UUID, size );
 800664e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8006652:	1cd8      	adds	r0, r3, #3
 8006654:	f897 213f 	ldrb.w	r2, [r7, #319]	; 0x13f
 8006658:	f107 0308 	add.w	r3, r7, #8
 800665c:	6819      	ldr	r1, [r3, #0]
 800665e:	f000 fa9e 	bl	8006b9e <Osal_MemCpy>
    index_input += size;
 8006662:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 8006666:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 800666a:	4413      	add	r3, r2
 800666c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Char_Value_Length = Char_Value_Length;
 8006670:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006674:	1dba      	adds	r2, r7, #6
 8006676:	8812      	ldrh	r2, [r2, #0]
 8006678:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 800667a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800667e:	3302      	adds	r3, #2
 8006680:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Char_Properties = Char_Properties;
 8006684:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006688:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 800668c:	709a      	strb	r2, [r3, #2]
    }
    index_input += 1;
 800668e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8006692:	3301      	adds	r3, #1
 8006694:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Security_Permissions = Security_Permissions;
 8006698:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800669c:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 80066a0:	70da      	strb	r2, [r3, #3]
    }
    index_input += 1;
 80066a2:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80066a6:	3301      	adds	r3, #1
 80066a8:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->GATT_Evt_Mask = GATT_Evt_Mask;
 80066ac:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80066b0:	f897 2158 	ldrb.w	r2, [r7, #344]	; 0x158
 80066b4:	711a      	strb	r2, [r3, #4]
    }
    index_input += 1;
 80066b6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80066ba:	3301      	adds	r3, #1
 80066bc:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Enc_Key_Size = Enc_Key_Size;
 80066c0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80066c4:	f897 215c 	ldrb.w	r2, [r7, #348]	; 0x15c
 80066c8:	715a      	strb	r2, [r3, #5]
    }
    index_input += 1;
 80066ca:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80066ce:	3301      	adds	r3, #1
 80066d0:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Is_Variable = Is_Variable;
 80066d4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80066d8:	f897 2160 	ldrb.w	r2, [r7, #352]	; 0x160
 80066dc:	719a      	strb	r2, [r3, #6]
    }
    index_input += 1;
 80066de:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80066e2:	3301      	adds	r3, #1
 80066e4:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80066e8:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80066ec:	2218      	movs	r2, #24
 80066ee:	2100      	movs	r1, #0
 80066f0:	4618      	mov	r0, r3
 80066f2:	f000 fa64 	bl	8006bbe <Osal_MemSet>
  rq.ogf = 0x3f;
 80066f6:	233f      	movs	r3, #63	; 0x3f
 80066f8:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x104;
 80066fc:	f44f 7382 	mov.w	r3, #260	; 0x104
 8006700:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.cparam = cmd_buffer;
 8006704:	f107 0318 	add.w	r3, r7, #24
 8006708:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 800670c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8006710:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &resp;
 8006714:	f107 0314 	add.w	r3, r7, #20
 8006718:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = sizeof(resp);
 800671c:	2303      	movs	r3, #3
 800671e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 8006722:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8006726:	2100      	movs	r1, #0
 8006728:	4618      	mov	r0, r3
 800672a:	f000 fc0d 	bl	8006f48 <hci_send_req>
 800672e:	4603      	mov	r3, r0
 8006730:	2b00      	cmp	r3, #0
 8006732:	da01      	bge.n	8006738 <aci_gatt_add_char+0x1a6>
    return BLE_STATUS_TIMEOUT;
 8006734:	23ff      	movs	r3, #255	; 0xff
 8006736:	e011      	b.n	800675c <aci_gatt_add_char+0x1ca>
  if ( resp.Status )
 8006738:	f107 0314 	add.w	r3, r7, #20
 800673c:	781b      	ldrb	r3, [r3, #0]
 800673e:	2b00      	cmp	r3, #0
 8006740:	d003      	beq.n	800674a <aci_gatt_add_char+0x1b8>
    return resp.Status;
 8006742:	f107 0314 	add.w	r3, r7, #20
 8006746:	781b      	ldrb	r3, [r3, #0]
 8006748:	e008      	b.n	800675c <aci_gatt_add_char+0x1ca>
  *Char_Handle = resp.Char_Handle;
 800674a:	f107 0314 	add.w	r3, r7, #20
 800674e:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8006752:	b29a      	uxth	r2, r3
 8006754:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8006758:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800675a:	2300      	movs	r3, #0
}
 800675c:	4618      	mov	r0, r3
 800675e:	f507 77a2 	add.w	r7, r7, #324	; 0x144
 8006762:	46bd      	mov	sp, r7
 8006764:	bd90      	pop	{r4, r7, pc}

08006766 <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value( uint16_t Service_Handle,
                                       uint16_t Char_Handle,
                                       uint8_t Val_Offset,
                                       uint8_t Char_Value_Length,
                                       const uint8_t* Char_Value )
{
 8006766:	b5b0      	push	{r4, r5, r7, lr}
 8006768:	b0cc      	sub	sp, #304	; 0x130
 800676a:	af00      	add	r7, sp, #0
 800676c:	4605      	mov	r5, r0
 800676e:	460c      	mov	r4, r1
 8006770:	4610      	mov	r0, r2
 8006772:	4619      	mov	r1, r3
 8006774:	1dbb      	adds	r3, r7, #6
 8006776:	462a      	mov	r2, r5
 8006778:	801a      	strh	r2, [r3, #0]
 800677a:	1d3b      	adds	r3, r7, #4
 800677c:	4622      	mov	r2, r4
 800677e:	801a      	strh	r2, [r3, #0]
 8006780:	1cfb      	adds	r3, r7, #3
 8006782:	4602      	mov	r2, r0
 8006784:	701a      	strb	r2, [r3, #0]
 8006786:	1cbb      	adds	r3, r7, #2
 8006788:	460a      	mov	r2, r1
 800678a:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
 800678c:	f107 0310 	add.w	r3, r7, #16
 8006790:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8006794:	f107 030f 	add.w	r3, r7, #15
 8006798:	2200      	movs	r2, #0
 800679a:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800679c:	2300      	movs	r3, #0
 800679e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_Handle = Service_Handle;
 80067a2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80067a6:	1dba      	adds	r2, r7, #6
 80067a8:	8812      	ldrh	r2, [r2, #0]
 80067aa:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 80067ac:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80067b0:	3302      	adds	r3, #2
 80067b2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Handle = Char_Handle;
 80067b6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80067ba:	1d3a      	adds	r2, r7, #4
 80067bc:	8812      	ldrh	r2, [r2, #0]
 80067be:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 80067c0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80067c4:	3302      	adds	r3, #2
 80067c6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Val_Offset = Val_Offset;
 80067ca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80067ce:	1cfa      	adds	r2, r7, #3
 80067d0:	7812      	ldrb	r2, [r2, #0]
 80067d2:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 80067d4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80067d8:	3301      	adds	r3, #1
 80067da:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Value_Length = Char_Value_Length;
 80067de:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80067e2:	1cba      	adds	r2, r7, #2
 80067e4:	7812      	ldrb	r2, [r2, #0]
 80067e6:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 80067e8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80067ec:	3301      	adds	r3, #1
 80067ee:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Char_Value, (const void*)Char_Value, Char_Value_Length );
 80067f2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80067f6:	1d98      	adds	r0, r3, #6
 80067f8:	1cbb      	adds	r3, r7, #2
 80067fa:	781b      	ldrb	r3, [r3, #0]
 80067fc:	461a      	mov	r2, r3
 80067fe:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8006802:	f000 f9cc 	bl	8006b9e <Osal_MemCpy>
  index_input += Char_Value_Length;
 8006806:	1cbb      	adds	r3, r7, #2
 8006808:	781b      	ldrb	r3, [r3, #0]
 800680a:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800680e:	4413      	add	r3, r2
 8006810:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8006814:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006818:	2218      	movs	r2, #24
 800681a:	2100      	movs	r1, #0
 800681c:	4618      	mov	r0, r3
 800681e:	f000 f9ce 	bl	8006bbe <Osal_MemSet>
  rq.ogf = 0x3f;
 8006822:	233f      	movs	r3, #63	; 0x3f
 8006824:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x106;
 8006828:	f44f 7383 	mov.w	r3, #262	; 0x106
 800682c:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8006830:	f107 0310 	add.w	r3, r7, #16
 8006834:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8006838:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800683c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8006840:	f107 030f 	add.w	r3, r7, #15
 8006844:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8006848:	2301      	movs	r3, #1
 800684a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800684e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006852:	2100      	movs	r1, #0
 8006854:	4618      	mov	r0, r3
 8006856:	f000 fb77 	bl	8006f48 <hci_send_req>
 800685a:	4603      	mov	r3, r0
 800685c:	2b00      	cmp	r3, #0
 800685e:	da01      	bge.n	8006864 <aci_gatt_update_char_value+0xfe>
    return BLE_STATUS_TIMEOUT;
 8006860:	23ff      	movs	r3, #255	; 0xff
 8006862:	e002      	b.n	800686a <aci_gatt_update_char_value+0x104>
  return status;
 8006864:	f107 030f 	add.w	r3, r7, #15
 8006868:	781b      	ldrb	r3, [r3, #0]
}
 800686a:	4618      	mov	r0, r3
 800686c:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8006870:	46bd      	mov	sp, r7
 8006872:	bdb0      	pop	{r4, r5, r7, pc}

08006874 <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data( uint8_t Offset,
                                      uint8_t Length,
                                      const uint8_t* Value )
{
 8006874:	b580      	push	{r7, lr}
 8006876:	b0cc      	sub	sp, #304	; 0x130
 8006878:	af00      	add	r7, sp, #0
 800687a:	463b      	mov	r3, r7
 800687c:	601a      	str	r2, [r3, #0]
 800687e:	1dfb      	adds	r3, r7, #7
 8006880:	4602      	mov	r2, r0
 8006882:	701a      	strb	r2, [r3, #0]
 8006884:	1dbb      	adds	r3, r7, #6
 8006886:	460a      	mov	r2, r1
 8006888:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
 800688a:	f107 0310 	add.w	r3, r7, #16
 800688e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8006892:	f107 030f 	add.w	r3, r7, #15
 8006896:	2200      	movs	r2, #0
 8006898:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800689a:	2300      	movs	r3, #0
 800689c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Offset = Offset;
 80068a0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80068a4:	1dfa      	adds	r2, r7, #7
 80068a6:	7812      	ldrb	r2, [r2, #0]
 80068a8:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80068aa:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80068ae:	3301      	adds	r3, #1
 80068b0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Length = Length;
 80068b4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80068b8:	1dba      	adds	r2, r7, #6
 80068ba:	7812      	ldrb	r2, [r2, #0]
 80068bc:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 80068be:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80068c2:	3301      	adds	r3, #1
 80068c4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Value, (const void*)Value, Length );
 80068c8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80068cc:	1c98      	adds	r0, r3, #2
 80068ce:	1dbb      	adds	r3, r7, #6
 80068d0:	781a      	ldrb	r2, [r3, #0]
 80068d2:	463b      	mov	r3, r7
 80068d4:	6819      	ldr	r1, [r3, #0]
 80068d6:	f000 f962 	bl	8006b9e <Osal_MemCpy>
  index_input += Length;
 80068da:	1dbb      	adds	r3, r7, #6
 80068dc:	781b      	ldrb	r3, [r3, #0]
 80068de:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 80068e2:	4413      	add	r3, r2
 80068e4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80068e8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80068ec:	2218      	movs	r2, #24
 80068ee:	2100      	movs	r1, #0
 80068f0:	4618      	mov	r0, r3
 80068f2:	f000 f964 	bl	8006bbe <Osal_MemSet>
  rq.ogf = 0x3f;
 80068f6:	233f      	movs	r3, #63	; 0x3f
 80068f8:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00c;
 80068fc:	230c      	movs	r3, #12
 80068fe:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8006902:	f107 0310 	add.w	r3, r7, #16
 8006906:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800690a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800690e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8006912:	f107 030f 	add.w	r3, r7, #15
 8006916:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800691a:	2301      	movs	r3, #1
 800691c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8006920:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006924:	2100      	movs	r1, #0
 8006926:	4618      	mov	r0, r3
 8006928:	f000 fb0e 	bl	8006f48 <hci_send_req>
 800692c:	4603      	mov	r3, r0
 800692e:	2b00      	cmp	r3, #0
 8006930:	da01      	bge.n	8006936 <aci_hal_write_config_data+0xc2>
    return BLE_STATUS_TIMEOUT;
 8006932:	23ff      	movs	r3, #255	; 0xff
 8006934:	e002      	b.n	800693c <aci_hal_write_config_data+0xc8>
  return status;
 8006936:	f107 030f 	add.w	r3, r7, #15
 800693a:	781b      	ldrb	r3, [r3, #0]
}
 800693c:	4618      	mov	r0, r3
 800693e:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8006942:	46bd      	mov	sp, r7
 8006944:	bd80      	pop	{r7, pc}

08006946 <aci_hal_set_tx_power_level>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_tx_power_level( uint8_t En_High_Power,
                                       uint8_t PA_Level )
{
 8006946:	b580      	push	{r7, lr}
 8006948:	b0cc      	sub	sp, #304	; 0x130
 800694a:	af00      	add	r7, sp, #0
 800694c:	4602      	mov	r2, r0
 800694e:	1dfb      	adds	r3, r7, #7
 8006950:	701a      	strb	r2, [r3, #0]
 8006952:	1dbb      	adds	r3, r7, #6
 8006954:	460a      	mov	r2, r1
 8006956:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
 8006958:	f107 0310 	add.w	r3, r7, #16
 800695c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8006960:	f107 030f 	add.w	r3, r7, #15
 8006964:	2200      	movs	r2, #0
 8006966:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8006968:	2300      	movs	r3, #0
 800696a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->En_High_Power = En_High_Power;
 800696e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006972:	1dfa      	adds	r2, r7, #7
 8006974:	7812      	ldrb	r2, [r2, #0]
 8006976:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8006978:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800697c:	3301      	adds	r3, #1
 800697e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->PA_Level = PA_Level;
 8006982:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006986:	1dba      	adds	r2, r7, #6
 8006988:	7812      	ldrb	r2, [r2, #0]
 800698a:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800698c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006990:	3301      	adds	r3, #1
 8006992:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8006996:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800699a:	2218      	movs	r2, #24
 800699c:	2100      	movs	r1, #0
 800699e:	4618      	mov	r0, r3
 80069a0:	f000 f90d 	bl	8006bbe <Osal_MemSet>
  rq.ogf = 0x3f;
 80069a4:	233f      	movs	r3, #63	; 0x3f
 80069a6:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00f;
 80069aa:	230f      	movs	r3, #15
 80069ac:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80069b0:	f107 0310 	add.w	r3, r7, #16
 80069b4:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80069b8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80069bc:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80069c0:	f107 030f 	add.w	r3, r7, #15
 80069c4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80069c8:	2301      	movs	r3, #1
 80069ca:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80069ce:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80069d2:	2100      	movs	r1, #0
 80069d4:	4618      	mov	r0, r3
 80069d6:	f000 fab7 	bl	8006f48 <hci_send_req>
 80069da:	4603      	mov	r3, r0
 80069dc:	2b00      	cmp	r3, #0
 80069de:	da01      	bge.n	80069e4 <aci_hal_set_tx_power_level+0x9e>
    return BLE_STATUS_TIMEOUT;
 80069e0:	23ff      	movs	r3, #255	; 0xff
 80069e2:	e002      	b.n	80069ea <aci_hal_set_tx_power_level+0xa4>
  return status;
 80069e4:	f107 030f 	add.w	r3, r7, #15
 80069e8:	781b      	ldrb	r3, [r3, #0]
}
 80069ea:	4618      	mov	r0, r3
 80069ec:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80069f0:	46bd      	mov	sp, r7
 80069f2:	bd80      	pop	{r7, pc}

080069f4 <aci_hal_set_radio_activity_mask>:
  Osal_MemCpy( (void*)Link_Connection_Handle, (const void*)resp.Link_Connection_Handle, 16 );
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_radio_activity_mask( uint16_t Radio_Activity_Mask )
{
 80069f4:	b580      	push	{r7, lr}
 80069f6:	b0cc      	sub	sp, #304	; 0x130
 80069f8:	af00      	add	r7, sp, #0
 80069fa:	4602      	mov	r2, r0
 80069fc:	1dbb      	adds	r3, r7, #6
 80069fe:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_radio_activity_mask_cp0 *cp0 = (aci_hal_set_radio_activity_mask_cp0*)(cmd_buffer);
 8006a00:	f107 0310 	add.w	r3, r7, #16
 8006a04:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8006a08:	f107 030f 	add.w	r3, r7, #15
 8006a0c:	2200      	movs	r2, #0
 8006a0e:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8006a10:	2300      	movs	r3, #0
 8006a12:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Radio_Activity_Mask = Radio_Activity_Mask;
 8006a16:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006a1a:	1dba      	adds	r2, r7, #6
 8006a1c:	8812      	ldrh	r2, [r2, #0]
 8006a1e:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8006a20:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006a24:	3302      	adds	r3, #2
 8006a26:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8006a2a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006a2e:	2218      	movs	r2, #24
 8006a30:	2100      	movs	r1, #0
 8006a32:	4618      	mov	r0, r3
 8006a34:	f000 f8c3 	bl	8006bbe <Osal_MemSet>
  rq.ogf = 0x3f;
 8006a38:	233f      	movs	r3, #63	; 0x3f
 8006a3a:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x018;
 8006a3e:	2318      	movs	r3, #24
 8006a40:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8006a44:	f107 0310 	add.w	r3, r7, #16
 8006a48:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8006a4c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006a50:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8006a54:	f107 030f 	add.w	r3, r7, #15
 8006a58:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8006a5c:	2301      	movs	r3, #1
 8006a5e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8006a62:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006a66:	2100      	movs	r1, #0
 8006a68:	4618      	mov	r0, r3
 8006a6a:	f000 fa6d 	bl	8006f48 <hci_send_req>
 8006a6e:	4603      	mov	r3, r0
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	da01      	bge.n	8006a78 <aci_hal_set_radio_activity_mask+0x84>
    return BLE_STATUS_TIMEOUT;
 8006a74:	23ff      	movs	r3, #255	; 0xff
 8006a76:	e002      	b.n	8006a7e <aci_hal_set_radio_activity_mask+0x8a>
  return status;
 8006a78:	f107 030f 	add.w	r3, r7, #15
 8006a7c:	781b      	ldrb	r3, [r3, #0]
}
 8006a7e:	4618      	mov	r0, r3
 8006a80:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8006a84:	46bd      	mov	sp, r7
 8006a86:	bd80      	pop	{r7, pc}

08006a88 <hci_reset>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus hci_reset( void )
{
 8006a88:	b580      	push	{r7, lr}
 8006a8a:	b088      	sub	sp, #32
 8006a8c:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8006a8e:	2300      	movs	r3, #0
 8006a90:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8006a92:	f107 0308 	add.w	r3, r7, #8
 8006a96:	2218      	movs	r2, #24
 8006a98:	2100      	movs	r1, #0
 8006a9a:	4618      	mov	r0, r3
 8006a9c:	f000 f88f 	bl	8006bbe <Osal_MemSet>
  rq.ogf = 0x03;
 8006aa0:	2303      	movs	r3, #3
 8006aa2:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x003;
 8006aa4:	2303      	movs	r3, #3
 8006aa6:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8006aa8:	1dfb      	adds	r3, r7, #7
 8006aaa:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8006aac:	2301      	movs	r3, #1
 8006aae:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8006ab0:	f107 0308 	add.w	r3, r7, #8
 8006ab4:	2100      	movs	r1, #0
 8006ab6:	4618      	mov	r0, r3
 8006ab8:	f000 fa46 	bl	8006f48 <hci_send_req>
 8006abc:	4603      	mov	r3, r0
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	da01      	bge.n	8006ac6 <hci_reset+0x3e>
    return BLE_STATUS_TIMEOUT;
 8006ac2:	23ff      	movs	r3, #255	; 0xff
 8006ac4:	e000      	b.n	8006ac8 <hci_reset+0x40>
  return status;
 8006ac6:	79fb      	ldrb	r3, [r7, #7]
}
 8006ac8:	4618      	mov	r0, r3
 8006aca:	3720      	adds	r7, #32
 8006acc:	46bd      	mov	sp, r7
 8006ace:	bd80      	pop	{r7, pc}

08006ad0 <hci_le_set_default_phy>:
}

tBleStatus hci_le_set_default_phy( uint8_t ALL_PHYS,
                                   uint8_t TX_PHYS,
                                   uint8_t RX_PHYS )
{
 8006ad0:	b590      	push	{r4, r7, lr}
 8006ad2:	b0cd      	sub	sp, #308	; 0x134
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	4604      	mov	r4, r0
 8006ad8:	4608      	mov	r0, r1
 8006ada:	4611      	mov	r1, r2
 8006adc:	1dfb      	adds	r3, r7, #7
 8006ade:	4622      	mov	r2, r4
 8006ae0:	701a      	strb	r2, [r3, #0]
 8006ae2:	1dbb      	adds	r3, r7, #6
 8006ae4:	4602      	mov	r2, r0
 8006ae6:	701a      	strb	r2, [r3, #0]
 8006ae8:	1d7b      	adds	r3, r7, #5
 8006aea:	460a      	mov	r2, r1
 8006aec:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_set_default_phy_cp0 *cp0 = (hci_le_set_default_phy_cp0*)(cmd_buffer);
 8006aee:	f107 0310 	add.w	r3, r7, #16
 8006af2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8006af6:	f107 030f 	add.w	r3, r7, #15
 8006afa:	2200      	movs	r2, #0
 8006afc:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8006afe:	2300      	movs	r3, #0
 8006b00:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->ALL_PHYS = ALL_PHYS;
 8006b04:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006b08:	1dfa      	adds	r2, r7, #7
 8006b0a:	7812      	ldrb	r2, [r2, #0]
 8006b0c:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8006b0e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006b12:	3301      	adds	r3, #1
 8006b14:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->TX_PHYS = TX_PHYS;
 8006b18:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006b1c:	1dba      	adds	r2, r7, #6
 8006b1e:	7812      	ldrb	r2, [r2, #0]
 8006b20:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8006b22:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006b26:	3301      	adds	r3, #1
 8006b28:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->RX_PHYS = RX_PHYS;
 8006b2c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006b30:	1d7a      	adds	r2, r7, #5
 8006b32:	7812      	ldrb	r2, [r2, #0]
 8006b34:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8006b36:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006b3a:	3301      	adds	r3, #1
 8006b3c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8006b40:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006b44:	2218      	movs	r2, #24
 8006b46:	2100      	movs	r1, #0
 8006b48:	4618      	mov	r0, r3
 8006b4a:	f000 f838 	bl	8006bbe <Osal_MemSet>
  rq.ogf = 0x08;
 8006b4e:	2308      	movs	r3, #8
 8006b50:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x031;
 8006b54:	2331      	movs	r3, #49	; 0x31
 8006b56:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8006b5a:	f107 0310 	add.w	r3, r7, #16
 8006b5e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8006b62:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006b66:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8006b6a:	f107 030f 	add.w	r3, r7, #15
 8006b6e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8006b72:	2301      	movs	r3, #1
 8006b74:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8006b78:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006b7c:	2100      	movs	r1, #0
 8006b7e:	4618      	mov	r0, r3
 8006b80:	f000 f9e2 	bl	8006f48 <hci_send_req>
 8006b84:	4603      	mov	r3, r0
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	da01      	bge.n	8006b8e <hci_le_set_default_phy+0xbe>
    return BLE_STATUS_TIMEOUT;
 8006b8a:	23ff      	movs	r3, #255	; 0xff
 8006b8c:	e002      	b.n	8006b94 <hci_le_set_default_phy+0xc4>
  return status;
 8006b8e:	f107 030f 	add.w	r3, r7, #15
 8006b92:	781b      	ldrb	r3, [r3, #0]
}
 8006b94:	4618      	mov	r0, r3
 8006b96:	f507 779a 	add.w	r7, r7, #308	; 0x134
 8006b9a:	46bd      	mov	sp, r7
 8006b9c:	bd90      	pop	{r4, r7, pc}

08006b9e <Osal_MemCpy>:
 * Osal_MemCpy
 * 
 */
 
void* Osal_MemCpy( void *dest, const void *src, unsigned int size )
{
 8006b9e:	b580      	push	{r7, lr}
 8006ba0:	b084      	sub	sp, #16
 8006ba2:	af00      	add	r7, sp, #0
 8006ba4:	60f8      	str	r0, [r7, #12]
 8006ba6:	60b9      	str	r1, [r7, #8]
 8006ba8:	607a      	str	r2, [r7, #4]
  return memcpy( dest, src, size ); 
 8006baa:	687a      	ldr	r2, [r7, #4]
 8006bac:	68b9      	ldr	r1, [r7, #8]
 8006bae:	68f8      	ldr	r0, [r7, #12]
 8006bb0:	f002 ffca 	bl	8009b48 <memcpy>
 8006bb4:	4603      	mov	r3, r0
}
 8006bb6:	4618      	mov	r0, r3
 8006bb8:	3710      	adds	r7, #16
 8006bba:	46bd      	mov	sp, r7
 8006bbc:	bd80      	pop	{r7, pc}

08006bbe <Osal_MemSet>:
 * Osal_MemSet
 * 
 */
 
void* Osal_MemSet( void *ptr, int value, unsigned int size )
{
 8006bbe:	b580      	push	{r7, lr}
 8006bc0:	b084      	sub	sp, #16
 8006bc2:	af00      	add	r7, sp, #0
 8006bc4:	60f8      	str	r0, [r7, #12]
 8006bc6:	60b9      	str	r1, [r7, #8]
 8006bc8:	607a      	str	r2, [r7, #4]
  return memset( ptr, value, size );
 8006bca:	687a      	ldr	r2, [r7, #4]
 8006bcc:	68b9      	ldr	r1, [r7, #8]
 8006bce:	68f8      	ldr	r0, [r7, #12]
 8006bd0:	f002 ffc8 	bl	8009b64 <memset>
 8006bd4:	4603      	mov	r3, r0
}
 8006bd6:	4618      	mov	r0, r3
 8006bd8:	3710      	adds	r7, #16
 8006bda:	46bd      	mov	sp, r7
 8006bdc:	bd80      	pop	{r7, pc}

08006bde <BAS_Init>:
/* Private functions ----------------------------------------------------------*/
/* Weak functions ----------------------------------------------------------*/
void BVOPUS_STM_Init(void);

__weak void BAS_Init( void )
{
 8006bde:	b480      	push	{r7}
 8006be0:	af00      	add	r7, sp, #0
  return;
 8006be2:	bf00      	nop
}
 8006be4:	46bd      	mov	sp, r7
 8006be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bea:	4770      	bx	lr

08006bec <BLS_Init>:

__weak void BLS_Init( void )
{
 8006bec:	b480      	push	{r7}
 8006bee:	af00      	add	r7, sp, #0
  return;
 8006bf0:	bf00      	nop
}
 8006bf2:	46bd      	mov	sp, r7
 8006bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf8:	4770      	bx	lr

08006bfa <CRS_STM_Init>:
__weak void CRS_STM_Init( void )
{
 8006bfa:	b480      	push	{r7}
 8006bfc:	af00      	add	r7, sp, #0
  return;
 8006bfe:	bf00      	nop
}
 8006c00:	46bd      	mov	sp, r7
 8006c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c06:	4770      	bx	lr

08006c08 <DIS_Init>:
__weak void DIS_Init( void )
{
 8006c08:	b480      	push	{r7}
 8006c0a:	af00      	add	r7, sp, #0
  return;
 8006c0c:	bf00      	nop
}
 8006c0e:	46bd      	mov	sp, r7
 8006c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c14:	4770      	bx	lr

08006c16 <EDS_STM_Init>:
__weak void EDS_STM_Init( void )
{
 8006c16:	b480      	push	{r7}
 8006c18:	af00      	add	r7, sp, #0
  return;
 8006c1a:	bf00      	nop
}
 8006c1c:	46bd      	mov	sp, r7
 8006c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c22:	4770      	bx	lr

08006c24 <HIDS_Init>:
__weak void HIDS_Init( void )
{
 8006c24:	b480      	push	{r7}
 8006c26:	af00      	add	r7, sp, #0
  return;
 8006c28:	bf00      	nop
}
 8006c2a:	46bd      	mov	sp, r7
 8006c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c30:	4770      	bx	lr

08006c32 <HRS_Init>:
__weak void HRS_Init( void )
{
 8006c32:	b480      	push	{r7}
 8006c34:	af00      	add	r7, sp, #0
  return;
 8006c36:	bf00      	nop
}
 8006c38:	46bd      	mov	sp, r7
 8006c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c3e:	4770      	bx	lr

08006c40 <HTS_Init>:
__weak void HTS_Init( void )
{
 8006c40:	b480      	push	{r7}
 8006c42:	af00      	add	r7, sp, #0
  return;
 8006c44:	bf00      	nop
}
 8006c46:	46bd      	mov	sp, r7
 8006c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c4c:	4770      	bx	lr

08006c4e <IAS_Init>:
__weak void IAS_Init( void )
{
 8006c4e:	b480      	push	{r7}
 8006c50:	af00      	add	r7, sp, #0
  return;
 8006c52:	bf00      	nop
}
 8006c54:	46bd      	mov	sp, r7
 8006c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c5a:	4770      	bx	lr

08006c5c <LLS_Init>:
__weak void LLS_Init( void )
{
 8006c5c:	b480      	push	{r7}
 8006c5e:	af00      	add	r7, sp, #0
  return;
 8006c60:	bf00      	nop
}
 8006c62:	46bd      	mov	sp, r7
 8006c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c68:	4770      	bx	lr

08006c6a <TPS_Init>:
__weak void TPS_Init( void )
{
 8006c6a:	b480      	push	{r7}
 8006c6c:	af00      	add	r7, sp, #0
  return;
 8006c6e:	bf00      	nop
}
 8006c70:	46bd      	mov	sp, r7
 8006c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c76:	4770      	bx	lr

08006c78 <MOTENV_STM_Init>:
__weak void MOTENV_STM_Init( void )
{
 8006c78:	b480      	push	{r7}
 8006c7a:	af00      	add	r7, sp, #0
  return;
 8006c7c:	bf00      	nop
}
 8006c7e:	46bd      	mov	sp, r7
 8006c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c84:	4770      	bx	lr

08006c86 <P2PS_STM_Init>:
__weak void P2PS_STM_Init( void )
{
 8006c86:	b480      	push	{r7}
 8006c88:	af00      	add	r7, sp, #0
  return;
 8006c8a:	bf00      	nop
}
 8006c8c:	46bd      	mov	sp, r7
 8006c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c92:	4770      	bx	lr

08006c94 <ZDD_STM_Init>:
__weak void ZDD_STM_Init( void )
{
 8006c94:	b480      	push	{r7}
 8006c96:	af00      	add	r7, sp, #0
  return;
 8006c98:	bf00      	nop
}
 8006c9a:	46bd      	mov	sp, r7
 8006c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca0:	4770      	bx	lr

08006ca2 <OTAS_STM_Init>:
__weak void OTAS_STM_Init( void )
{
 8006ca2:	b480      	push	{r7}
 8006ca4:	af00      	add	r7, sp, #0
  return;
 8006ca6:	bf00      	nop
}
 8006ca8:	46bd      	mov	sp, r7
 8006caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cae:	4770      	bx	lr

08006cb0 <MESH_Init>:
__weak void MESH_Init( void )
{
 8006cb0:	b480      	push	{r7}
 8006cb2:	af00      	add	r7, sp, #0
  return;
 8006cb4:	bf00      	nop
}
 8006cb6:	46bd      	mov	sp, r7
 8006cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cbc:	4770      	bx	lr

08006cbe <BVOPUS_STM_Init>:
__weak void BVOPUS_STM_Init( void )
{
 8006cbe:	b480      	push	{r7}
 8006cc0:	af00      	add	r7, sp, #0
  return;
 8006cc2:	bf00      	nop
}
 8006cc4:	46bd      	mov	sp, r7
 8006cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cca:	4770      	bx	lr

08006ccc <SVCCTL_Init>:
}

/* Functions Definition ------------------------------------------------------*/

void SVCCTL_Init( void )
{
 8006ccc:	b580      	push	{r7, lr}
 8006cce:	af00      	add	r7, sp, #0
 
  /**
   * Initialize the number of registered Handler
   */
  SVCCTL_EvtHandler.NbreOfRegisteredHandler = 0;
 8006cd0:	4b04      	ldr	r3, [pc, #16]	; (8006ce4 <SVCCTL_Init+0x18>)
 8006cd2:	2200      	movs	r2, #0
 8006cd4:	771a      	strb	r2, [r3, #28]
  SVCCTL_CltHandler.NbreOfRegisteredHandler = 0;
 8006cd6:	4b04      	ldr	r3, [pc, #16]	; (8006ce8 <SVCCTL_Init+0x1c>)
 8006cd8:	2200      	movs	r2, #0
 8006cda:	701a      	strb	r2, [r3, #0]

  /**
   * Add and Initialize requested services
   */
  SVCCTL_SvcInit();
 8006cdc:	f000 f806 	bl	8006cec <SVCCTL_SvcInit>

  return;
 8006ce0:	bf00      	nop
}
 8006ce2:	bd80      	pop	{r7, pc}
 8006ce4:	20000128 	.word	0x20000128
 8006ce8:	20000148 	.word	0x20000148

08006cec <SVCCTL_SvcInit>:

__weak void SVCCTL_SvcInit(void)
{
 8006cec:	b580      	push	{r7, lr}
 8006cee:	af00      	add	r7, sp, #0
  BAS_Init();
 8006cf0:	f7ff ff75 	bl	8006bde <BAS_Init>

  BLS_Init();
 8006cf4:	f7ff ff7a 	bl	8006bec <BLS_Init>

  CRS_STM_Init();
 8006cf8:	f7ff ff7f 	bl	8006bfa <CRS_STM_Init>

  DIS_Init();
 8006cfc:	f7ff ff84 	bl	8006c08 <DIS_Init>

  EDS_STM_Init();
 8006d00:	f7ff ff89 	bl	8006c16 <EDS_STM_Init>

  HIDS_Init();
 8006d04:	f7ff ff8e 	bl	8006c24 <HIDS_Init>

  HRS_Init();
 8006d08:	f7ff ff93 	bl	8006c32 <HRS_Init>

  HTS_Init();
 8006d0c:	f7ff ff98 	bl	8006c40 <HTS_Init>

  IAS_Init();
 8006d10:	f7ff ff9d 	bl	8006c4e <IAS_Init>

  LLS_Init();
 8006d14:	f7ff ffa2 	bl	8006c5c <LLS_Init>

  TPS_Init();
 8006d18:	f7ff ffa7 	bl	8006c6a <TPS_Init>

  MOTENV_STM_Init();
 8006d1c:	f7ff ffac 	bl	8006c78 <MOTENV_STM_Init>

  P2PS_STM_Init();
 8006d20:	f7ff ffb1 	bl	8006c86 <P2PS_STM_Init>

  ZDD_STM_Init();
 8006d24:	f7ff ffb6 	bl	8006c94 <ZDD_STM_Init>

  OTAS_STM_Init();
 8006d28:	f7ff ffbb 	bl	8006ca2 <OTAS_STM_Init>
  
  BVOPUS_STM_Init();
 8006d2c:	f7ff ffc7 	bl	8006cbe <BVOPUS_STM_Init>

  MESH_Init();
 8006d30:	f7ff ffbe 	bl	8006cb0 <MESH_Init>

  SVCCTL_InitCustomSvc();
 8006d34:	f002 f93c 	bl	8008fb0 <SVCCTL_InitCustomSvc>
  
  return;
 8006d38:	bf00      	nop
}
 8006d3a:	bd80      	pop	{r7, pc}

08006d3c <SVCCTL_RegisterSvcHandler>:
 * @brief  BLE Controller initialization
 * @param  None
 * @retval None
 */
void SVCCTL_RegisterSvcHandler( SVC_CTL_p_EvtHandler_t pfBLE_SVC_Service_Event_Handler )
{
 8006d3c:	b480      	push	{r7}
 8006d3e:	b083      	sub	sp, #12
 8006d40:	af00      	add	r7, sp, #0
 8006d42:	6078      	str	r0, [r7, #4]
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
  SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[SVCCTL_EvtHandler.NbreOfRegisteredHandler] = pfBLE_SVC_Service_Event_Handler;
 8006d44:	4b09      	ldr	r3, [pc, #36]	; (8006d6c <SVCCTL_RegisterSvcHandler+0x30>)
 8006d46:	7f1b      	ldrb	r3, [r3, #28]
 8006d48:	4619      	mov	r1, r3
 8006d4a:	4a08      	ldr	r2, [pc, #32]	; (8006d6c <SVCCTL_RegisterSvcHandler+0x30>)
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  SVCCTL_EvtHandler.NbreOfRegisteredHandler++;
 8006d52:	4b06      	ldr	r3, [pc, #24]	; (8006d6c <SVCCTL_RegisterSvcHandler+0x30>)
 8006d54:	7f1b      	ldrb	r3, [r3, #28]
 8006d56:	3301      	adds	r3, #1
 8006d58:	b2da      	uxtb	r2, r3
 8006d5a:	4b04      	ldr	r3, [pc, #16]	; (8006d6c <SVCCTL_RegisterSvcHandler+0x30>)
 8006d5c:	771a      	strb	r2, [r3, #28]
#else
  (void)(pfBLE_SVC_Service_Event_Handler);
#endif

  return;
 8006d5e:	bf00      	nop
}
 8006d60:	370c      	adds	r7, #12
 8006d62:	46bd      	mov	sp, r7
 8006d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d68:	4770      	bx	lr
 8006d6a:	bf00      	nop
 8006d6c:	20000128 	.word	0x20000128

08006d70 <SVCCTL_UserEvtRx>:

  return;
}

SVCCTL_UserEvtFlowStatus_t SVCCTL_UserEvtRx( void *pckt )
{
 8006d70:	b580      	push	{r7, lr}
 8006d72:	b086      	sub	sp, #24
 8006d74:	af00      	add	r7, sp, #0
 8006d76:	6078      	str	r0, [r7, #4]
  evt_blecore_aci *blecore_evt;
  SVCCTL_EvtAckStatus_t event_notification_status;
  SVCCTL_UserEvtFlowStatus_t return_status;
  uint8_t index;

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	3301      	adds	r3, #1
 8006d7c:	613b      	str	r3, [r7, #16]
  event_notification_status = SVCCTL_EvtNotAck;
 8006d7e:	2300      	movs	r3, #0
 8006d80:	75fb      	strb	r3, [r7, #23]

  switch (event_pckt->evt)
 8006d82:	693b      	ldr	r3, [r7, #16]
 8006d84:	781b      	ldrb	r3, [r3, #0]
 8006d86:	2bff      	cmp	r3, #255	; 0xff
 8006d88:	d125      	bne.n	8006dd6 <SVCCTL_UserEvtRx+0x66>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
    {
      blecore_evt = (evt_blecore_aci*) event_pckt->data;
 8006d8a:	693b      	ldr	r3, [r7, #16]
 8006d8c:	3302      	adds	r3, #2
 8006d8e:	60fb      	str	r3, [r7, #12]

      switch ((blecore_evt->ecode) & SVCCTL_EGID_EVT_MASK)
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	881b      	ldrh	r3, [r3, #0]
 8006d94:	b29b      	uxth	r3, r3
 8006d96:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8006d9a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006d9e:	d118      	bne.n	8006dd2 <SVCCTL_UserEvtRx+0x62>
      {
        case SVCCTL_GATT_EVT_TYPE:
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
          /* For Service event handler */
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 8006da0:	2300      	movs	r3, #0
 8006da2:	757b      	strb	r3, [r7, #21]
 8006da4:	e00d      	b.n	8006dc2 <SVCCTL_UserEvtRx+0x52>
          {
            event_notification_status = SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[index](pckt);
 8006da6:	7d7b      	ldrb	r3, [r7, #21]
 8006da8:	4a1a      	ldr	r2, [pc, #104]	; (8006e14 <SVCCTL_UserEvtRx+0xa4>)
 8006daa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006dae:	6878      	ldr	r0, [r7, #4]
 8006db0:	4798      	blx	r3
 8006db2:	4603      	mov	r3, r0
 8006db4:	75fb      	strb	r3, [r7, #23]
            /**
             * When a GATT event has been acknowledged by a Service, there is no need to call the other registered handlers
             * a GATT event is relevant for only one Service
             */
            if (event_notification_status != SVCCTL_EvtNotAck)
 8006db6:	7dfb      	ldrb	r3, [r7, #23]
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d108      	bne.n	8006dce <SVCCTL_UserEvtRx+0x5e>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 8006dbc:	7d7b      	ldrb	r3, [r7, #21]
 8006dbe:	3301      	adds	r3, #1
 8006dc0:	757b      	strb	r3, [r7, #21]
 8006dc2:	4b14      	ldr	r3, [pc, #80]	; (8006e14 <SVCCTL_UserEvtRx+0xa4>)
 8006dc4:	7f1b      	ldrb	r3, [r3, #28]
 8006dc6:	7d7a      	ldrb	r2, [r7, #21]
 8006dc8:	429a      	cmp	r2, r3
 8006dca:	d3ec      	bcc.n	8006da6 <SVCCTL_UserEvtRx+0x36>
               */
              break;
            }
          }
#endif
          break;
 8006dcc:	e002      	b.n	8006dd4 <SVCCTL_UserEvtRx+0x64>
              break;
 8006dce:	bf00      	nop
          break;
 8006dd0:	e000      	b.n	8006dd4 <SVCCTL_UserEvtRx+0x64>

        default:
          break;
 8006dd2:	bf00      	nop
      }
    }
      break; /* HCI_HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE_SPECIFIC */
 8006dd4:	e000      	b.n	8006dd8 <SVCCTL_UserEvtRx+0x68>

    default:
      break;
 8006dd6:	bf00      	nop

  /**
   * When no registered handlers (either Service or Client) has acknowledged the GATT event, it is reported to the application
   * a GAP event is always reported to the applicaiton.
   */
  switch (event_notification_status)
 8006dd8:	7dfb      	ldrb	r3, [r7, #23]
 8006dda:	2b02      	cmp	r3, #2
 8006ddc:	d00f      	beq.n	8006dfe <SVCCTL_UserEvtRx+0x8e>
 8006dde:	2b02      	cmp	r3, #2
 8006de0:	dc10      	bgt.n	8006e04 <SVCCTL_UserEvtRx+0x94>
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d002      	beq.n	8006dec <SVCCTL_UserEvtRx+0x7c>
 8006de6:	2b01      	cmp	r3, #1
 8006de8:	d006      	beq.n	8006df8 <SVCCTL_UserEvtRx+0x88>
 8006dea:	e00b      	b.n	8006e04 <SVCCTL_UserEvtRx+0x94>
    case SVCCTL_EvtNotAck:
      /**
       *  The event has NOT been managed.
       *  It shall be passed to the application for processing
       */
      return_status = SVCCTL_App_Notification(pckt);
 8006dec:	6878      	ldr	r0, [r7, #4]
 8006dee:	f001 fb8b 	bl	8008508 <SVCCTL_App_Notification>
 8006df2:	4603      	mov	r3, r0
 8006df4:	75bb      	strb	r3, [r7, #22]
      break;
 8006df6:	e008      	b.n	8006e0a <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowEnable:
      return_status = SVCCTL_UserEvtFlowEnable;
 8006df8:	2301      	movs	r3, #1
 8006dfa:	75bb      	strb	r3, [r7, #22]
      break;
 8006dfc:	e005      	b.n	8006e0a <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowDisable:
      return_status = SVCCTL_UserEvtFlowDisable;
 8006dfe:	2300      	movs	r3, #0
 8006e00:	75bb      	strb	r3, [r7, #22]
      break;
 8006e02:	e002      	b.n	8006e0a <SVCCTL_UserEvtRx+0x9a>

    default:
      return_status = SVCCTL_UserEvtFlowEnable;
 8006e04:	2301      	movs	r3, #1
 8006e06:	75bb      	strb	r3, [r7, #22]
      break;
 8006e08:	bf00      	nop
  }

  return (return_status);
 8006e0a:	7dbb      	ldrb	r3, [r7, #22]
}
 8006e0c:	4618      	mov	r0, r3
 8006e0e:	3718      	adds	r7, #24
 8006e10:	46bd      	mov	sp, r7
 8006e12:	bd80      	pop	{r7, pc}
 8006e14:	20000128 	.word	0x20000128

08006e18 <SHCI_C2_BLE_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_BLE_Init( SHCI_C2_Ble_Init_Cmd_Packet_t *pCmdPacket )
{
 8006e18:	b580      	push	{r7, lr}
 8006e1a:	b088      	sub	sp, #32
 8006e1c:	af00      	add	r7, sp, #0
 8006e1e:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8006e20:	f107 030c 	add.w	r3, r7, #12
 8006e24:	61fb      	str	r3, [r7, #28]

 shci_send( SHCI_OPCODE_C2_BLE_INIT,
            sizeof( SHCI_C2_Ble_Init_Cmd_Param_t ),
            (uint8_t*)&pCmdPacket->Param,
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	f103 020c 	add.w	r2, r3, #12
 shci_send( SHCI_OPCODE_C2_BLE_INIT,
 8006e2c:	69fb      	ldr	r3, [r7, #28]
 8006e2e:	2124      	movs	r1, #36	; 0x24
 8006e30:	f64f 4066 	movw	r0, #64614	; 0xfc66
 8006e34:	f000 fa1e 	bl	8007274 <shci_send>
            p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8006e38:	69fb      	ldr	r3, [r7, #28]
 8006e3a:	330b      	adds	r3, #11
 8006e3c:	78db      	ldrb	r3, [r3, #3]
}
 8006e3e:	4618      	mov	r0, r3
 8006e40:	3720      	adds	r7, #32
 8006e42:	46bd      	mov	sp, r7
 8006e44:	bd80      	pop	{r7, pc}

08006e46 <SHCI_C2_DEBUG_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_DEBUG_Init( SHCI_C2_DEBUG_Init_Cmd_Packet_t *pCmdPacket  )
{
 8006e46:	b580      	push	{r7, lr}
 8006e48:	b088      	sub	sp, #32
 8006e4a:	af00      	add	r7, sp, #0
 8006e4c:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8006e4e:	f107 030c 	add.w	r3, r7, #12
 8006e52:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
             sizeof( SHCI_C2_DEBUG_init_Cmd_Param_t ),
             (uint8_t*)&pCmdPacket->Param,
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	f103 020c 	add.w	r2, r3, #12
  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
 8006e5a:	69fb      	ldr	r3, [r7, #28]
 8006e5c:	210f      	movs	r1, #15
 8006e5e:	f64f 4068 	movw	r0, #64616	; 0xfc68
 8006e62:	f000 fa07 	bl	8007274 <shci_send>
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8006e66:	69fb      	ldr	r3, [r7, #28]
 8006e68:	330b      	adds	r3, #11
 8006e6a:	78db      	ldrb	r3, [r3, #3]
}
 8006e6c:	4618      	mov	r0, r3
 8006e6e:	3720      	adds	r7, #32
 8006e70:	46bd      	mov	sp, r7
 8006e72:	bd80      	pop	{r7, pc}

08006e74 <hci_init>:
static void TlEvtReceived(TL_EvtPacket_t *hcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8006e74:	b580      	push	{r7, lr}
 8006e76:	b082      	sub	sp, #8
 8006e78:	af00      	add	r7, sp, #0
 8006e7a:	6078      	str	r0, [r7, #4]
 8006e7c:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((HCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 8006e7e:	683b      	ldr	r3, [r7, #0]
 8006e80:	685b      	ldr	r3, [r3, #4]
 8006e82:	4a08      	ldr	r2, [pc, #32]	; (8006ea4 <hci_init+0x30>)
 8006e84:	6013      	str	r3, [r2, #0]
  hciContext.UserEvtRx = UserEvtRx;
 8006e86:	4a08      	ldr	r2, [pc, #32]	; (8006ea8 <hci_init+0x34>)
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	61d3      	str	r3, [r2, #28]

  hci_register_io_bus (&hciContext.io);
 8006e8c:	4806      	ldr	r0, [pc, #24]	; (8006ea8 <hci_init+0x34>)
 8006e8e:	f000 f973 	bl	8007178 <hci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((HCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 8006e92:	683b      	ldr	r3, [r7, #0]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	4618      	mov	r0, r3
 8006e98:	f000 f8d4 	bl	8007044 <TlInit>

  return;
 8006e9c:	bf00      	nop
}
 8006e9e:	3708      	adds	r7, #8
 8006ea0:	46bd      	mov	sp, r7
 8006ea2:	bd80      	pop	{r7, pc}
 8006ea4:	20000258 	.word	0x20000258
 8006ea8:	20000230 	.word	0x20000230

08006eac <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 8006eac:	b580      	push	{r7, lr}
 8006eae:	b084      	sub	sp, #16
 8006eb0:	af00      	add	r7, sp, #0
  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 8006eb2:	4822      	ldr	r0, [pc, #136]	; (8006f3c <hci_user_evt_proc+0x90>)
 8006eb4:	f000 fe06 	bl	8007ac4 <LST_is_empty>
 8006eb8:	4603      	mov	r3, r0
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d12b      	bne.n	8006f16 <hci_user_evt_proc+0x6a>
 8006ebe:	4b20      	ldr	r3, [pc, #128]	; (8006f40 <hci_user_evt_proc+0x94>)
 8006ec0:	781b      	ldrb	r3, [r3, #0]
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d027      	beq.n	8006f16 <hci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &HciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 8006ec6:	f107 030c 	add.w	r3, r7, #12
 8006eca:	4619      	mov	r1, r3
 8006ecc:	481b      	ldr	r0, [pc, #108]	; (8006f3c <hci_user_evt_proc+0x90>)
 8006ece:	f000 fe88 	bl	8007be2 <LST_remove_head>

    if (hciContext.UserEvtRx != NULL)
 8006ed2:	4b1c      	ldr	r3, [pc, #112]	; (8006f44 <hci_user_evt_proc+0x98>)
 8006ed4:	69db      	ldr	r3, [r3, #28]
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d00c      	beq.n	8006ef4 <hci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = HCI_TL_UserEventFlow_Enable;
 8006ede:	2301      	movs	r3, #1
 8006ee0:	713b      	strb	r3, [r7, #4]
      hciContext.UserEvtRx((void *)&UserEvtRxParam);
 8006ee2:	4b18      	ldr	r3, [pc, #96]	; (8006f44 <hci_user_evt_proc+0x98>)
 8006ee4:	69db      	ldr	r3, [r3, #28]
 8006ee6:	1d3a      	adds	r2, r7, #4
 8006ee8:	4610      	mov	r0, r2
 8006eea:	4798      	blx	r3
      UserEventFlow = UserEvtRxParam.status;
 8006eec:	793a      	ldrb	r2, [r7, #4]
 8006eee:	4b14      	ldr	r3, [pc, #80]	; (8006f40 <hci_user_evt_proc+0x94>)
 8006ef0:	701a      	strb	r2, [r3, #0]
 8006ef2:	e002      	b.n	8006efa <hci_user_evt_proc+0x4e>
    }
    else
    {
      UserEventFlow = HCI_TL_UserEventFlow_Enable;
 8006ef4:	4b12      	ldr	r3, [pc, #72]	; (8006f40 <hci_user_evt_proc+0x94>)
 8006ef6:	2201      	movs	r2, #1
 8006ef8:	701a      	strb	r2, [r3, #0]
    }

    if(UserEventFlow != HCI_TL_UserEventFlow_Disable)
 8006efa:	4b11      	ldr	r3, [pc, #68]	; (8006f40 <hci_user_evt_proc+0x94>)
 8006efc:	781b      	ldrb	r3, [r3, #0]
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d004      	beq.n	8006f0c <hci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	4618      	mov	r0, r3
 8006f06:	f000 fc03 	bl	8007710 <TL_MM_EvtDone>
 8006f0a:	e004      	b.n	8006f16 <hci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &HciAsynchEventQueue, (tListNode *)phcievtbuffer );
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	4619      	mov	r1, r3
 8006f10:	480a      	ldr	r0, [pc, #40]	; (8006f3c <hci_user_evt_proc+0x90>)
 8006f12:	f000 fdf9 	bl	8007b08 <LST_insert_head>
    }
  }

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 8006f16:	4809      	ldr	r0, [pc, #36]	; (8006f3c <hci_user_evt_proc+0x90>)
 8006f18:	f000 fdd4 	bl	8007ac4 <LST_is_empty>
 8006f1c:	4603      	mov	r3, r0
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d107      	bne.n	8006f32 <hci_user_evt_proc+0x86>
 8006f22:	4b07      	ldr	r3, [pc, #28]	; (8006f40 <hci_user_evt_proc+0x94>)
 8006f24:	781b      	ldrb	r3, [r3, #0]
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d003      	beq.n	8006f32 <hci_user_evt_proc+0x86>
  {
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue);
 8006f2a:	4804      	ldr	r0, [pc, #16]	; (8006f3c <hci_user_evt_proc+0x90>)
 8006f2c:	f001 fdca 	bl	8008ac4 <hci_notify_asynch_evt>
  }


  return;
 8006f30:	bf00      	nop
 8006f32:	bf00      	nop
}
 8006f34:	3710      	adds	r7, #16
 8006f36:	46bd      	mov	sp, r7
 8006f38:	bd80      	pop	{r7, pc}
 8006f3a:	bf00      	nop
 8006f3c:	20000150 	.word	0x20000150
 8006f40:	2000015c 	.word	0x2000015c
 8006f44:	20000230 	.word	0x20000230

08006f48 <hci_send_req>:

  return;
}

int hci_send_req(struct hci_request *p_cmd, uint8_t async)
{
 8006f48:	b580      	push	{r7, lr}
 8006f4a:	b088      	sub	sp, #32
 8006f4c:	af00      	add	r7, sp, #0
 8006f4e:	6078      	str	r0, [r7, #4]
 8006f50:	460b      	mov	r3, r1
 8006f52:	70fb      	strb	r3, [r7, #3]
  TL_CsEvt_t    *pcommand_status_event;
  TL_EvtPacket_t *pevtpacket;
  uint8_t hci_cmd_complete_return_parameters_length;
  HCI_TL_CmdStatus_t local_cmd_status;

  NotifyCmdStatus(HCI_TL_CmdBusy);
 8006f54:	2000      	movs	r0, #0
 8006f56:	f000 f8cb 	bl	80070f0 <NotifyCmdStatus>
  local_cmd_status = HCI_TL_CmdBusy;
 8006f5a:	2300      	movs	r3, #0
 8006f5c:	77fb      	strb	r3, [r7, #31]
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	885b      	ldrh	r3, [r3, #2]
 8006f62:	b21b      	sxth	r3, r3
 8006f64:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006f68:	b21a      	sxth	r2, r3
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	881b      	ldrh	r3, [r3, #0]
 8006f6e:	029b      	lsls	r3, r3, #10
 8006f70:	b21b      	sxth	r3, r3
 8006f72:	4313      	orrs	r3, r2
 8006f74:	b21b      	sxth	r3, r3
 8006f76:	83bb      	strh	r3, [r7, #28]
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	68db      	ldr	r3, [r3, #12]
 8006f7c:	b2d9      	uxtb	r1, r3
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	689a      	ldr	r2, [r3, #8]
 8006f82:	8bbb      	ldrh	r3, [r7, #28]
 8006f84:	4618      	mov	r0, r3
 8006f86:	f000 f88d 	bl	80070a4 <SendCmd>

  while(local_cmd_status == HCI_TL_CmdBusy)
 8006f8a:	e04e      	b.n	800702a <hci_send_req+0xe2>
  {
    hci_cmd_resp_wait(HCI_TL_DEFAULT_TIMEOUT);
 8006f8c:	f248 00e8 	movw	r0, #33000	; 0x80e8
 8006f90:	f001 fdaf 	bl	8008af2 <hci_cmd_resp_wait>

    /**
     * Process Cmd Event
     */
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 8006f94:	e043      	b.n	800701e <hci_send_req+0xd6>
    {
      LST_remove_head (&HciCmdEventQueue, (tListNode **)&pevtpacket);
 8006f96:	f107 030c 	add.w	r3, r7, #12
 8006f9a:	4619      	mov	r1, r3
 8006f9c:	4828      	ldr	r0, [pc, #160]	; (8007040 <hci_send_req+0xf8>)
 8006f9e:	f000 fe20 	bl	8007be2 <LST_remove_head>

      if(pevtpacket->evtserial.evt.evtcode == TL_BLEEVT_CS_OPCODE)
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	7a5b      	ldrb	r3, [r3, #9]
 8006fa6:	2b0f      	cmp	r3, #15
 8006fa8:	d114      	bne.n	8006fd4 <hci_send_req+0x8c>
      {
        pcommand_status_event = (TL_CsEvt_t*)pevtpacket->evtserial.evt.payload;
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	330b      	adds	r3, #11
 8006fae:	613b      	str	r3, [r7, #16]
        if(pcommand_status_event->cmdcode == opcode)
 8006fb0:	693b      	ldr	r3, [r7, #16]
 8006fb2:	885b      	ldrh	r3, [r3, #2]
 8006fb4:	b29b      	uxth	r3, r3
 8006fb6:	8bba      	ldrh	r2, [r7, #28]
 8006fb8:	429a      	cmp	r2, r3
 8006fba:	d104      	bne.n	8006fc6 <hci_send_req+0x7e>
        {
          *(uint8_t *)(p_cmd->rparam) = pcommand_status_event->status;
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	691b      	ldr	r3, [r3, #16]
 8006fc0:	693a      	ldr	r2, [r7, #16]
 8006fc2:	7812      	ldrb	r2, [r2, #0]
 8006fc4:	701a      	strb	r2, [r3, #0]
        }

        if(pcommand_status_event->numcmd != 0)
 8006fc6:	693b      	ldr	r3, [r7, #16]
 8006fc8:	785b      	ldrb	r3, [r3, #1]
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d027      	beq.n	800701e <hci_send_req+0xd6>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 8006fce:	2301      	movs	r3, #1
 8006fd0:	77fb      	strb	r3, [r7, #31]
 8006fd2:	e024      	b.n	800701e <hci_send_req+0xd6>
        }
      }
      else
      {
        pcommand_complete_event = (TL_CcEvt_t*)pevtpacket->evtserial.evt.payload;
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	330b      	adds	r3, #11
 8006fd8:	61bb      	str	r3, [r7, #24]

        if(pcommand_complete_event->cmdcode == opcode)
 8006fda:	69bb      	ldr	r3, [r7, #24]
 8006fdc:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8006fe0:	b29b      	uxth	r3, r3
 8006fe2:	8bba      	ldrh	r2, [r7, #28]
 8006fe4:	429a      	cmp	r2, r3
 8006fe6:	d114      	bne.n	8007012 <hci_send_req+0xca>
        {
          hci_cmd_complete_return_parameters_length = pevtpacket->evtserial.evt.plen - TL_EVT_HDR_SIZE;
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	7a9b      	ldrb	r3, [r3, #10]
 8006fec:	3b03      	subs	r3, #3
 8006fee:	75fb      	strb	r3, [r7, #23]
          p_cmd->rlen = MIN(hci_cmd_complete_return_parameters_length, p_cmd->rlen);
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	695a      	ldr	r2, [r3, #20]
 8006ff4:	7dfb      	ldrb	r3, [r7, #23]
 8006ff6:	429a      	cmp	r2, r3
 8006ff8:	bfa8      	it	ge
 8006ffa:	461a      	movge	r2, r3
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	615a      	str	r2, [r3, #20]
          memcpy(p_cmd->rparam, pcommand_complete_event->payload, p_cmd->rlen);
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	6918      	ldr	r0, [r3, #16]
 8007004:	69bb      	ldr	r3, [r7, #24]
 8007006:	1cd9      	adds	r1, r3, #3
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	695b      	ldr	r3, [r3, #20]
 800700c:	461a      	mov	r2, r3
 800700e:	f002 fd9b 	bl	8009b48 <memcpy>
        }

        if(pcommand_complete_event->numcmd != 0)
 8007012:	69bb      	ldr	r3, [r7, #24]
 8007014:	781b      	ldrb	r3, [r3, #0]
 8007016:	2b00      	cmp	r3, #0
 8007018:	d001      	beq.n	800701e <hci_send_req+0xd6>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 800701a:	2301      	movs	r3, #1
 800701c:	77fb      	strb	r3, [r7, #31]
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 800701e:	4808      	ldr	r0, [pc, #32]	; (8007040 <hci_send_req+0xf8>)
 8007020:	f000 fd50 	bl	8007ac4 <LST_is_empty>
 8007024:	4603      	mov	r3, r0
 8007026:	2b00      	cmp	r3, #0
 8007028:	d0b5      	beq.n	8006f96 <hci_send_req+0x4e>
  while(local_cmd_status == HCI_TL_CmdBusy)
 800702a:	7ffb      	ldrb	r3, [r7, #31]
 800702c:	2b00      	cmp	r3, #0
 800702e:	d0ad      	beq.n	8006f8c <hci_send_req+0x44>
        }
      }
    }
  }

  NotifyCmdStatus(HCI_TL_CmdAvailable);
 8007030:	2001      	movs	r0, #1
 8007032:	f000 f85d 	bl	80070f0 <NotifyCmdStatus>

  return 0;
 8007036:	2300      	movs	r3, #0
}
 8007038:	4618      	mov	r0, r3
 800703a:	3720      	adds	r7, #32
 800703c:	46bd      	mov	sp, r7
 800703e:	bd80      	pop	{r7, pc}
 8007040:	20000250 	.word	0x20000250

08007044 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 8007044:	b580      	push	{r7, lr}
 8007046:	b086      	sub	sp, #24
 8007048:	af00      	add	r7, sp, #0
 800704a:	6078      	str	r0, [r7, #4]
  TL_BLE_InitConf_t Conf;

  /**
   * Always initialize the command event queue
   */
  LST_init_head (&HciCmdEventQueue);
 800704c:	480f      	ldr	r0, [pc, #60]	; (800708c <TlInit+0x48>)
 800704e:	f000 fd29 	bl	8007aa4 <LST_init_head>

  pCmdBuffer = p_cmdbuffer;
 8007052:	4a0f      	ldr	r2, [pc, #60]	; (8007090 <TlInit+0x4c>)
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	6013      	str	r3, [r2, #0]

  LST_init_head (&HciAsynchEventQueue);
 8007058:	480e      	ldr	r0, [pc, #56]	; (8007094 <TlInit+0x50>)
 800705a:	f000 fd23 	bl	8007aa4 <LST_init_head>

  UserEventFlow = HCI_TL_UserEventFlow_Enable;
 800705e:	4b0e      	ldr	r3, [pc, #56]	; (8007098 <TlInit+0x54>)
 8007060:	2201      	movs	r2, #1
 8007062:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (hciContext.io.Init)
 8007064:	4b0d      	ldr	r3, [pc, #52]	; (800709c <TlInit+0x58>)
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	2b00      	cmp	r3, #0
 800706a:	d00a      	beq.n	8007082 <TlInit+0x3e>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	613b      	str	r3, [r7, #16]
    Conf.IoBusEvtCallBack = TlEvtReceived;
 8007070:	4b0b      	ldr	r3, [pc, #44]	; (80070a0 <TlInit+0x5c>)
 8007072:	60bb      	str	r3, [r7, #8]
    hciContext.io.Init(&Conf);
 8007074:	4b09      	ldr	r3, [pc, #36]	; (800709c <TlInit+0x58>)
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	f107 0208 	add.w	r2, r7, #8
 800707c:	4610      	mov	r0, r2
 800707e:	4798      	blx	r3
  }

  return;
 8007080:	bf00      	nop
 8007082:	bf00      	nop
}
 8007084:	3718      	adds	r7, #24
 8007086:	46bd      	mov	sp, r7
 8007088:	bd80      	pop	{r7, pc}
 800708a:	bf00      	nop
 800708c:	20000250 	.word	0x20000250
 8007090:	20000158 	.word	0x20000158
 8007094:	20000150 	.word	0x20000150
 8007098:	2000015c 	.word	0x2000015c
 800709c:	20000230 	.word	0x20000230
 80070a0:	08007131 	.word	0x08007131

080070a4 <SendCmd>:

static void SendCmd(uint16_t opcode, uint8_t plen, void *param)
{
 80070a4:	b580      	push	{r7, lr}
 80070a6:	b082      	sub	sp, #8
 80070a8:	af00      	add	r7, sp, #0
 80070aa:	4603      	mov	r3, r0
 80070ac:	603a      	str	r2, [r7, #0]
 80070ae:	80fb      	strh	r3, [r7, #6]
 80070b0:	460b      	mov	r3, r1
 80070b2:	717b      	strb	r3, [r7, #5]
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 80070b4:	4b0c      	ldr	r3, [pc, #48]	; (80070e8 <SendCmd+0x44>)
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	88fa      	ldrh	r2, [r7, #6]
 80070ba:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = plen;
 80070be:	4b0a      	ldr	r3, [pc, #40]	; (80070e8 <SendCmd+0x44>)
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	797a      	ldrb	r2, [r7, #5]
 80070c4:	72da      	strb	r2, [r3, #11]
  memcpy( pCmdBuffer->cmdserial.cmd.payload, param, plen );
 80070c6:	4b08      	ldr	r3, [pc, #32]	; (80070e8 <SendCmd+0x44>)
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	330c      	adds	r3, #12
 80070cc:	797a      	ldrb	r2, [r7, #5]
 80070ce:	6839      	ldr	r1, [r7, #0]
 80070d0:	4618      	mov	r0, r3
 80070d2:	f002 fd39 	bl	8009b48 <memcpy>

  hciContext.io.Send(0,0);
 80070d6:	4b05      	ldr	r3, [pc, #20]	; (80070ec <SendCmd+0x48>)
 80070d8:	691b      	ldr	r3, [r3, #16]
 80070da:	2100      	movs	r1, #0
 80070dc:	2000      	movs	r0, #0
 80070de:	4798      	blx	r3

  return;
 80070e0:	bf00      	nop
}
 80070e2:	3708      	adds	r7, #8
 80070e4:	46bd      	mov	sp, r7
 80070e6:	bd80      	pop	{r7, pc}
 80070e8:	20000158 	.word	0x20000158
 80070ec:	20000230 	.word	0x20000230

080070f0 <NotifyCmdStatus>:

static void NotifyCmdStatus(HCI_TL_CmdStatus_t hcicmdstatus)
{
 80070f0:	b580      	push	{r7, lr}
 80070f2:	b082      	sub	sp, #8
 80070f4:	af00      	add	r7, sp, #0
 80070f6:	4603      	mov	r3, r0
 80070f8:	71fb      	strb	r3, [r7, #7]
  if(hcicmdstatus == HCI_TL_CmdBusy)
 80070fa:	79fb      	ldrb	r3, [r7, #7]
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d108      	bne.n	8007112 <NotifyCmdStatus+0x22>
  {
    if(StatusNotCallBackFunction != 0)
 8007100:	4b0a      	ldr	r3, [pc, #40]	; (800712c <NotifyCmdStatus+0x3c>)
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	2b00      	cmp	r3, #0
 8007106:	d00d      	beq.n	8007124 <NotifyCmdStatus+0x34>
    {
      StatusNotCallBackFunction(HCI_TL_CmdBusy);
 8007108:	4b08      	ldr	r3, [pc, #32]	; (800712c <NotifyCmdStatus+0x3c>)
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	2000      	movs	r0, #0
 800710e:	4798      	blx	r3
    {
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
    }
  }

  return;
 8007110:	e008      	b.n	8007124 <NotifyCmdStatus+0x34>
    if(StatusNotCallBackFunction != 0)
 8007112:	4b06      	ldr	r3, [pc, #24]	; (800712c <NotifyCmdStatus+0x3c>)
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	2b00      	cmp	r3, #0
 8007118:	d004      	beq.n	8007124 <NotifyCmdStatus+0x34>
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
 800711a:	4b04      	ldr	r3, [pc, #16]	; (800712c <NotifyCmdStatus+0x3c>)
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	2001      	movs	r0, #1
 8007120:	4798      	blx	r3
  return;
 8007122:	bf00      	nop
 8007124:	bf00      	nop
}
 8007126:	3708      	adds	r7, #8
 8007128:	46bd      	mov	sp, r7
 800712a:	bd80      	pop	{r7, pc}
 800712c:	20000258 	.word	0x20000258

08007130 <TlEvtReceived>:

static void TlEvtReceived(TL_EvtPacket_t *hcievt)
{
 8007130:	b580      	push	{r7, lr}
 8007132:	b082      	sub	sp, #8
 8007134:	af00      	add	r7, sp, #0
 8007136:	6078      	str	r0, [r7, #4]
  if ( ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	7a5b      	ldrb	r3, [r3, #9]
 800713c:	2b0f      	cmp	r3, #15
 800713e:	d003      	beq.n	8007148 <TlEvtReceived+0x18>
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	7a5b      	ldrb	r3, [r3, #9]
 8007144:	2b0e      	cmp	r3, #14
 8007146:	d107      	bne.n	8007158 <TlEvtReceived+0x28>
  {
    LST_insert_tail(&HciCmdEventQueue, (tListNode *)hcievt);
 8007148:	6879      	ldr	r1, [r7, #4]
 800714a:	4809      	ldr	r0, [pc, #36]	; (8007170 <TlEvtReceived+0x40>)
 800714c:	f000 fd02 	bl	8007b54 <LST_insert_tail>
    hci_cmd_resp_release(0); /**< Notify the application a full Cmd Event has been received */
 8007150:	2000      	movs	r0, #0
 8007152:	f001 fcc3 	bl	8008adc <hci_cmd_resp_release>
 8007156:	e006      	b.n	8007166 <TlEvtReceived+0x36>
  }
  else
  {
    LST_insert_tail(&HciAsynchEventQueue, (tListNode *)hcievt);
 8007158:	6879      	ldr	r1, [r7, #4]
 800715a:	4806      	ldr	r0, [pc, #24]	; (8007174 <TlEvtReceived+0x44>)
 800715c:	f000 fcfa 	bl	8007b54 <LST_insert_tail>
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 8007160:	4804      	ldr	r0, [pc, #16]	; (8007174 <TlEvtReceived+0x44>)
 8007162:	f001 fcaf 	bl	8008ac4 <hci_notify_asynch_evt>
  }

  return;
 8007166:	bf00      	nop
}
 8007168:	3708      	adds	r7, #8
 800716a:	46bd      	mov	sp, r7
 800716c:	bd80      	pop	{r7, pc}
 800716e:	bf00      	nop
 8007170:	20000250 	.word	0x20000250
 8007174:	20000150 	.word	0x20000150

08007178 <hci_register_io_bus>:
#include "hci_tl.h"
#include "tl.h"


void hci_register_io_bus(tHciIO* fops)
{
 8007178:	b480      	push	{r7}
 800717a:	b083      	sub	sp, #12
 800717c:	af00      	add	r7, sp, #0
 800717e:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_BLE_Init;
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	4a05      	ldr	r2, [pc, #20]	; (8007198 <hci_register_io_bus+0x20>)
 8007184:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_BLE_SendCmd;
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	4a04      	ldr	r2, [pc, #16]	; (800719c <hci_register_io_bus+0x24>)
 800718a:	611a      	str	r2, [r3, #16]

  return;
 800718c:	bf00      	nop
}
 800718e:	370c      	adds	r7, #12
 8007190:	46bd      	mov	sp, r7
 8007192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007196:	4770      	bx	lr
 8007198:	08007489 	.word	0x08007489
 800719c:	080074f1 	.word	0x080074f1

080071a0 <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 80071a0:	b580      	push	{r7, lr}
 80071a2:	b082      	sub	sp, #8
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	6078      	str	r0, [r7, #4]
 80071a8:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 80071aa:	683b      	ldr	r3, [r7, #0]
 80071ac:	685b      	ldr	r3, [r3, #4]
 80071ae:	4a08      	ldr	r2, [pc, #32]	; (80071d0 <shci_init+0x30>)
 80071b0:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 80071b2:	4a08      	ldr	r2, [pc, #32]	; (80071d4 <shci_init+0x34>)
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 80071b8:	4806      	ldr	r0, [pc, #24]	; (80071d4 <shci_init+0x34>)
 80071ba:	f000 f911 	bl	80073e0 <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 80071be:	683b      	ldr	r3, [r7, #0]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	4618      	mov	r0, r3
 80071c4:	f000 f894 	bl	80072f0 <TlInit>

  return;
 80071c8:	bf00      	nop
}
 80071ca:	3708      	adds	r7, #8
 80071cc:	46bd      	mov	sp, r7
 80071ce:	bd80      	pop	{r7, pc}
 80071d0:	2000027c 	.word	0x2000027c
 80071d4:	2000025c 	.word	0x2000025c

080071d8 <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 80071d8:	b580      	push	{r7, lr}
 80071da:	b084      	sub	sp, #16
 80071dc:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 80071de:	4822      	ldr	r0, [pc, #136]	; (8007268 <shci_user_evt_proc+0x90>)
 80071e0:	f000 fc70 	bl	8007ac4 <LST_is_empty>
 80071e4:	4603      	mov	r3, r0
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d12b      	bne.n	8007242 <shci_user_evt_proc+0x6a>
 80071ea:	4b20      	ldr	r3, [pc, #128]	; (800726c <shci_user_evt_proc+0x94>)
 80071ec:	781b      	ldrb	r3, [r3, #0]
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d027      	beq.n	8007242 <shci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 80071f2:	f107 030c 	add.w	r3, r7, #12
 80071f6:	4619      	mov	r1, r3
 80071f8:	481b      	ldr	r0, [pc, #108]	; (8007268 <shci_user_evt_proc+0x90>)
 80071fa:	f000 fcf2 	bl	8007be2 <LST_remove_head>

    if (shciContext.UserEvtRx != NULL)
 80071fe:	4b1c      	ldr	r3, [pc, #112]	; (8007270 <shci_user_evt_proc+0x98>)
 8007200:	69db      	ldr	r3, [r3, #28]
 8007202:	2b00      	cmp	r3, #0
 8007204:	d00c      	beq.n	8007220 <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 800720a:	2301      	movs	r3, #1
 800720c:	713b      	strb	r3, [r7, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 800720e:	4b18      	ldr	r3, [pc, #96]	; (8007270 <shci_user_evt_proc+0x98>)
 8007210:	69db      	ldr	r3, [r3, #28]
 8007212:	1d3a      	adds	r2, r7, #4
 8007214:	4610      	mov	r0, r2
 8007216:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 8007218:	793a      	ldrb	r2, [r7, #4]
 800721a:	4b14      	ldr	r3, [pc, #80]	; (800726c <shci_user_evt_proc+0x94>)
 800721c:	701a      	strb	r2, [r3, #0]
 800721e:	e002      	b.n	8007226 <shci_user_evt_proc+0x4e>
    }
    else
    {
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 8007220:	4b12      	ldr	r3, [pc, #72]	; (800726c <shci_user_evt_proc+0x94>)
 8007222:	2201      	movs	r2, #1
 8007224:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 8007226:	4b11      	ldr	r3, [pc, #68]	; (800726c <shci_user_evt_proc+0x94>)
 8007228:	781b      	ldrb	r3, [r3, #0]
 800722a:	2b00      	cmp	r3, #0
 800722c:	d004      	beq.n	8007238 <shci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	4618      	mov	r0, r3
 8007232:	f000 fa6d 	bl	8007710 <TL_MM_EvtDone>
 8007236:	e004      	b.n	8007242 <shci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	4619      	mov	r1, r3
 800723c:	480a      	ldr	r0, [pc, #40]	; (8007268 <shci_user_evt_proc+0x90>)
 800723e:	f000 fc63 	bl	8007b08 <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 8007242:	4809      	ldr	r0, [pc, #36]	; (8007268 <shci_user_evt_proc+0x90>)
 8007244:	f000 fc3e 	bl	8007ac4 <LST_is_empty>
 8007248:	4603      	mov	r3, r0
 800724a:	2b00      	cmp	r3, #0
 800724c:	d107      	bne.n	800725e <shci_user_evt_proc+0x86>
 800724e:	4b07      	ldr	r3, [pc, #28]	; (800726c <shci_user_evt_proc+0x94>)
 8007250:	781b      	ldrb	r3, [r3, #0]
 8007252:	2b00      	cmp	r3, #0
 8007254:	d003      	beq.n	800725e <shci_user_evt_proc+0x86>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 8007256:	4804      	ldr	r0, [pc, #16]	; (8007268 <shci_user_evt_proc+0x90>)
 8007258:	f7f9 fd6f 	bl	8000d3a <shci_notify_asynch_evt>
  }


  return;
 800725c:	bf00      	nop
 800725e:	bf00      	nop
}
 8007260:	3710      	adds	r7, #16
 8007262:	46bd      	mov	sp, r7
 8007264:	bd80      	pop	{r7, pc}
 8007266:	bf00      	nop
 8007268:	20000168 	.word	0x20000168
 800726c:	20000178 	.word	0x20000178
 8007270:	2000025c 	.word	0x2000025c

08007274 <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 8007274:	b580      	push	{r7, lr}
 8007276:	b084      	sub	sp, #16
 8007278:	af00      	add	r7, sp, #0
 800727a:	60ba      	str	r2, [r7, #8]
 800727c:	607b      	str	r3, [r7, #4]
 800727e:	4603      	mov	r3, r0
 8007280:	81fb      	strh	r3, [r7, #14]
 8007282:	460b      	mov	r3, r1
 8007284:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 8007286:	2000      	movs	r0, #0
 8007288:	f000 f864 	bl	8007354 <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 800728c:	4b16      	ldr	r3, [pc, #88]	; (80072e8 <shci_send+0x74>)
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	89fa      	ldrh	r2, [r7, #14]
 8007292:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 8007296:	4b14      	ldr	r3, [pc, #80]	; (80072e8 <shci_send+0x74>)
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	7b7a      	ldrb	r2, [r7, #13]
 800729c:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 800729e:	4b12      	ldr	r3, [pc, #72]	; (80072e8 <shci_send+0x74>)
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	330c      	adds	r3, #12
 80072a4:	7b7a      	ldrb	r2, [r7, #13]
 80072a6:	68b9      	ldr	r1, [r7, #8]
 80072a8:	4618      	mov	r0, r3
 80072aa:	f002 fc4d 	bl	8009b48 <memcpy>

  shciContext.io.Send(0,0);
 80072ae:	4b0f      	ldr	r3, [pc, #60]	; (80072ec <shci_send+0x78>)
 80072b0:	691b      	ldr	r3, [r3, #16]
 80072b2:	2100      	movs	r1, #0
 80072b4:	2000      	movs	r0, #0
 80072b6:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 80072b8:	f248 00e8 	movw	r0, #33000	; 0x80e8
 80072bc:	f7f9 fd54 	bl	8000d68 <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	f103 0008 	add.w	r0, r3, #8
 80072c6:	4b08      	ldr	r3, [pc, #32]	; (80072e8 <shci_send+0x74>)
 80072c8:	6819      	ldr	r1, [r3, #0]
 80072ca:	4b07      	ldr	r3, [pc, #28]	; (80072e8 <shci_send+0x74>)
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	789b      	ldrb	r3, [r3, #2]
 80072d0:	3303      	adds	r3, #3
 80072d2:	461a      	mov	r2, r3
 80072d4:	f002 fc38 	bl	8009b48 <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 80072d8:	2001      	movs	r0, #1
 80072da:	f000 f83b 	bl	8007354 <Cmd_SetStatus>

  return;
 80072de:	bf00      	nop
}
 80072e0:	3710      	adds	r7, #16
 80072e2:	46bd      	mov	sp, r7
 80072e4:	bd80      	pop	{r7, pc}
 80072e6:	bf00      	nop
 80072e8:	20000174 	.word	0x20000174
 80072ec:	2000025c 	.word	0x2000025c

080072f0 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 80072f0:	b580      	push	{r7, lr}
 80072f2:	b086      	sub	sp, #24
 80072f4:	af00      	add	r7, sp, #0
 80072f6:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 80072f8:	4a10      	ldr	r2, [pc, #64]	; (800733c <TlInit+0x4c>)
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 80072fe:	4810      	ldr	r0, [pc, #64]	; (8007340 <TlInit+0x50>)
 8007300:	f000 fbd0 	bl	8007aa4 <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 8007304:	2001      	movs	r0, #1
 8007306:	f000 f825 	bl	8007354 <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 800730a:	4b0e      	ldr	r3, [pc, #56]	; (8007344 <TlInit+0x54>)
 800730c:	2201      	movs	r2, #1
 800730e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 8007310:	4b0d      	ldr	r3, [pc, #52]	; (8007348 <TlInit+0x58>)
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	2b00      	cmp	r3, #0
 8007316:	d00c      	beq.n	8007332 <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 800731c:	4b0b      	ldr	r3, [pc, #44]	; (800734c <TlInit+0x5c>)
 800731e:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 8007320:	4b0b      	ldr	r3, [pc, #44]	; (8007350 <TlInit+0x60>)
 8007322:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 8007324:	4b08      	ldr	r3, [pc, #32]	; (8007348 <TlInit+0x58>)
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	f107 020c 	add.w	r2, r7, #12
 800732c:	4610      	mov	r0, r2
 800732e:	4798      	blx	r3
  }

  return;
 8007330:	bf00      	nop
 8007332:	bf00      	nop
}
 8007334:	3718      	adds	r7, #24
 8007336:	46bd      	mov	sp, r7
 8007338:	bd80      	pop	{r7, pc}
 800733a:	bf00      	nop
 800733c:	20000174 	.word	0x20000174
 8007340:	20000168 	.word	0x20000168
 8007344:	20000178 	.word	0x20000178
 8007348:	2000025c 	.word	0x2000025c
 800734c:	080073a5 	.word	0x080073a5
 8007350:	080073bd 	.word	0x080073bd

08007354 <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 8007354:	b580      	push	{r7, lr}
 8007356:	b082      	sub	sp, #8
 8007358:	af00      	add	r7, sp, #0
 800735a:	4603      	mov	r3, r0
 800735c:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 800735e:	79fb      	ldrb	r3, [r7, #7]
 8007360:	2b00      	cmp	r3, #0
 8007362:	d10b      	bne.n	800737c <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 8007364:	4b0d      	ldr	r3, [pc, #52]	; (800739c <Cmd_SetStatus+0x48>)
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	2b00      	cmp	r3, #0
 800736a:	d003      	beq.n	8007374 <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 800736c:	4b0b      	ldr	r3, [pc, #44]	; (800739c <Cmd_SetStatus+0x48>)
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	2000      	movs	r0, #0
 8007372:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 8007374:	4b0a      	ldr	r3, [pc, #40]	; (80073a0 <Cmd_SetStatus+0x4c>)
 8007376:	2200      	movs	r2, #0
 8007378:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 800737a:	e00b      	b.n	8007394 <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 800737c:	4b08      	ldr	r3, [pc, #32]	; (80073a0 <Cmd_SetStatus+0x4c>)
 800737e:	2201      	movs	r2, #1
 8007380:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 8007382:	4b06      	ldr	r3, [pc, #24]	; (800739c <Cmd_SetStatus+0x48>)
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	2b00      	cmp	r3, #0
 8007388:	d004      	beq.n	8007394 <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 800738a:	4b04      	ldr	r3, [pc, #16]	; (800739c <Cmd_SetStatus+0x48>)
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	2001      	movs	r0, #1
 8007390:	4798      	blx	r3
  return;
 8007392:	bf00      	nop
 8007394:	bf00      	nop
}
 8007396:	3708      	adds	r7, #8
 8007398:	46bd      	mov	sp, r7
 800739a:	bd80      	pop	{r7, pc}
 800739c:	2000027c 	.word	0x2000027c
 80073a0:	20000170 	.word	0x20000170

080073a4 <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 80073a4:	b580      	push	{r7, lr}
 80073a6:	b082      	sub	sp, #8
 80073a8:	af00      	add	r7, sp, #0
 80073aa:	6078      	str	r0, [r7, #4]
  (void)(shcievt);
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 80073ac:	2000      	movs	r0, #0
 80073ae:	f7f9 fcd0 	bl	8000d52 <shci_cmd_resp_release>

  return;
 80073b2:	bf00      	nop
}
 80073b4:	3708      	adds	r7, #8
 80073b6:	46bd      	mov	sp, r7
 80073b8:	bd80      	pop	{r7, pc}
	...

080073bc <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 80073bc:	b580      	push	{r7, lr}
 80073be:	b082      	sub	sp, #8
 80073c0:	af00      	add	r7, sp, #0
 80073c2:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 80073c4:	6879      	ldr	r1, [r7, #4]
 80073c6:	4805      	ldr	r0, [pc, #20]	; (80073dc <TlUserEvtReceived+0x20>)
 80073c8:	f000 fbc4 	bl	8007b54 <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 80073cc:	4803      	ldr	r0, [pc, #12]	; (80073dc <TlUserEvtReceived+0x20>)
 80073ce:	f7f9 fcb4 	bl	8000d3a <shci_notify_asynch_evt>

  return;
 80073d2:	bf00      	nop
}
 80073d4:	3708      	adds	r7, #8
 80073d6:	46bd      	mov	sp, r7
 80073d8:	bd80      	pop	{r7, pc}
 80073da:	bf00      	nop
 80073dc:	20000168 	.word	0x20000168

080073e0 <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 80073e0:	b480      	push	{r7}
 80073e2:	b083      	sub	sp, #12
 80073e4:	af00      	add	r7, sp, #0
 80073e6:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	4a05      	ldr	r2, [pc, #20]	; (8007400 <shci_register_io_bus+0x20>)
 80073ec:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	4a04      	ldr	r2, [pc, #16]	; (8007404 <shci_register_io_bus+0x24>)
 80073f2:	611a      	str	r2, [r3, #16]

  return;
 80073f4:	bf00      	nop
}
 80073f6:	370c      	adds	r7, #12
 80073f8:	46bd      	mov	sp, r7
 80073fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073fe:	4770      	bx	lr
 8007400:	0800759d 	.word	0x0800759d
 8007404:	080075f1 	.word	0x080075f1

08007408 <TL_Enable>:

/******************************************************************************
 * GENERAL
 ******************************************************************************/
void TL_Enable( void )
{
 8007408:	b580      	push	{r7, lr}
 800740a:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 800740c:	f002 f830 	bl	8009470 <HW_IPCC_Enable>

  return;
 8007410:	bf00      	nop
}
 8007412:	bd80      	pop	{r7, pc}

08007414 <TL_Init>:


void TL_Init( void )
{
 8007414:	b580      	push	{r7, lr}
 8007416:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 8007418:	4b10      	ldr	r3, [pc, #64]	; (800745c <TL_Init+0x48>)
 800741a:	4a11      	ldr	r2, [pc, #68]	; (8007460 <TL_Init+0x4c>)
 800741c:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 800741e:	4b0f      	ldr	r3, [pc, #60]	; (800745c <TL_Init+0x48>)
 8007420:	4a10      	ldr	r2, [pc, #64]	; (8007464 <TL_Init+0x50>)
 8007422:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 8007424:	4b0d      	ldr	r3, [pc, #52]	; (800745c <TL_Init+0x48>)
 8007426:	4a10      	ldr	r2, [pc, #64]	; (8007468 <TL_Init+0x54>)
 8007428:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 800742a:	4b0c      	ldr	r3, [pc, #48]	; (800745c <TL_Init+0x48>)
 800742c:	4a0f      	ldr	r2, [pc, #60]	; (800746c <TL_Init+0x58>)
 800742e:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_ble_lld_table = &TL_BleLldTable;
 8007430:	4b0a      	ldr	r3, [pc, #40]	; (800745c <TL_Init+0x48>)
 8007432:	4a0f      	ldr	r2, [pc, #60]	; (8007470 <TL_Init+0x5c>)
 8007434:	625a      	str	r2, [r3, #36]	; 0x24
  TL_RefTable.p_sys_table = &TL_SysTable;
 8007436:	4b09      	ldr	r3, [pc, #36]	; (800745c <TL_Init+0x48>)
 8007438:	4a0e      	ldr	r2, [pc, #56]	; (8007474 <TL_Init+0x60>)
 800743a:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 800743c:	4b07      	ldr	r3, [pc, #28]	; (800745c <TL_Init+0x48>)
 800743e:	4a0e      	ldr	r2, [pc, #56]	; (8007478 <TL_Init+0x64>)
 8007440:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 8007442:	4b06      	ldr	r3, [pc, #24]	; (800745c <TL_Init+0x48>)
 8007444:	4a0d      	ldr	r2, [pc, #52]	; (800747c <TL_Init+0x68>)
 8007446:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 8007448:	4b04      	ldr	r3, [pc, #16]	; (800745c <TL_Init+0x48>)
 800744a:	4a0d      	ldr	r2, [pc, #52]	; (8007480 <TL_Init+0x6c>)
 800744c:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 800744e:	4b03      	ldr	r3, [pc, #12]	; (800745c <TL_Init+0x48>)
 8007450:	4a0c      	ldr	r2, [pc, #48]	; (8007484 <TL_Init+0x70>)
 8007452:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 8007454:	f002 f820 	bl	8009498 <HW_IPCC_Init>

  return;
 8007458:	bf00      	nop
}
 800745a:	bd80      	pop	{r7, pc}
 800745c:	20030000 	.word	0x20030000
 8007460:	20030028 	.word	0x20030028
 8007464:	20030048 	.word	0x20030048
 8007468:	20030058 	.word	0x20030058
 800746c:	20030064 	.word	0x20030064
 8007470:	2003006c 	.word	0x2003006c
 8007474:	20030074 	.word	0x20030074
 8007478:	2003007c 	.word	0x2003007c
 800747c:	20030098 	.word	0x20030098
 8007480:	2003009c 	.word	0x2003009c
 8007484:	200300a8 	.word	0x200300a8

08007488 <TL_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
int32_t TL_BLE_Init( void* pConf )
{
 8007488:	b580      	push	{r7, lr}
 800748a:	b084      	sub	sp, #16
 800748c:	af00      	add	r7, sp, #0
 800748e:	6078      	str	r0, [r7, #4]
  MB_BleTable_t  * p_bletable;

  TL_BLE_InitConf_t *pInitHciConf = (TL_BLE_InitConf_t *) pConf;
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	60fb      	str	r3, [r7, #12]

  LST_init_head (&EvtQueue);
 8007494:	4811      	ldr	r0, [pc, #68]	; (80074dc <TL_BLE_Init+0x54>)
 8007496:	f000 fb05 	bl	8007aa4 <LST_init_head>

  p_bletable = TL_RefTable.p_ble_table;
 800749a:	4b11      	ldr	r3, [pc, #68]	; (80074e0 <TL_BLE_Init+0x58>)
 800749c:	685b      	ldr	r3, [r3, #4]
 800749e:	60bb      	str	r3, [r7, #8]

  p_bletable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	689a      	ldr	r2, [r3, #8]
 80074a4:	68bb      	ldr	r3, [r7, #8]
 80074a6:	601a      	str	r2, [r3, #0]
  p_bletable->phci_acl_data_buffer = pInitHciConf->p_AclDataBuffer;
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	68da      	ldr	r2, [r3, #12]
 80074ac:	68bb      	ldr	r3, [r7, #8]
 80074ae:	60da      	str	r2, [r3, #12]
  p_bletable->pcs_buffer  = (uint8_t*)CsBuffer;
 80074b0:	68bb      	ldr	r3, [r7, #8]
 80074b2:	4a0c      	ldr	r2, [pc, #48]	; (80074e4 <TL_BLE_Init+0x5c>)
 80074b4:	605a      	str	r2, [r3, #4]
  p_bletable->pevt_queue  = (uint8_t*)&EvtQueue;
 80074b6:	68bb      	ldr	r3, [r7, #8]
 80074b8:	4a08      	ldr	r2, [pc, #32]	; (80074dc <TL_BLE_Init+0x54>)
 80074ba:	609a      	str	r2, [r3, #8]

  HW_IPCC_BLE_Init();
 80074bc:	f002 f802 	bl	80094c4 <HW_IPCC_BLE_Init>

  BLE_IoBusEvtCallBackFunction = pInitHciConf->IoBusEvtCallBack;
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	4a08      	ldr	r2, [pc, #32]	; (80074e8 <TL_BLE_Init+0x60>)
 80074c6:	6013      	str	r3, [r2, #0]
  BLE_IoBusAclDataTxAck = pInitHciConf->IoBusAclDataTxAck;
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	685b      	ldr	r3, [r3, #4]
 80074cc:	4a07      	ldr	r2, [pc, #28]	; (80074ec <TL_BLE_Init+0x64>)
 80074ce:	6013      	str	r3, [r2, #0]

  return 0;
 80074d0:	2300      	movs	r3, #0
}
 80074d2:	4618      	mov	r0, r3
 80074d4:	3710      	adds	r7, #16
 80074d6:	46bd      	mov	sp, r7
 80074d8:	bd80      	pop	{r7, pc}
 80074da:	bf00      	nop
 80074dc:	200300c4 	.word	0x200300c4
 80074e0:	20030000 	.word	0x20030000
 80074e4:	20030a48 	.word	0x20030a48
 80074e8:	20000288 	.word	0x20000288
 80074ec:	2000028c 	.word	0x2000028c

080074f0 <TL_BLE_SendCmd>:

int32_t TL_BLE_SendCmd( uint8_t* buffer, uint16_t size )
{
 80074f0:	b580      	push	{r7, lr}
 80074f2:	b082      	sub	sp, #8
 80074f4:	af00      	add	r7, sp, #0
 80074f6:	6078      	str	r0, [r7, #4]
 80074f8:	460b      	mov	r3, r1
 80074fa:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t*)(TL_RefTable.p_ble_table->pcmd_buffer))->cmdserial.type = TL_BLECMD_PKT_TYPE;
 80074fc:	4b09      	ldr	r3, [pc, #36]	; (8007524 <TL_BLE_SendCmd+0x34>)
 80074fe:	685b      	ldr	r3, [r3, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	2201      	movs	r2, #1
 8007504:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_BLE_CMD, TL_RefTable.p_ble_table->pcmd_buffer);
 8007506:	4b07      	ldr	r3, [pc, #28]	; (8007524 <TL_BLE_SendCmd+0x34>)
 8007508:	685b      	ldr	r3, [r3, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	4619      	mov	r1, r3
 800750e:	2001      	movs	r0, #1
 8007510:	f000 f96c 	bl	80077ec <OutputDbgTrace>

  HW_IPCC_BLE_SendCmd();
 8007514:	f001 ffe0 	bl	80094d8 <HW_IPCC_BLE_SendCmd>

  return 0;
 8007518:	2300      	movs	r3, #0
}
 800751a:	4618      	mov	r0, r3
 800751c:	3708      	adds	r7, #8
 800751e:	46bd      	mov	sp, r7
 8007520:	bd80      	pop	{r7, pc}
 8007522:	bf00      	nop
 8007524:	20030000 	.word	0x20030000

08007528 <HW_IPCC_BLE_RxEvtNot>:

void HW_IPCC_BLE_RxEvtNot(void)
{
 8007528:	b580      	push	{r7, lr}
 800752a:	b082      	sub	sp, #8
 800752c:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 800752e:	e01c      	b.n	800756a <HW_IPCC_BLE_RxEvtNot+0x42>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 8007530:	1d3b      	adds	r3, r7, #4
 8007532:	4619      	mov	r1, r3
 8007534:	4812      	ldr	r0, [pc, #72]	; (8007580 <HW_IPCC_BLE_RxEvtNot+0x58>)
 8007536:	f000 fb54 	bl	8007be2 <LST_remove_head>

    if ( ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	7a5b      	ldrb	r3, [r3, #9]
 800753e:	2b0f      	cmp	r3, #15
 8007540:	d003      	beq.n	800754a <HW_IPCC_BLE_RxEvtNot+0x22>
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	7a5b      	ldrb	r3, [r3, #9]
 8007546:	2b0e      	cmp	r3, #14
 8007548:	d105      	bne.n	8007556 <HW_IPCC_BLE_RxEvtNot+0x2e>
    {
      OutputDbgTrace(TL_MB_BLE_CMD_RSP, (uint8_t*)phcievt);
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	4619      	mov	r1, r3
 800754e:	2002      	movs	r0, #2
 8007550:	f000 f94c 	bl	80077ec <OutputDbgTrace>
 8007554:	e004      	b.n	8007560 <HW_IPCC_BLE_RxEvtNot+0x38>
    }
    else
    {
      OutputDbgTrace(TL_MB_BLE_ASYNCH_EVT, (uint8_t*)phcievt);
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	4619      	mov	r1, r3
 800755a:	2003      	movs	r0, #3
 800755c:	f000 f946 	bl	80077ec <OutputDbgTrace>
    }

    BLE_IoBusEvtCallBackFunction(phcievt);
 8007560:	4b08      	ldr	r3, [pc, #32]	; (8007584 <HW_IPCC_BLE_RxEvtNot+0x5c>)
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	687a      	ldr	r2, [r7, #4]
 8007566:	4610      	mov	r0, r2
 8007568:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 800756a:	4805      	ldr	r0, [pc, #20]	; (8007580 <HW_IPCC_BLE_RxEvtNot+0x58>)
 800756c:	f000 faaa 	bl	8007ac4 <LST_is_empty>
 8007570:	4603      	mov	r3, r0
 8007572:	2b00      	cmp	r3, #0
 8007574:	d0dc      	beq.n	8007530 <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 8007576:	bf00      	nop
}
 8007578:	3708      	adds	r7, #8
 800757a:	46bd      	mov	sp, r7
 800757c:	bd80      	pop	{r7, pc}
 800757e:	bf00      	nop
 8007580:	200300c4 	.word	0x200300c4
 8007584:	20000288 	.word	0x20000288

08007588 <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 8007588:	b580      	push	{r7, lr}
 800758a:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 800758c:	4b02      	ldr	r3, [pc, #8]	; (8007598 <HW_IPCC_BLE_AclDataAckNot+0x10>)
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	4798      	blx	r3

  return;
 8007592:	bf00      	nop
}
 8007594:	bd80      	pop	{r7, pc}
 8007596:	bf00      	nop
 8007598:	2000028c 	.word	0x2000028c

0800759c <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 800759c:	b580      	push	{r7, lr}
 800759e:	b084      	sub	sp, #16
 80075a0:	af00      	add	r7, sp, #0
 80075a2:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 80075a8:	480d      	ldr	r0, [pc, #52]	; (80075e0 <TL_SYS_Init+0x44>)
 80075aa:	f000 fa7b 	bl	8007aa4 <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 80075ae:	4b0d      	ldr	r3, [pc, #52]	; (80075e4 <TL_SYS_Init+0x48>)
 80075b0:	68db      	ldr	r3, [r3, #12]
 80075b2:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	689a      	ldr	r2, [r3, #8]
 80075b8:	68bb      	ldr	r3, [r7, #8]
 80075ba:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 80075bc:	68bb      	ldr	r3, [r7, #8]
 80075be:	4a08      	ldr	r2, [pc, #32]	; (80075e0 <TL_SYS_Init+0x44>)
 80075c0:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 80075c2:	f001 ffab 	bl	800951c <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	4a07      	ldr	r2, [pc, #28]	; (80075e8 <TL_SYS_Init+0x4c>)
 80075cc:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	685b      	ldr	r3, [r3, #4]
 80075d2:	4a06      	ldr	r2, [pc, #24]	; (80075ec <TL_SYS_Init+0x50>)
 80075d4:	6013      	str	r3, [r2, #0]

  return 0;
 80075d6:	2300      	movs	r3, #0
}
 80075d8:	4618      	mov	r0, r3
 80075da:	3710      	adds	r7, #16
 80075dc:	46bd      	mov	sp, r7
 80075de:	bd80      	pop	{r7, pc}
 80075e0:	200300cc 	.word	0x200300cc
 80075e4:	20030000 	.word	0x20030000
 80075e8:	20000290 	.word	0x20000290
 80075ec:	20000294 	.word	0x20000294

080075f0 <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 80075f0:	b580      	push	{r7, lr}
 80075f2:	b082      	sub	sp, #8
 80075f4:	af00      	add	r7, sp, #0
 80075f6:	6078      	str	r0, [r7, #4]
 80075f8:	460b      	mov	r3, r1
 80075fa:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 80075fc:	4b09      	ldr	r3, [pc, #36]	; (8007624 <TL_SYS_SendCmd+0x34>)
 80075fe:	68db      	ldr	r3, [r3, #12]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	2210      	movs	r2, #16
 8007604:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_SYS_CMD, TL_RefTable.p_sys_table->pcmd_buffer);
 8007606:	4b07      	ldr	r3, [pc, #28]	; (8007624 <TL_SYS_SendCmd+0x34>)
 8007608:	68db      	ldr	r3, [r3, #12]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	4619      	mov	r1, r3
 800760e:	2004      	movs	r0, #4
 8007610:	f000 f8ec 	bl	80077ec <OutputDbgTrace>

  HW_IPCC_SYS_SendCmd();
 8007614:	f001 ff8c 	bl	8009530 <HW_IPCC_SYS_SendCmd>

  return 0;
 8007618:	2300      	movs	r3, #0
}
 800761a:	4618      	mov	r0, r3
 800761c:	3708      	adds	r7, #8
 800761e:	46bd      	mov	sp, r7
 8007620:	bd80      	pop	{r7, pc}
 8007622:	bf00      	nop
 8007624:	20030000 	.word	0x20030000

08007628 <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 8007628:	b580      	push	{r7, lr}
 800762a:	af00      	add	r7, sp, #0
  OutputDbgTrace(TL_MB_SYS_CMD_RSP, (uint8_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 800762c:	4b07      	ldr	r3, [pc, #28]	; (800764c <HW_IPCC_SYS_CmdEvtNot+0x24>)
 800762e:	68db      	ldr	r3, [r3, #12]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	4619      	mov	r1, r3
 8007634:	2005      	movs	r0, #5
 8007636:	f000 f8d9 	bl	80077ec <OutputDbgTrace>

  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 800763a:	4b05      	ldr	r3, [pc, #20]	; (8007650 <HW_IPCC_SYS_CmdEvtNot+0x28>)
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	4a03      	ldr	r2, [pc, #12]	; (800764c <HW_IPCC_SYS_CmdEvtNot+0x24>)
 8007640:	68d2      	ldr	r2, [r2, #12]
 8007642:	6812      	ldr	r2, [r2, #0]
 8007644:	4610      	mov	r0, r2
 8007646:	4798      	blx	r3

  return;
 8007648:	bf00      	nop
}
 800764a:	bd80      	pop	{r7, pc}
 800764c:	20030000 	.word	0x20030000
 8007650:	20000290 	.word	0x20000290

08007654 <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 8007654:	b580      	push	{r7, lr}
 8007656:	b082      	sub	sp, #8
 8007658:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800765a:	e00e      	b.n	800767a <HW_IPCC_SYS_EvtNot+0x26>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 800765c:	1d3b      	adds	r3, r7, #4
 800765e:	4619      	mov	r1, r3
 8007660:	480b      	ldr	r0, [pc, #44]	; (8007690 <HW_IPCC_SYS_EvtNot+0x3c>)
 8007662:	f000 fabe 	bl	8007be2 <LST_remove_head>

    OutputDbgTrace(TL_MB_SYS_ASYNCH_EVT, (uint8_t*)p_evt );
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	4619      	mov	r1, r3
 800766a:	2006      	movs	r0, #6
 800766c:	f000 f8be 	bl	80077ec <OutputDbgTrace>

    SYS_EVT_IoBusCallBackFunction( p_evt );
 8007670:	4b08      	ldr	r3, [pc, #32]	; (8007694 <HW_IPCC_SYS_EvtNot+0x40>)
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	687a      	ldr	r2, [r7, #4]
 8007676:	4610      	mov	r0, r2
 8007678:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800767a:	4805      	ldr	r0, [pc, #20]	; (8007690 <HW_IPCC_SYS_EvtNot+0x3c>)
 800767c:	f000 fa22 	bl	8007ac4 <LST_is_empty>
 8007680:	4603      	mov	r3, r0
 8007682:	2b00      	cmp	r3, #0
 8007684:	d0ea      	beq.n	800765c <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 8007686:	bf00      	nop
}
 8007688:	3708      	adds	r7, #8
 800768a:	46bd      	mov	sp, r7
 800768c:	bd80      	pop	{r7, pc}
 800768e:	bf00      	nop
 8007690:	200300cc 	.word	0x200300cc
 8007694:	20000294 	.word	0x20000294

08007698 <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 8007698:	b580      	push	{r7, lr}
 800769a:	b082      	sub	sp, #8
 800769c:	af00      	add	r7, sp, #0
 800769e:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 80076a0:	4817      	ldr	r0, [pc, #92]	; (8007700 <TL_MM_Init+0x68>)
 80076a2:	f000 f9ff 	bl	8007aa4 <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 80076a6:	4817      	ldr	r0, [pc, #92]	; (8007704 <TL_MM_Init+0x6c>)
 80076a8:	f000 f9fc 	bl	8007aa4 <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 80076ac:	4b16      	ldr	r3, [pc, #88]	; (8007708 <TL_MM_Init+0x70>)
 80076ae:	691b      	ldr	r3, [r3, #16]
 80076b0:	4a16      	ldr	r2, [pc, #88]	; (800770c <TL_MM_Init+0x74>)
 80076b2:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 80076b4:	4b15      	ldr	r3, [pc, #84]	; (800770c <TL_MM_Init+0x74>)
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	687a      	ldr	r2, [r7, #4]
 80076ba:	6892      	ldr	r2, [r2, #8]
 80076bc:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 80076be:	4b13      	ldr	r3, [pc, #76]	; (800770c <TL_MM_Init+0x74>)
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	687a      	ldr	r2, [r7, #4]
 80076c4:	68d2      	ldr	r2, [r2, #12]
 80076c6:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 80076c8:	4b10      	ldr	r3, [pc, #64]	; (800770c <TL_MM_Init+0x74>)
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	4a0c      	ldr	r2, [pc, #48]	; (8007700 <TL_MM_Init+0x68>)
 80076ce:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 80076d0:	4b0e      	ldr	r3, [pc, #56]	; (800770c <TL_MM_Init+0x74>)
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	687a      	ldr	r2, [r7, #4]
 80076d6:	6812      	ldr	r2, [r2, #0]
 80076d8:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 80076da:	4b0c      	ldr	r3, [pc, #48]	; (800770c <TL_MM_Init+0x74>)
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	687a      	ldr	r2, [r7, #4]
 80076e0:	6852      	ldr	r2, [r2, #4]
 80076e2:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 80076e4:	4b09      	ldr	r3, [pc, #36]	; (800770c <TL_MM_Init+0x74>)
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	687a      	ldr	r2, [r7, #4]
 80076ea:	6912      	ldr	r2, [r2, #16]
 80076ec:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 80076ee:	4b07      	ldr	r3, [pc, #28]	; (800770c <TL_MM_Init+0x74>)
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	687a      	ldr	r2, [r7, #4]
 80076f4:	6952      	ldr	r2, [r2, #20]
 80076f6:	619a      	str	r2, [r3, #24]

  return;
 80076f8:	bf00      	nop
}
 80076fa:	3708      	adds	r7, #8
 80076fc:	46bd      	mov	sp, r7
 80076fe:	bd80      	pop	{r7, pc}
 8007700:	200300b4 	.word	0x200300b4
 8007704:	20000280 	.word	0x20000280
 8007708:	20030000 	.word	0x20030000
 800770c:	20000298 	.word	0x20000298

08007710 <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 8007710:	b580      	push	{r7, lr}
 8007712:	b082      	sub	sp, #8
 8007714:	af00      	add	r7, sp, #0
 8007716:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 8007718:	6879      	ldr	r1, [r7, #4]
 800771a:	4807      	ldr	r0, [pc, #28]	; (8007738 <TL_MM_EvtDone+0x28>)
 800771c:	f000 fa1a 	bl	8007b54 <LST_insert_tail>

  OutputDbgTrace(TL_MB_MM_RELEASE_BUFFER, (uint8_t*)phcievt);
 8007720:	6879      	ldr	r1, [r7, #4]
 8007722:	2000      	movs	r0, #0
 8007724:	f000 f862 	bl	80077ec <OutputDbgTrace>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 8007728:	4804      	ldr	r0, [pc, #16]	; (800773c <TL_MM_EvtDone+0x2c>)
 800772a:	f001 ff27 	bl	800957c <HW_IPCC_MM_SendFreeBuf>

  return;
 800772e:	bf00      	nop
}
 8007730:	3708      	adds	r7, #8
 8007732:	46bd      	mov	sp, r7
 8007734:	bd80      	pop	{r7, pc}
 8007736:	bf00      	nop
 8007738:	20000280 	.word	0x20000280
 800773c:	08007741 	.word	0x08007741

08007740 <SendFreeBuf>:

static void SendFreeBuf( void )
{
 8007740:	b580      	push	{r7, lr}
 8007742:	b082      	sub	sp, #8
 8007744:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 8007746:	e00c      	b.n	8007762 <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 8007748:	1d3b      	adds	r3, r7, #4
 800774a:	4619      	mov	r1, r3
 800774c:	480a      	ldr	r0, [pc, #40]	; (8007778 <SendFreeBuf+0x38>)
 800774e:	f000 fa48 	bl	8007be2 <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 8007752:	4b0a      	ldr	r3, [pc, #40]	; (800777c <SendFreeBuf+0x3c>)
 8007754:	691b      	ldr	r3, [r3, #16]
 8007756:	691b      	ldr	r3, [r3, #16]
 8007758:	687a      	ldr	r2, [r7, #4]
 800775a:	4611      	mov	r1, r2
 800775c:	4618      	mov	r0, r3
 800775e:	f000 f9f9 	bl	8007b54 <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 8007762:	4805      	ldr	r0, [pc, #20]	; (8007778 <SendFreeBuf+0x38>)
 8007764:	f000 f9ae 	bl	8007ac4 <LST_is_empty>
 8007768:	4603      	mov	r3, r0
 800776a:	2b00      	cmp	r3, #0
 800776c:	d0ec      	beq.n	8007748 <SendFreeBuf+0x8>
  }

  return;
 800776e:	bf00      	nop
}
 8007770:	3708      	adds	r7, #8
 8007772:	46bd      	mov	sp, r7
 8007774:	bd80      	pop	{r7, pc}
 8007776:	bf00      	nop
 8007778:	20000280 	.word	0x20000280
 800777c:	20030000 	.word	0x20030000

08007780 <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 8007780:	b580      	push	{r7, lr}
 8007782:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 8007784:	4805      	ldr	r0, [pc, #20]	; (800779c <TL_TRACES_Init+0x1c>)
 8007786:	f000 f98d 	bl	8007aa4 <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 800778a:	4b05      	ldr	r3, [pc, #20]	; (80077a0 <TL_TRACES_Init+0x20>)
 800778c:	695b      	ldr	r3, [r3, #20]
 800778e:	4a03      	ldr	r2, [pc, #12]	; (800779c <TL_TRACES_Init+0x1c>)
 8007790:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 8007792:	f001 ff29 	bl	80095e8 <HW_IPCC_TRACES_Init>

  return;
 8007796:	bf00      	nop
}
 8007798:	bd80      	pop	{r7, pc}
 800779a:	bf00      	nop
 800779c:	200300bc 	.word	0x200300bc
 80077a0:	20030000 	.word	0x20030000

080077a4 <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 80077a4:	b580      	push	{r7, lr}
 80077a6:	b082      	sub	sp, #8
 80077a8:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 80077aa:	e008      	b.n	80077be <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 80077ac:	1d3b      	adds	r3, r7, #4
 80077ae:	4619      	mov	r1, r3
 80077b0:	4808      	ldr	r0, [pc, #32]	; (80077d4 <HW_IPCC_TRACES_EvtNot+0x30>)
 80077b2:	f000 fa16 	bl	8007be2 <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	4618      	mov	r0, r3
 80077ba:	f000 f80d 	bl	80077d8 <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 80077be:	4805      	ldr	r0, [pc, #20]	; (80077d4 <HW_IPCC_TRACES_EvtNot+0x30>)
 80077c0:	f000 f980 	bl	8007ac4 <LST_is_empty>
 80077c4:	4603      	mov	r3, r0
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d0f0      	beq.n	80077ac <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 80077ca:	bf00      	nop
}
 80077cc:	3708      	adds	r7, #8
 80077ce:	46bd      	mov	sp, r7
 80077d0:	bd80      	pop	{r7, pc}
 80077d2:	bf00      	nop
 80077d4:	200300bc 	.word	0x200300bc

080077d8 <TL_TRACES_EvtReceived>:

__WEAK void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt )
{
 80077d8:	b480      	push	{r7}
 80077da:	b083      	sub	sp, #12
 80077dc:	af00      	add	r7, sp, #0
 80077de:	6078      	str	r0, [r7, #4]
  (void)(hcievt);
}
 80077e0:	bf00      	nop
 80077e2:	370c      	adds	r7, #12
 80077e4:	46bd      	mov	sp, r7
 80077e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ea:	4770      	bx	lr

080077ec <OutputDbgTrace>:

/******************************************************************************
 * DEBUG INFORMATION
 ******************************************************************************/
static void OutputDbgTrace(TL_MB_PacketType_t packet_type, uint8_t* buffer)
{
 80077ec:	b480      	push	{r7}
 80077ee:	b085      	sub	sp, #20
 80077f0:	af00      	add	r7, sp, #0
 80077f2:	4603      	mov	r3, r0
 80077f4:	6039      	str	r1, [r7, #0]
 80077f6:	71fb      	strb	r3, [r7, #7]
  TL_EvtPacket_t *p_evt_packet;
  TL_CmdPacket_t *p_cmd_packet;

  switch(packet_type)
 80077f8:	79fb      	ldrb	r3, [r7, #7]
 80077fa:	2b06      	cmp	r3, #6
 80077fc:	d845      	bhi.n	800788a <OutputDbgTrace+0x9e>
 80077fe:	a201      	add	r2, pc, #4	; (adr r2, 8007804 <OutputDbgTrace+0x18>)
 8007800:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007804:	08007821 	.word	0x08007821
 8007808:	08007845 	.word	0x08007845
 800780c:	0800784b 	.word	0x0800784b
 8007810:	0800785f 	.word	0x0800785f
 8007814:	0800786b 	.word	0x0800786b
 8007818:	08007871 	.word	0x08007871
 800781c:	0800787f 	.word	0x0800787f
  {
    case TL_MB_MM_RELEASE_BUFFER:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8007820:	683b      	ldr	r3, [r7, #0]
 8007822:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	7a5b      	ldrb	r3, [r3, #9]
 8007828:	2bff      	cmp	r3, #255	; 0xff
 800782a:	d005      	beq.n	8007838 <OutputDbgTrace+0x4c>
 800782c:	2bff      	cmp	r3, #255	; 0xff
 800782e:	dc05      	bgt.n	800783c <OutputDbgTrace+0x50>
 8007830:	2b0e      	cmp	r3, #14
 8007832:	d005      	beq.n	8007840 <OutputDbgTrace+0x54>
 8007834:	2b0f      	cmp	r3, #15
          break;

        default:
          TL_MM_DBG_MSG("mm evt released: 0x%02X", p_evt_packet->evtserial.evt.evtcode);
          TL_MM_DBG_MSG(" buffer addr: 0x%08X", p_evt_packet);
          break;
 8007836:	e001      	b.n	800783c <OutputDbgTrace+0x50>
          break;
 8007838:	bf00      	nop
 800783a:	e027      	b.n	800788c <OutputDbgTrace+0xa0>
          break;
 800783c:	bf00      	nop
 800783e:	e025      	b.n	800788c <OutputDbgTrace+0xa0>
          break;
 8007840:	bf00      	nop
      }

      TL_MM_DBG_MSG("\r\n");
      break;
 8007842:	e023      	b.n	800788c <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 8007844:	683b      	ldr	r3, [r7, #0]
 8007846:	60bb      	str	r3, [r7, #8]
        TL_HCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 8007848:	e020      	b.n	800788c <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800784a:	683b      	ldr	r3, [r7, #0]
 800784c:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	7a5b      	ldrb	r3, [r3, #9]
 8007852:	2b0e      	cmp	r3, #14
 8007854:	d001      	beq.n	800785a <OutputDbgTrace+0x6e>
 8007856:	2b0f      	cmp	r3, #15
          }
          break;

        default:
          TL_HCI_CMD_DBG_MSG("unknown ble rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 8007858:	e000      	b.n	800785c <OutputDbgTrace+0x70>
          break;
 800785a:	bf00      	nop
      }

      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800785c:	e016      	b.n	800788c <OutputDbgTrace+0xa0>

    case TL_MB_BLE_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800785e:	683b      	ldr	r3, [r7, #0]
 8007860:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	7a5b      	ldrb	r3, [r3, #9]
 8007866:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_HCI_EVT_DBG_MSG("\r\n");

      TL_HCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8007868:	e010      	b.n	800788c <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 800786a:	683b      	ldr	r3, [r7, #0]
 800786c:	60bb      	str	r3, [r7, #8]
        TL_SHCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 800786e:	e00d      	b.n	800788c <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8007870:	683b      	ldr	r3, [r7, #0]
 8007872:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	7a5b      	ldrb	r3, [r3, #9]
 8007878:	2b0e      	cmp	r3, #14
          }
          break;

        default:
          TL_SHCI_CMD_DBG_MSG("unknown sys rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 800787a:	bf00      	nop
      }

      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800787c:	e006      	b.n	800788c <OutputDbgTrace+0xa0>

    case  TL_MB_SYS_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800787e:	683b      	ldr	r3, [r7, #0]
 8007880:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	7a5b      	ldrb	r3, [r3, #9]
 8007886:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_SHCI_EVT_DBG_MSG("\r\n");

      TL_SHCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8007888:	e000      	b.n	800788c <OutputDbgTrace+0xa0>

    default:
      break;
 800788a:	bf00      	nop
  }

  return;
 800788c:	bf00      	nop
}
 800788e:	3714      	adds	r7, #20
 8007890:	46bd      	mov	sp, r7
 8007892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007896:	4770      	bx	lr

08007898 <DbgTraceGetFileName>:
 * @param  *fullPath Fullpath string (path + filename)
 * @retval char* Pointer on filename string
 */

const char *DbgTraceGetFileName(const char *fullpath)
{
 8007898:	b580      	push	{r7, lr}
 800789a:	b084      	sub	sp, #16
 800789c:	af00      	add	r7, sp, #0
 800789e:	6078      	str	r0, [r7, #4]
  const char *ret = fullpath;
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	60fb      	str	r3, [r7, #12]

  if (strrchr(fullpath, '\\') != NULL)
 80078a4:	215c      	movs	r1, #92	; 0x5c
 80078a6:	6878      	ldr	r0, [r7, #4]
 80078a8:	f002 fa21 	bl	8009cee <strrchr>
 80078ac:	4603      	mov	r3, r0
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d007      	beq.n	80078c2 <DbgTraceGetFileName+0x2a>
  {
    ret = strrchr(fullpath, '\\') + 1;
 80078b2:	215c      	movs	r1, #92	; 0x5c
 80078b4:	6878      	ldr	r0, [r7, #4]
 80078b6:	f002 fa1a 	bl	8009cee <strrchr>
 80078ba:	4603      	mov	r3, r0
 80078bc:	3301      	adds	r3, #1
 80078be:	60fb      	str	r3, [r7, #12]
 80078c0:	e00d      	b.n	80078de <DbgTraceGetFileName+0x46>
  }
  else if (strrchr(fullpath, '/') != NULL)
 80078c2:	212f      	movs	r1, #47	; 0x2f
 80078c4:	6878      	ldr	r0, [r7, #4]
 80078c6:	f002 fa12 	bl	8009cee <strrchr>
 80078ca:	4603      	mov	r3, r0
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d006      	beq.n	80078de <DbgTraceGetFileName+0x46>
  {
    ret = strrchr(fullpath, '/') + 1;
 80078d0:	212f      	movs	r1, #47	; 0x2f
 80078d2:	6878      	ldr	r0, [r7, #4]
 80078d4:	f002 fa0b 	bl	8009cee <strrchr>
 80078d8:	4603      	mov	r3, r0
 80078da:	3301      	adds	r3, #1
 80078dc:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80078de:	68fb      	ldr	r3, [r7, #12]
}
 80078e0:	4618      	mov	r0, r3
 80078e2:	3710      	adds	r7, #16
 80078e4:	46bd      	mov	sp, r7
 80078e6:	bd80      	pop	{r7, pc}

080078e8 <DbgTrace_TxCpltCallback>:
 * @note   Indicate the end of the transmission of a DBG_TRACE trace buffer to DBG_TRACE USART. If queue
 *         contains new trace data to transmit, start a new transmission.
 * @retval None
 */
static void DbgTrace_TxCpltCallback(void)
{
 80078e8:	b580      	push	{r7, lr}
 80078ea:	b086      	sub	sp, #24
 80078ec:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80078ee:	f3ef 8310 	mrs	r3, PRIMASK
 80078f2:	60fb      	str	r3, [r7, #12]
  return(result);
 80078f4:	68fb      	ldr	r3, [r7, #12]
#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
  uint8_t* buf;
  uint16_t bufSize;

  BACKUP_PRIMASK();
 80078f6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80078f8:	b672      	cpsid	i
}
 80078fa:	bf00      	nop

  DISABLE_IRQ();			/**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  /* Remove element just sent to UART */
  CircularQueue_Remove(&MsgDbgTraceQueue,&bufSize);
 80078fc:	1cbb      	adds	r3, r7, #2
 80078fe:	4619      	mov	r1, r3
 8007900:	4812      	ldr	r0, [pc, #72]	; (800794c <DbgTrace_TxCpltCallback+0x64>)
 8007902:	f000 fbe6 	bl	80080d2 <CircularQueue_Remove>

  /* Sense if new data to be sent */
  buf=CircularQueue_Sense(&MsgDbgTraceQueue,&bufSize);
 8007906:	1cbb      	adds	r3, r7, #2
 8007908:	4619      	mov	r1, r3
 800790a:	4810      	ldr	r0, [pc, #64]	; (800794c <DbgTrace_TxCpltCallback+0x64>)
 800790c:	f000 fcd2 	bl	80082b4 <CircularQueue_Sense>
 8007910:	6138      	str	r0, [r7, #16]


  if ( buf != NULL) 
 8007912:	693b      	ldr	r3, [r7, #16]
 8007914:	2b00      	cmp	r3, #0
 8007916:	d00c      	beq.n	8007932 <DbgTrace_TxCpltCallback+0x4a>
 8007918:	697b      	ldr	r3, [r7, #20]
 800791a:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800791c:	68bb      	ldr	r3, [r7, #8]
 800791e:	f383 8810 	msr	PRIMASK, r3
}
 8007922:	bf00      	nop
  {
    RESTORE_PRIMASK();
    DbgOutputTraces((uint8_t*)buf, bufSize, DbgTrace_TxCpltCallback);
 8007924:	887b      	ldrh	r3, [r7, #2]
 8007926:	4a0a      	ldr	r2, [pc, #40]	; (8007950 <DbgTrace_TxCpltCallback+0x68>)
 8007928:	4619      	mov	r1, r3
 800792a:	6938      	ldr	r0, [r7, #16]
 800792c:	f7f8 ff25 	bl	800077a <DbgOutputTraces>

  DbgTracePeripheralReady = SET;

  RESTORE_PRIMASK();
#endif
}
 8007930:	e008      	b.n	8007944 <DbgTrace_TxCpltCallback+0x5c>
    DbgTracePeripheralReady = SET;
 8007932:	4b08      	ldr	r3, [pc, #32]	; (8007954 <DbgTrace_TxCpltCallback+0x6c>)
 8007934:	2201      	movs	r2, #1
 8007936:	701a      	strb	r2, [r3, #0]
 8007938:	697b      	ldr	r3, [r7, #20]
 800793a:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	f383 8810 	msr	PRIMASK, r3
}
 8007942:	bf00      	nop
}
 8007944:	bf00      	nop
 8007946:	3718      	adds	r7, #24
 8007948:	46bd      	mov	sp, r7
 800794a:	bd80      	pop	{r7, pc}
 800794c:	2000029c 	.word	0x2000029c
 8007950:	080078e9 	.word	0x080078e9
 8007954:	2000000d 	.word	0x2000000d

08007958 <DbgTraceInit>:
#endif

void DbgTraceInit( void )
{
 8007958:	b580      	push	{r7, lr}
 800795a:	b082      	sub	sp, #8
 800795c:	af02      	add	r7, sp, #8
#if (( CFG_DEBUG_TRACE_FULL != 0 ) || ( CFG_DEBUG_TRACE_LIGHT != 0 ))
  DbgOutputInit();
 800795e:	f7f8 ff06 	bl	800076e <DbgOutputInit>
#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
  CircularQueue_Init(&MsgDbgTraceQueue, MsgDbgTraceQueueBuff, DBG_TRACE_MSG_QUEUE_SIZE, 0, CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG);
 8007962:	2302      	movs	r3, #2
 8007964:	9300      	str	r3, [sp, #0]
 8007966:	2300      	movs	r3, #0
 8007968:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800796c:	4903      	ldr	r1, [pc, #12]	; (800797c <DbgTraceInit+0x24>)
 800796e:	4804      	ldr	r0, [pc, #16]	; (8007980 <DbgTraceInit+0x28>)
 8007970:	f000 f956 	bl	8007c20 <CircularQueue_Init>
#endif 
#endif
  return;
 8007974:	bf00      	nop
}
 8007976:	46bd      	mov	sp, r7
 8007978:	bd80      	pop	{r7, pc}
 800797a:	bf00      	nop
 800797c:	200002bc 	.word	0x200002bc
 8007980:	2000029c 	.word	0x2000029c

08007984 <_write>:
 * @param	bufsize buffer size
 * @param	...: arguments to be formatted in format string
 * @retval none
 */
size_t _write(int handle, const unsigned char * buf, size_t bufSize)
{
 8007984:	b580      	push	{r7, lr}
 8007986:	b084      	sub	sp, #16
 8007988:	af00      	add	r7, sp, #0
 800798a:	60f8      	str	r0, [r7, #12]
 800798c:	60b9      	str	r1, [r7, #8]
 800798e:	607a      	str	r2, [r7, #4]
  return ( DbgTraceWrite(handle, buf, bufSize) );
 8007990:	687a      	ldr	r2, [r7, #4]
 8007992:	68b9      	ldr	r1, [r7, #8]
 8007994:	68f8      	ldr	r0, [r7, #12]
 8007996:	f000 f805 	bl	80079a4 <DbgTraceWrite>
 800799a:	4603      	mov	r3, r0
}
 800799c:	4618      	mov	r0, r3
 800799e:	3710      	adds	r7, #16
 80079a0:	46bd      	mov	sp, r7
 80079a2:	bd80      	pop	{r7, pc}

080079a4 <DbgTraceWrite>:
 * @param buf buffer to write
 * @param bufsize buffer size
 * @retval Number of elements written
 */
size_t DbgTraceWrite(int handle, const unsigned char * buf, size_t bufSize)
{
 80079a4:	b580      	push	{r7, lr}
 80079a6:	b08a      	sub	sp, #40	; 0x28
 80079a8:	af00      	add	r7, sp, #0
 80079aa:	60f8      	str	r0, [r7, #12]
 80079ac:	60b9      	str	r1, [r7, #8]
 80079ae:	607a      	str	r2, [r7, #4]
  size_t chars_written = 0;
 80079b0:	2300      	movs	r3, #0
 80079b2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80079b4:	f3ef 8310 	mrs	r3, PRIMASK
 80079b8:	61bb      	str	r3, [r7, #24]
  return(result);
 80079ba:	69bb      	ldr	r3, [r7, #24]
  uint8_t* buffer;

  BACKUP_PRIMASK();
 80079bc:	623b      	str	r3, [r7, #32]

  /* Ignore flushes */
  if ( handle == -1 )
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079c4:	d102      	bne.n	80079cc <DbgTraceWrite+0x28>
  {
    chars_written = ( size_t ) 0;
 80079c6:	2300      	movs	r3, #0
 80079c8:	627b      	str	r3, [r7, #36]	; 0x24
 80079ca:	e037      	b.n	8007a3c <DbgTraceWrite+0x98>
  }
  /* Only allow stdout/stderr output */
  else if ( ( handle != 1 ) && ( handle != 2 ) )
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	2b01      	cmp	r3, #1
 80079d0:	d006      	beq.n	80079e0 <DbgTraceWrite+0x3c>
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	2b02      	cmp	r3, #2
 80079d6:	d003      	beq.n	80079e0 <DbgTraceWrite+0x3c>
  {
    chars_written = ( size_t ) - 1;
 80079d8:	f04f 33ff 	mov.w	r3, #4294967295
 80079dc:	627b      	str	r3, [r7, #36]	; 0x24
 80079de:	e02d      	b.n	8007a3c <DbgTraceWrite+0x98>
  }
  /* Parameters OK, call the low-level character output routine */
  else if (bufSize != 0)
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d02a      	beq.n	8007a3c <DbgTraceWrite+0x98>
  {
    chars_written = bufSize;
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 80079ea:	b672      	cpsid	i
}
 80079ec:	bf00      	nop
    /* If queue emepty and TX free, send directly */
    /* CS Start */

#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
    DISABLE_IRQ();      /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
    buffer=CircularQueue_Add(&MsgDbgTraceQueue,(uint8_t*)buf, bufSize,1);
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	b29a      	uxth	r2, r3
 80079f2:	2301      	movs	r3, #1
 80079f4:	68b9      	ldr	r1, [r7, #8]
 80079f6:	4814      	ldr	r0, [pc, #80]	; (8007a48 <DbgTraceWrite+0xa4>)
 80079f8:	f000 f944 	bl	8007c84 <CircularQueue_Add>
 80079fc:	61f8      	str	r0, [r7, #28]
    if (buffer && DbgTracePeripheralReady)
 80079fe:	69fb      	ldr	r3, [r7, #28]
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d015      	beq.n	8007a30 <DbgTraceWrite+0x8c>
 8007a04:	4b11      	ldr	r3, [pc, #68]	; (8007a4c <DbgTraceWrite+0xa8>)
 8007a06:	781b      	ldrb	r3, [r3, #0]
 8007a08:	b2db      	uxtb	r3, r3
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d010      	beq.n	8007a30 <DbgTraceWrite+0x8c>
    {
      DbgTracePeripheralReady = RESET;
 8007a0e:	4b0f      	ldr	r3, [pc, #60]	; (8007a4c <DbgTraceWrite+0xa8>)
 8007a10:	2200      	movs	r2, #0
 8007a12:	701a      	strb	r2, [r3, #0]
 8007a14:	6a3b      	ldr	r3, [r7, #32]
 8007a16:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007a18:	697b      	ldr	r3, [r7, #20]
 8007a1a:	f383 8810 	msr	PRIMASK, r3
}
 8007a1e:	bf00      	nop
      RESTORE_PRIMASK();
      DbgOutputTraces((uint8_t*)buffer, bufSize, DbgTrace_TxCpltCallback);
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	b29b      	uxth	r3, r3
 8007a24:	4a0a      	ldr	r2, [pc, #40]	; (8007a50 <DbgTraceWrite+0xac>)
 8007a26:	4619      	mov	r1, r3
 8007a28:	69f8      	ldr	r0, [r7, #28]
 8007a2a:	f7f8 fea6 	bl	800077a <DbgOutputTraces>
 8007a2e:	e005      	b.n	8007a3c <DbgTraceWrite+0x98>
 8007a30:	6a3b      	ldr	r3, [r7, #32]
 8007a32:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007a34:	693b      	ldr	r3, [r7, #16]
 8007a36:	f383 8810 	msr	PRIMASK, r3
}
 8007a3a:	bf00      	nop
    DbgOutputTraces((uint8_t*)buf, bufSize, DbgTrace_TxCpltCallback);
    while (!DbgTracePeripheralReady);
#endif
    /* CS END */
  }
  return ( chars_written );
 8007a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007a3e:	4618      	mov	r0, r3
 8007a40:	3728      	adds	r7, #40	; 0x28
 8007a42:	46bd      	mov	sp, r7
 8007a44:	bd80      	pop	{r7, pc}
 8007a46:	bf00      	nop
 8007a48:	2000029c 	.word	0x2000029c
 8007a4c:	2000000d 	.word	0x2000000d
 8007a50:	080078e9 	.word	0x080078e9

08007a54 <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 8007a54:	b480      	push	{r7}
 8007a56:	b085      	sub	sp, #20
 8007a58:	af00      	add	r7, sp, #0
 8007a5a:	4603      	mov	r3, r0
 8007a5c:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 8007a5e:	4b0f      	ldr	r3, [pc, #60]	; (8007a9c <OTP_Read+0x48>)
 8007a60:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 8007a62:	e002      	b.n	8007a6a <OTP_Read+0x16>
  {
    p_id -= 8 ;
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	3b08      	subs	r3, #8
 8007a68:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	3307      	adds	r3, #7
 8007a6e:	781b      	ldrb	r3, [r3, #0]
 8007a70:	79fa      	ldrb	r2, [r7, #7]
 8007a72:	429a      	cmp	r2, r3
 8007a74:	d003      	beq.n	8007a7e <OTP_Read+0x2a>
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	4a09      	ldr	r2, [pc, #36]	; (8007aa0 <OTP_Read+0x4c>)
 8007a7a:	4293      	cmp	r3, r2
 8007a7c:	d1f2      	bne.n	8007a64 <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	3307      	adds	r3, #7
 8007a82:	781b      	ldrb	r3, [r3, #0]
 8007a84:	79fa      	ldrb	r2, [r7, #7]
 8007a86:	429a      	cmp	r2, r3
 8007a88:	d001      	beq.n	8007a8e <OTP_Read+0x3a>
  {
    p_id = 0 ;
 8007a8a:	2300      	movs	r3, #0
 8007a8c:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 8007a8e:	68fb      	ldr	r3, [r7, #12]
}
 8007a90:	4618      	mov	r0, r3
 8007a92:	3714      	adds	r7, #20
 8007a94:	46bd      	mov	sp, r7
 8007a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a9a:	4770      	bx	lr
 8007a9c:	1fff73f8 	.word	0x1fff73f8
 8007aa0:	1fff7000 	.word	0x1fff7000

08007aa4 <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 8007aa4:	b480      	push	{r7}
 8007aa6:	b083      	sub	sp, #12
 8007aa8:	af00      	add	r7, sp, #0
 8007aaa:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	687a      	ldr	r2, [r7, #4]
 8007ab0:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	687a      	ldr	r2, [r7, #4]
 8007ab6:	605a      	str	r2, [r3, #4]
}
 8007ab8:	bf00      	nop
 8007aba:	370c      	adds	r7, #12
 8007abc:	46bd      	mov	sp, r7
 8007abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac2:	4770      	bx	lr

08007ac4 <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 8007ac4:	b480      	push	{r7}
 8007ac6:	b087      	sub	sp, #28
 8007ac8:	af00      	add	r7, sp, #0
 8007aca:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007acc:	f3ef 8310 	mrs	r3, PRIMASK
 8007ad0:	60fb      	str	r3, [r7, #12]
  return(result);
 8007ad2:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8007ad4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8007ad6:	b672      	cpsid	i
}
 8007ad8:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	687a      	ldr	r2, [r7, #4]
 8007ae0:	429a      	cmp	r2, r3
 8007ae2:	d102      	bne.n	8007aea <LST_is_empty+0x26>
  {
    return_value = TRUE;
 8007ae4:	2301      	movs	r3, #1
 8007ae6:	75fb      	strb	r3, [r7, #23]
 8007ae8:	e001      	b.n	8007aee <LST_is_empty+0x2a>
  }
  else
  {
    return_value = FALSE;
 8007aea:	2300      	movs	r3, #0
 8007aec:	75fb      	strb	r3, [r7, #23]
 8007aee:	693b      	ldr	r3, [r7, #16]
 8007af0:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007af2:	68bb      	ldr	r3, [r7, #8]
 8007af4:	f383 8810 	msr	PRIMASK, r3
}
 8007af8:	bf00      	nop
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 8007afa:	7dfb      	ldrb	r3, [r7, #23]
}
 8007afc:	4618      	mov	r0, r3
 8007afe:	371c      	adds	r7, #28
 8007b00:	46bd      	mov	sp, r7
 8007b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b06:	4770      	bx	lr

08007b08 <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 8007b08:	b480      	push	{r7}
 8007b0a:	b087      	sub	sp, #28
 8007b0c:	af00      	add	r7, sp, #0
 8007b0e:	6078      	str	r0, [r7, #4]
 8007b10:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007b12:	f3ef 8310 	mrs	r3, PRIMASK
 8007b16:	60fb      	str	r3, [r7, #12]
  return(result);
 8007b18:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8007b1a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8007b1c:	b672      	cpsid	i
}
 8007b1e:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681a      	ldr	r2, [r3, #0]
 8007b24:	683b      	ldr	r3, [r7, #0]
 8007b26:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 8007b28:	683b      	ldr	r3, [r7, #0]
 8007b2a:	687a      	ldr	r2, [r7, #4]
 8007b2c:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	683a      	ldr	r2, [r7, #0]
 8007b32:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 8007b34:	683b      	ldr	r3, [r7, #0]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	683a      	ldr	r2, [r7, #0]
 8007b3a:	605a      	str	r2, [r3, #4]
 8007b3c:	697b      	ldr	r3, [r7, #20]
 8007b3e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007b40:	693b      	ldr	r3, [r7, #16]
 8007b42:	f383 8810 	msr	PRIMASK, r3
}
 8007b46:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8007b48:	bf00      	nop
 8007b4a:	371c      	adds	r7, #28
 8007b4c:	46bd      	mov	sp, r7
 8007b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b52:	4770      	bx	lr

08007b54 <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 8007b54:	b480      	push	{r7}
 8007b56:	b087      	sub	sp, #28
 8007b58:	af00      	add	r7, sp, #0
 8007b5a:	6078      	str	r0, [r7, #4]
 8007b5c:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007b5e:	f3ef 8310 	mrs	r3, PRIMASK
 8007b62:	60fb      	str	r3, [r7, #12]
  return(result);
 8007b64:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8007b66:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8007b68:	b672      	cpsid	i
}
 8007b6a:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 8007b6c:	683b      	ldr	r3, [r7, #0]
 8007b6e:	687a      	ldr	r2, [r7, #4]
 8007b70:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	685a      	ldr	r2, [r3, #4]
 8007b76:	683b      	ldr	r3, [r7, #0]
 8007b78:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	683a      	ldr	r2, [r7, #0]
 8007b7e:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 8007b80:	683b      	ldr	r3, [r7, #0]
 8007b82:	685b      	ldr	r3, [r3, #4]
 8007b84:	683a      	ldr	r2, [r7, #0]
 8007b86:	601a      	str	r2, [r3, #0]
 8007b88:	697b      	ldr	r3, [r7, #20]
 8007b8a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007b8c:	693b      	ldr	r3, [r7, #16]
 8007b8e:	f383 8810 	msr	PRIMASK, r3
}
 8007b92:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8007b94:	bf00      	nop
 8007b96:	371c      	adds	r7, #28
 8007b98:	46bd      	mov	sp, r7
 8007b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b9e:	4770      	bx	lr

08007ba0 <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 8007ba0:	b480      	push	{r7}
 8007ba2:	b087      	sub	sp, #28
 8007ba4:	af00      	add	r7, sp, #0
 8007ba6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007ba8:	f3ef 8310 	mrs	r3, PRIMASK
 8007bac:	60fb      	str	r3, [r7, #12]
  return(result);
 8007bae:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8007bb0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8007bb2:	b672      	cpsid	i
}
 8007bb4:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	685b      	ldr	r3, [r3, #4]
 8007bba:	687a      	ldr	r2, [r7, #4]
 8007bbc:	6812      	ldr	r2, [r2, #0]
 8007bbe:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	687a      	ldr	r2, [r7, #4]
 8007bc6:	6852      	ldr	r2, [r2, #4]
 8007bc8:	605a      	str	r2, [r3, #4]
 8007bca:	697b      	ldr	r3, [r7, #20]
 8007bcc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007bce:	693b      	ldr	r3, [r7, #16]
 8007bd0:	f383 8810 	msr	PRIMASK, r3
}
 8007bd4:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8007bd6:	bf00      	nop
 8007bd8:	371c      	adds	r7, #28
 8007bda:	46bd      	mov	sp, r7
 8007bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be0:	4770      	bx	lr

08007be2 <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 8007be2:	b580      	push	{r7, lr}
 8007be4:	b086      	sub	sp, #24
 8007be6:	af00      	add	r7, sp, #0
 8007be8:	6078      	str	r0, [r7, #4]
 8007bea:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007bec:	f3ef 8310 	mrs	r3, PRIMASK
 8007bf0:	60fb      	str	r3, [r7, #12]
  return(result);
 8007bf2:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8007bf4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8007bf6:	b672      	cpsid	i
}
 8007bf8:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	681a      	ldr	r2, [r3, #0]
 8007bfe:	683b      	ldr	r3, [r7, #0]
 8007c00:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	4618      	mov	r0, r3
 8007c08:	f7ff ffca 	bl	8007ba0 <LST_remove_node>
 8007c0c:	697b      	ldr	r3, [r7, #20]
 8007c0e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007c10:	693b      	ldr	r3, [r7, #16]
 8007c12:	f383 8810 	msr	PRIMASK, r3
}
 8007c16:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8007c18:	bf00      	nop
 8007c1a:	3718      	adds	r7, #24
 8007c1c:	46bd      	mov	sp, r7
 8007c1e:	bd80      	pop	{r7, pc}

08007c20 <CircularQueue_Init>:
  * @param  queueSize:  Size of Queue Buffer
  * @param  elementSize: Size of an element in the queue. if =0, the queue will manage variable sizze elements
  * @retval   always 0
  */
int CircularQueue_Init(queue_t *q, uint8_t* queueBuffer, uint32_t queueSize, uint16_t elementSize, uint8_t optionFlags)
{
 8007c20:	b480      	push	{r7}
 8007c22:	b085      	sub	sp, #20
 8007c24:	af00      	add	r7, sp, #0
 8007c26:	60f8      	str	r0, [r7, #12]
 8007c28:	60b9      	str	r1, [r7, #8]
 8007c2a:	607a      	str	r2, [r7, #4]
 8007c2c:	807b      	strh	r3, [r7, #2]
  q->qBuff = queueBuffer;
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	68ba      	ldr	r2, [r7, #8]
 8007c32:	601a      	str	r2, [r3, #0]
  q->first = 0;
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	2200      	movs	r2, #0
 8007c38:	60da      	str	r2, [r3, #12]
  q->last = 0; /* queueSize-1; */
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	2200      	movs	r2, #0
 8007c3e:	611a      	str	r2, [r3, #16]
  q->byteCount = 0;
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	2200      	movs	r2, #0
 8007c44:	615a      	str	r2, [r3, #20]
  q->elementCount = 0;
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	2200      	movs	r2, #0
 8007c4a:	619a      	str	r2, [r3, #24]
  q->queueMaxSize = queueSize;
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	687a      	ldr	r2, [r7, #4]
 8007c50:	605a      	str	r2, [r3, #4]
  q->elementSize = elementSize;
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	887a      	ldrh	r2, [r7, #2]
 8007c56:	811a      	strh	r2, [r3, #8]
  q->optionFlags = optionFlags;
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	7e3a      	ldrb	r2, [r7, #24]
 8007c5c:	771a      	strb	r2, [r3, #28]

   if ((optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG) && q-> elementSize)
 8007c5e:	7e3b      	ldrb	r3, [r7, #24]
 8007c60:	f003 0302 	and.w	r3, r3, #2
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d006      	beq.n	8007c76 <CircularQueue_Init+0x56>
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	891b      	ldrh	r3, [r3, #8]
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d002      	beq.n	8007c76 <CircularQueue_Init+0x56>
   {
    /* can not deal with splitting at the end of buffer with fixed size element */
    return -1;
 8007c70:	f04f 33ff 	mov.w	r3, #4294967295
 8007c74:	e000      	b.n	8007c78 <CircularQueue_Init+0x58>
  }
  return 0;
 8007c76:	2300      	movs	r3, #0
}
 8007c78:	4618      	mov	r0, r3
 8007c7a:	3714      	adds	r7, #20
 8007c7c:	46bd      	mov	sp, r7
 8007c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c82:	4770      	bx	lr

08007c84 <CircularQueue_Add>:
  * @param  elementSize:  Size of element to be added to the queue. Only used if the queue manage variable size elements
  * @param  nbElements:  number of elements in the in buffer pointed by x
  * @retval  pointer on last element just added to the queue, NULL if the element to be added do not fit in the queue (too big)
  */
uint8_t* CircularQueue_Add(queue_t *q, uint8_t* x, uint16_t elementSize, uint32_t nbElements)
{
 8007c84:	b580      	push	{r7, lr}
 8007c86:	b08e      	sub	sp, #56	; 0x38
 8007c88:	af00      	add	r7, sp, #0
 8007c8a:	60f8      	str	r0, [r7, #12]
 8007c8c:	60b9      	str	r1, [r7, #8]
 8007c8e:	603b      	str	r3, [r7, #0]
 8007c90:	4613      	mov	r3, r2
 8007c92:	80fb      	strh	r3, [r7, #6]

  uint8_t* ptr = NULL;                      /* fct return ptr to the element freshly added, if no room fct return NULL */
 8007c94:	2300      	movs	r3, #0
 8007c96:	623b      	str	r3, [r7, #32]
  uint16_t curElementSize = 0;              /* the size of the element currently  stored at q->last position */
 8007c98:	2300      	movs	r3, #0
 8007c9a:	86fb      	strh	r3, [r7, #54]	; 0x36
  uint8_t  elemSizeStorageRoom  = 0 ;       /* Indicate the header (which contain only size) of element in case of varaibale size elemenet (q->elementsize == 0) */
 8007c9c:	2300      	movs	r3, #0
 8007c9e:	77fb      	strb	r3, [r7, #31]
  uint32_t curBuffPosition;                  /* the current position in the queue buffer */
  uint32_t i;                               /* loop counter */
  uint32_t NbBytesToCopy = 0, NbCopiedBytes = 0 ; /* Indicators for copying bytes in queue */
 8007ca0:	2300      	movs	r3, #0
 8007ca2:	62bb      	str	r3, [r7, #40]	; 0x28
 8007ca4:	2300      	movs	r3, #0
 8007ca6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t eob_free_size;                         /* Eof End of Quque Buffer Free Size */
  uint8_t  wrap_will_occur = 0;                   /* indicate if a wrap around will occurs */
 8007ca8:	2300      	movs	r3, #0
 8007caa:	77bb      	strb	r3, [r7, #30]
  uint8_t  wrapped_element_eob_size;              /* In case of Wrap around, indicat size of parta of elemenet that fit at thened of the queuue  buffer */
  uint16_t overhead = 0;                          /* In case of CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG or CIRCULAR_QUEUE_NO_WRAP_FLAG options, 
 8007cac:	2300      	movs	r3, #0
 8007cae:	83bb      	strh	r3, [r7, #28]
                                                     indcate the size overhead that will be generated by adding the element with wrap management (split or no wrap ) */ 
  
  
  elemSizeStorageRoom  = (q->elementSize == 0) ? 2 : 0;
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	891b      	ldrh	r3, [r3, #8]
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d101      	bne.n	8007cbc <CircularQueue_Add+0x38>
 8007cb8:	2302      	movs	r3, #2
 8007cba:	e000      	b.n	8007cbe <CircularQueue_Add+0x3a>
 8007cbc:	2300      	movs	r3, #0
 8007cbe:	77fb      	strb	r3, [r7, #31]
  /* retrieve the size of last element sored: the value stored at the beginning of the queue element if element size is variable otherwise take it from fixed element Size member */
  if (q->byteCount)
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	695b      	ldr	r3, [r3, #20]
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d02a      	beq.n	8007d1e <CircularQueue_Add+0x9a>
  {
    curElementSize = (q->elementSize == 0) ? q->qBuff[q->last] + ((q->qBuff[MOD((q->last+1), q->queueMaxSize)])<<8) + 2 : q->elementSize;
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	891b      	ldrh	r3, [r3, #8]
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d123      	bne.n	8007d18 <CircularQueue_Add+0x94>
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	681a      	ldr	r2, [r3, #0]
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	691b      	ldr	r3, [r3, #16]
 8007cd8:	4413      	add	r3, r2
 8007cda:	781b      	ldrb	r3, [r3, #0]
 8007cdc:	b29a      	uxth	r2, r3
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	6819      	ldr	r1, [r3, #0]
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	691b      	ldr	r3, [r3, #16]
 8007ce6:	1c58      	adds	r0, r3, #1
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	685b      	ldr	r3, [r3, #4]
 8007cec:	4298      	cmp	r0, r3
 8007cee:	d306      	bcc.n	8007cfe <CircularQueue_Add+0x7a>
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	6918      	ldr	r0, [r3, #16]
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	685b      	ldr	r3, [r3, #4]
 8007cf8:	1ac3      	subs	r3, r0, r3
 8007cfa:	3301      	adds	r3, #1
 8007cfc:	e002      	b.n	8007d04 <CircularQueue_Add+0x80>
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	691b      	ldr	r3, [r3, #16]
 8007d02:	3301      	adds	r3, #1
 8007d04:	440b      	add	r3, r1
 8007d06:	781b      	ldrb	r3, [r3, #0]
 8007d08:	b29b      	uxth	r3, r3
 8007d0a:	021b      	lsls	r3, r3, #8
 8007d0c:	b29b      	uxth	r3, r3
 8007d0e:	4413      	add	r3, r2
 8007d10:	b29b      	uxth	r3, r3
 8007d12:	3302      	adds	r3, #2
 8007d14:	b29b      	uxth	r3, r3
 8007d16:	e001      	b.n	8007d1c <CircularQueue_Add+0x98>
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	891b      	ldrh	r3, [r3, #8]
 8007d1c:	86fb      	strh	r3, [r7, #54]	; 0x36
  }
  /* if queue element have fixed size , reset the elementSize arg with fixed element size value */
  if (q->elementSize > 0)               
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	891b      	ldrh	r3, [r3, #8]
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d002      	beq.n	8007d2c <CircularQueue_Add+0xa8>
  {
    elementSize = q->elementSize;
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	891b      	ldrh	r3, [r3, #8]
 8007d2a:	80fb      	strh	r3, [r7, #6]
  }

   eob_free_size = (q->last >= q->first) ? q->queueMaxSize - (q->last + curElementSize) : 0;
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	691a      	ldr	r2, [r3, #16]
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	68db      	ldr	r3, [r3, #12]
 8007d34:	429a      	cmp	r2, r3
 8007d36:	d307      	bcc.n	8007d48 <CircularQueue_Add+0xc4>
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	685a      	ldr	r2, [r3, #4]
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	6919      	ldr	r1, [r3, #16]
 8007d40:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8007d42:	440b      	add	r3, r1
 8007d44:	1ad3      	subs	r3, r2, r3
 8007d46:	e000      	b.n	8007d4a <CircularQueue_Add+0xc6>
 8007d48:	2300      	movs	r3, #0
 8007d4a:	61bb      	str	r3, [r7, #24]

   /* check how many bytes of wrapped element (if anay) are at end of buffer */
   wrapped_element_eob_size = (((elementSize + elemSizeStorageRoom )*nbElements) < eob_free_size) ? 0 : (eob_free_size % (elementSize + elemSizeStorageRoom));
 8007d4c:	88fa      	ldrh	r2, [r7, #6]
 8007d4e:	7ffb      	ldrb	r3, [r7, #31]
 8007d50:	4413      	add	r3, r2
 8007d52:	461a      	mov	r2, r3
 8007d54:	683b      	ldr	r3, [r7, #0]
 8007d56:	fb03 f302 	mul.w	r3, r3, r2
 8007d5a:	69ba      	ldr	r2, [r7, #24]
 8007d5c:	429a      	cmp	r2, r3
 8007d5e:	d80b      	bhi.n	8007d78 <CircularQueue_Add+0xf4>
 8007d60:	88fa      	ldrh	r2, [r7, #6]
 8007d62:	7ffb      	ldrb	r3, [r7, #31]
 8007d64:	4413      	add	r3, r2
 8007d66:	461a      	mov	r2, r3
 8007d68:	69bb      	ldr	r3, [r7, #24]
 8007d6a:	fbb3 f1f2 	udiv	r1, r3, r2
 8007d6e:	fb02 f201 	mul.w	r2, r2, r1
 8007d72:	1a9b      	subs	r3, r3, r2
 8007d74:	b2db      	uxtb	r3, r3
 8007d76:	e000      	b.n	8007d7a <CircularQueue_Add+0xf6>
 8007d78:	2300      	movs	r3, #0
 8007d7a:	75fb      	strb	r3, [r7, #23]
   wrap_will_occur  = wrapped_element_eob_size > elemSizeStorageRoom;
 8007d7c:	7dfa      	ldrb	r2, [r7, #23]
 8007d7e:	7ffb      	ldrb	r3, [r7, #31]
 8007d80:	429a      	cmp	r2, r3
 8007d82:	bf8c      	ite	hi
 8007d84:	2301      	movhi	r3, #1
 8007d86:	2300      	movls	r3, #0
 8007d88:	b2db      	uxtb	r3, r3
 8007d8a:	77bb      	strb	r3, [r7, #30]

   overhead = (wrap_will_occur && (q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG)) ? wrapped_element_eob_size : overhead;
 8007d8c:	7fbb      	ldrb	r3, [r7, #30]
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d008      	beq.n	8007da4 <CircularQueue_Add+0x120>
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	7f1b      	ldrb	r3, [r3, #28]
 8007d96:	f003 0301 	and.w	r3, r3, #1
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d002      	beq.n	8007da4 <CircularQueue_Add+0x120>
 8007d9e:	7dfb      	ldrb	r3, [r7, #23]
 8007da0:	b29b      	uxth	r3, r3
 8007da2:	e000      	b.n	8007da6 <CircularQueue_Add+0x122>
 8007da4:	8bbb      	ldrh	r3, [r7, #28]
 8007da6:	83bb      	strh	r3, [r7, #28]
   overhead = (wrap_will_occur && (q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG)) ? elemSizeStorageRoom  : overhead;
 8007da8:	7fbb      	ldrb	r3, [r7, #30]
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d008      	beq.n	8007dc0 <CircularQueue_Add+0x13c>
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	7f1b      	ldrb	r3, [r3, #28]
 8007db2:	f003 0302 	and.w	r3, r3, #2
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d002      	beq.n	8007dc0 <CircularQueue_Add+0x13c>
 8007dba:	7ffb      	ldrb	r3, [r7, #31]
 8007dbc:	b29b      	uxth	r3, r3
 8007dbe:	e000      	b.n	8007dc2 <CircularQueue_Add+0x13e>
 8007dc0:	8bbb      	ldrh	r3, [r7, #28]
 8007dc2:	83bb      	strh	r3, [r7, #28]
   
   
  /* Store now the elements if ennough room for all elements */
  if (elementSize && ((q->byteCount + ((elementSize + elemSizeStorageRoom )*nbElements) + overhead) <= q->queueMaxSize)) 
 8007dc4:	88fb      	ldrh	r3, [r7, #6]
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	f000 817e 	beq.w	80080c8 <CircularQueue_Add+0x444>
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	695a      	ldr	r2, [r3, #20]
 8007dd0:	88f9      	ldrh	r1, [r7, #6]
 8007dd2:	7ffb      	ldrb	r3, [r7, #31]
 8007dd4:	440b      	add	r3, r1
 8007dd6:	4619      	mov	r1, r3
 8007dd8:	683b      	ldr	r3, [r7, #0]
 8007dda:	fb03 f301 	mul.w	r3, r3, r1
 8007dde:	441a      	add	r2, r3
 8007de0:	8bbb      	ldrh	r3, [r7, #28]
 8007de2:	441a      	add	r2, r3
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	685b      	ldr	r3, [r3, #4]
 8007de8:	429a      	cmp	r2, r3
 8007dea:	f200 816d 	bhi.w	80080c8 <CircularQueue_Add+0x444>
  { 
    /* loop to add all elements  */
    for (i=0; i < nbElements; i++) 
 8007dee:	2300      	movs	r3, #0
 8007df0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007df2:	e14a      	b.n	800808a <CircularQueue_Add+0x406>
    {
      q->last = MOD ((q->last + curElementSize),q->queueMaxSize);
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	691a      	ldr	r2, [r3, #16]
 8007df8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8007dfa:	441a      	add	r2, r3
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	685b      	ldr	r3, [r3, #4]
 8007e00:	429a      	cmp	r2, r3
 8007e02:	d307      	bcc.n	8007e14 <CircularQueue_Add+0x190>
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	691a      	ldr	r2, [r3, #16]
 8007e08:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8007e0a:	441a      	add	r2, r3
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	685b      	ldr	r3, [r3, #4]
 8007e10:	1ad3      	subs	r3, r2, r3
 8007e12:	e003      	b.n	8007e1c <CircularQueue_Add+0x198>
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	691a      	ldr	r2, [r3, #16]
 8007e18:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8007e1a:	4413      	add	r3, r2
 8007e1c:	68fa      	ldr	r2, [r7, #12]
 8007e1e:	6113      	str	r3, [r2, #16]
      curBuffPosition = q->last;
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	691b      	ldr	r3, [r3, #16]
 8007e24:	633b      	str	r3, [r7, #48]	; 0x30
      
      /* store the element  */
      /* store fisrt the element size if element size is varaible */
      if (q->elementSize == 0) 
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	891b      	ldrh	r3, [r3, #8]
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d130      	bne.n	8007e90 <CircularQueue_Add+0x20c>
      {
        q->qBuff[curBuffPosition++]= elementSize & 0xFF;
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	681a      	ldr	r2, [r3, #0]
 8007e32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e34:	1c59      	adds	r1, r3, #1
 8007e36:	6339      	str	r1, [r7, #48]	; 0x30
 8007e38:	4413      	add	r3, r2
 8007e3a:	88fa      	ldrh	r2, [r7, #6]
 8007e3c:	b2d2      	uxtb	r2, r2
 8007e3e:	701a      	strb	r2, [r3, #0]
        curBuffPosition = MOD(curBuffPosition, q->queueMaxSize);
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	685b      	ldr	r3, [r3, #4]
 8007e44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007e46:	429a      	cmp	r2, r3
 8007e48:	d304      	bcc.n	8007e54 <CircularQueue_Add+0x1d0>
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	685b      	ldr	r3, [r3, #4]
 8007e4e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007e50:	1ad3      	subs	r3, r2, r3
 8007e52:	e000      	b.n	8007e56 <CircularQueue_Add+0x1d2>
 8007e54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e56:	633b      	str	r3, [r7, #48]	; 0x30
        q->qBuff[curBuffPosition++]= (elementSize & 0xFF00) >> 8 ;
 8007e58:	88fb      	ldrh	r3, [r7, #6]
 8007e5a:	0a1b      	lsrs	r3, r3, #8
 8007e5c:	b298      	uxth	r0, r3
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	681a      	ldr	r2, [r3, #0]
 8007e62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e64:	1c59      	adds	r1, r3, #1
 8007e66:	6339      	str	r1, [r7, #48]	; 0x30
 8007e68:	4413      	add	r3, r2
 8007e6a:	b2c2      	uxtb	r2, r0
 8007e6c:	701a      	strb	r2, [r3, #0]
        curBuffPosition = MOD(curBuffPosition, q->queueMaxSize);
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	685b      	ldr	r3, [r3, #4]
 8007e72:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007e74:	429a      	cmp	r2, r3
 8007e76:	d304      	bcc.n	8007e82 <CircularQueue_Add+0x1fe>
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	685b      	ldr	r3, [r3, #4]
 8007e7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007e7e:	1ad3      	subs	r3, r2, r3
 8007e80:	e000      	b.n	8007e84 <CircularQueue_Add+0x200>
 8007e82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e84:	633b      	str	r3, [r7, #48]	; 0x30
        q->byteCount += 2;
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	695b      	ldr	r3, [r3, #20]
 8007e8a:	1c9a      	adds	r2, r3, #2
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	615a      	str	r2, [r3, #20]
      }
      
      /* Identify number of bytes of copy takeing account possible wrap, in this case NbBytesToCopy will contains size that fit at end of the queue buffer */
      NbBytesToCopy = MIN((q->queueMaxSize-curBuffPosition),elementSize);
 8007e90:	88fa      	ldrh	r2, [r7, #6]
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	6859      	ldr	r1, [r3, #4]
 8007e96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e98:	1acb      	subs	r3, r1, r3
 8007e9a:	4293      	cmp	r3, r2
 8007e9c:	bf28      	it	cs
 8007e9e:	4613      	movcs	r3, r2
 8007ea0:	62bb      	str	r3, [r7, #40]	; 0x28
      /* check if no wrap (NbBytesToCopy == elementSize) or if Wrap and no spsicf option; 
         In thi case part of data will copied at the end of the buffer and the rest a the beggining */
      if ((NbBytesToCopy == elementSize) || ((NbBytesToCopy < elementSize) && (q->optionFlags == CIRCULAR_QUEUE_NO_FLAG)))
 8007ea2:	88fb      	ldrh	r3, [r7, #6]
 8007ea4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007ea6:	429a      	cmp	r2, r3
 8007ea8:	d007      	beq.n	8007eba <CircularQueue_Add+0x236>
 8007eaa:	88fb      	ldrh	r3, [r7, #6]
 8007eac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007eae:	429a      	cmp	r2, r3
 8007eb0:	d225      	bcs.n	8007efe <CircularQueue_Add+0x27a>
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	7f1b      	ldrb	r3, [r3, #28]
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d121      	bne.n	8007efe <CircularQueue_Add+0x27a>
      {
        /* Copy First part (or emtire buffer ) from current position up to the end of the buffer queue (or before if enough room)  */
        memcpy(&q->qBuff[curBuffPosition],&x[i*elementSize],NbBytesToCopy);
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	681a      	ldr	r2, [r3, #0]
 8007ebe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ec0:	18d0      	adds	r0, r2, r3
 8007ec2:	88fb      	ldrh	r3, [r7, #6]
 8007ec4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007ec6:	fb02 f303 	mul.w	r3, r2, r3
 8007eca:	68ba      	ldr	r2, [r7, #8]
 8007ecc:	4413      	add	r3, r2
 8007ece:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007ed0:	4619      	mov	r1, r3
 8007ed2:	f001 fe39 	bl	8009b48 <memcpy>
        /* Adjust bytes count */
        q->byteCount += NbBytesToCopy;
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	695a      	ldr	r2, [r3, #20]
 8007eda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007edc:	441a      	add	r2, r3
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	615a      	str	r2, [r3, #20]
        /* Wrap */
        curBuffPosition = 0; 
 8007ee2:	2300      	movs	r3, #0
 8007ee4:	633b      	str	r3, [r7, #48]	; 0x30
        /* set NbCopiedBytes bytes with  ampount copied */
        NbCopiedBytes = NbBytesToCopy;
 8007ee6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ee8:	627b      	str	r3, [r7, #36]	; 0x24
        /* set the rest to copy if wrao , if no wrap will be 0 */
        NbBytesToCopy = elementSize - NbBytesToCopy;
 8007eea:	88fa      	ldrh	r2, [r7, #6]
 8007eec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007eee:	1ad3      	subs	r3, r2, r3
 8007ef0:	62bb      	str	r3, [r7, #40]	; 0x28
        /* set the current element Size, will be used to calaculate next last position at beggining of loop */
        curElementSize = (elementSize) + elemSizeStorageRoom ;
 8007ef2:	7ffb      	ldrb	r3, [r7, #31]
 8007ef4:	b29a      	uxth	r2, r3
 8007ef6:	88fb      	ldrh	r3, [r7, #6]
 8007ef8:	4413      	add	r3, r2
 8007efa:	86fb      	strh	r3, [r7, #54]	; 0x36
 8007efc:	e0a4      	b.n	8008048 <CircularQueue_Add+0x3c4>
      }
      else if (NbBytesToCopy)  /* We have a wrap  to manage */
 8007efe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	f000 80a1 	beq.w	8008048 <CircularQueue_Add+0x3c4>
      {
       /* case of CIRCULAR_QUEUE_NO_WRAP_FLAG option */
         if (q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG)
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	7f1b      	ldrb	r3, [r3, #28]
 8007f0a:	f003 0301 	and.w	r3, r3, #1
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d03a      	beq.n	8007f88 <CircularQueue_Add+0x304>
        {
          /* if element size are variable and NO_WRAP option, Invalidate end of buffer setting 0xFFFF size*/
          if (q->elementSize == 0)
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	891b      	ldrh	r3, [r3, #8]
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d10d      	bne.n	8007f36 <CircularQueue_Add+0x2b2>
          {
             q->qBuff[curBuffPosition-2] = 0xFF;
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	681a      	ldr	r2, [r3, #0]
 8007f1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f20:	3b02      	subs	r3, #2
 8007f22:	4413      	add	r3, r2
 8007f24:	22ff      	movs	r2, #255	; 0xff
 8007f26:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition-1] = 0xFF;
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	681a      	ldr	r2, [r3, #0]
 8007f2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f2e:	3b01      	subs	r3, #1
 8007f30:	4413      	add	r3, r2
 8007f32:	22ff      	movs	r2, #255	; 0xff
 8007f34:	701a      	strb	r2, [r3, #0]
          }
          q->byteCount += NbBytesToCopy;  /* invalid data at the end of buffer are take into account in byteCount */
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	695a      	ldr	r2, [r3, #20]
 8007f3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f3c:	441a      	add	r2, r3
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	615a      	str	r2, [r3, #20]
          /* No bytes coped a the end of buffer */
          NbCopiedBytes = 0;
 8007f42:	2300      	movs	r3, #0
 8007f44:	627b      	str	r3, [r7, #36]	; 0x24
          /* all element to be copied at the begnning of buffer */
          NbBytesToCopy = elementSize; 
 8007f46:	88fb      	ldrh	r3, [r7, #6]
 8007f48:	62bb      	str	r3, [r7, #40]	; 0x28
          /* Wrap */
          curBuffPosition = 0; 
 8007f4a:	2300      	movs	r3, #0
 8007f4c:	633b      	str	r3, [r7, #48]	; 0x30
          /* if variable size element, invalidate end of buffer setting OxFFFF in element header (size) */
          if (q->elementSize == 0)
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	891b      	ldrh	r3, [r3, #8]
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d16f      	bne.n	8008036 <CircularQueue_Add+0x3b2>
          {
            q->qBuff[curBuffPosition++] = NbBytesToCopy & 0xFF;
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	681a      	ldr	r2, [r3, #0]
 8007f5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f5c:	1c59      	adds	r1, r3, #1
 8007f5e:	6339      	str	r1, [r7, #48]	; 0x30
 8007f60:	4413      	add	r3, r2
 8007f62:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007f64:	b2d2      	uxtb	r2, r2
 8007f66:	701a      	strb	r2, [r3, #0]
            q->qBuff[curBuffPosition++] = (NbBytesToCopy & 0xFF00) >> 8 ;
 8007f68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f6a:	0a18      	lsrs	r0, r3, #8
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	681a      	ldr	r2, [r3, #0]
 8007f70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f72:	1c59      	adds	r1, r3, #1
 8007f74:	6339      	str	r1, [r7, #48]	; 0x30
 8007f76:	4413      	add	r3, r2
 8007f78:	b2c2      	uxtb	r2, r0
 8007f7a:	701a      	strb	r2, [r3, #0]
            q->byteCount += 2;   
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	695b      	ldr	r3, [r3, #20]
 8007f80:	1c9a      	adds	r2, r3, #2
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	615a      	str	r2, [r3, #20]
 8007f86:	e056      	b.n	8008036 <CircularQueue_Add+0x3b2>
          } 
           
        }
        /* case of CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG option */
        else if (q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG)
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	7f1b      	ldrb	r3, [r3, #28]
 8007f8c:	f003 0302 	and.w	r3, r3, #2
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d050      	beq.n	8008036 <CircularQueue_Add+0x3b2>
        {
          if (q->elementSize == 0)
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	891b      	ldrh	r3, [r3, #8]
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d14a      	bne.n	8008032 <CircularQueue_Add+0x3ae>
          {
            /* reset the size of current element to the nb bytes fitting at the end of buffer */
             q->qBuff[curBuffPosition-2] = NbBytesToCopy & 0xFF;
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	681a      	ldr	r2, [r3, #0]
 8007fa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fa2:	3b02      	subs	r3, #2
 8007fa4:	4413      	add	r3, r2
 8007fa6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007fa8:	b2d2      	uxtb	r2, r2
 8007faa:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition-1] = (NbBytesToCopy & 0xFF00) >> 8 ;
 8007fac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fae:	0a19      	lsrs	r1, r3, #8
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	681a      	ldr	r2, [r3, #0]
 8007fb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fb6:	3b01      	subs	r3, #1
 8007fb8:	4413      	add	r3, r2
 8007fba:	b2ca      	uxtb	r2, r1
 8007fbc:	701a      	strb	r2, [r3, #0]
             /* copy the bytes */ 
             memcpy(&q->qBuff[curBuffPosition],&x[i*elementSize],NbBytesToCopy);
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	681a      	ldr	r2, [r3, #0]
 8007fc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fc4:	18d0      	adds	r0, r2, r3
 8007fc6:	88fb      	ldrh	r3, [r7, #6]
 8007fc8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007fca:	fb02 f303 	mul.w	r3, r2, r3
 8007fce:	68ba      	ldr	r2, [r7, #8]
 8007fd0:	4413      	add	r3, r2
 8007fd2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007fd4:	4619      	mov	r1, r3
 8007fd6:	f001 fdb7 	bl	8009b48 <memcpy>
             q->byteCount += NbBytesToCopy; 
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	695a      	ldr	r2, [r3, #20]
 8007fde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fe0:	441a      	add	r2, r3
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	615a      	str	r2, [r3, #20]
             /* set the number of copied bytes */
             NbCopiedBytes = NbBytesToCopy;             
 8007fe6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fe8:	627b      	str	r3, [r7, #36]	; 0x24
             /* set rest of data to be copied to begnning of buffer */
             NbBytesToCopy = elementSize - NbBytesToCopy;
 8007fea:	88fa      	ldrh	r2, [r7, #6]
 8007fec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fee:	1ad3      	subs	r3, r2, r3
 8007ff0:	62bb      	str	r3, [r7, #40]	; 0x28
             /* one element more dur to split in 2 elements */
             q->elementCount++;
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	699b      	ldr	r3, [r3, #24]
 8007ff6:	1c5a      	adds	r2, r3, #1
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	619a      	str	r2, [r3, #24]
             /* Wrap */
             curBuffPosition = 0; 
 8007ffc:	2300      	movs	r3, #0
 8007ffe:	633b      	str	r3, [r7, #48]	; 0x30
             /* Set new size for rest of data */
             q->qBuff[curBuffPosition++] = NbBytesToCopy & 0xFF;
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	681a      	ldr	r2, [r3, #0]
 8008004:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008006:	1c59      	adds	r1, r3, #1
 8008008:	6339      	str	r1, [r7, #48]	; 0x30
 800800a:	4413      	add	r3, r2
 800800c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800800e:	b2d2      	uxtb	r2, r2
 8008010:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition++] = (NbBytesToCopy & 0xFF00) >> 8 ;
 8008012:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008014:	0a18      	lsrs	r0, r3, #8
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	681a      	ldr	r2, [r3, #0]
 800801a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800801c:	1c59      	adds	r1, r3, #1
 800801e:	6339      	str	r1, [r7, #48]	; 0x30
 8008020:	4413      	add	r3, r2
 8008022:	b2c2      	uxtb	r2, r0
 8008024:	701a      	strb	r2, [r3, #0]
             q->byteCount += 2;              
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	695b      	ldr	r3, [r3, #20]
 800802a:	1c9a      	adds	r2, r3, #2
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	615a      	str	r2, [r3, #20]
 8008030:	e001      	b.n	8008036 <CircularQueue_Add+0x3b2>
          else
          {
            /* Should not occur */
            /* can not manage split Flag on Fixed size element */
            /* Buffer is corrupted */
            return NULL;
 8008032:	2300      	movs	r3, #0
 8008034:	e049      	b.n	80080ca <CircularQueue_Add+0x446>
          }
        }
        curElementSize = (NbBytesToCopy) + elemSizeStorageRoom ;
 8008036:	7ffb      	ldrb	r3, [r7, #31]
 8008038:	b29a      	uxth	r2, r3
 800803a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800803c:	b29b      	uxth	r3, r3
 800803e:	4413      	add	r3, r2
 8008040:	86fb      	strh	r3, [r7, #54]	; 0x36
        q->last = 0;        
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	2200      	movs	r2, #0
 8008046:	611a      	str	r2, [r3, #16]
      }  
      
      /* some remaning byte to copy */
      if (NbBytesToCopy)      
 8008048:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800804a:	2b00      	cmp	r3, #0
 800804c:	d015      	beq.n	800807a <CircularQueue_Add+0x3f6>
      {
        memcpy(&q->qBuff[curBuffPosition],&x[(i*elementSize)+NbCopiedBytes],NbBytesToCopy);
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	681a      	ldr	r2, [r3, #0]
 8008052:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008054:	18d0      	adds	r0, r2, r3
 8008056:	88fb      	ldrh	r3, [r7, #6]
 8008058:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800805a:	fb02 f203 	mul.w	r2, r2, r3
 800805e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008060:	4413      	add	r3, r2
 8008062:	68ba      	ldr	r2, [r7, #8]
 8008064:	4413      	add	r3, r2
 8008066:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008068:	4619      	mov	r1, r3
 800806a:	f001 fd6d 	bl	8009b48 <memcpy>
        q->byteCount += NbBytesToCopy;
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	695a      	ldr	r2, [r3, #20]
 8008072:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008074:	441a      	add	r2, r3
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	615a      	str	r2, [r3, #20]
      }      
      
      /* One more element */
      q->elementCount++;
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	699b      	ldr	r3, [r3, #24]
 800807e:	1c5a      	adds	r2, r3, #1
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	619a      	str	r2, [r3, #24]
    for (i=0; i < nbElements; i++) 
 8008084:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008086:	3301      	adds	r3, #1
 8008088:	62fb      	str	r3, [r7, #44]	; 0x2c
 800808a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800808c:	683b      	ldr	r3, [r7, #0]
 800808e:	429a      	cmp	r2, r3
 8008090:	f4ff aeb0 	bcc.w	8007df4 <CircularQueue_Add+0x170>
    }
    
    ptr = q->qBuff + (MOD((q->last+elemSizeStorageRoom ),q->queueMaxSize));
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	681a      	ldr	r2, [r3, #0]
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	6919      	ldr	r1, [r3, #16]
 800809c:	7ffb      	ldrb	r3, [r7, #31]
 800809e:	4419      	add	r1, r3
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	685b      	ldr	r3, [r3, #4]
 80080a4:	4299      	cmp	r1, r3
 80080a6:	d307      	bcc.n	80080b8 <CircularQueue_Add+0x434>
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	6919      	ldr	r1, [r3, #16]
 80080ac:	7ffb      	ldrb	r3, [r7, #31]
 80080ae:	4419      	add	r1, r3
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	685b      	ldr	r3, [r3, #4]
 80080b4:	1acb      	subs	r3, r1, r3
 80080b6:	e003      	b.n	80080c0 <CircularQueue_Add+0x43c>
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	6919      	ldr	r1, [r3, #16]
 80080bc:	7ffb      	ldrb	r3, [r7, #31]
 80080be:	440b      	add	r3, r1
 80080c0:	4413      	add	r3, r2
 80080c2:	623b      	str	r3, [r7, #32]
  /* for Breakpoint only...to remove */
  else
  {
    return NULL;
  }
  return ptr;
 80080c4:	6a3b      	ldr	r3, [r7, #32]
 80080c6:	e000      	b.n	80080ca <CircularQueue_Add+0x446>
    return NULL;
 80080c8:	2300      	movs	r3, #0
}
 80080ca:	4618      	mov	r0, r3
 80080cc:	3738      	adds	r7, #56	; 0x38
 80080ce:	46bd      	mov	sp, r7
 80080d0:	bd80      	pop	{r7, pc}

080080d2 <CircularQueue_Remove>:
  * @param  q: pointer on queue structure  to be handled
  * @param  elementSize: Pointer to return Size of element to be removed (ignored if NULL)
  * @retval Pointer on removed element. NULL if queue was empty
  */
uint8_t* CircularQueue_Remove(queue_t *q, uint16_t* elementSize)
{
 80080d2:	b480      	push	{r7}
 80080d4:	b085      	sub	sp, #20
 80080d6:	af00      	add	r7, sp, #0
 80080d8:	6078      	str	r0, [r7, #4]
 80080da:	6039      	str	r1, [r7, #0]
  uint8_t  elemSizeStorageRoom = 0;
 80080dc:	2300      	movs	r3, #0
 80080de:	727b      	strb	r3, [r7, #9]
  uint8_t* ptr= NULL;
 80080e0:	2300      	movs	r3, #0
 80080e2:	60fb      	str	r3, [r7, #12]
  elemSizeStorageRoom = (q->elementSize == 0) ? 2 : 0;
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	891b      	ldrh	r3, [r3, #8]
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d101      	bne.n	80080f0 <CircularQueue_Remove+0x1e>
 80080ec:	2302      	movs	r3, #2
 80080ee:	e000      	b.n	80080f2 <CircularQueue_Remove+0x20>
 80080f0:	2300      	movs	r3, #0
 80080f2:	727b      	strb	r3, [r7, #9]
  uint16_t eltSize = 0;
 80080f4:	2300      	movs	r3, #0
 80080f6:	817b      	strh	r3, [r7, #10]
  if (q->byteCount > 0) 
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	695b      	ldr	r3, [r3, #20]
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	f000 80cc 	beq.w	800829a <CircularQueue_Remove+0x1c8>
  {
    /* retreive element Size */
    eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	891b      	ldrh	r3, [r3, #8]
 8008106:	2b00      	cmp	r3, #0
 8008108:	d121      	bne.n	800814e <CircularQueue_Remove+0x7c>
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	681a      	ldr	r2, [r3, #0]
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	68db      	ldr	r3, [r3, #12]
 8008112:	4413      	add	r3, r2
 8008114:	781b      	ldrb	r3, [r3, #0]
 8008116:	b29a      	uxth	r2, r3
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	6819      	ldr	r1, [r3, #0]
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	68db      	ldr	r3, [r3, #12]
 8008120:	1c58      	adds	r0, r3, #1
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	685b      	ldr	r3, [r3, #4]
 8008126:	4298      	cmp	r0, r3
 8008128:	d306      	bcc.n	8008138 <CircularQueue_Remove+0x66>
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	68d8      	ldr	r0, [r3, #12]
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	685b      	ldr	r3, [r3, #4]
 8008132:	1ac3      	subs	r3, r0, r3
 8008134:	3301      	adds	r3, #1
 8008136:	e002      	b.n	800813e <CircularQueue_Remove+0x6c>
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	68db      	ldr	r3, [r3, #12]
 800813c:	3301      	adds	r3, #1
 800813e:	440b      	add	r3, r1
 8008140:	781b      	ldrb	r3, [r3, #0]
 8008142:	b29b      	uxth	r3, r3
 8008144:	021b      	lsls	r3, r3, #8
 8008146:	b29b      	uxth	r3, r3
 8008148:	4413      	add	r3, r2
 800814a:	b29b      	uxth	r3, r3
 800814c:	e001      	b.n	8008152 <CircularQueue_Remove+0x80>
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	891b      	ldrh	r3, [r3, #8]
 8008152:	817b      	strh	r3, [r7, #10]

     if ((q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG) && !(q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG))
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	7f1b      	ldrb	r3, [r3, #28]
 8008158:	f003 0301 	and.w	r3, r3, #1
 800815c:	2b00      	cmp	r3, #0
 800815e:	d057      	beq.n	8008210 <CircularQueue_Remove+0x13e>
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	7f1b      	ldrb	r3, [r3, #28]
 8008164:	f003 0302 	and.w	r3, r3, #2
 8008168:	2b00      	cmp	r3, #0
 800816a:	d151      	bne.n	8008210 <CircularQueue_Remove+0x13e>
     {
       if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 800816c:	897b      	ldrh	r3, [r7, #10]
 800816e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008172:	4293      	cmp	r3, r2
 8008174:	d103      	bne.n	800817e <CircularQueue_Remove+0xac>
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	891b      	ldrh	r3, [r3, #8]
 800817a:	2b00      	cmp	r3, #0
 800817c:	d012      	beq.n	80081a4 <CircularQueue_Remove+0xd2>
           ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	68da      	ldr	r2, [r3, #12]
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	691b      	ldr	r3, [r3, #16]
       if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 8008186:	429a      	cmp	r2, r3
 8008188:	d942      	bls.n	8008210 <CircularQueue_Remove+0x13e>
           ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	891b      	ldrh	r3, [r3, #8]
 800818e:	2b00      	cmp	r3, #0
 8008190:	d03e      	beq.n	8008210 <CircularQueue_Remove+0x13e>
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	685a      	ldr	r2, [r3, #4]
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	68db      	ldr	r3, [r3, #12]
 800819a:	1ad3      	subs	r3, r2, r3
 800819c:	687a      	ldr	r2, [r7, #4]
 800819e:	8912      	ldrh	r2, [r2, #8]
 80081a0:	4293      	cmp	r3, r2
 80081a2:	d235      	bcs.n	8008210 <CircularQueue_Remove+0x13e>
       {
          /* all data from current position up to the end of buffer are invalid */
          q->byteCount -= (q->queueMaxSize - q->first);
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	695a      	ldr	r2, [r3, #20]
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	68d9      	ldr	r1, [r3, #12]
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	685b      	ldr	r3, [r3, #4]
 80081b0:	1acb      	subs	r3, r1, r3
 80081b2:	441a      	add	r2, r3
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	615a      	str	r2, [r3, #20]
          /* Adjust first element pos */
          q->first = 0;
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	2200      	movs	r2, #0
 80081bc:	60da      	str	r2, [r3, #12]
          /* retrieve the rigth size after the wrap [if varaible size element] */
          eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	891b      	ldrh	r3, [r3, #8]
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d121      	bne.n	800820a <CircularQueue_Remove+0x138>
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	681a      	ldr	r2, [r3, #0]
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	68db      	ldr	r3, [r3, #12]
 80081ce:	4413      	add	r3, r2
 80081d0:	781b      	ldrb	r3, [r3, #0]
 80081d2:	b29a      	uxth	r2, r3
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	6819      	ldr	r1, [r3, #0]
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	68db      	ldr	r3, [r3, #12]
 80081dc:	1c58      	adds	r0, r3, #1
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	685b      	ldr	r3, [r3, #4]
 80081e2:	4298      	cmp	r0, r3
 80081e4:	d306      	bcc.n	80081f4 <CircularQueue_Remove+0x122>
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	68d8      	ldr	r0, [r3, #12]
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	685b      	ldr	r3, [r3, #4]
 80081ee:	1ac3      	subs	r3, r0, r3
 80081f0:	3301      	adds	r3, #1
 80081f2:	e002      	b.n	80081fa <CircularQueue_Remove+0x128>
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	68db      	ldr	r3, [r3, #12]
 80081f8:	3301      	adds	r3, #1
 80081fa:	440b      	add	r3, r1
 80081fc:	781b      	ldrb	r3, [r3, #0]
 80081fe:	b29b      	uxth	r3, r3
 8008200:	021b      	lsls	r3, r3, #8
 8008202:	b29b      	uxth	r3, r3
 8008204:	4413      	add	r3, r2
 8008206:	b29b      	uxth	r3, r3
 8008208:	e001      	b.n	800820e <CircularQueue_Remove+0x13c>
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	891b      	ldrh	r3, [r3, #8]
 800820e:	817b      	strh	r3, [r7, #10]
       }
     }

    /* retreive element */
    ptr = q->qBuff + (MOD((q->first + elemSizeStorageRoom), q->queueMaxSize));
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	681a      	ldr	r2, [r3, #0]
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	68d9      	ldr	r1, [r3, #12]
 8008218:	7a7b      	ldrb	r3, [r7, #9]
 800821a:	4419      	add	r1, r3
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	685b      	ldr	r3, [r3, #4]
 8008220:	4299      	cmp	r1, r3
 8008222:	d307      	bcc.n	8008234 <CircularQueue_Remove+0x162>
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	68d9      	ldr	r1, [r3, #12]
 8008228:	7a7b      	ldrb	r3, [r7, #9]
 800822a:	4419      	add	r1, r3
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	685b      	ldr	r3, [r3, #4]
 8008230:	1acb      	subs	r3, r1, r3
 8008232:	e003      	b.n	800823c <CircularQueue_Remove+0x16a>
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	68d9      	ldr	r1, [r3, #12]
 8008238:	7a7b      	ldrb	r3, [r7, #9]
 800823a:	440b      	add	r3, r1
 800823c:	4413      	add	r3, r2
 800823e:	60fb      	str	r3, [r7, #12]

    /* adjust byte count */
    q->byteCount -= (eltSize + elemSizeStorageRoom) ;
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	695b      	ldr	r3, [r3, #20]
 8008244:	8979      	ldrh	r1, [r7, #10]
 8008246:	7a7a      	ldrb	r2, [r7, #9]
 8008248:	440a      	add	r2, r1
 800824a:	1a9a      	subs	r2, r3, r2
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	615a      	str	r2, [r3, #20]
    
    /* Adjust q->first */
    if (q->byteCount > 0)
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	695b      	ldr	r3, [r3, #20]
 8008254:	2b00      	cmp	r3, #0
 8008256:	d01b      	beq.n	8008290 <CircularQueue_Remove+0x1be>
    {
      q->first = MOD((q->first+ eltSize + elemSizeStorageRoom ), q->queueMaxSize);
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	68da      	ldr	r2, [r3, #12]
 800825c:	897b      	ldrh	r3, [r7, #10]
 800825e:	441a      	add	r2, r3
 8008260:	7a7b      	ldrb	r3, [r7, #9]
 8008262:	441a      	add	r2, r3
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	685b      	ldr	r3, [r3, #4]
 8008268:	429a      	cmp	r2, r3
 800826a:	d309      	bcc.n	8008280 <CircularQueue_Remove+0x1ae>
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	68da      	ldr	r2, [r3, #12]
 8008270:	897b      	ldrh	r3, [r7, #10]
 8008272:	441a      	add	r2, r3
 8008274:	7a7b      	ldrb	r3, [r7, #9]
 8008276:	441a      	add	r2, r3
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	685b      	ldr	r3, [r3, #4]
 800827c:	1ad3      	subs	r3, r2, r3
 800827e:	e005      	b.n	800828c <CircularQueue_Remove+0x1ba>
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	68da      	ldr	r2, [r3, #12]
 8008284:	897b      	ldrh	r3, [r7, #10]
 8008286:	441a      	add	r2, r3
 8008288:	7a7b      	ldrb	r3, [r7, #9]
 800828a:	4413      	add	r3, r2
 800828c:	687a      	ldr	r2, [r7, #4]
 800828e:	60d3      	str	r3, [r2, #12]
    }    
    /* adjust element count */    
    --q->elementCount;    
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	699b      	ldr	r3, [r3, #24]
 8008294:	1e5a      	subs	r2, r3, #1
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	619a      	str	r2, [r3, #24]
  }
  if (elementSize != NULL)
 800829a:	683b      	ldr	r3, [r7, #0]
 800829c:	2b00      	cmp	r3, #0
 800829e:	d002      	beq.n	80082a6 <CircularQueue_Remove+0x1d4>
  {
    *elementSize = eltSize;
 80082a0:	683b      	ldr	r3, [r7, #0]
 80082a2:	897a      	ldrh	r2, [r7, #10]
 80082a4:	801a      	strh	r2, [r3, #0]
  }
  return ptr;
 80082a6:	68fb      	ldr	r3, [r7, #12]
}
 80082a8:	4618      	mov	r0, r3
 80082aa:	3714      	adds	r7, #20
 80082ac:	46bd      	mov	sp, r7
 80082ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b2:	4770      	bx	lr

080082b4 <CircularQueue_Sense>:
  * @param  q: pointer on queue structure  to be handled
  * @param  elementSize:  Pointer to return Size of element to be removed (ignored if NULL)
  * @retval Pointer on sensed element. NULL if queue was empty
  */
uint8_t* CircularQueue_Sense(queue_t *q, uint16_t* elementSize)
{
 80082b4:	b480      	push	{r7}
 80082b6:	b087      	sub	sp, #28
 80082b8:	af00      	add	r7, sp, #0
 80082ba:	6078      	str	r0, [r7, #4]
 80082bc:	6039      	str	r1, [r7, #0]
  uint8_t  elemSizeStorageRoom = 0;
 80082be:	2300      	movs	r3, #0
 80082c0:	72fb      	strb	r3, [r7, #11]
  uint8_t* x= NULL;
 80082c2:	2300      	movs	r3, #0
 80082c4:	617b      	str	r3, [r7, #20]
  elemSizeStorageRoom = (q->elementSize == 0) ? 2 : 0;
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	891b      	ldrh	r3, [r3, #8]
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d101      	bne.n	80082d2 <CircularQueue_Sense+0x1e>
 80082ce:	2302      	movs	r3, #2
 80082d0:	e000      	b.n	80082d4 <CircularQueue_Sense+0x20>
 80082d2:	2300      	movs	r3, #0
 80082d4:	72fb      	strb	r3, [r7, #11]
  uint16_t eltSize = 0;
 80082d6:	2300      	movs	r3, #0
 80082d8:	827b      	strh	r3, [r7, #18]
  uint32_t FirstElemetPos = 0;
 80082da:	2300      	movs	r3, #0
 80082dc:	60fb      	str	r3, [r7, #12]
    
  if (q->byteCount > 0) 
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	695b      	ldr	r3, [r3, #20]
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	f000 8090 	beq.w	8008408 <CircularQueue_Sense+0x154>
  {
    FirstElemetPos = q->first;
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	68db      	ldr	r3, [r3, #12]
 80082ec:	60fb      	str	r3, [r7, #12]
    eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	891b      	ldrh	r3, [r3, #8]
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d121      	bne.n	800833a <CircularQueue_Sense+0x86>
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	681a      	ldr	r2, [r3, #0]
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	68db      	ldr	r3, [r3, #12]
 80082fe:	4413      	add	r3, r2
 8008300:	781b      	ldrb	r3, [r3, #0]
 8008302:	b29a      	uxth	r2, r3
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	6819      	ldr	r1, [r3, #0]
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	68db      	ldr	r3, [r3, #12]
 800830c:	1c58      	adds	r0, r3, #1
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	685b      	ldr	r3, [r3, #4]
 8008312:	4298      	cmp	r0, r3
 8008314:	d306      	bcc.n	8008324 <CircularQueue_Sense+0x70>
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	68d8      	ldr	r0, [r3, #12]
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	685b      	ldr	r3, [r3, #4]
 800831e:	1ac3      	subs	r3, r0, r3
 8008320:	3301      	adds	r3, #1
 8008322:	e002      	b.n	800832a <CircularQueue_Sense+0x76>
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	68db      	ldr	r3, [r3, #12]
 8008328:	3301      	adds	r3, #1
 800832a:	440b      	add	r3, r1
 800832c:	781b      	ldrb	r3, [r3, #0]
 800832e:	b29b      	uxth	r3, r3
 8008330:	021b      	lsls	r3, r3, #8
 8008332:	b29b      	uxth	r3, r3
 8008334:	4413      	add	r3, r2
 8008336:	b29b      	uxth	r3, r3
 8008338:	e001      	b.n	800833e <CircularQueue_Sense+0x8a>
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	891b      	ldrh	r3, [r3, #8]
 800833e:	827b      	strh	r3, [r7, #18]
    
    if ((q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG) && !(q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG))
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	7f1b      	ldrb	r3, [r3, #28]
 8008344:	f003 0301 	and.w	r3, r3, #1
 8008348:	2b00      	cmp	r3, #0
 800834a:	d048      	beq.n	80083de <CircularQueue_Sense+0x12a>
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	7f1b      	ldrb	r3, [r3, #28]
 8008350:	f003 0302 	and.w	r3, r3, #2
 8008354:	2b00      	cmp	r3, #0
 8008356:	d142      	bne.n	80083de <CircularQueue_Sense+0x12a>
    { 
      if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 8008358:	8a7b      	ldrh	r3, [r7, #18]
 800835a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800835e:	4293      	cmp	r3, r2
 8008360:	d103      	bne.n	800836a <CircularQueue_Sense+0xb6>
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	891b      	ldrh	r3, [r3, #8]
 8008366:	2b00      	cmp	r3, #0
 8008368:	d012      	beq.n	8008390 <CircularQueue_Sense+0xdc>
          ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	68da      	ldr	r2, [r3, #12]
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	691b      	ldr	r3, [r3, #16]
      if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 8008372:	429a      	cmp	r2, r3
 8008374:	d933      	bls.n	80083de <CircularQueue_Sense+0x12a>
          ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	891b      	ldrh	r3, [r3, #8]
 800837a:	2b00      	cmp	r3, #0
 800837c:	d02f      	beq.n	80083de <CircularQueue_Sense+0x12a>
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	685a      	ldr	r2, [r3, #4]
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	68db      	ldr	r3, [r3, #12]
 8008386:	1ad3      	subs	r3, r2, r3
 8008388:	687a      	ldr	r2, [r7, #4]
 800838a:	8912      	ldrh	r2, [r2, #8]
 800838c:	4293      	cmp	r3, r2
 800838e:	d226      	bcs.n	80083de <CircularQueue_Sense+0x12a>

      {
        /* all data from current position up to the end of buffer are invalid */
        FirstElemetPos = 0; /* wrap to the begiining of buffer */
 8008390:	2300      	movs	r3, #0
 8008392:	60fb      	str	r3, [r7, #12]

        /* retrieve the rigth size after the wrap [if varaible size element] */
        eltSize = (q->elementSize == 0) ? q->qBuff[FirstElemetPos]+ ((q->qBuff[MOD((FirstElemetPos+1), q->queueMaxSize)])<<8) : q->elementSize;
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	891b      	ldrh	r3, [r3, #8]
 8008398:	2b00      	cmp	r3, #0
 800839a:	d11d      	bne.n	80083d8 <CircularQueue_Sense+0x124>
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	681a      	ldr	r2, [r3, #0]
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	4413      	add	r3, r2
 80083a4:	781b      	ldrb	r3, [r3, #0]
 80083a6:	b29a      	uxth	r2, r3
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	6819      	ldr	r1, [r3, #0]
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	1c58      	adds	r0, r3, #1
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	685b      	ldr	r3, [r3, #4]
 80083b4:	4298      	cmp	r0, r3
 80083b6:	d305      	bcc.n	80083c4 <CircularQueue_Sense+0x110>
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	685b      	ldr	r3, [r3, #4]
 80083bc:	68f8      	ldr	r0, [r7, #12]
 80083be:	1ac3      	subs	r3, r0, r3
 80083c0:	3301      	adds	r3, #1
 80083c2:	e001      	b.n	80083c8 <CircularQueue_Sense+0x114>
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	3301      	adds	r3, #1
 80083c8:	440b      	add	r3, r1
 80083ca:	781b      	ldrb	r3, [r3, #0]
 80083cc:	b29b      	uxth	r3, r3
 80083ce:	021b      	lsls	r3, r3, #8
 80083d0:	b29b      	uxth	r3, r3
 80083d2:	4413      	add	r3, r2
 80083d4:	b29b      	uxth	r3, r3
 80083d6:	e001      	b.n	80083dc <CircularQueue_Sense+0x128>
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	891b      	ldrh	r3, [r3, #8]
 80083dc:	827b      	strh	r3, [r7, #18]
      }
   }
   /* retrieve element */
    x = q->qBuff + (MOD((FirstElemetPos + elemSizeStorageRoom), q->queueMaxSize));
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	681a      	ldr	r2, [r3, #0]
 80083e2:	7af9      	ldrb	r1, [r7, #11]
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	4419      	add	r1, r3
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	685b      	ldr	r3, [r3, #4]
 80083ec:	4299      	cmp	r1, r3
 80083ee:	d306      	bcc.n	80083fe <CircularQueue_Sense+0x14a>
 80083f0:	7af9      	ldrb	r1, [r7, #11]
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	4419      	add	r1, r3
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	685b      	ldr	r3, [r3, #4]
 80083fa:	1acb      	subs	r3, r1, r3
 80083fc:	e002      	b.n	8008404 <CircularQueue_Sense+0x150>
 80083fe:	7af9      	ldrb	r1, [r7, #11]
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	440b      	add	r3, r1
 8008404:	4413      	add	r3, r2
 8008406:	617b      	str	r3, [r7, #20]
  }
  if (elementSize != NULL)
 8008408:	683b      	ldr	r3, [r7, #0]
 800840a:	2b00      	cmp	r3, #0
 800840c:	d002      	beq.n	8008414 <CircularQueue_Sense+0x160>
  {
    *elementSize = eltSize;
 800840e:	683b      	ldr	r3, [r7, #0]
 8008410:	8a7a      	ldrh	r2, [r7, #18]
 8008412:	801a      	strh	r2, [r3, #0]
  }
  return x;
 8008414:	697b      	ldr	r3, [r7, #20]
}
 8008416:	4618      	mov	r0, r3
 8008418:	371c      	adds	r7, #28
 800841a:	46bd      	mov	sp, r7
 800841c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008420:	4770      	bx	lr
	...

08008424 <LL_FLASH_GetUDN>:
  * @note   The 64-bit UID64 may be used by Firmware to derive BLE 48-bit Device Address EUI-48 or
  *         802.15.4 64-bit Device Address EUI-64.
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 8008424:	b480      	push	{r7}
 8008426:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)UID64_BASE)));
 8008428:	4b03      	ldr	r3, [pc, #12]	; (8008438 <LL_FLASH_GetUDN+0x14>)
 800842a:	681b      	ldr	r3, [r3, #0]
}
 800842c:	4618      	mov	r0, r3
 800842e:	46bd      	mov	sp, r7
 8008430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008434:	4770      	bx	lr
 8008436:	bf00      	nop
 8008438:	1fff7580 	.word	0x1fff7580

0800843c <LL_FLASH_GetDeviceID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the device ID is 0x26
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x26 fo STM32WB55x)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 800843c:	b480      	push	{r7}
 800843e:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 8008440:	4b03      	ldr	r3, [pc, #12]	; (8008450 <LL_FLASH_GetDeviceID+0x14>)
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	b2db      	uxtb	r3, r3
}
 8008446:	4618      	mov	r0, r3
 8008448:	46bd      	mov	sp, r7
 800844a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800844e:	4770      	bx	lr
 8008450:	1fff7584 	.word	0x1fff7584

08008454 <LL_FLASH_GetSTCompanyID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the ST Compagny ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Compagny ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 8008454:	b480      	push	{r7}
 8008456:	af00      	add	r7, sp, #0
  return (uint32_t)(((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U ) & 0x00FFFFFFU);
 8008458:	4b03      	ldr	r3, [pc, #12]	; (8008468 <LL_FLASH_GetSTCompanyID+0x14>)
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	0a1b      	lsrs	r3, r3, #8
}
 800845e:	4618      	mov	r0, r3
 8008460:	46bd      	mov	sp, r7
 8008462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008466:	4770      	bx	lr
 8008468:	1fff7584 	.word	0x1fff7584

0800846c <APP_BLE_Init>:

/* USER CODE END EV */

/* Functions Definition ------------------------------------------------------*/
void APP_BLE_Init( void )
{
 800846c:	b5b0      	push	{r4, r5, r7, lr}
 800846e:	b08c      	sub	sp, #48	; 0x30
 8008470:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APP_BLE_Init_1 */

/* USER CODE END APP_BLE_Init_1 */
  SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 8008472:	4b21      	ldr	r3, [pc, #132]	; (80084f8 <APP_BLE_Init+0x8c>)
 8008474:	463c      	mov	r4, r7
 8008476:	461d      	mov	r5, r3
 8008478:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800847a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800847c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800847e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008480:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8008484:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  };

  /**
   * Initialize Ble Transport Layer
   */
  Ble_Tl_Init( );
 8008488:	f000 f978 	bl	800877c <Ble_Tl_Init>

  /**
   * Do not allow standby in the application
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP_BLE, UTIL_LPM_DISABLE);
 800848c:	2101      	movs	r1, #1
 800848e:	2002      	movs	r0, #2
 8008490:	f001 f8d2 	bl	8009638 <UTIL_LPM_SetOffMode>

  /**
   * Register the hci transport layer to handle BLE User Asynchronous Events
   */
  UTIL_SEQ_RegTask( 1<<CFG_TASK_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, hci_user_evt_proc);
 8008494:	4a19      	ldr	r2, [pc, #100]	; (80084fc <APP_BLE_Init+0x90>)
 8008496:	2100      	movs	r1, #0
 8008498:	2002      	movs	r0, #2
 800849a:	f001 f9e7 	bl	800986c <UTIL_SEQ_RegTask>

  /**
   * Starts the BLE Stack on CPU2
   */
  if (SHCI_C2_BLE_Init( &ble_init_cmd_packet ) != SHCI_Success)
 800849e:	463b      	mov	r3, r7
 80084a0:	4618      	mov	r0, r3
 80084a2:	f7fe fcb9 	bl	8006e18 <SHCI_C2_BLE_Init>
 80084a6:	4603      	mov	r3, r0
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d001      	beq.n	80084b0 <APP_BLE_Init+0x44>
  {
    Error_Handler();
 80084ac:	f7f8 ff56 	bl	800135c <Error_Handler>
  }

  /**
   * Initialization of HCI & GATT & GAP layer
   */
  Ble_Hci_Gap_Gatt_Init();
 80084b0:	f000 f97a 	bl	80087a8 <Ble_Hci_Gap_Gatt_Init>

  /**
   * Initialization of the BLE Services
   */
  SVCCTL_Init();
 80084b4:	f7fe fc0a 	bl	8006ccc <SVCCTL_Init>

  /**
   * Initialization of the BLE App Context
   */
  BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 80084b8:	4b11      	ldr	r3, [pc, #68]	; (8008500 <APP_BLE_Init+0x94>)
 80084ba:	2200      	movs	r2, #0
 80084bc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0xFFFF;
 80084c0:	4b0f      	ldr	r3, [pc, #60]	; (8008500 <APP_BLE_Init+0x94>)
 80084c2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80084c6:	82da      	strh	r2, [r3, #22]
  /**
   * From here, all initialization are BLE application specific
   */
  UTIL_SEQ_RegTask( 1<<CFG_TASK_ADV_CANCEL_ID, UTIL_SEQ_RFU, Adv_Cancel);
 80084c8:	4a0e      	ldr	r2, [pc, #56]	; (8008504 <APP_BLE_Init+0x98>)
 80084ca:	2100      	movs	r1, #0
 80084cc:	2001      	movs	r0, #1
 80084ce:	f001 f9cd 	bl	800986c <UTIL_SEQ_RegTask>
  /**
   * Initialization of ADV - Ad Manufacturer Element - Support OTA Bit Mask
   */
#if(RADIO_ACTIVITY_EVENT != 0)
  aci_hal_set_radio_activity_mask(0x0006);
 80084d2:	2006      	movs	r0, #6
 80084d4:	f7fe fa8e 	bl	80069f4 <aci_hal_set_radio_activity_mask>
  mutex = 1;
#endif
  /**
   * Initialize Custom Template Application
   */
  Custom_APP_Init();
 80084d8:	f000 fc2c 	bl	8008d34 <Custom_APP_Init>
/* USER CODE END APP_BLE_Init_3 */

  /**
   * Make device discoverable
   */
  BleApplicationContext.BleApplicationContext_legacy.advtServUUID[0] = NULL;
 80084dc:	4b08      	ldr	r3, [pc, #32]	; (8008500 <APP_BLE_Init+0x94>)
 80084de:	2200      	movs	r2, #0
 80084e0:	765a      	strb	r2, [r3, #25]
  BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen = 0;
 80084e2:	4b07      	ldr	r3, [pc, #28]	; (8008500 <APP_BLE_Init+0x94>)
 80084e4:	2200      	movs	r2, #0
 80084e6:	761a      	strb	r2, [r3, #24]

  /**
   * Start to Advertise to be connected by a Client
   */
   Adv_Request(APP_BLE_FAST_ADV);
 80084e8:	2001      	movs	r0, #1
 80084ea:	f000 f9f7 	bl	80088dc <Adv_Request>

/* USER CODE BEGIN APP_BLE_Init_2 */

/* USER CODE END APP_BLE_Init_2 */
  return;
 80084ee:	bf00      	nop
}
 80084f0:	3730      	adds	r7, #48	; 0x30
 80084f2:	46bd      	mov	sp, r7
 80084f4:	bdb0      	pop	{r4, r5, r7, pc}
 80084f6:	bf00      	nop
 80084f8:	0800af54 	.word	0x0800af54
 80084fc:	08006ead 	.word	0x08006ead
 8008500:	2000017c 	.word	0x2000017c
 8008504:	08008a19 	.word	0x08008a19

08008508 <SVCCTL_App_Notification>:

SVCCTL_UserEvtFlowStatus_t SVCCTL_App_Notification( void *pckt )
{
 8008508:	b580      	push	{r7, lr}
 800850a:	b08a      	sub	sp, #40	; 0x28
 800850c:	af00      	add	r7, sp, #0
 800850e:	6078      	str	r0, [r7, #4]
  hci_event_pckt *event_pckt;
  evt_le_meta_event *meta_evt;
  evt_blecore_aci *blecore_evt;

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	3301      	adds	r3, #1
 8008514:	627b      	str	r3, [r7, #36]	; 0x24

  /* USER CODE BEGIN SVCCTL_App_Notification */

  /* USER CODE END SVCCTL_App_Notification */

  switch (event_pckt->evt)
 8008516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008518:	781b      	ldrb	r3, [r3, #0]
 800851a:	2bff      	cmp	r3, #255	; 0xff
 800851c:	f000 8082 	beq.w	8008624 <SVCCTL_App_Notification+0x11c>
 8008520:	2bff      	cmp	r3, #255	; 0xff
 8008522:	f300 8108 	bgt.w	8008736 <SVCCTL_App_Notification+0x22e>
 8008526:	2b05      	cmp	r3, #5
 8008528:	d002      	beq.n	8008530 <SVCCTL_App_Notification+0x28>
 800852a:	2b3e      	cmp	r3, #62	; 0x3e
 800852c:	d02d      	beq.n	800858a <SVCCTL_App_Notification+0x82>

      default:
      /* USER CODE BEGIN ECODE_DEFAULT*/

      /* USER CODE END ECODE_DEFAULT*/
      break;
 800852e:	e102      	b.n	8008736 <SVCCTL_App_Notification+0x22e>
      disconnection_complete_event = (hci_disconnection_complete_event_rp0 *) event_pckt->data;
 8008530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008532:	3302      	adds	r3, #2
 8008534:	60bb      	str	r3, [r7, #8]
      if (disconnection_complete_event->Connection_Handle == BleApplicationContext.BleApplicationContext_legacy.connectionHandle)
 8008536:	68bb      	ldr	r3, [r7, #8]
 8008538:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800853c:	b29a      	uxth	r2, r3
 800853e:	4b82      	ldr	r3, [pc, #520]	; (8008748 <SVCCTL_App_Notification+0x240>)
 8008540:	8adb      	ldrh	r3, [r3, #22]
 8008542:	429a      	cmp	r2, r3
 8008544:	d113      	bne.n	800856e <SVCCTL_App_Notification+0x66>
        BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0;
 8008546:	4b80      	ldr	r3, [pc, #512]	; (8008748 <SVCCTL_App_Notification+0x240>)
 8008548:	2200      	movs	r2, #0
 800854a:	82da      	strh	r2, [r3, #22]
        BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800854c:	4b7e      	ldr	r3, [pc, #504]	; (8008748 <SVCCTL_App_Notification+0x240>)
 800854e:	2200      	movs	r2, #0
 8008550:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
        APP_DBG_MSG("\r\n\r** DISCONNECTION EVENT WITH CLIENT \n");
 8008554:	487d      	ldr	r0, [pc, #500]	; (800874c <SVCCTL_App_Notification+0x244>)
 8008556:	f7ff f99f 	bl	8007898 <DbgTraceGetFileName>
 800855a:	4601      	mov	r1, r0
 800855c:	f44f 73c6 	mov.w	r3, #396	; 0x18c
 8008560:	4a7b      	ldr	r2, [pc, #492]	; (8008750 <SVCCTL_App_Notification+0x248>)
 8008562:	487c      	ldr	r0, [pc, #496]	; (8008754 <SVCCTL_App_Notification+0x24c>)
 8008564:	f001 fb06 	bl	8009b74 <iprintf>
 8008568:	487b      	ldr	r0, [pc, #492]	; (8008758 <SVCCTL_App_Notification+0x250>)
 800856a:	f001 fb89 	bl	8009c80 <puts>
      Adv_Request(APP_BLE_FAST_ADV);
 800856e:	2001      	movs	r0, #1
 8008570:	f000 f9b4 	bl	80088dc <Adv_Request>
      handleNotification.Custom_Evt_Opcode = CUSTOM_DISCON_HANDLE_EVT;
 8008574:	4b79      	ldr	r3, [pc, #484]	; (800875c <SVCCTL_App_Notification+0x254>)
 8008576:	2201      	movs	r2, #1
 8008578:	701a      	strb	r2, [r3, #0]
      handleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 800857a:	4b73      	ldr	r3, [pc, #460]	; (8008748 <SVCCTL_App_Notification+0x240>)
 800857c:	8ada      	ldrh	r2, [r3, #22]
 800857e:	4b77      	ldr	r3, [pc, #476]	; (800875c <SVCCTL_App_Notification+0x254>)
 8008580:	805a      	strh	r2, [r3, #2]
      Custom_APP_Notification(&handleNotification);
 8008582:	4876      	ldr	r0, [pc, #472]	; (800875c <SVCCTL_App_Notification+0x254>)
 8008584:	f000 fbc2 	bl	8008d0c <Custom_APP_Notification>
    break; /* HCI_DISCONNECTION_COMPLETE_EVT_CODE */
 8008588:	e0d8      	b.n	800873c <SVCCTL_App_Notification+0x234>
      meta_evt = (evt_le_meta_event*) event_pckt->data;
 800858a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800858c:	3302      	adds	r3, #2
 800858e:	613b      	str	r3, [r7, #16]
      switch (meta_evt->subevent)
 8008590:	693b      	ldr	r3, [r7, #16]
 8008592:	781b      	ldrb	r3, [r3, #0]
 8008594:	2b01      	cmp	r3, #1
 8008596:	d00f      	beq.n	80085b8 <SVCCTL_App_Notification+0xb0>
 8008598:	2b03      	cmp	r3, #3
 800859a:	d141      	bne.n	8008620 <SVCCTL_App_Notification+0x118>
          APP_DBG_MSG("\r\n\r** CONNECTION UPDATE EVENT WITH CLIENT \n");
 800859c:	486b      	ldr	r0, [pc, #428]	; (800874c <SVCCTL_App_Notification+0x244>)
 800859e:	f7ff f97b 	bl	8007898 <DbgTraceGetFileName>
 80085a2:	4601      	mov	r1, r0
 80085a4:	f44f 73d4 	mov.w	r3, #424	; 0x1a8
 80085a8:	4a69      	ldr	r2, [pc, #420]	; (8008750 <SVCCTL_App_Notification+0x248>)
 80085aa:	486a      	ldr	r0, [pc, #424]	; (8008754 <SVCCTL_App_Notification+0x24c>)
 80085ac:	f001 fae2 	bl	8009b74 <iprintf>
 80085b0:	486b      	ldr	r0, [pc, #428]	; (8008760 <SVCCTL_App_Notification+0x258>)
 80085b2:	f001 fb65 	bl	8009c80 <puts>
          break;
 80085b6:	e034      	b.n	8008622 <SVCCTL_App_Notification+0x11a>
          connection_complete_event = (hci_le_connection_complete_event_rp0 *) meta_evt->data;
 80085b8:	693b      	ldr	r3, [r7, #16]
 80085ba:	3301      	adds	r3, #1
 80085bc:	60fb      	str	r3, [r7, #12]
          APP_DBG_MSG("HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE for connection handle 0x%x\n", connection_complete_event->Connection_Handle);
 80085be:	4863      	ldr	r0, [pc, #396]	; (800874c <SVCCTL_App_Notification+0x244>)
 80085c0:	f7ff f96a 	bl	8007898 <DbgTraceGetFileName>
 80085c4:	4601      	mov	r1, r0
 80085c6:	f240 13b7 	movw	r3, #439	; 0x1b7
 80085ca:	4a61      	ldr	r2, [pc, #388]	; (8008750 <SVCCTL_App_Notification+0x248>)
 80085cc:	4861      	ldr	r0, [pc, #388]	; (8008754 <SVCCTL_App_Notification+0x24c>)
 80085ce:	f001 fad1 	bl	8009b74 <iprintf>
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80085d8:	b29b      	uxth	r3, r3
 80085da:	4619      	mov	r1, r3
 80085dc:	4861      	ldr	r0, [pc, #388]	; (8008764 <SVCCTL_App_Notification+0x25c>)
 80085de:	f001 fac9 	bl	8009b74 <iprintf>
          if (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_CONNECTING)
 80085e2:	4b59      	ldr	r3, [pc, #356]	; (8008748 <SVCCTL_App_Notification+0x240>)
 80085e4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80085e8:	2b04      	cmp	r3, #4
 80085ea:	d104      	bne.n	80085f6 <SVCCTL_App_Notification+0xee>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_CLIENT;
 80085ec:	4b56      	ldr	r3, [pc, #344]	; (8008748 <SVCCTL_App_Notification+0x240>)
 80085ee:	2206      	movs	r2, #6
 80085f0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
 80085f4:	e003      	b.n	80085fe <SVCCTL_App_Notification+0xf6>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_SERVER;
 80085f6:	4b54      	ldr	r3, [pc, #336]	; (8008748 <SVCCTL_App_Notification+0x240>)
 80085f8:	2205      	movs	r2, #5
 80085fa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
          BleApplicationContext.BleApplicationContext_legacy.connectionHandle = connection_complete_event->Connection_Handle;
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8008604:	b29a      	uxth	r2, r3
 8008606:	4b50      	ldr	r3, [pc, #320]	; (8008748 <SVCCTL_App_Notification+0x240>)
 8008608:	82da      	strh	r2, [r3, #22]
          handleNotification.Custom_Evt_Opcode = CUSTOM_CONN_HANDLE_EVT;
 800860a:	4b54      	ldr	r3, [pc, #336]	; (800875c <SVCCTL_App_Notification+0x254>)
 800860c:	2200      	movs	r2, #0
 800860e:	701a      	strb	r2, [r3, #0]
          handleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 8008610:	4b4d      	ldr	r3, [pc, #308]	; (8008748 <SVCCTL_App_Notification+0x240>)
 8008612:	8ada      	ldrh	r2, [r3, #22]
 8008614:	4b51      	ldr	r3, [pc, #324]	; (800875c <SVCCTL_App_Notification+0x254>)
 8008616:	805a      	strh	r2, [r3, #2]
          Custom_APP_Notification(&handleNotification);
 8008618:	4850      	ldr	r0, [pc, #320]	; (800875c <SVCCTL_App_Notification+0x254>)
 800861a:	f000 fb77 	bl	8008d0c <Custom_APP_Notification>
        break; /* HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE */
 800861e:	e000      	b.n	8008622 <SVCCTL_App_Notification+0x11a>
          break;
 8008620:	bf00      	nop
    break; /* HCI_LE_META_EVT_CODE */
 8008622:	e08b      	b.n	800873c <SVCCTL_App_Notification+0x234>
      blecore_evt = (evt_blecore_aci*) event_pckt->data;
 8008624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008626:	3302      	adds	r3, #2
 8008628:	623b      	str	r3, [r7, #32]
      switch (blecore_evt->ecode)
 800862a:	6a3b      	ldr	r3, [r7, #32]
 800862c:	881b      	ldrh	r3, [r3, #0]
 800862e:	b29b      	uxth	r3, r3
 8008630:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008634:	d07b      	beq.n	800872e <SVCCTL_App_Notification+0x226>
 8008636:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800863a:	dc7e      	bgt.n	800873a <SVCCTL_App_Notification+0x232>
 800863c:	2b04      	cmp	r3, #4
 800863e:	d078      	beq.n	8008732 <SVCCTL_App_Notification+0x22a>
 8008640:	2b04      	cmp	r3, #4
 8008642:	db7a      	blt.n	800873a <SVCCTL_App_Notification+0x232>
 8008644:	f240 420a 	movw	r2, #1034	; 0x40a
 8008648:	4293      	cmp	r3, r2
 800864a:	dc76      	bgt.n	800873a <SVCCTL_App_Notification+0x232>
 800864c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008650:	dd73      	ble.n	800873a <SVCCTL_App_Notification+0x232>
 8008652:	f2a3 4301 	subw	r3, r3, #1025	; 0x401
 8008656:	2b09      	cmp	r3, #9
 8008658:	d86f      	bhi.n	800873a <SVCCTL_App_Notification+0x232>
 800865a:	a201      	add	r2, pc, #4	; (adr r2, 8008660 <SVCCTL_App_Notification+0x158>)
 800865c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008660:	08008707 	.word	0x08008707
 8008664:	080086c1 	.word	0x080086c1
 8008668:	0800873b 	.word	0x0800873b
 800866c:	0800873b 	.word	0x0800873b
 8008670:	0800873b 	.word	0x0800873b
 8008674:	0800873b 	.word	0x0800873b
 8008678:	08008689 	.word	0x08008689
 800867c:	0800873b 	.word	0x0800873b
 8008680:	080086cf 	.word	0x080086cf
 8008684:	080086a5 	.word	0x080086a5
        APP_DBG_MSG("\r\n\r** ACI_GAP_PROC_COMPLETE_VSEVT_CODE \n");
 8008688:	4830      	ldr	r0, [pc, #192]	; (800874c <SVCCTL_App_Notification+0x244>)
 800868a:	f7ff f905 	bl	8007898 <DbgTraceGetFileName>
 800868e:	4601      	mov	r1, r0
 8008690:	f44f 73f9 	mov.w	r3, #498	; 0x1f2
 8008694:	4a2e      	ldr	r2, [pc, #184]	; (8008750 <SVCCTL_App_Notification+0x248>)
 8008696:	482f      	ldr	r0, [pc, #188]	; (8008754 <SVCCTL_App_Notification+0x24c>)
 8008698:	f001 fa6c 	bl	8009b74 <iprintf>
 800869c:	4832      	ldr	r0, [pc, #200]	; (8008768 <SVCCTL_App_Notification+0x260>)
 800869e:	f001 faef 	bl	8009c80 <puts>
          break; /* ACI_GAP_PROC_COMPLETE_VSEVT_CODE */
 80086a2:	e047      	b.n	8008734 <SVCCTL_App_Notification+0x22c>
         APP_DBG_MSG("\r\n\r** ACI_GAP_KEYPRESS_NOTIFICATION_VSEVT_CODE \n");
 80086a4:	4829      	ldr	r0, [pc, #164]	; (800874c <SVCCTL_App_Notification+0x244>)
 80086a6:	f7ff f8f7 	bl	8007898 <DbgTraceGetFileName>
 80086aa:	4601      	mov	r1, r0
 80086ac:	f240 2301 	movw	r3, #513	; 0x201
 80086b0:	4a27      	ldr	r2, [pc, #156]	; (8008750 <SVCCTL_App_Notification+0x248>)
 80086b2:	4828      	ldr	r0, [pc, #160]	; (8008754 <SVCCTL_App_Notification+0x24c>)
 80086b4:	f001 fa5e 	bl	8009b74 <iprintf>
 80086b8:	482c      	ldr	r0, [pc, #176]	; (800876c <SVCCTL_App_Notification+0x264>)
 80086ba:	f001 fae1 	bl	8009c80 <puts>
        break;
 80086be:	e039      	b.n	8008734 <SVCCTL_App_Notification+0x22c>
            aci_gap_pass_key_resp(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, CFG_FIXED_PIN);
 80086c0:	4b21      	ldr	r3, [pc, #132]	; (8008748 <SVCCTL_App_Notification+0x240>)
 80086c2:	8adb      	ldrh	r3, [r3, #22]
 80086c4:	492a      	ldr	r1, [pc, #168]	; (8008770 <SVCCTL_App_Notification+0x268>)
 80086c6:	4618      	mov	r0, r3
 80086c8:	f7fd fcd6 	bl	8006078 <aci_gap_pass_key_resp>
        break;
 80086cc:	e032      	b.n	8008734 <SVCCTL_App_Notification+0x22c>
            evt_numeric_value = (aci_gap_numeric_comparison_value_event_rp0 *)blecore_evt->data;
 80086ce:	6a3b      	ldr	r3, [r7, #32]
 80086d0:	3302      	adds	r3, #2
 80086d2:	61fb      	str	r3, [r7, #28]
            numeric_value = evt_numeric_value->Numeric_Value;
 80086d4:	69fb      	ldr	r3, [r7, #28]
 80086d6:	f8d3 3002 	ldr.w	r3, [r3, #2]
 80086da:	61bb      	str	r3, [r7, #24]
            APP_DBG_MSG("numeric_value = %ld\n", numeric_value);
 80086dc:	481b      	ldr	r0, [pc, #108]	; (800874c <SVCCTL_App_Notification+0x244>)
 80086de:	f7ff f8db 	bl	8007898 <DbgTraceGetFileName>
 80086e2:	4601      	mov	r1, r0
 80086e4:	f240 230b 	movw	r3, #523	; 0x20b
 80086e8:	4a19      	ldr	r2, [pc, #100]	; (8008750 <SVCCTL_App_Notification+0x248>)
 80086ea:	481a      	ldr	r0, [pc, #104]	; (8008754 <SVCCTL_App_Notification+0x24c>)
 80086ec:	f001 fa42 	bl	8009b74 <iprintf>
 80086f0:	69b9      	ldr	r1, [r7, #24]
 80086f2:	4820      	ldr	r0, [pc, #128]	; (8008774 <SVCCTL_App_Notification+0x26c>)
 80086f4:	f001 fa3e 	bl	8009b74 <iprintf>
            aci_gap_numeric_comparison_value_confirm_yesno(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, YES);
 80086f8:	4b13      	ldr	r3, [pc, #76]	; (8008748 <SVCCTL_App_Notification+0x240>)
 80086fa:	8adb      	ldrh	r3, [r3, #22]
 80086fc:	2101      	movs	r1, #1
 80086fe:	4618      	mov	r0, r3
 8008700:	f7fd fe1c 	bl	800633c <aci_gap_numeric_comparison_value_confirm_yesno>
        break;
 8008704:	e016      	b.n	8008734 <SVCCTL_App_Notification+0x22c>
            pairing_complete = (aci_gap_pairing_complete_event_rp0*)blecore_evt->data;
 8008706:	6a3b      	ldr	r3, [r7, #32]
 8008708:	3302      	adds	r3, #2
 800870a:	617b      	str	r3, [r7, #20]
            APP_DBG_MSG("BLE_CTRL_App_Notification: ACI_GAP_PAIRING_COMPLETE_VSEVT_CODE, pairing_complete->Status = %d\n",pairing_complete->Status);
 800870c:	480f      	ldr	r0, [pc, #60]	; (800874c <SVCCTL_App_Notification+0x244>)
 800870e:	f7ff f8c3 	bl	8007898 <DbgTraceGetFileName>
 8008712:	4601      	mov	r1, r0
 8008714:	f240 2311 	movw	r3, #529	; 0x211
 8008718:	4a0d      	ldr	r2, [pc, #52]	; (8008750 <SVCCTL_App_Notification+0x248>)
 800871a:	480e      	ldr	r0, [pc, #56]	; (8008754 <SVCCTL_App_Notification+0x24c>)
 800871c:	f001 fa2a 	bl	8009b74 <iprintf>
 8008720:	697b      	ldr	r3, [r7, #20]
 8008722:	789b      	ldrb	r3, [r3, #2]
 8008724:	4619      	mov	r1, r3
 8008726:	4814      	ldr	r0, [pc, #80]	; (8008778 <SVCCTL_App_Notification+0x270>)
 8008728:	f001 fa24 	bl	8009b74 <iprintf>
        break;
 800872c:	e002      	b.n	8008734 <SVCCTL_App_Notification+0x22c>
      break;
 800872e:	bf00      	nop
 8008730:	e003      	b.n	800873a <SVCCTL_App_Notification+0x232>
          break; /* ACI_HAL_END_OF_RADIO_ACTIVITY_VSEVT_CODE */
 8008732:	bf00      	nop
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 8008734:	e001      	b.n	800873a <SVCCTL_App_Notification+0x232>
      break;
 8008736:	bf00      	nop
 8008738:	e000      	b.n	800873c <SVCCTL_App_Notification+0x234>
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 800873a:	bf00      	nop
  }

  return (SVCCTL_UserEvtFlowEnable);
 800873c:	2301      	movs	r3, #1
}
 800873e:	4618      	mov	r0, r3
 8008740:	3728      	adds	r7, #40	; 0x28
 8008742:	46bd      	mov	sp, r7
 8008744:	bd80      	pop	{r7, pc}
 8008746:	bf00      	nop
 8008748:	2000017c 	.word	0x2000017c
 800874c:	0800af84 	.word	0x0800af84
 8008750:	0800b5c8 	.word	0x0800b5c8
 8008754:	0800afa0 	.word	0x0800afa0
 8008758:	0800afb4 	.word	0x0800afb4
 800875c:	200014d4 	.word	0x200014d4
 8008760:	0800afdc 	.word	0x0800afdc
 8008764:	0800b008 	.word	0x0800b008
 8008768:	0800b04c 	.word	0x0800b04c
 800876c:	0800b074 	.word	0x0800b074
 8008770:	0001b207 	.word	0x0001b207
 8008774:	0800b0a4 	.word	0x0800b0a4
 8008778:	0800b0bc 	.word	0x0800b0bc

0800877c <Ble_Tl_Init>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Ble_Tl_Init( void )
{
 800877c:	b580      	push	{r7, lr}
 800877e:	b082      	sub	sp, #8
 8008780:	af00      	add	r7, sp, #0
  HCI_TL_HciInitConf_t Hci_Tl_Init_Conf;

  Hci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&BleCmdBuffer;
 8008782:	4b06      	ldr	r3, [pc, #24]	; (800879c <Ble_Tl_Init+0x20>)
 8008784:	603b      	str	r3, [r7, #0]
  Hci_Tl_Init_Conf.StatusNotCallBack = BLE_StatusNot;
 8008786:	4b06      	ldr	r3, [pc, #24]	; (80087a0 <Ble_Tl_Init+0x24>)
 8008788:	607b      	str	r3, [r7, #4]
  hci_init(BLE_UserEvtRx, (void*) &Hci_Tl_Init_Conf);
 800878a:	463b      	mov	r3, r7
 800878c:	4619      	mov	r1, r3
 800878e:	4805      	ldr	r0, [pc, #20]	; (80087a4 <Ble_Tl_Init+0x28>)
 8008790:	f7fe fb70 	bl	8006e74 <hci_init>

  return;
 8008794:	bf00      	nop
}
 8008796:	3708      	adds	r7, #8
 8008798:	46bd      	mov	sp, r7
 800879a:	bd80      	pop	{r7, pc}
 800879c:	200300d4 	.word	0x200300d4
 80087a0:	08008b41 	.word	0x08008b41
 80087a4:	08008b09 	.word	0x08008b09

080087a8 <Ble_Hci_Gap_Gatt_Init>:

static void Ble_Hci_Gap_Gatt_Init(void){
 80087a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80087aa:	b08d      	sub	sp, #52	; 0x34
 80087ac:	af06      	add	r7, sp, #24

  uint8_t role;
  uint16_t gap_service_handle, gap_dev_name_char_handle, gap_appearance_char_handle;
  const uint8_t *bd_addr;
  uint16_t appearance[1] = { BLE_CFG_GAP_APPEARANCE };
 80087ae:	2300      	movs	r3, #0
 80087b0:	80bb      	strh	r3, [r7, #4]

  /**
   * Initialize HCI layer
   */
  /*HCI Reset to synchronise BLE Stack*/
  hci_reset();
 80087b2:	f7fe f969 	bl	8006a88 <hci_reset>

  /**
   * Write the BD Address
   */

  bd_addr = BleGetBdAddress();
 80087b6:	f000 f8eb 	bl	8008990 <BleGetBdAddress>
 80087ba:	6178      	str	r0, [r7, #20]
  aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET,
 80087bc:	697a      	ldr	r2, [r7, #20]
 80087be:	2106      	movs	r1, #6
 80087c0:	2000      	movs	r0, #0
 80087c2:	f7fe f857 	bl	8006874 <aci_hal_write_config_data>
#endif

  /**
   * Write Identity root key used to derive LTK and CSRK
   */
  aci_hal_write_config_data( CONFIG_DATA_IR_OFFSET, CONFIG_DATA_IR_LEN, (uint8_t*)BLE_CFG_IR_VALUE );
 80087c6:	4a40      	ldr	r2, [pc, #256]	; (80088c8 <Ble_Hci_Gap_Gatt_Init+0x120>)
 80087c8:	2110      	movs	r1, #16
 80087ca:	2018      	movs	r0, #24
 80087cc:	f7fe f852 	bl	8006874 <aci_hal_write_config_data>

  /**
   * Write Encryption root key used to derive LTK and CSRK
   */
  aci_hal_write_config_data( CONFIG_DATA_ER_OFFSET, CONFIG_DATA_ER_LEN, (uint8_t*)BLE_CFG_ER_VALUE );
 80087d0:	4a3e      	ldr	r2, [pc, #248]	; (80088cc <Ble_Hci_Gap_Gatt_Init+0x124>)
 80087d2:	2110      	movs	r1, #16
 80087d4:	2008      	movs	r0, #8
 80087d6:	f7fe f84d 	bl	8006874 <aci_hal_write_config_data>

  /**
   * Set TX Power to 0dBm.
   */
  aci_hal_set_tx_power_level(1, CFG_TX_POWER);
 80087da:	2118      	movs	r1, #24
 80087dc:	2001      	movs	r0, #1
 80087de:	f7fe f8b2 	bl	8006946 <aci_hal_set_tx_power_level>

  /**
   * Initialize GATT interface
   */
  aci_gatt_init();
 80087e2:	f7fd fe02 	bl	80063ea <aci_gatt_init>

  /**
   * Initialize GAP interface
   */
  role = 0;
 80087e6:	2300      	movs	r3, #0
 80087e8:	74fb      	strb	r3, [r7, #19]

#if (BLE_CFG_PERIPHERAL == 1)
  role |= GAP_PERIPHERAL_ROLE;
 80087ea:	7cfb      	ldrb	r3, [r7, #19]
 80087ec:	f043 0301 	orr.w	r3, r3, #1
 80087f0:	74fb      	strb	r3, [r7, #19]

#if (BLE_CFG_CENTRAL == 1)
  role |= GAP_CENTRAL_ROLE;
#endif

  if (role > 0)
 80087f2:	7cfb      	ldrb	r3, [r7, #19]
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d01d      	beq.n	8008834 <Ble_Hci_Gap_Gatt_Init+0x8c>
  {
    const char *name = CFG_GAP_DEVICE_NAME;
 80087f8:	4b35      	ldr	r3, [pc, #212]	; (80088d0 <Ble_Hci_Gap_Gatt_Init+0x128>)
 80087fa:	60fb      	str	r3, [r7, #12]
    aci_gap_init(role,
 80087fc:	f107 020a 	add.w	r2, r7, #10
 8008800:	7cf8      	ldrb	r0, [r7, #19]
 8008802:	1dbb      	adds	r3, r7, #6
 8008804:	9301      	str	r3, [sp, #4]
 8008806:	f107 0308 	add.w	r3, r7, #8
 800880a:	9300      	str	r3, [sp, #0]
 800880c:	4613      	mov	r3, r2
 800880e:	2209      	movs	r2, #9
 8008810:	2100      	movs	r1, #0
 8008812:	f7fd fc88 	bl	8006126 <aci_gap_init>
                 CFG_GAP_DEVICE_NAME_LENGTH,
                 &gap_service_handle,
                 &gap_dev_name_char_handle,
                 &gap_appearance_char_handle);

    if (aci_gatt_update_char_value(gap_service_handle, gap_dev_name_char_handle, 0, strlen(name), (uint8_t *) name))
 8008816:	897c      	ldrh	r4, [r7, #10]
 8008818:	893d      	ldrh	r5, [r7, #8]
 800881a:	68f8      	ldr	r0, [r7, #12]
 800881c:	f7f7 fcb0 	bl	8000180 <strlen>
 8008820:	4603      	mov	r3, r0
 8008822:	b2da      	uxtb	r2, r3
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	9300      	str	r3, [sp, #0]
 8008828:	4613      	mov	r3, r2
 800882a:	2200      	movs	r2, #0
 800882c:	4629      	mov	r1, r5
 800882e:	4620      	mov	r0, r4
 8008830:	f7fd ff99 	bl	8006766 <aci_gatt_update_char_value>
    {
      BLE_DBG_SVCCTL_MSG("Device Name aci_gatt_update_char_value failed.\n");
    }
  }

  if(aci_gatt_update_char_value(gap_service_handle,
 8008834:	8978      	ldrh	r0, [r7, #10]
 8008836:	88f9      	ldrh	r1, [r7, #6]
 8008838:	1d3b      	adds	r3, r7, #4
 800883a:	9300      	str	r3, [sp, #0]
 800883c:	2302      	movs	r3, #2
 800883e:	2200      	movs	r2, #0
 8008840:	f7fd ff91 	bl	8006766 <aci_gatt_update_char_value>
    BLE_DBG_SVCCTL_MSG("Appearance aci_gatt_update_char_value failed.\n");
  }
  /**
   * Initialize Default PHY
   */
  hci_le_set_default_phy(ALL_PHYS_PREFERENCE,TX_2M_PREFERRED,RX_2M_PREFERRED);
 8008844:	2202      	movs	r2, #2
 8008846:	2102      	movs	r1, #2
 8008848:	2000      	movs	r0, #0
 800884a:	f7fe f941 	bl	8006ad0 <hci_le_set_default_phy>

  /**
   * Initialize IO capability
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability = CFG_IO_CAPABILITY;
 800884e:	4b21      	ldr	r3, [pc, #132]	; (80088d4 <Ble_Hci_Gap_Gatt_Init+0x12c>)
 8008850:	2201      	movs	r2, #1
 8008852:	701a      	strb	r2, [r3, #0]
  aci_gap_set_io_capability(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability);
 8008854:	4b1f      	ldr	r3, [pc, #124]	; (80088d4 <Ble_Hci_Gap_Gatt_Init+0x12c>)
 8008856:	781b      	ldrb	r3, [r3, #0]
 8008858:	4618      	mov	r0, r3
 800885a:	f7fd fb1b 	bl	8005e94 <aci_gap_set_io_capability>

  /**
   * Initialize authentication
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.mitm_mode = CFG_MITM_PROTECTION;
 800885e:	4b1d      	ldr	r3, [pc, #116]	; (80088d4 <Ble_Hci_Gap_Gatt_Init+0x12c>)
 8008860:	2201      	movs	r2, #1
 8008862:	705a      	strb	r2, [r3, #1]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin = CFG_ENCRYPTION_KEY_SIZE_MIN;
 8008864:	4b1b      	ldr	r3, [pc, #108]	; (80088d4 <Ble_Hci_Gap_Gatt_Init+0x12c>)
 8008866:	2208      	movs	r2, #8
 8008868:	711a      	strb	r2, [r3, #4]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax = CFG_ENCRYPTION_KEY_SIZE_MAX;
 800886a:	4b1a      	ldr	r3, [pc, #104]	; (80088d4 <Ble_Hci_Gap_Gatt_Init+0x12c>)
 800886c:	2210      	movs	r2, #16
 800886e:	715a      	strb	r2, [r3, #5]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin = CFG_USED_FIXED_PIN;
 8008870:	4b18      	ldr	r3, [pc, #96]	; (80088d4 <Ble_Hci_Gap_Gatt_Init+0x12c>)
 8008872:	2200      	movs	r2, #0
 8008874:	70da      	strb	r2, [r3, #3]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin = CFG_FIXED_PIN;
 8008876:	4b17      	ldr	r3, [pc, #92]	; (80088d4 <Ble_Hci_Gap_Gatt_Init+0x12c>)
 8008878:	4a17      	ldr	r2, [pc, #92]	; (80088d8 <Ble_Hci_Gap_Gatt_Init+0x130>)
 800887a:	609a      	str	r2, [r3, #8]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode = CFG_BONDING_MODE;
 800887c:	4b15      	ldr	r3, [pc, #84]	; (80088d4 <Ble_Hci_Gap_Gatt_Init+0x12c>)
 800887e:	2200      	movs	r2, #0
 8008880:	709a      	strb	r2, [r3, #2]

  aci_gap_set_authentication_requirement(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode,
 8008882:	4b14      	ldr	r3, [pc, #80]	; (80088d4 <Ble_Hci_Gap_Gatt_Init+0x12c>)
 8008884:	789c      	ldrb	r4, [r3, #2]
 8008886:	4b13      	ldr	r3, [pc, #76]	; (80088d4 <Ble_Hci_Gap_Gatt_Init+0x12c>)
 8008888:	785d      	ldrb	r5, [r3, #1]
 800888a:	4b12      	ldr	r3, [pc, #72]	; (80088d4 <Ble_Hci_Gap_Gatt_Init+0x12c>)
 800888c:	791b      	ldrb	r3, [r3, #4]
 800888e:	4a11      	ldr	r2, [pc, #68]	; (80088d4 <Ble_Hci_Gap_Gatt_Init+0x12c>)
 8008890:	7952      	ldrb	r2, [r2, #5]
 8008892:	4910      	ldr	r1, [pc, #64]	; (80088d4 <Ble_Hci_Gap_Gatt_Init+0x12c>)
 8008894:	78c9      	ldrb	r1, [r1, #3]
 8008896:	480f      	ldr	r0, [pc, #60]	; (80088d4 <Ble_Hci_Gap_Gatt_Init+0x12c>)
 8008898:	6880      	ldr	r0, [r0, #8]
 800889a:	2600      	movs	r6, #0
 800889c:	9604      	str	r6, [sp, #16]
 800889e:	9003      	str	r0, [sp, #12]
 80088a0:	9102      	str	r1, [sp, #8]
 80088a2:	9201      	str	r2, [sp, #4]
 80088a4:	9300      	str	r3, [sp, #0]
 80088a6:	2300      	movs	r3, #0
 80088a8:	2201      	movs	r2, #1
 80088aa:	4629      	mov	r1, r5
 80088ac:	4620      	mov	r0, r4
 80088ae:	f7fd fb3b 	bl	8005f28 <aci_gap_set_authentication_requirement>
                                         );

  /**
   * Initialize whitelist
   */
   if (BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode)
 80088b2:	4b08      	ldr	r3, [pc, #32]	; (80088d4 <Ble_Hci_Gap_Gatt_Init+0x12c>)
 80088b4:	789b      	ldrb	r3, [r3, #2]
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d001      	beq.n	80088be <Ble_Hci_Gap_Gatt_Init+0x116>
   {
     aci_gap_configure_whitelist();
 80088ba:	f7fd fd1b 	bl	80062f4 <aci_gap_configure_whitelist>
   }
}
 80088be:	bf00      	nop
 80088c0:	371c      	adds	r7, #28
 80088c2:	46bd      	mov	sp, r7
 80088c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80088c6:	bf00      	nop
 80088c8:	0800b5a8 	.word	0x0800b5a8
 80088cc:	0800b5b8 	.word	0x0800b5b8
 80088d0:	0800b11c 	.word	0x0800b11c
 80088d4:	2000017c 	.word	0x2000017c
 80088d8:	0001b207 	.word	0x0001b207

080088dc <Adv_Request>:

static void Adv_Request(APP_BLE_ConnStatus_t New_Status)
{
 80088dc:	b580      	push	{r7, lr}
 80088de:	b08c      	sub	sp, #48	; 0x30
 80088e0:	af08      	add	r7, sp, #32
 80088e2:	4603      	mov	r3, r0
 80088e4:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 80088e6:	2342      	movs	r3, #66	; 0x42
 80088e8:	73fb      	strb	r3, [r7, #15]

    BleApplicationContext.Device_Connection_Status = New_Status;
 80088ea:	4a22      	ldr	r2, [pc, #136]	; (8008974 <Adv_Request+0x98>)
 80088ec:	79fb      	ldrb	r3, [r7, #7]
 80088ee:	f882 3080 	strb.w	r3, [r2, #128]	; 0x80
    /* Start Fast or Low Power Advertising */
    ret = aci_gap_set_discoverable(
 80088f2:	2300      	movs	r3, #0
 80088f4:	9306      	str	r3, [sp, #24]
 80088f6:	2300      	movs	r3, #0
 80088f8:	9305      	str	r3, [sp, #20]
 80088fa:	2300      	movs	r3, #0
 80088fc:	9304      	str	r3, [sp, #16]
 80088fe:	2300      	movs	r3, #0
 8008900:	9303      	str	r3, [sp, #12]
 8008902:	2300      	movs	r3, #0
 8008904:	9302      	str	r3, [sp, #8]
 8008906:	2300      	movs	r3, #0
 8008908:	9301      	str	r3, [sp, #4]
 800890a:	2300      	movs	r3, #0
 800890c:	9300      	str	r3, [sp, #0]
 800890e:	2300      	movs	r3, #0
 8008910:	22a0      	movs	r2, #160	; 0xa0
 8008912:	2180      	movs	r1, #128	; 0x80
 8008914:	2000      	movs	r0, #0
 8008916:	f7fd f9df 	bl	8005cd8 <aci_gap_set_discoverable>
 800891a:	4603      	mov	r3, r0
 800891c:	73fb      	strb	r3, [r7, #15]
        0,
        0,
        0);

    /* Update Advertising data */
    ret = aci_gap_update_adv_data(sizeof(ad_data), (uint8_t*) ad_data);
 800891e:	4916      	ldr	r1, [pc, #88]	; (8008978 <Adv_Request+0x9c>)
 8008920:	200f      	movs	r0, #15
 8008922:	f7fd fc8b 	bl	800623c <aci_gap_update_adv_data>
 8008926:	4603      	mov	r3, r0
 8008928:	73fb      	strb	r3, [r7, #15]

    if (ret == BLE_STATUS_SUCCESS)
 800892a:	7bfb      	ldrb	r3, [r7, #15]
 800892c:	2b00      	cmp	r3, #0
 800892e:	d10d      	bne.n	800894c <Adv_Request+0x70>
    {
        APP_DBG_MSG("Successfully Start Fast Advertising \n" );
 8008930:	4812      	ldr	r0, [pc, #72]	; (800897c <Adv_Request+0xa0>)
 8008932:	f7fe ffb1 	bl	8007898 <DbgTraceGetFileName>
 8008936:	4601      	mov	r1, r0
 8008938:	f240 3305 	movw	r3, #773	; 0x305
 800893c:	4a10      	ldr	r2, [pc, #64]	; (8008980 <Adv_Request+0xa4>)
 800893e:	4811      	ldr	r0, [pc, #68]	; (8008984 <Adv_Request+0xa8>)
 8008940:	f001 f918 	bl	8009b74 <iprintf>
 8008944:	4810      	ldr	r0, [pc, #64]	; (8008988 <Adv_Request+0xac>)
 8008946:	f001 f99b 	bl	8009c80 <puts>
    else
    {
        APP_DBG_MSG("Start Fast Advertising Failed , result: %d \n", ret);
    }

  return;
 800894a:	e00f      	b.n	800896c <Adv_Request+0x90>
        APP_DBG_MSG("Start Fast Advertising Failed , result: %d \n", ret);
 800894c:	480b      	ldr	r0, [pc, #44]	; (800897c <Adv_Request+0xa0>)
 800894e:	f7fe ffa3 	bl	8007898 <DbgTraceGetFileName>
 8008952:	4601      	mov	r1, r0
 8008954:	f240 3309 	movw	r3, #777	; 0x309
 8008958:	4a09      	ldr	r2, [pc, #36]	; (8008980 <Adv_Request+0xa4>)
 800895a:	480a      	ldr	r0, [pc, #40]	; (8008984 <Adv_Request+0xa8>)
 800895c:	f001 f90a 	bl	8009b74 <iprintf>
 8008960:	7bfb      	ldrb	r3, [r7, #15]
 8008962:	4619      	mov	r1, r3
 8008964:	4809      	ldr	r0, [pc, #36]	; (800898c <Adv_Request+0xb0>)
 8008966:	f001 f905 	bl	8009b74 <iprintf>
  return;
 800896a:	bf00      	nop
}
 800896c:	3710      	adds	r7, #16
 800896e:	46bd      	mov	sp, r7
 8008970:	bd80      	pop	{r7, pc}
 8008972:	bf00      	nop
 8008974:	2000017c 	.word	0x2000017c
 8008978:	20000010 	.word	0x20000010
 800897c:	0800af84 	.word	0x0800af84
 8008980:	0800b5e0 	.word	0x0800b5e0
 8008984:	0800afa0 	.word	0x0800afa0
 8008988:	0800b128 	.word	0x0800b128
 800898c:	0800b150 	.word	0x0800b150

08008990 <BleGetBdAddress>:

const uint8_t* BleGetBdAddress( void )
{
 8008990:	b580      	push	{r7, lr}
 8008992:	b086      	sub	sp, #24
 8008994:	af00      	add	r7, sp, #0
  const uint8_t *bd_addr;
  uint32_t udn;
  uint32_t company_id;
  uint32_t device_id;

  udn = LL_FLASH_GetUDN();
 8008996:	f7ff fd45 	bl	8008424 <LL_FLASH_GetUDN>
 800899a:	6138      	str	r0, [r7, #16]

  if(udn != 0xFFFFFFFF)
 800899c:	693b      	ldr	r3, [r7, #16]
 800899e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089a2:	d023      	beq.n	80089ec <BleGetBdAddress+0x5c>
  {
    company_id = LL_FLASH_GetSTCompanyID();
 80089a4:	f7ff fd56 	bl	8008454 <LL_FLASH_GetSTCompanyID>
 80089a8:	60b8      	str	r0, [r7, #8]
    device_id = LL_FLASH_GetDeviceID();
 80089aa:	f7ff fd47 	bl	800843c <LL_FLASH_GetDeviceID>
 80089ae:	6078      	str	r0, [r7, #4]
 * bit[23:16] : Device ID.
 * bit[15:0] : The last 16bits from the UDN
 * Note: In order to use the Public Address in a final product, a dedicated
 * 24bits company ID (OUI) shall be bought.
 */
    bd_addr_udn[0] = (uint8_t)(udn & 0x000000FF);
 80089b0:	693b      	ldr	r3, [r7, #16]
 80089b2:	b2da      	uxtb	r2, r3
 80089b4:	4b16      	ldr	r3, [pc, #88]	; (8008a10 <BleGetBdAddress+0x80>)
 80089b6:	701a      	strb	r2, [r3, #0]
    bd_addr_udn[1] = (uint8_t)( (udn & 0x0000FF00) >> 8 );
 80089b8:	693b      	ldr	r3, [r7, #16]
 80089ba:	0a1b      	lsrs	r3, r3, #8
 80089bc:	b2da      	uxtb	r2, r3
 80089be:	4b14      	ldr	r3, [pc, #80]	; (8008a10 <BleGetBdAddress+0x80>)
 80089c0:	705a      	strb	r2, [r3, #1]
    bd_addr_udn[2] = (uint8_t)device_id;
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	b2da      	uxtb	r2, r3
 80089c6:	4b12      	ldr	r3, [pc, #72]	; (8008a10 <BleGetBdAddress+0x80>)
 80089c8:	709a      	strb	r2, [r3, #2]
    bd_addr_udn[3] = (uint8_t)(company_id & 0x000000FF);
 80089ca:	68bb      	ldr	r3, [r7, #8]
 80089cc:	b2da      	uxtb	r2, r3
 80089ce:	4b10      	ldr	r3, [pc, #64]	; (8008a10 <BleGetBdAddress+0x80>)
 80089d0:	70da      	strb	r2, [r3, #3]
    bd_addr_udn[4] = (uint8_t)( (company_id & 0x0000FF00) >> 8 );
 80089d2:	68bb      	ldr	r3, [r7, #8]
 80089d4:	0a1b      	lsrs	r3, r3, #8
 80089d6:	b2da      	uxtb	r2, r3
 80089d8:	4b0d      	ldr	r3, [pc, #52]	; (8008a10 <BleGetBdAddress+0x80>)
 80089da:	711a      	strb	r2, [r3, #4]
    bd_addr_udn[5] = (uint8_t)( (company_id & 0x00FF0000) >> 16 );
 80089dc:	68bb      	ldr	r3, [r7, #8]
 80089de:	0c1b      	lsrs	r3, r3, #16
 80089e0:	b2da      	uxtb	r2, r3
 80089e2:	4b0b      	ldr	r3, [pc, #44]	; (8008a10 <BleGetBdAddress+0x80>)
 80089e4:	715a      	strb	r2, [r3, #5]

    bd_addr = (const uint8_t *)bd_addr_udn;
 80089e6:	4b0a      	ldr	r3, [pc, #40]	; (8008a10 <BleGetBdAddress+0x80>)
 80089e8:	617b      	str	r3, [r7, #20]
 80089ea:	e00b      	b.n	8008a04 <BleGetBdAddress+0x74>
  }
  else
  {
    otp_addr = OTP_Read(0);
 80089ec:	2000      	movs	r0, #0
 80089ee:	f7ff f831 	bl	8007a54 <OTP_Read>
 80089f2:	60f8      	str	r0, [r7, #12]
    if(otp_addr)
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d002      	beq.n	8008a00 <BleGetBdAddress+0x70>
    {
      bd_addr = ((OTP_ID0_t*)otp_addr)->bd_address;
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	617b      	str	r3, [r7, #20]
 80089fe:	e001      	b.n	8008a04 <BleGetBdAddress+0x74>
    }
    else
    {
      bd_addr = M_bd_addr;
 8008a00:	4b04      	ldr	r3, [pc, #16]	; (8008a14 <BleGetBdAddress+0x84>)
 8008a02:	617b      	str	r3, [r7, #20]
    }
  }

  return bd_addr;
 8008a04:	697b      	ldr	r3, [r7, #20]
}
 8008a06:	4618      	mov	r0, r3
 8008a08:	3718      	adds	r7, #24
 8008a0a:	46bd      	mov	sp, r7
 8008a0c:	bd80      	pop	{r7, pc}
 8008a0e:	bf00      	nop
 8008a10:	200012bc 	.word	0x200012bc
 8008a14:	0800b5a0 	.word	0x0800b5a0

08008a18 <Adv_Cancel>:
 *
 *SPECIFIC FUNCTIONS FOR CUSTOM
 *
 *************************************************************/
static void Adv_Cancel( void )
{
 8008a18:	b580      	push	{r7, lr}
 8008a1a:	b082      	sub	sp, #8
 8008a1c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN Adv_Cancel_1 */

/* USER CODE END Adv_Cancel_1 */

  if (BleApplicationContext.Device_Connection_Status != APP_BLE_CONNECTED_SERVER)
 8008a1e:	4b1f      	ldr	r3, [pc, #124]	; (8008a9c <Adv_Cancel+0x84>)
 8008a20:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008a24:	2b05      	cmp	r3, #5
 8008a26:	d035      	beq.n	8008a94 <Adv_Cancel+0x7c>

  {

    tBleStatus result = 0x00;
 8008a28:	2300      	movs	r3, #0
 8008a2a:	71fb      	strb	r3, [r7, #7]

    result = aci_gap_set_non_discoverable();
 8008a2c:	f7fd f930 	bl	8005c90 <aci_gap_set_non_discoverable>
 8008a30:	4603      	mov	r3, r0
 8008a32:	71fb      	strb	r3, [r7, #7]

    BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8008a34:	4b19      	ldr	r3, [pc, #100]	; (8008a9c <Adv_Cancel+0x84>)
 8008a36:	2200      	movs	r2, #0
 8008a38:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    if (result == BLE_STATUS_SUCCESS)
 8008a3c:	79fb      	ldrb	r3, [r7, #7]
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d11a      	bne.n	8008a78 <Adv_Cancel+0x60>
    {
      APP_DBG_MSG("  \r\n\r");APP_DBG_MSG("** STOP ADVERTISING **  \r\n\r");
 8008a42:	4817      	ldr	r0, [pc, #92]	; (8008aa0 <Adv_Cancel+0x88>)
 8008a44:	f7fe ff28 	bl	8007898 <DbgTraceGetFileName>
 8008a48:	4601      	mov	r1, r0
 8008a4a:	f240 3359 	movw	r3, #857	; 0x359
 8008a4e:	4a15      	ldr	r2, [pc, #84]	; (8008aa4 <Adv_Cancel+0x8c>)
 8008a50:	4815      	ldr	r0, [pc, #84]	; (8008aa8 <Adv_Cancel+0x90>)
 8008a52:	f001 f88f 	bl	8009b74 <iprintf>
 8008a56:	4815      	ldr	r0, [pc, #84]	; (8008aac <Adv_Cancel+0x94>)
 8008a58:	f001 f88c 	bl	8009b74 <iprintf>
 8008a5c:	4810      	ldr	r0, [pc, #64]	; (8008aa0 <Adv_Cancel+0x88>)
 8008a5e:	f7fe ff1b 	bl	8007898 <DbgTraceGetFileName>
 8008a62:	4601      	mov	r1, r0
 8008a64:	f240 3359 	movw	r3, #857	; 0x359
 8008a68:	4a0e      	ldr	r2, [pc, #56]	; (8008aa4 <Adv_Cancel+0x8c>)
 8008a6a:	480f      	ldr	r0, [pc, #60]	; (8008aa8 <Adv_Cancel+0x90>)
 8008a6c:	f001 f882 	bl	8009b74 <iprintf>
 8008a70:	480f      	ldr	r0, [pc, #60]	; (8008ab0 <Adv_Cancel+0x98>)
 8008a72:	f001 f87f 	bl	8009b74 <iprintf>
  }

/* USER CODE BEGIN Adv_Cancel_2 */

/* USER CODE END Adv_Cancel_2 */
  return;
 8008a76:	e00d      	b.n	8008a94 <Adv_Cancel+0x7c>
      APP_DBG_MSG("** STOP ADVERTISING **  Failed \r\n\r");
 8008a78:	4809      	ldr	r0, [pc, #36]	; (8008aa0 <Adv_Cancel+0x88>)
 8008a7a:	f7fe ff0d 	bl	8007898 <DbgTraceGetFileName>
 8008a7e:	4601      	mov	r1, r0
 8008a80:	f240 335d 	movw	r3, #861	; 0x35d
 8008a84:	4a07      	ldr	r2, [pc, #28]	; (8008aa4 <Adv_Cancel+0x8c>)
 8008a86:	4808      	ldr	r0, [pc, #32]	; (8008aa8 <Adv_Cancel+0x90>)
 8008a88:	f001 f874 	bl	8009b74 <iprintf>
 8008a8c:	4809      	ldr	r0, [pc, #36]	; (8008ab4 <Adv_Cancel+0x9c>)
 8008a8e:	f001 f871 	bl	8009b74 <iprintf>
  return;
 8008a92:	bf00      	nop
 8008a94:	bf00      	nop
}
 8008a96:	3708      	adds	r7, #8
 8008a98:	46bd      	mov	sp, r7
 8008a9a:	bd80      	pop	{r7, pc}
 8008a9c:	2000017c 	.word	0x2000017c
 8008aa0:	0800af84 	.word	0x0800af84
 8008aa4:	0800b5ec 	.word	0x0800b5ec
 8008aa8:	0800afa0 	.word	0x0800afa0
 8008aac:	0800b180 	.word	0x0800b180
 8008ab0:	0800b188 	.word	0x0800b188
 8008ab4:	0800b1a4 	.word	0x0800b1a4

08008ab8 <APP_BLE_Key_Button1_Action>:
  return;
}
#endif

/* USER CODE BEGIN FD_SPECIFIC_FUNCTIONS */
void APP_BLE_Key_Button1_Action(void){
 8008ab8:	b580      	push	{r7, lr}
 8008aba:	af00      	add	r7, sp, #0
	P2PS_APP_SW1_Button_Action();
 8008abc:	f000 f974 	bl	8008da8 <P2PS_APP_SW1_Button_Action>
}
 8008ac0:	bf00      	nop
 8008ac2:	bd80      	pop	{r7, pc}

08008ac4 <hci_notify_asynch_evt>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void hci_notify_asynch_evt(void* pdata)
{
 8008ac4:	b580      	push	{r7, lr}
 8008ac6:	b082      	sub	sp, #8
 8008ac8:	af00      	add	r7, sp, #0
 8008aca:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1 << CFG_TASK_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 8008acc:	2100      	movs	r1, #0
 8008ace:	2002      	movs	r0, #2
 8008ad0:	f000 feee 	bl	80098b0 <UTIL_SEQ_SetTask>
  return;
 8008ad4:	bf00      	nop
}
 8008ad6:	3708      	adds	r7, #8
 8008ad8:	46bd      	mov	sp, r7
 8008ada:	bd80      	pop	{r7, pc}

08008adc <hci_cmd_resp_release>:

void hci_cmd_resp_release(uint32_t flag)
{
 8008adc:	b580      	push	{r7, lr}
 8008ade:	b082      	sub	sp, #8
 8008ae0:	af00      	add	r7, sp, #0
 8008ae2:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 8008ae4:	2001      	movs	r0, #1
 8008ae6:	f000 ff4f 	bl	8009988 <UTIL_SEQ_SetEvt>
  return;
 8008aea:	bf00      	nop
}
 8008aec:	3708      	adds	r7, #8
 8008aee:	46bd      	mov	sp, r7
 8008af0:	bd80      	pop	{r7, pc}

08008af2 <hci_cmd_resp_wait>:

void hci_cmd_resp_wait(uint32_t timeout)
{
 8008af2:	b580      	push	{r7, lr}
 8008af4:	b082      	sub	sp, #8
 8008af6:	af00      	add	r7, sp, #0
 8008af8:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 8008afa:	2001      	movs	r0, #1
 8008afc:	f000 ff64 	bl	80099c8 <UTIL_SEQ_WaitEvt>
  return;
 8008b00:	bf00      	nop
}
 8008b02:	3708      	adds	r7, #8
 8008b04:	46bd      	mov	sp, r7
 8008b06:	bd80      	pop	{r7, pc}

08008b08 <BLE_UserEvtRx>:

static void BLE_UserEvtRx( void * pPayload )
{
 8008b08:	b580      	push	{r7, lr}
 8008b0a:	b084      	sub	sp, #16
 8008b0c:	af00      	add	r7, sp, #0
 8008b0e:	6078      	str	r0, [r7, #4]
  SVCCTL_UserEvtFlowStatus_t svctl_return_status;
  tHCI_UserEvtRxParam *pParam;

  pParam = (tHCI_UserEvtRxParam *)pPayload;
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	60fb      	str	r3, [r7, #12]

  svctl_return_status = SVCCTL_UserEvtRx((void *)&(pParam->pckt->evtserial));
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	685b      	ldr	r3, [r3, #4]
 8008b18:	3308      	adds	r3, #8
 8008b1a:	4618      	mov	r0, r3
 8008b1c:	f7fe f928 	bl	8006d70 <SVCCTL_UserEvtRx>
 8008b20:	4603      	mov	r3, r0
 8008b22:	72fb      	strb	r3, [r7, #11]
  if (svctl_return_status != SVCCTL_UserEvtFlowDisable)
 8008b24:	7afb      	ldrb	r3, [r7, #11]
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d003      	beq.n	8008b32 <BLE_UserEvtRx+0x2a>
  {
    pParam->status = HCI_TL_UserEventFlow_Enable;
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	2201      	movs	r2, #1
 8008b2e:	701a      	strb	r2, [r3, #0]
  }
  else
  {
    pParam->status = HCI_TL_UserEventFlow_Disable;
  }
}
 8008b30:	e002      	b.n	8008b38 <BLE_UserEvtRx+0x30>
    pParam->status = HCI_TL_UserEventFlow_Disable;
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	2200      	movs	r2, #0
 8008b36:	701a      	strb	r2, [r3, #0]
}
 8008b38:	bf00      	nop
 8008b3a:	3710      	adds	r7, #16
 8008b3c:	46bd      	mov	sp, r7
 8008b3e:	bd80      	pop	{r7, pc}

08008b40 <BLE_StatusNot>:

static void BLE_StatusNot( HCI_TL_CmdStatus_t status )
{
 8008b40:	b580      	push	{r7, lr}
 8008b42:	b084      	sub	sp, #16
 8008b44:	af00      	add	r7, sp, #0
 8008b46:	4603      	mov	r3, r0
 8008b48:	71fb      	strb	r3, [r7, #7]
  uint32_t task_id_list;
  switch (status)
 8008b4a:	79fb      	ldrb	r3, [r7, #7]
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d002      	beq.n	8008b56 <BLE_StatusNot+0x16>
 8008b50:	2b01      	cmp	r3, #1
 8008b52:	d006      	beq.n	8008b62 <BLE_StatusNot+0x22>
      UTIL_SEQ_ResumeTask(task_id_list);

      break;

    default:
      break;
 8008b54:	e00b      	b.n	8008b6e <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 8008b56:	2307      	movs	r3, #7
 8008b58:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_PauseTask(task_id_list);
 8008b5a:	68f8      	ldr	r0, [r7, #12]
 8008b5c:	f000 fed4 	bl	8009908 <UTIL_SEQ_PauseTask>
      break;
 8008b60:	e005      	b.n	8008b6e <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 8008b62:	2307      	movs	r3, #7
 8008b64:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_ResumeTask(task_id_list);
 8008b66:	68f8      	ldr	r0, [r7, #12]
 8008b68:	f000 feee 	bl	8009948 <UTIL_SEQ_ResumeTask>
      break;
 8008b6c:	bf00      	nop
  }
  return;
 8008b6e:	bf00      	nop
}
 8008b70:	3710      	adds	r7, #16
 8008b72:	46bd      	mov	sp, r7
 8008b74:	bd80      	pop	{r7, pc}
	...

08008b78 <Custom_STM_App_Notification>:
static void P2PS_Send_Notification(void);
/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void Custom_STM_App_Notification(Custom_STM_App_Notification_evt_t *pNotification)
{
 8008b78:	b580      	push	{r7, lr}
 8008b7a:	b08e      	sub	sp, #56	; 0x38
 8008b7c:	af00      	add	r7, sp, #0
 8008b7e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CUSTOM_STM_App_Notification_1 */

  /* USER CODE END CUSTOM_STM_App_Notification_1 */
  switch(pNotification->Custom_Evt_Opcode)
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	781b      	ldrb	r3, [r3, #0]
 8008b84:	2b03      	cmp	r3, #3
 8008b86:	f200 80a4 	bhi.w	8008cd2 <Custom_STM_App_Notification+0x15a>
 8008b8a:	a201      	add	r2, pc, #4	; (adr r2, 8008b90 <Custom_STM_App_Notification+0x18>)
 8008b8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b90:	08008ba1 	.word	0x08008ba1
 8008b94:	08008be3 	.word	0x08008be3
 8008b98:	08008c93 	.word	0x08008c93
 8008b9c:	08008cb3 	.word	0x08008cb3
    /* USER CODE END CUSTOM_STM_App_Notification_Custom_Evt_Opcode */

  /* My_P2P_Server */
    case CUSTOM_STM_LED_C_READ_EVT:
      /* USER CODE BEGIN CUSTOM_STM_LED_C_READ_EVT */
    	APP_DBG_MSG("\r\n\r** CUSTOM_STM_LED_C_READ_EVT \n");
 8008ba0:	484e      	ldr	r0, [pc, #312]	; (8008cdc <Custom_STM_App_Notification+0x164>)
 8008ba2:	f7fe fe79 	bl	8007898 <DbgTraceGetFileName>
 8008ba6:	4601      	mov	r1, r0
 8008ba8:	2368      	movs	r3, #104	; 0x68
 8008baa:	4a4d      	ldr	r2, [pc, #308]	; (8008ce0 <Custom_STM_App_Notification+0x168>)
 8008bac:	484d      	ldr	r0, [pc, #308]	; (8008ce4 <Custom_STM_App_Notification+0x16c>)
 8008bae:	f000 ffe1 	bl	8009b74 <iprintf>
 8008bb2:	484d      	ldr	r0, [pc, #308]	; (8008ce8 <Custom_STM_App_Notification+0x170>)
 8008bb4:	f001 f864 	bl	8009c80 <puts>
    	APP_DBG_MSG("\r\n\r** Write Data: 0x%02X %02X \n",pNotification->DataTransfered.Length,pNotification->DataTransfered.pPayload[1]);
 8008bb8:	4848      	ldr	r0, [pc, #288]	; (8008cdc <Custom_STM_App_Notification+0x164>)
 8008bba:	f7fe fe6d 	bl	8007898 <DbgTraceGetFileName>
 8008bbe:	4601      	mov	r1, r0
 8008bc0:	2369      	movs	r3, #105	; 0x69
 8008bc2:	4a47      	ldr	r2, [pc, #284]	; (8008ce0 <Custom_STM_App_Notification+0x168>)
 8008bc4:	4847      	ldr	r0, [pc, #284]	; (8008ce4 <Custom_STM_App_Notification+0x16c>)
 8008bc6:	f000 ffd5 	bl	8009b74 <iprintf>
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	7a1b      	ldrb	r3, [r3, #8]
 8008bce:	4619      	mov	r1, r3
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	685b      	ldr	r3, [r3, #4]
 8008bd4:	3301      	adds	r3, #1
 8008bd6:	781b      	ldrb	r3, [r3, #0]
 8008bd8:	461a      	mov	r2, r3
 8008bda:	4844      	ldr	r0, [pc, #272]	; (8008cec <Custom_STM_App_Notification+0x174>)
 8008bdc:	f000 ffca 	bl	8009b74 <iprintf>
      /* USER CODE END CUSTOM_STM_LED_C_READ_EVT */
      break;
 8008be0:	e078      	b.n	8008cd4 <Custom_STM_App_Notification+0x15c>

    case CUSTOM_STM_LED_C_WRITE_NO_RESP_EVT:
      /* USER CODE BEGIN CUSTOM_STM_LED_C_WRITE_NO_RESP_EVT */
    	APP_DBG_MSG("\r\n\r** CUSTOM_STM_LED_C_WRITE_NO_RESP_EVT \n");
 8008be2:	483e      	ldr	r0, [pc, #248]	; (8008cdc <Custom_STM_App_Notification+0x164>)
 8008be4:	f7fe fe58 	bl	8007898 <DbgTraceGetFileName>
 8008be8:	4601      	mov	r1, r0
 8008bea:	236f      	movs	r3, #111	; 0x6f
 8008bec:	4a3c      	ldr	r2, [pc, #240]	; (8008ce0 <Custom_STM_App_Notification+0x168>)
 8008bee:	483d      	ldr	r0, [pc, #244]	; (8008ce4 <Custom_STM_App_Notification+0x16c>)
 8008bf0:	f000 ffc0 	bl	8009b74 <iprintf>
 8008bf4:	483e      	ldr	r0, [pc, #248]	; (8008cf0 <Custom_STM_App_Notification+0x178>)
 8008bf6:	f001 f843 	bl	8009c80 <puts>
		char stringBuff[30]={0};
 8008bfa:	2300      	movs	r3, #0
 8008bfc:	617b      	str	r3, [r7, #20]
 8008bfe:	f107 0318 	add.w	r3, r7, #24
 8008c02:	2200      	movs	r2, #0
 8008c04:	601a      	str	r2, [r3, #0]
 8008c06:	605a      	str	r2, [r3, #4]
 8008c08:	609a      	str	r2, [r3, #8]
 8008c0a:	60da      	str	r2, [r3, #12]
 8008c0c:	611a      	str	r2, [r3, #16]
 8008c0e:	615a      	str	r2, [r3, #20]
 8008c10:	831a      	strh	r2, [r3, #24]
		char stringbyte[8]={0};
 8008c12:	2300      	movs	r3, #0
 8008c14:	60fb      	str	r3, [r7, #12]
 8008c16:	2300      	movs	r3, #0
 8008c18:	613b      	str	r3, [r7, #16]
    	sprintf(stringBuff,
				"\n\rlegth: %d bytes, data: \0",
				pNotification->DataTransfered.Length
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	7a1b      	ldrb	r3, [r3, #8]
    	sprintf(stringBuff,
 8008c1e:	461a      	mov	r2, r3
 8008c20:	f107 0314 	add.w	r3, r7, #20
 8008c24:	4933      	ldr	r1, [pc, #204]	; (8008cf4 <Custom_STM_App_Notification+0x17c>)
 8008c26:	4618      	mov	r0, r3
 8008c28:	f001 f832 	bl	8009c90 <siprintf>
				);
    	for(uint32_t i=0;i<pNotification->DataTransfered.Length;i++){
 8008c2c:	2300      	movs	r3, #0
 8008c2e:	637b      	str	r3, [r7, #52]	; 0x34
 8008c30:	e019      	b.n	8008c66 <Custom_STM_App_Notification+0xee>
        	sprintf(stringbyte,
    				" 0x%X\0",
					pNotification->DataTransfered.pPayload[i]
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	685a      	ldr	r2, [r3, #4]
 8008c36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c38:	4413      	add	r3, r2
 8008c3a:	781b      	ldrb	r3, [r3, #0]
        	sprintf(stringbyte,
 8008c3c:	461a      	mov	r2, r3
 8008c3e:	f107 030c 	add.w	r3, r7, #12
 8008c42:	492d      	ldr	r1, [pc, #180]	; (8008cf8 <Custom_STM_App_Notification+0x180>)
 8008c44:	4618      	mov	r0, r3
 8008c46:	f001 f823 	bl	8009c90 <siprintf>
    				);
        	*stringBuff = strcat(&stringBuff, &stringbyte);
 8008c4a:	f107 020c 	add.w	r2, r7, #12
 8008c4e:	f107 0314 	add.w	r3, r7, #20
 8008c52:	4611      	mov	r1, r2
 8008c54:	4618      	mov	r0, r3
 8008c56:	f001 f83b 	bl	8009cd0 <strcat>
 8008c5a:	4603      	mov	r3, r0
 8008c5c:	b2db      	uxtb	r3, r3
 8008c5e:	753b      	strb	r3, [r7, #20]
    	for(uint32_t i=0;i<pNotification->DataTransfered.Length;i++){
 8008c60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c62:	3301      	adds	r3, #1
 8008c64:	637b      	str	r3, [r7, #52]	; 0x34
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	7a1b      	ldrb	r3, [r3, #8]
 8008c6a:	461a      	mov	r2, r3
 8008c6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c6e:	4293      	cmp	r3, r2
 8008c70:	d3df      	bcc.n	8008c32 <Custom_STM_App_Notification+0xba>
    	}

    	APP_DBG_MSG("%s",stringBuff);
 8008c72:	481a      	ldr	r0, [pc, #104]	; (8008cdc <Custom_STM_App_Notification+0x164>)
 8008c74:	f7fe fe10 	bl	8007898 <DbgTraceGetFileName>
 8008c78:	4601      	mov	r1, r0
 8008c7a:	237e      	movs	r3, #126	; 0x7e
 8008c7c:	4a18      	ldr	r2, [pc, #96]	; (8008ce0 <Custom_STM_App_Notification+0x168>)
 8008c7e:	4819      	ldr	r0, [pc, #100]	; (8008ce4 <Custom_STM_App_Notification+0x16c>)
 8008c80:	f000 ff78 	bl	8009b74 <iprintf>
 8008c84:	f107 0314 	add.w	r3, r7, #20
 8008c88:	4619      	mov	r1, r3
 8008c8a:	481c      	ldr	r0, [pc, #112]	; (8008cfc <Custom_STM_App_Notification+0x184>)
 8008c8c:	f000 ff72 	bl	8009b74 <iprintf>

      /* USER CODE END CUSTOM_STM_LED_C_WRITE_NO_RESP_EVT */
      break;
 8008c90:	e020      	b.n	8008cd4 <Custom_STM_App_Notification+0x15c>

    case CUSTOM_STM_BUTTON_C_NOTIFY_ENABLED_EVT:
      /* USER CODE BEGIN CUSTOM_STM_BUTTON_C_NOTIFY_ENABLED_EVT */
    	APP_DBG_MSG("\r\n\r** CUSTOM_STM_BUTTON_C_NOTIFY_ENABLED_EVT \n");
 8008c92:	4812      	ldr	r0, [pc, #72]	; (8008cdc <Custom_STM_App_Notification+0x164>)
 8008c94:	f7fe fe00 	bl	8007898 <DbgTraceGetFileName>
 8008c98:	4601      	mov	r1, r0
 8008c9a:	2385      	movs	r3, #133	; 0x85
 8008c9c:	4a10      	ldr	r2, [pc, #64]	; (8008ce0 <Custom_STM_App_Notification+0x168>)
 8008c9e:	4811      	ldr	r0, [pc, #68]	; (8008ce4 <Custom_STM_App_Notification+0x16c>)
 8008ca0:	f000 ff68 	bl	8009b74 <iprintf>
 8008ca4:	4816      	ldr	r0, [pc, #88]	; (8008d00 <Custom_STM_App_Notification+0x188>)
 8008ca6:	f000 ffeb 	bl	8009c80 <puts>
    	Custom_App_Context.Button_c_Notification_Status=1;
 8008caa:	4b16      	ldr	r3, [pc, #88]	; (8008d04 <Custom_STM_App_Notification+0x18c>)
 8008cac:	2201      	movs	r2, #1
 8008cae:	701a      	strb	r2, [r3, #0]
      /* USER CODE END CUSTOM_STM_BUTTON_C_NOTIFY_ENABLED_EVT */
      break;
 8008cb0:	e010      	b.n	8008cd4 <Custom_STM_App_Notification+0x15c>

    case CUSTOM_STM_BUTTON_C_NOTIFY_DISABLED_EVT:
      /* USER CODE BEGIN CUSTOM_STM_BUTTON_C_NOTIFY_DISABLED_EVT */
    	APP_DBG_MSG("\r\n\r** CUSTOM_STM_BUTTON_C_NOTIFY_DISABLED_EVT \n");
 8008cb2:	480a      	ldr	r0, [pc, #40]	; (8008cdc <Custom_STM_App_Notification+0x164>)
 8008cb4:	f7fe fdf0 	bl	8007898 <DbgTraceGetFileName>
 8008cb8:	4601      	mov	r1, r0
 8008cba:	238c      	movs	r3, #140	; 0x8c
 8008cbc:	4a08      	ldr	r2, [pc, #32]	; (8008ce0 <Custom_STM_App_Notification+0x168>)
 8008cbe:	4809      	ldr	r0, [pc, #36]	; (8008ce4 <Custom_STM_App_Notification+0x16c>)
 8008cc0:	f000 ff58 	bl	8009b74 <iprintf>
 8008cc4:	4810      	ldr	r0, [pc, #64]	; (8008d08 <Custom_STM_App_Notification+0x190>)
 8008cc6:	f000 ffdb 	bl	8009c80 <puts>
    	Custom_App_Context.Button_c_Notification_Status=0;
 8008cca:	4b0e      	ldr	r3, [pc, #56]	; (8008d04 <Custom_STM_App_Notification+0x18c>)
 8008ccc:	2200      	movs	r2, #0
 8008cce:	701a      	strb	r2, [r3, #0]
      /* USER CODE END CUSTOM_STM_BUTTON_C_NOTIFY_DISABLED_EVT */
      break;
 8008cd0:	e000      	b.n	8008cd4 <Custom_STM_App_Notification+0x15c>

    default:
      /* USER CODE BEGIN CUSTOM_STM_App_Notification_default */

      /* USER CODE END CUSTOM_STM_App_Notification_default */
      break;
 8008cd2:	bf00      	nop
  }
  /* USER CODE BEGIN CUSTOM_STM_App_Notification_2 */

  /* USER CODE END CUSTOM_STM_App_Notification_2 */
  return;
 8008cd4:	bf00      	nop
}
 8008cd6:	3738      	adds	r7, #56	; 0x38
 8008cd8:	46bd      	mov	sp, r7
 8008cda:	bd80      	pop	{r7, pc}
 8008cdc:	0800b1c8 	.word	0x0800b1c8
 8008ce0:	0800b5f8 	.word	0x0800b5f8
 8008ce4:	0800b1e8 	.word	0x0800b1e8
 8008ce8:	0800b1fc 	.word	0x0800b1fc
 8008cec:	0800b220 	.word	0x0800b220
 8008cf0:	0800b240 	.word	0x0800b240
 8008cf4:	0800b26c 	.word	0x0800b26c
 8008cf8:	0800b288 	.word	0x0800b288
 8008cfc:	0800b290 	.word	0x0800b290
 8008d00:	0800b294 	.word	0x0800b294
 8008d04:	20000200 	.word	0x20000200
 8008d08:	0800b2c4 	.word	0x0800b2c4

08008d0c <Custom_APP_Notification>:

void Custom_APP_Notification(Custom_App_ConnHandle_Not_evt_t *pNotification)
{
 8008d0c:	b480      	push	{r7}
 8008d0e:	b083      	sub	sp, #12
 8008d10:	af00      	add	r7, sp, #0
 8008d12:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CUSTOM_APP_Notification_1 */

  /* USER CODE END CUSTOM_APP_Notification_1 */

  switch(pNotification->Custom_Evt_Opcode)
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	781b      	ldrb	r3, [r3, #0]
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d002      	beq.n	8008d22 <Custom_APP_Notification+0x16>
 8008d1c:	2b01      	cmp	r3, #1
 8008d1e:	d002      	beq.n	8008d26 <Custom_APP_Notification+0x1a>

    default:
      /* USER CODE BEGIN CUSTOM_APP_Notification_default */

      /* USER CODE END CUSTOM_APP_Notification_default */
      break;
 8008d20:	e002      	b.n	8008d28 <Custom_APP_Notification+0x1c>
      break;
 8008d22:	bf00      	nop
 8008d24:	e000      	b.n	8008d28 <Custom_APP_Notification+0x1c>
      break;
 8008d26:	bf00      	nop

  /* USER CODE BEGIN CUSTOM_APP_Notification_2 */

  /* USER CODE END CUSTOM_APP_Notification_2 */

  return;
 8008d28:	bf00      	nop
}
 8008d2a:	370c      	adds	r7, #12
 8008d2c:	46bd      	mov	sp, r7
 8008d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d32:	4770      	bx	lr

08008d34 <Custom_APP_Init>:

void Custom_APP_Init(void)
{
 8008d34:	b580      	push	{r7, lr}
 8008d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CUSTOM_APP_Init */
	UTIL_SEQ_RegTask(1<<CFG_TASK_SW1_BUTTON_PUSHED_ID, UTIL_SEQ_RFU, P2PS_Send_Notification);
 8008d38:	4a06      	ldr	r2, [pc, #24]	; (8008d54 <Custom_APP_Init+0x20>)
 8008d3a:	2100      	movs	r1, #0
 8008d3c:	2004      	movs	r0, #4
 8008d3e:	f000 fd95 	bl	800986c <UTIL_SEQ_RegTask>
	Custom_App_Context.Button_c_Notification_Status=0;
 8008d42:	4b05      	ldr	r3, [pc, #20]	; (8008d58 <Custom_APP_Init+0x24>)
 8008d44:	2200      	movs	r2, #0
 8008d46:	701a      	strb	r2, [r3, #0]
	Custom_App_Context.ButtonStatus=0;
 8008d48:	4b03      	ldr	r3, [pc, #12]	; (8008d58 <Custom_APP_Init+0x24>)
 8008d4a:	2200      	movs	r2, #0
 8008d4c:	705a      	strb	r2, [r3, #1]
  /* USER CODE END CUSTOM_APP_Init */
  return;
 8008d4e:	bf00      	nop
}
 8008d50:	bd80      	pop	{r7, pc}
 8008d52:	bf00      	nop
 8008d54:	08008db9 	.word	0x08008db9
 8008d58:	20000200 	.word	0x20000200

08008d5c <Custom_Button_c_Send_Notification>:
  /* USER CODE END Button_c_UC*/
  return;
}

void Custom_Button_c_Send_Notification(void) /* Property Notification */
 {
 8008d5c:	b580      	push	{r7, lr}
 8008d5e:	af00      	add	r7, sp, #0
  if(Custom_App_Context.Button_c_Notification_Status)
 8008d60:	4b0b      	ldr	r3, [pc, #44]	; (8008d90 <Custom_Button_c_Send_Notification+0x34>)
 8008d62:	781b      	ldrb	r3, [r3, #0]
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d004      	beq.n	8008d72 <Custom_Button_c_Send_Notification+0x16>
  {
    Custom_STM_App_Update_Char(CUSTOM_STM_BUTTON_C, (uint8_t *)NotifyCharData);
 8008d68:	490a      	ldr	r1, [pc, #40]	; (8008d94 <Custom_Button_c_Send_Notification+0x38>)
 8008d6a:	2001      	movs	r0, #1
 8008d6c:	f000 f9c2 	bl	80090f4 <Custom_STM_App_Update_Char>
  }
  else
  {
    APP_DBG_MSG("-- CUSTOM APPLICATION : CAN'T INFORM CLIENT -  NOTIFICATION DISABLED\n ");
  }
  return;
 8008d70:	e00c      	b.n	8008d8c <Custom_Button_c_Send_Notification+0x30>
    APP_DBG_MSG("-- CUSTOM APPLICATION : CAN'T INFORM CLIENT -  NOTIFICATION DISABLED\n ");
 8008d72:	4809      	ldr	r0, [pc, #36]	; (8008d98 <Custom_Button_c_Send_Notification+0x3c>)
 8008d74:	f7fe fd90 	bl	8007898 <DbgTraceGetFileName>
 8008d78:	4601      	mov	r1, r0
 8008d7a:	23eb      	movs	r3, #235	; 0xeb
 8008d7c:	4a07      	ldr	r2, [pc, #28]	; (8008d9c <Custom_Button_c_Send_Notification+0x40>)
 8008d7e:	4808      	ldr	r0, [pc, #32]	; (8008da0 <Custom_Button_c_Send_Notification+0x44>)
 8008d80:	f000 fef8 	bl	8009b74 <iprintf>
 8008d84:	4807      	ldr	r0, [pc, #28]	; (8008da4 <Custom_Button_c_Send_Notification+0x48>)
 8008d86:	f000 fef5 	bl	8009b74 <iprintf>
  return;
 8008d8a:	bf00      	nop
}
 8008d8c:	bd80      	pop	{r7, pc}
 8008d8e:	bf00      	nop
 8008d90:	20000200 	.word	0x20000200
 8008d94:	200014dc 	.word	0x200014dc
 8008d98:	0800b1c8 	.word	0x0800b1c8
 8008d9c:	0800b614 	.word	0x0800b614
 8008da0:	0800b1e8 	.word	0x0800b1e8
 8008da4:	0800b2f4 	.word	0x0800b2f4

08008da8 <P2PS_APP_SW1_Button_Action>:

/* USER CODE BEGIN FD_LOCAL_FUNCTIONS*/
void P2PS_APP_SW1_Button_Action(void){
 8008da8:	b580      	push	{r7, lr}
 8008daa:	af00      	add	r7, sp, #0
	UTIL_SEQ_SetTask(1<<CFG_TASK_SW1_BUTTON_PUSHED_ID, CFG_SCH_PRIO_0);
 8008dac:	2100      	movs	r1, #0
 8008dae:	2004      	movs	r0, #4
 8008db0:	f000 fd7e 	bl	80098b0 <UTIL_SEQ_SetTask>
	return;
 8008db4:	bf00      	nop
}
 8008db6:	bd80      	pop	{r7, pc}

08008db8 <P2PS_Send_Notification>:

void P2PS_Send_Notification(void){
 8008db8:	b580      	push	{r7, lr}
 8008dba:	af00      	add	r7, sp, #0


	if(Custom_App_Context.ButtonStatus==0){
 8008dbc:	4b23      	ldr	r3, [pc, #140]	; (8008e4c <P2PS_Send_Notification+0x94>)
 8008dbe:	785b      	ldrb	r3, [r3, #1]
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	d109      	bne.n	8008dd8 <P2PS_Send_Notification+0x20>
		Custom_App_Context.ButtonStatus=1;
 8008dc4:	4b21      	ldr	r3, [pc, #132]	; (8008e4c <P2PS_Send_Notification+0x94>)
 8008dc6:	2201      	movs	r2, #1
 8008dc8:	705a      	strb	r2, [r3, #1]
		NotifyCharData[0]=0x00;
 8008dca:	4b21      	ldr	r3, [pc, #132]	; (8008e50 <P2PS_Send_Notification+0x98>)
 8008dcc:	2200      	movs	r2, #0
 8008dce:	701a      	strb	r2, [r3, #0]
		NotifyCharData[1]=0x01;
 8008dd0:	4b1f      	ldr	r3, [pc, #124]	; (8008e50 <P2PS_Send_Notification+0x98>)
 8008dd2:	2201      	movs	r2, #1
 8008dd4:	705a      	strb	r2, [r3, #1]
 8008dd6:	e008      	b.n	8008dea <P2PS_Send_Notification+0x32>
	}else{
		Custom_App_Context.ButtonStatus=0;
 8008dd8:	4b1c      	ldr	r3, [pc, #112]	; (8008e4c <P2PS_Send_Notification+0x94>)
 8008dda:	2200      	movs	r2, #0
 8008ddc:	705a      	strb	r2, [r3, #1]
		NotifyCharData[0]=0x00;
 8008dde:	4b1c      	ldr	r3, [pc, #112]	; (8008e50 <P2PS_Send_Notification+0x98>)
 8008de0:	2200      	movs	r2, #0
 8008de2:	701a      	strb	r2, [r3, #0]
		NotifyCharData[1]=0x00;
 8008de4:	4b1a      	ldr	r3, [pc, #104]	; (8008e50 <P2PS_Send_Notification+0x98>)
 8008de6:	2200      	movs	r2, #0
 8008de8:	705a      	strb	r2, [r3, #1]
	}

	if(Custom_App_Context.Button_c_Notification_Status){
 8008dea:	4b18      	ldr	r3, [pc, #96]	; (8008e4c <P2PS_Send_Notification+0x94>)
 8008dec:	781b      	ldrb	r3, [r3, #0]
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d01c      	beq.n	8008e2c <P2PS_Send_Notification+0x74>
		APP_DBG_MSG("--CUSTOM APPLICATION SERVER: INFORM CLIENT BUTTON 1 PUSHED \n");
 8008df2:	4818      	ldr	r0, [pc, #96]	; (8008e54 <P2PS_Send_Notification+0x9c>)
 8008df4:	f7fe fd50 	bl	8007898 <DbgTraceGetFileName>
 8008df8:	4601      	mov	r1, r0
 8008dfa:	f44f 7382 	mov.w	r3, #260	; 0x104
 8008dfe:	4a16      	ldr	r2, [pc, #88]	; (8008e58 <P2PS_Send_Notification+0xa0>)
 8008e00:	4816      	ldr	r0, [pc, #88]	; (8008e5c <P2PS_Send_Notification+0xa4>)
 8008e02:	f000 feb7 	bl	8009b74 <iprintf>
 8008e06:	4816      	ldr	r0, [pc, #88]	; (8008e60 <P2PS_Send_Notification+0xa8>)
 8008e08:	f000 ff3a 	bl	8009c80 <puts>
		APP_DBG_MSG(" \n\r");
 8008e0c:	4811      	ldr	r0, [pc, #68]	; (8008e54 <P2PS_Send_Notification+0x9c>)
 8008e0e:	f7fe fd43 	bl	8007898 <DbgTraceGetFileName>
 8008e12:	4601      	mov	r1, r0
 8008e14:	f240 1305 	movw	r3, #261	; 0x105
 8008e18:	4a0f      	ldr	r2, [pc, #60]	; (8008e58 <P2PS_Send_Notification+0xa0>)
 8008e1a:	4810      	ldr	r0, [pc, #64]	; (8008e5c <P2PS_Send_Notification+0xa4>)
 8008e1c:	f000 feaa 	bl	8009b74 <iprintf>
 8008e20:	4810      	ldr	r0, [pc, #64]	; (8008e64 <P2PS_Send_Notification+0xac>)
 8008e22:	f000 fea7 	bl	8009b74 <iprintf>
		Custom_Button_c_Send_Notification();
 8008e26:	f7ff ff99 	bl	8008d5c <Custom_Button_c_Send_Notification>
	}else{
		APP_DBG_MSG("--CUSTOM APPLICATION SERVER: CAN'T INFORM CLIENT - NOTIFICATION DISABLED \n");
	}

	return;
 8008e2a:	e00d      	b.n	8008e48 <P2PS_Send_Notification+0x90>
		APP_DBG_MSG("--CUSTOM APPLICATION SERVER: CAN'T INFORM CLIENT - NOTIFICATION DISABLED \n");
 8008e2c:	4809      	ldr	r0, [pc, #36]	; (8008e54 <P2PS_Send_Notification+0x9c>)
 8008e2e:	f7fe fd33 	bl	8007898 <DbgTraceGetFileName>
 8008e32:	4601      	mov	r1, r0
 8008e34:	f44f 7384 	mov.w	r3, #264	; 0x108
 8008e38:	4a07      	ldr	r2, [pc, #28]	; (8008e58 <P2PS_Send_Notification+0xa0>)
 8008e3a:	4808      	ldr	r0, [pc, #32]	; (8008e5c <P2PS_Send_Notification+0xa4>)
 8008e3c:	f000 fe9a 	bl	8009b74 <iprintf>
 8008e40:	4809      	ldr	r0, [pc, #36]	; (8008e68 <P2PS_Send_Notification+0xb0>)
 8008e42:	f000 ff1d 	bl	8009c80 <puts>
	return;
 8008e46:	bf00      	nop
}
 8008e48:	bd80      	pop	{r7, pc}
 8008e4a:	bf00      	nop
 8008e4c:	20000200 	.word	0x20000200
 8008e50:	200014dc 	.word	0x200014dc
 8008e54:	0800b1c8 	.word	0x0800b1c8
 8008e58:	0800b638 	.word	0x0800b638
 8008e5c:	0800b1e8 	.word	0x0800b1e8
 8008e60:	0800b33c 	.word	0x0800b33c
 8008e64:	0800b378 	.word	0x0800b378
 8008e68:	0800b37c 	.word	0x0800b37c

08008e6c <Custom_STM_Event_Handler>:
 * @brief  Event handler
 * @param  Event: Address of the buffer holding the Event
 * @retval Ack: Return whether the Event has been managed or not
 */
static SVCCTL_EvtAckStatus_t Custom_STM_Event_Handler(void *Event)
{
 8008e6c:	b580      	push	{r7, lr}
 8008e6e:	b08a      	sub	sp, #40	; 0x28
 8008e70:	af00      	add	r7, sp, #0
 8008e72:	6078      	str	r0, [r7, #4]
  Custom_STM_App_Notification_evt_t     Notification;
  /* USER CODE BEGIN Custom_STM_Event_Handler_1 */

  /* USER CODE END Custom_STM_Event_Handler_1 */

  return_value = SVCCTL_EvtNotAck;
 8008e74:	2300      	movs	r3, #0
 8008e76:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  event_pckt = (hci_event_pckt *)(((hci_uart_pckt*)Event)->data);
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	3301      	adds	r3, #1
 8008e7e:	623b      	str	r3, [r7, #32]

  switch(event_pckt->evt)
 8008e80:	6a3b      	ldr	r3, [r7, #32]
 8008e82:	781b      	ldrb	r3, [r3, #0]
 8008e84:	2bff      	cmp	r3, #255	; 0xff
 8008e86:	f040 808a 	bne.w	8008f9e <Custom_STM_Event_Handler+0x132>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
      blecore_evt = (evt_blecore_aci*)event_pckt->data;
 8008e8a:	6a3b      	ldr	r3, [r7, #32]
 8008e8c:	3302      	adds	r3, #2
 8008e8e:	61fb      	str	r3, [r7, #28]
      switch(blecore_evt->ecode)
 8008e90:	69fb      	ldr	r3, [r7, #28]
 8008e92:	881b      	ldrh	r3, [r3, #0]
 8008e94:	b29b      	uxth	r3, r3
 8008e96:	f640 4214 	movw	r2, #3092	; 0xc14
 8008e9a:	4293      	cmp	r3, r2
 8008e9c:	d079      	beq.n	8008f92 <Custom_STM_Event_Handler+0x126>
 8008e9e:	f640 4214 	movw	r2, #3092	; 0xc14
 8008ea2:	4293      	cmp	r3, r2
 8008ea4:	dc77      	bgt.n	8008f96 <Custom_STM_Event_Handler+0x12a>
 8008ea6:	f640 4201 	movw	r2, #3073	; 0xc01
 8008eaa:	4293      	cmp	r3, r2
 8008eac:	d003      	beq.n	8008eb6 <Custom_STM_Event_Handler+0x4a>
 8008eae:	f640 4213 	movw	r2, #3091	; 0xc13
 8008eb2:	4293      	cmp	r3, r2

          /* USER CODE END EVT_BLUE_GATT_WRITE_PERMIT_REQ_BEGIN */
          /* USER CODE BEGIN EVT_BLUE_GATT_WRITE_PERMIT_REQ_END */

          /* USER CODE END EVT_BLUE_GATT_WRITE_PERMIT_REQ_END */
          break;
 8008eb4:	e072      	b.n	8008f9c <Custom_STM_Event_Handler+0x130>
          attribute_modified = (aci_gatt_attribute_modified_event_rp0*)blecore_evt->data;
 8008eb6:	69fb      	ldr	r3, [r7, #28]
 8008eb8:	3302      	adds	r3, #2
 8008eba:	61bb      	str	r3, [r7, #24]
          if(attribute_modified->Attr_Handle == (CustomContext.CustomButton_CHdle + CHARACTERISTIC_DESCRIPTOR_ATTRIBUTE_OFFSET))
 8008ebc:	69bb      	ldr	r3, [r7, #24]
 8008ebe:	885b      	ldrh	r3, [r3, #2]
 8008ec0:	b29b      	uxth	r3, r3
 8008ec2:	461a      	mov	r2, r3
 8008ec4:	4b39      	ldr	r3, [pc, #228]	; (8008fac <Custom_STM_Event_Handler+0x140>)
 8008ec6:	889b      	ldrh	r3, [r3, #4]
 8008ec8:	3302      	adds	r3, #2
 8008eca:	429a      	cmp	r2, r3
 8008ecc:	d119      	bne.n	8008f02 <Custom_STM_Event_Handler+0x96>
            return_value = SVCCTL_EvtAckFlowEnable;
 8008ece:	2301      	movs	r3, #1
 8008ed0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            switch(attribute_modified->Attr_Data[0])
 8008ed4:	69bb      	ldr	r3, [r7, #24]
 8008ed6:	7a1b      	ldrb	r3, [r3, #8]
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d002      	beq.n	8008ee2 <Custom_STM_Event_Handler+0x76>
 8008edc:	2b01      	cmp	r3, #1
 8008ede:	d008      	beq.n	8008ef2 <Custom_STM_Event_Handler+0x86>
              break;
 8008ee0:	e056      	b.n	8008f90 <Custom_STM_Event_Handler+0x124>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_BUTTON_C_NOTIFY_DISABLED_EVT;
 8008ee2:	2303      	movs	r3, #3
 8008ee4:	723b      	strb	r3, [r7, #8]
                Custom_STM_App_Notification(&Notification);
 8008ee6:	f107 0308 	add.w	r3, r7, #8
 8008eea:	4618      	mov	r0, r3
 8008eec:	f7ff fe44 	bl	8008b78 <Custom_STM_App_Notification>
                break;
 8008ef0:	e04e      	b.n	8008f90 <Custom_STM_Event_Handler+0x124>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_BUTTON_C_NOTIFY_ENABLED_EVT;
 8008ef2:	2302      	movs	r3, #2
 8008ef4:	723b      	strb	r3, [r7, #8]
                Custom_STM_App_Notification(&Notification);
 8008ef6:	f107 0308 	add.w	r3, r7, #8
 8008efa:	4618      	mov	r0, r3
 8008efc:	f7ff fe3c 	bl	8008b78 <Custom_STM_App_Notification>
                break;
 8008f00:	e046      	b.n	8008f90 <Custom_STM_Event_Handler+0x124>
          else if(attribute_modified->Attr_Handle == (CustomContext.CustomLed_CHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))
 8008f02:	69bb      	ldr	r3, [r7, #24]
 8008f04:	885b      	ldrh	r3, [r3, #2]
 8008f06:	b29b      	uxth	r3, r3
 8008f08:	461a      	mov	r2, r3
 8008f0a:	4b28      	ldr	r3, [pc, #160]	; (8008fac <Custom_STM_Event_Handler+0x140>)
 8008f0c:	885b      	ldrh	r3, [r3, #2]
 8008f0e:	3301      	adds	r3, #1
 8008f10:	429a      	cmp	r2, r3
 8008f12:	d142      	bne.n	8008f9a <Custom_STM_Event_Handler+0x12e>
            return_value = SVCCTL_EvtAckFlowEnable;
 8008f14:	2301      	movs	r3, #1
 8008f16:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        	if(attribute_modified->Attr_Handle == (CustomContext.CustomLed_CHdle +CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET)){
 8008f1a:	69bb      	ldr	r3, [r7, #24]
 8008f1c:	885b      	ldrh	r3, [r3, #2]
 8008f1e:	b29b      	uxth	r3, r3
 8008f20:	461a      	mov	r2, r3
 8008f22:	4b22      	ldr	r3, [pc, #136]	; (8008fac <Custom_STM_Event_Handler+0x140>)
 8008f24:	885b      	ldrh	r3, [r3, #2]
 8008f26:	3301      	adds	r3, #1
 8008f28:	429a      	cmp	r2, r3
 8008f2a:	d10f      	bne.n	8008f4c <Custom_STM_Event_Handler+0xe0>
        		Notification.Custom_Evt_Opcode =CUSTOM_STM_LED_C_WRITE_NO_RESP_EVT;
 8008f2c:	2301      	movs	r3, #1
 8008f2e:	723b      	strb	r3, [r7, #8]
        		Notification.DataTransfered.Length=attribute_modified->Attr_Data_Length;
 8008f30:	69bb      	ldr	r3, [r7, #24]
 8008f32:	88db      	ldrh	r3, [r3, #6]
 8008f34:	b29b      	uxth	r3, r3
 8008f36:	b2db      	uxtb	r3, r3
 8008f38:	743b      	strb	r3, [r7, #16]
        		Notification.DataTransfered.pPayload=attribute_modified->Attr_Data;
 8008f3a:	69bb      	ldr	r3, [r7, #24]
 8008f3c:	3308      	adds	r3, #8
 8008f3e:	60fb      	str	r3, [r7, #12]
        		Custom_STM_App_Notification(&Notification);
 8008f40:	f107 0308 	add.w	r3, r7, #8
 8008f44:	4618      	mov	r0, r3
 8008f46:	f7ff fe17 	bl	8008b78 <Custom_STM_App_Notification>
          break;
 8008f4a:	e026      	b.n	8008f9a <Custom_STM_Event_Handler+0x12e>
        	}else if(attribute_modified->Attr_Handle == (CustomContext.CustomButton_CHdle +CHARACTERISTIC_DESCRIPTOR_ATTRIBUTE_OFFSET)){
 8008f4c:	69bb      	ldr	r3, [r7, #24]
 8008f4e:	885b      	ldrh	r3, [r3, #2]
 8008f50:	b29b      	uxth	r3, r3
 8008f52:	461a      	mov	r2, r3
 8008f54:	4b15      	ldr	r3, [pc, #84]	; (8008fac <Custom_STM_Event_Handler+0x140>)
 8008f56:	889b      	ldrh	r3, [r3, #4]
 8008f58:	3302      	adds	r3, #2
 8008f5a:	429a      	cmp	r2, r3
 8008f5c:	d11d      	bne.n	8008f9a <Custom_STM_Event_Handler+0x12e>
        		return_value =SVCCTL_EvtAckFlowEnable;
 8008f5e:	2301      	movs	r3, #1
 8008f60:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        		if(attribute_modified->Attr_Data[0] & COMSVC_Notification){
 8008f64:	69bb      	ldr	r3, [r7, #24]
 8008f66:	7a1b      	ldrb	r3, [r3, #8]
 8008f68:	f003 0301 	and.w	r3, r3, #1
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d007      	beq.n	8008f80 <Custom_STM_Event_Handler+0x114>
        			Notification.Custom_Evt_Opcode = CUSTOM_STM_BUTTON_C_NOTIFY_ENABLED_EVT;
 8008f70:	2302      	movs	r3, #2
 8008f72:	723b      	strb	r3, [r7, #8]
        			Custom_STM_App_Notification(&Notification);
 8008f74:	f107 0308 	add.w	r3, r7, #8
 8008f78:	4618      	mov	r0, r3
 8008f7a:	f7ff fdfd 	bl	8008b78 <Custom_STM_App_Notification>
          break;
 8008f7e:	e00c      	b.n	8008f9a <Custom_STM_Event_Handler+0x12e>
        			Notification.Custom_Evt_Opcode = CUSTOM_STM_BUTTON_C_NOTIFY_DISABLED_EVT;
 8008f80:	2303      	movs	r3, #3
 8008f82:	723b      	strb	r3, [r7, #8]
        			Custom_APP_Notification(&Notification);
 8008f84:	f107 0308 	add.w	r3, r7, #8
 8008f88:	4618      	mov	r0, r3
 8008f8a:	f7ff febf 	bl	8008d0c <Custom_APP_Notification>
          break;
 8008f8e:	e004      	b.n	8008f9a <Custom_STM_Event_Handler+0x12e>
 8008f90:	e003      	b.n	8008f9a <Custom_STM_Event_Handler+0x12e>
          break;
 8008f92:	bf00      	nop
 8008f94:	e004      	b.n	8008fa0 <Custom_STM_Event_Handler+0x134>
        /* USER CODE END BLECORE_EVT */
        default:
          /* USER CODE BEGIN EVT_DEFAULT */

          /* USER CODE END EVT_DEFAULT */
          break;
 8008f96:	bf00      	nop
 8008f98:	e002      	b.n	8008fa0 <Custom_STM_Event_Handler+0x134>
          break;
 8008f9a:	bf00      	nop
      }
      /* USER CODE BEGIN EVT_VENDOR*/

      /* USER CODE END EVT_VENDOR*/
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 8008f9c:	e000      	b.n	8008fa0 <Custom_STM_Event_Handler+0x134>

    default:
      /* USER CODE BEGIN EVENT_PCKT*/

      /* USER CODE END EVENT_PCKT*/
      break;
 8008f9e:	bf00      	nop

  /* USER CODE BEGIN Custom_STM_Event_Handler_2 */

  /* USER CODE END Custom_STM_Event_Handler_2 */

  return(return_value);
 8008fa0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}/* end Custom_STM_Event_Handler */
 8008fa4:	4618      	mov	r0, r3
 8008fa6:	3728      	adds	r7, #40	; 0x28
 8008fa8:	46bd      	mov	sp, r7
 8008faa:	bd80      	pop	{r7, pc}
 8008fac:	20000160 	.word	0x20000160

08008fb0 <SVCCTL_InitCustomSvc>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void SVCCTL_InitCustomSvc(void)
{
 8008fb0:	b580      	push	{r7, lr}
 8008fb2:	b08a      	sub	sp, #40	; 0x28
 8008fb4:	af06      	add	r7, sp, #24
  /* USER CODE END SVCCTL_InitCustomSvc_1 */

  /**
   *  Register the event handler to the BLE controller
   */
  SVCCTL_RegisterSvcHandler(Custom_STM_Event_Handler);
 8008fb6:	484b      	ldr	r0, [pc, #300]	; (80090e4 <SVCCTL_InitCustomSvc+0x134>)
 8008fb8:	f7fd fec0 	bl	8006d3c <SVCCTL_RegisterSvcHandler>
   *                                2 for My_Button_Char +
   *                                1 for My_Button_Char configuration descriptor +
   *                              = 6
   */

  COPY_MY_P2P_SERVER_UUID(uuid.Char_UUID_128);
 8008fbc:	238f      	movs	r3, #143	; 0x8f
 8008fbe:	703b      	strb	r3, [r7, #0]
 8008fc0:	23e5      	movs	r3, #229	; 0xe5
 8008fc2:	707b      	strb	r3, [r7, #1]
 8008fc4:	23b3      	movs	r3, #179	; 0xb3
 8008fc6:	70bb      	strb	r3, [r7, #2]
 8008fc8:	23d5      	movs	r3, #213	; 0xd5
 8008fca:	70fb      	strb	r3, [r7, #3]
 8008fcc:	232e      	movs	r3, #46	; 0x2e
 8008fce:	713b      	strb	r3, [r7, #4]
 8008fd0:	237f      	movs	r3, #127	; 0x7f
 8008fd2:	717b      	strb	r3, [r7, #5]
 8008fd4:	234a      	movs	r3, #74	; 0x4a
 8008fd6:	71bb      	strb	r3, [r7, #6]
 8008fd8:	2398      	movs	r3, #152	; 0x98
 8008fda:	71fb      	strb	r3, [r7, #7]
 8008fdc:	232a      	movs	r3, #42	; 0x2a
 8008fde:	723b      	strb	r3, [r7, #8]
 8008fe0:	2348      	movs	r3, #72	; 0x48
 8008fe2:	727b      	strb	r3, [r7, #9]
 8008fe4:	237a      	movs	r3, #122	; 0x7a
 8008fe6:	72bb      	strb	r3, [r7, #10]
 8008fe8:	23cc      	movs	r3, #204	; 0xcc
 8008fea:	72fb      	strb	r3, [r7, #11]
 8008fec:	2340      	movs	r3, #64	; 0x40
 8008fee:	733b      	strb	r3, [r7, #12]
 8008ff0:	23fe      	movs	r3, #254	; 0xfe
 8008ff2:	737b      	strb	r3, [r7, #13]
 8008ff4:	2300      	movs	r3, #0
 8008ff6:	73bb      	strb	r3, [r7, #14]
 8008ff8:	2300      	movs	r3, #0
 8008ffa:	73fb      	strb	r3, [r7, #15]
  aci_gatt_add_service(UUID_TYPE_128,
 8008ffc:	4639      	mov	r1, r7
 8008ffe:	4b3a      	ldr	r3, [pc, #232]	; (80090e8 <SVCCTL_InitCustomSvc+0x138>)
 8009000:	9300      	str	r3, [sp, #0]
 8009002:	2306      	movs	r3, #6
 8009004:	2201      	movs	r2, #1
 8009006:	2002      	movs	r0, #2
 8009008:	f7fd fa14 	bl	8006434 <aci_gatt_add_service>
                       &(CustomContext.CustomMy_P2PsHdle));

  /**
   *  My_LED_Char
   */
  COPY_MY_LED_CHAR_UUID(uuid.Char_UUID_128);
 800900c:	2319      	movs	r3, #25
 800900e:	703b      	strb	r3, [r7, #0]
 8009010:	23ed      	movs	r3, #237	; 0xed
 8009012:	707b      	strb	r3, [r7, #1]
 8009014:	2382      	movs	r3, #130	; 0x82
 8009016:	70bb      	strb	r3, [r7, #2]
 8009018:	23ae      	movs	r3, #174	; 0xae
 800901a:	70fb      	strb	r3, [r7, #3]
 800901c:	23ed      	movs	r3, #237	; 0xed
 800901e:	713b      	strb	r3, [r7, #4]
 8009020:	2321      	movs	r3, #33	; 0x21
 8009022:	717b      	strb	r3, [r7, #5]
 8009024:	234c      	movs	r3, #76	; 0x4c
 8009026:	71bb      	strb	r3, [r7, #6]
 8009028:	239d      	movs	r3, #157	; 0x9d
 800902a:	71fb      	strb	r3, [r7, #7]
 800902c:	2341      	movs	r3, #65	; 0x41
 800902e:	723b      	strb	r3, [r7, #8]
 8009030:	2345      	movs	r3, #69	; 0x45
 8009032:	727b      	strb	r3, [r7, #9]
 8009034:	2322      	movs	r3, #34	; 0x22
 8009036:	72bb      	strb	r3, [r7, #10]
 8009038:	238e      	movs	r3, #142	; 0x8e
 800903a:	72fb      	strb	r3, [r7, #11]
 800903c:	2341      	movs	r3, #65	; 0x41
 800903e:	733b      	strb	r3, [r7, #12]
 8009040:	23fe      	movs	r3, #254	; 0xfe
 8009042:	737b      	strb	r3, [r7, #13]
 8009044:	2300      	movs	r3, #0
 8009046:	73bb      	strb	r3, [r7, #14]
 8009048:	2300      	movs	r3, #0
 800904a:	73fb      	strb	r3, [r7, #15]
  aci_gatt_add_char(CustomContext.CustomMy_P2PsHdle,
 800904c:	4b26      	ldr	r3, [pc, #152]	; (80090e8 <SVCCTL_InitCustomSvc+0x138>)
 800904e:	8818      	ldrh	r0, [r3, #0]
 8009050:	2302      	movs	r3, #2
 8009052:	b29b      	uxth	r3, r3
 8009054:	463a      	mov	r2, r7
 8009056:	4925      	ldr	r1, [pc, #148]	; (80090ec <SVCCTL_InitCustomSvc+0x13c>)
 8009058:	9105      	str	r1, [sp, #20]
 800905a:	2101      	movs	r1, #1
 800905c:	9104      	str	r1, [sp, #16]
 800905e:	2110      	movs	r1, #16
 8009060:	9103      	str	r1, [sp, #12]
 8009062:	2101      	movs	r1, #1
 8009064:	9102      	str	r1, [sp, #8]
 8009066:	2100      	movs	r1, #0
 8009068:	9101      	str	r1, [sp, #4]
 800906a:	2106      	movs	r1, #6
 800906c:	9100      	str	r1, [sp, #0]
 800906e:	2102      	movs	r1, #2
 8009070:	f7fd fa8f 	bl	8006592 <aci_gatt_add_char>
                    CHAR_VALUE_LEN_VARIABLE,
                    &(CustomContext.CustomLed_CHdle));
  /**
   *  My_Button_Char
   */
  COPY_MY_BUTTON_CHAR_UUID(uuid.Char_UUID_128);
 8009074:	2319      	movs	r3, #25
 8009076:	703b      	strb	r3, [r7, #0]
 8009078:	23ed      	movs	r3, #237	; 0xed
 800907a:	707b      	strb	r3, [r7, #1]
 800907c:	2382      	movs	r3, #130	; 0x82
 800907e:	70bb      	strb	r3, [r7, #2]
 8009080:	23ae      	movs	r3, #174	; 0xae
 8009082:	70fb      	strb	r3, [r7, #3]
 8009084:	23ed      	movs	r3, #237	; 0xed
 8009086:	713b      	strb	r3, [r7, #4]
 8009088:	2321      	movs	r3, #33	; 0x21
 800908a:	717b      	strb	r3, [r7, #5]
 800908c:	234c      	movs	r3, #76	; 0x4c
 800908e:	71bb      	strb	r3, [r7, #6]
 8009090:	239d      	movs	r3, #157	; 0x9d
 8009092:	71fb      	strb	r3, [r7, #7]
 8009094:	2341      	movs	r3, #65	; 0x41
 8009096:	723b      	strb	r3, [r7, #8]
 8009098:	2345      	movs	r3, #69	; 0x45
 800909a:	727b      	strb	r3, [r7, #9]
 800909c:	2322      	movs	r3, #34	; 0x22
 800909e:	72bb      	strb	r3, [r7, #10]
 80090a0:	238e      	movs	r3, #142	; 0x8e
 80090a2:	72fb      	strb	r3, [r7, #11]
 80090a4:	2342      	movs	r3, #66	; 0x42
 80090a6:	733b      	strb	r3, [r7, #12]
 80090a8:	23fe      	movs	r3, #254	; 0xfe
 80090aa:	737b      	strb	r3, [r7, #13]
 80090ac:	2300      	movs	r3, #0
 80090ae:	73bb      	strb	r3, [r7, #14]
 80090b0:	2300      	movs	r3, #0
 80090b2:	73fb      	strb	r3, [r7, #15]
  aci_gatt_add_char(CustomContext.CustomMy_P2PsHdle,
 80090b4:	4b0c      	ldr	r3, [pc, #48]	; (80090e8 <SVCCTL_InitCustomSvc+0x138>)
 80090b6:	8818      	ldrh	r0, [r3, #0]
 80090b8:	2302      	movs	r3, #2
 80090ba:	b29b      	uxth	r3, r3
 80090bc:	463a      	mov	r2, r7
 80090be:	490c      	ldr	r1, [pc, #48]	; (80090f0 <SVCCTL_InitCustomSvc+0x140>)
 80090c0:	9105      	str	r1, [sp, #20]
 80090c2:	2101      	movs	r1, #1
 80090c4:	9104      	str	r1, [sp, #16]
 80090c6:	2110      	movs	r1, #16
 80090c8:	9103      	str	r1, [sp, #12]
 80090ca:	2101      	movs	r1, #1
 80090cc:	9102      	str	r1, [sp, #8]
 80090ce:	2100      	movs	r1, #0
 80090d0:	9101      	str	r1, [sp, #4]
 80090d2:	2110      	movs	r1, #16
 80090d4:	9100      	str	r1, [sp, #0]
 80090d6:	2102      	movs	r1, #2
 80090d8:	f7fd fa5b 	bl	8006592 <aci_gatt_add_char>

  /* USER CODE BEGIN SVCCTL_InitCustomSvc_2 */

  /* USER CODE END SVCCTL_InitCustomSvc_2 */

  return;
 80090dc:	bf00      	nop
}
 80090de:	3710      	adds	r7, #16
 80090e0:	46bd      	mov	sp, r7
 80090e2:	bd80      	pop	{r7, pc}
 80090e4:	08008e6d 	.word	0x08008e6d
 80090e8:	20000160 	.word	0x20000160
 80090ec:	20000162 	.word	0x20000162
 80090f0:	20000164 	.word	0x20000164

080090f4 <Custom_STM_App_Update_Char>:
 * @param  CharOpcode: Characteristic identifier
 * @param  Service_Instance: Instance of the service to which the characteristic belongs
 *
 */
tBleStatus Custom_STM_App_Update_Char(Custom_STM_Char_Opcode_t CharOpcode, uint8_t *pPayload)
{
 80090f4:	b580      	push	{r7, lr}
 80090f6:	b086      	sub	sp, #24
 80090f8:	af02      	add	r7, sp, #8
 80090fa:	4603      	mov	r3, r0
 80090fc:	6039      	str	r1, [r7, #0]
 80090fe:	71fb      	strb	r3, [r7, #7]
  tBleStatus result = BLE_STATUS_INVALID_PARAMS;
 8009100:	2342      	movs	r3, #66	; 0x42
 8009102:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN Custom_STM_App_Update_Char_1 */

  /* USER CODE END Custom_STM_App_Update_Char_1 */

  switch(CharOpcode)
 8009104:	79fb      	ldrb	r3, [r7, #7]
 8009106:	2b00      	cmp	r3, #0
 8009108:	d002      	beq.n	8009110 <Custom_STM_App_Update_Char+0x1c>
 800910a:	2b01      	cmp	r3, #1
 800910c:	d00e      	beq.n	800912c <Custom_STM_App_Update_Char+0x38>

      /* USER CODE END CUSTOM_STM_Service_1_Char_2*/
      break;

    default:
      break;
 800910e:	e01b      	b.n	8009148 <Custom_STM_App_Update_Char+0x54>
      result = aci_gatt_update_char_value(CustomContext.CustomMy_P2PsHdle,
 8009110:	4b10      	ldr	r3, [pc, #64]	; (8009154 <Custom_STM_App_Update_Char+0x60>)
 8009112:	8818      	ldrh	r0, [r3, #0]
 8009114:	4b0f      	ldr	r3, [pc, #60]	; (8009154 <Custom_STM_App_Update_Char+0x60>)
 8009116:	8859      	ldrh	r1, [r3, #2]
 8009118:	2202      	movs	r2, #2
 800911a:	683b      	ldr	r3, [r7, #0]
 800911c:	9300      	str	r3, [sp, #0]
 800911e:	4613      	mov	r3, r2
 8009120:	2200      	movs	r2, #0
 8009122:	f7fd fb20 	bl	8006766 <aci_gatt_update_char_value>
 8009126:	4603      	mov	r3, r0
 8009128:	73fb      	strb	r3, [r7, #15]
      break;
 800912a:	e00d      	b.n	8009148 <Custom_STM_App_Update_Char+0x54>
      result = aci_gatt_update_char_value(CustomContext.CustomMy_P2PsHdle,
 800912c:	4b09      	ldr	r3, [pc, #36]	; (8009154 <Custom_STM_App_Update_Char+0x60>)
 800912e:	8818      	ldrh	r0, [r3, #0]
 8009130:	4b08      	ldr	r3, [pc, #32]	; (8009154 <Custom_STM_App_Update_Char+0x60>)
 8009132:	8899      	ldrh	r1, [r3, #4]
 8009134:	2202      	movs	r2, #2
 8009136:	683b      	ldr	r3, [r7, #0]
 8009138:	9300      	str	r3, [sp, #0]
 800913a:	4613      	mov	r3, r2
 800913c:	2200      	movs	r2, #0
 800913e:	f7fd fb12 	bl	8006766 <aci_gatt_update_char_value>
 8009142:	4603      	mov	r3, r0
 8009144:	73fb      	strb	r3, [r7, #15]
      break;
 8009146:	bf00      	nop

  /* USER CODE BEGIN Custom_STM_App_Update_Char_2 */

  /* USER CODE END Custom_STM_App_Update_Char_2 */

  return result;
 8009148:	7bfb      	ldrb	r3, [r7, #15]
}
 800914a:	4618      	mov	r0, r3
 800914c:	3710      	adds	r7, #16
 800914e:	46bd      	mov	sp, r7
 8009150:	bd80      	pop	{r7, pc}
 8009152:	bf00      	nop
 8009154:	20000160 	.word	0x20000160

08009158 <LL_PWR_EnableBootC2>:
{
 8009158:	b480      	push	{r7}
 800915a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 800915c:	4b05      	ldr	r3, [pc, #20]	; (8009174 <LL_PWR_EnableBootC2+0x1c>)
 800915e:	68db      	ldr	r3, [r3, #12]
 8009160:	4a04      	ldr	r2, [pc, #16]	; (8009174 <LL_PWR_EnableBootC2+0x1c>)
 8009162:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009166:	60d3      	str	r3, [r2, #12]
}
 8009168:	bf00      	nop
 800916a:	46bd      	mov	sp, r7
 800916c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009170:	4770      	bx	lr
 8009172:	bf00      	nop
 8009174:	58000400 	.word	0x58000400

08009178 <LL_C2_EXTI_EnableEvent_32_63>:
{
 8009178:	b480      	push	{r7}
 800917a:	b083      	sub	sp, #12
 800917c:	af00      	add	r7, sp, #0
 800917e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 8009180:	4b06      	ldr	r3, [pc, #24]	; (800919c <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 8009182:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8009186:	4905      	ldr	r1, [pc, #20]	; (800919c <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	4313      	orrs	r3, r2
 800918c:	f8c1 30d4 	str.w	r3, [r1, #212]	; 0xd4
}
 8009190:	bf00      	nop
 8009192:	370c      	adds	r7, #12
 8009194:	46bd      	mov	sp, r7
 8009196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800919a:	4770      	bx	lr
 800919c:	58000800 	.word	0x58000800

080091a0 <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 80091a0:	b480      	push	{r7}
 80091a2:	b083      	sub	sp, #12
 80091a4:	af00      	add	r7, sp, #0
 80091a6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 80091a8:	4b05      	ldr	r3, [pc, #20]	; (80091c0 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 80091aa:	6a1a      	ldr	r2, [r3, #32]
 80091ac:	4904      	ldr	r1, [pc, #16]	; (80091c0 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	4313      	orrs	r3, r2
 80091b2:	620b      	str	r3, [r1, #32]
}
 80091b4:	bf00      	nop
 80091b6:	370c      	adds	r7, #12
 80091b8:	46bd      	mov	sp, r7
 80091ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091be:	4770      	bx	lr
 80091c0:	58000800 	.word	0x58000800

080091c4 <LL_AHB3_GRP1_EnableClock>:
{
 80091c4:	b480      	push	{r7}
 80091c6:	b085      	sub	sp, #20
 80091c8:	af00      	add	r7, sp, #0
 80091ca:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 80091cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80091d0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80091d2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	4313      	orrs	r3, r2
 80091da:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 80091dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80091e0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	4013      	ands	r3, r2
 80091e6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80091e8:	68fb      	ldr	r3, [r7, #12]
}
 80091ea:	bf00      	nop
 80091ec:	3714      	adds	r7, #20
 80091ee:	46bd      	mov	sp, r7
 80091f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091f4:	4770      	bx	lr

080091f6 <LL_C2_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_FLASH
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 80091f6:	b480      	push	{r7}
 80091f8:	b085      	sub	sp, #20
 80091fa:	af00      	add	r7, sp, #0
 80091fc:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB3ENR, Periphs);
 80091fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009202:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 8009206:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	4313      	orrs	r3, r2
 800920e:	f8c1 3150 	str.w	r3, [r1, #336]	; 0x150
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB3ENR, Periphs);
 8009212:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009216:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	4013      	ands	r3, r2
 800921e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8009220:	68fb      	ldr	r3, [r7, #12]
}
 8009222:	bf00      	nop
 8009224:	3714      	adds	r7, #20
 8009226:	46bd      	mov	sp, r7
 8009228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800922c:	4770      	bx	lr

0800922e <LL_C1_IPCC_EnableIT_TXF>:
{
 800922e:	b480      	push	{r7}
 8009230:	b083      	sub	sp, #12
 8009232:	af00      	add	r7, sp, #0
 8009234:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	601a      	str	r2, [r3, #0]
}
 8009242:	bf00      	nop
 8009244:	370c      	adds	r7, #12
 8009246:	46bd      	mov	sp, r7
 8009248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800924c:	4770      	bx	lr

0800924e <LL_C1_IPCC_EnableIT_RXO>:
{
 800924e:	b480      	push	{r7}
 8009250:	b083      	sub	sp, #12
 8009252:	af00      	add	r7, sp, #0
 8009254:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	f043 0201 	orr.w	r2, r3, #1
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	601a      	str	r2, [r3, #0]
}
 8009262:	bf00      	nop
 8009264:	370c      	adds	r7, #12
 8009266:	46bd      	mov	sp, r7
 8009268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800926c:	4770      	bx	lr

0800926e <LL_C1_IPCC_EnableTransmitChannel>:
{
 800926e:	b480      	push	{r7}
 8009270:	b083      	sub	sp, #12
 8009272:	af00      	add	r7, sp, #0
 8009274:	6078      	str	r0, [r7, #4]
 8009276:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	685a      	ldr	r2, [r3, #4]
 800927c:	683b      	ldr	r3, [r7, #0]
 800927e:	041b      	lsls	r3, r3, #16
 8009280:	43db      	mvns	r3, r3
 8009282:	401a      	ands	r2, r3
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	605a      	str	r2, [r3, #4]
}
 8009288:	bf00      	nop
 800928a:	370c      	adds	r7, #12
 800928c:	46bd      	mov	sp, r7
 800928e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009292:	4770      	bx	lr

08009294 <LL_C1_IPCC_DisableTransmitChannel>:
{
 8009294:	b480      	push	{r7}
 8009296:	b083      	sub	sp, #12
 8009298:	af00      	add	r7, sp, #0
 800929a:	6078      	str	r0, [r7, #4]
 800929c:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	685a      	ldr	r2, [r3, #4]
 80092a2:	683b      	ldr	r3, [r7, #0]
 80092a4:	041b      	lsls	r3, r3, #16
 80092a6:	431a      	orrs	r2, r3
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	605a      	str	r2, [r3, #4]
}
 80092ac:	bf00      	nop
 80092ae:	370c      	adds	r7, #12
 80092b0:	46bd      	mov	sp, r7
 80092b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092b6:	4770      	bx	lr

080092b8 <LL_C1_IPCC_EnableReceiveChannel>:
{
 80092b8:	b480      	push	{r7}
 80092ba:	b083      	sub	sp, #12
 80092bc:	af00      	add	r7, sp, #0
 80092be:	6078      	str	r0, [r7, #4]
 80092c0:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	685a      	ldr	r2, [r3, #4]
 80092c6:	683b      	ldr	r3, [r7, #0]
 80092c8:	43db      	mvns	r3, r3
 80092ca:	401a      	ands	r2, r3
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	605a      	str	r2, [r3, #4]
}
 80092d0:	bf00      	nop
 80092d2:	370c      	adds	r7, #12
 80092d4:	46bd      	mov	sp, r7
 80092d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092da:	4770      	bx	lr

080092dc <LL_C1_IPCC_ClearFlag_CHx>:
{
 80092dc:	b480      	push	{r7}
 80092de:	b083      	sub	sp, #12
 80092e0:	af00      	add	r7, sp, #0
 80092e2:	6078      	str	r0, [r7, #4]
 80092e4:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	683a      	ldr	r2, [r7, #0]
 80092ea:	609a      	str	r2, [r3, #8]
}
 80092ec:	bf00      	nop
 80092ee:	370c      	adds	r7, #12
 80092f0:	46bd      	mov	sp, r7
 80092f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092f6:	4770      	bx	lr

080092f8 <LL_C1_IPCC_SetFlag_CHx>:
{
 80092f8:	b480      	push	{r7}
 80092fa:	b083      	sub	sp, #12
 80092fc:	af00      	add	r7, sp, #0
 80092fe:	6078      	str	r0, [r7, #4]
 8009300:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 8009302:	683b      	ldr	r3, [r7, #0]
 8009304:	041a      	lsls	r2, r3, #16
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	609a      	str	r2, [r3, #8]
}
 800930a:	bf00      	nop
 800930c:	370c      	adds	r7, #12
 800930e:	46bd      	mov	sp, r7
 8009310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009314:	4770      	bx	lr

08009316 <LL_C1_IPCC_IsActiveFlag_CHx>:
{
 8009316:	b480      	push	{r7}
 8009318:	b083      	sub	sp, #12
 800931a:	af00      	add	r7, sp, #0
 800931c:	6078      	str	r0, [r7, #4]
 800931e:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	68da      	ldr	r2, [r3, #12]
 8009324:	683b      	ldr	r3, [r7, #0]
 8009326:	4013      	ands	r3, r2
 8009328:	683a      	ldr	r2, [r7, #0]
 800932a:	429a      	cmp	r2, r3
 800932c:	d101      	bne.n	8009332 <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 800932e:	2301      	movs	r3, #1
 8009330:	e000      	b.n	8009334 <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 8009332:	2300      	movs	r3, #0
}
 8009334:	4618      	mov	r0, r3
 8009336:	370c      	adds	r7, #12
 8009338:	46bd      	mov	sp, r7
 800933a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800933e:	4770      	bx	lr

08009340 <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 8009340:	b480      	push	{r7}
 8009342:	b083      	sub	sp, #12
 8009344:	af00      	add	r7, sp, #0
 8009346:	6078      	str	r0, [r7, #4]
 8009348:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	69da      	ldr	r2, [r3, #28]
 800934e:	683b      	ldr	r3, [r7, #0]
 8009350:	4013      	ands	r3, r2
 8009352:	683a      	ldr	r2, [r7, #0]
 8009354:	429a      	cmp	r2, r3
 8009356:	d101      	bne.n	800935c <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 8009358:	2301      	movs	r3, #1
 800935a:	e000      	b.n	800935e <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 800935c:	2300      	movs	r3, #0
}
 800935e:	4618      	mov	r0, r3
 8009360:	370c      	adds	r7, #12
 8009362:	46bd      	mov	sp, r7
 8009364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009368:	4770      	bx	lr
	...

0800936c <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 800936c:	b580      	push	{r7, lr}
 800936e:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 8009370:	2102      	movs	r1, #2
 8009372:	4819      	ldr	r0, [pc, #100]	; (80093d8 <HW_IPCC_Rx_Handler+0x6c>)
 8009374:	f7ff ffe4 	bl	8009340 <LL_C2_IPCC_IsActiveFlag_CHx>
 8009378:	4603      	mov	r3, r0
 800937a:	2b00      	cmp	r3, #0
 800937c:	d009      	beq.n	8009392 <HW_IPCC_Rx_Handler+0x26>
 800937e:	4b16      	ldr	r3, [pc, #88]	; (80093d8 <HW_IPCC_Rx_Handler+0x6c>)
 8009380:	685b      	ldr	r3, [r3, #4]
 8009382:	43db      	mvns	r3, r3
 8009384:	f003 0302 	and.w	r3, r3, #2
 8009388:	2b00      	cmp	r3, #0
 800938a:	d002      	beq.n	8009392 <HW_IPCC_Rx_Handler+0x26>
  {
      HW_IPCC_SYS_EvtHandler();
 800938c:	f000 f8ea 	bl	8009564 <HW_IPCC_SYS_EvtHandler>
 8009390:	e01f      	b.n	80093d2 <HW_IPCC_Rx_Handler+0x66>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL ))
  {
    HW_IPCC_ZIGBEE_StackM0RequestHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 8009392:	2101      	movs	r1, #1
 8009394:	4810      	ldr	r0, [pc, #64]	; (80093d8 <HW_IPCC_Rx_Handler+0x6c>)
 8009396:	f7ff ffd3 	bl	8009340 <LL_C2_IPCC_IsActiveFlag_CHx>
 800939a:	4603      	mov	r3, r0
 800939c:	2b00      	cmp	r3, #0
 800939e:	d008      	beq.n	80093b2 <HW_IPCC_Rx_Handler+0x46>
 80093a0:	4b0d      	ldr	r3, [pc, #52]	; (80093d8 <HW_IPCC_Rx_Handler+0x6c>)
 80093a2:	685b      	ldr	r3, [r3, #4]
 80093a4:	f003 0301 	and.w	r3, r3, #1
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d102      	bne.n	80093b2 <HW_IPCC_Rx_Handler+0x46>
  {
    HW_IPCC_BLE_EvtHandler();
 80093ac:	f000 f89e 	bl	80094ec <HW_IPCC_BLE_EvtHandler>
 80093b0:	e00f      	b.n	80093d2 <HW_IPCC_Rx_Handler+0x66>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 80093b2:	2108      	movs	r1, #8
 80093b4:	4808      	ldr	r0, [pc, #32]	; (80093d8 <HW_IPCC_Rx_Handler+0x6c>)
 80093b6:	f7ff ffc3 	bl	8009340 <LL_C2_IPCC_IsActiveFlag_CHx>
 80093ba:	4603      	mov	r3, r0
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d009      	beq.n	80093d4 <HW_IPCC_Rx_Handler+0x68>
 80093c0:	4b05      	ldr	r3, [pc, #20]	; (80093d8 <HW_IPCC_Rx_Handler+0x6c>)
 80093c2:	685b      	ldr	r3, [r3, #4]
 80093c4:	43db      	mvns	r3, r3
 80093c6:	f003 0308 	and.w	r3, r3, #8
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d002      	beq.n	80093d4 <HW_IPCC_Rx_Handler+0x68>
  {
    HW_IPCC_TRACES_EvtHandler();
 80093ce:	f000 f915 	bl	80095fc <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 80093d2:	bf00      	nop
 80093d4:	bf00      	nop
}
 80093d6:	bd80      	pop	{r7, pc}
 80093d8:	58000c00 	.word	0x58000c00

080093dc <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 80093dc:	b580      	push	{r7, lr}
 80093de:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 80093e0:	2102      	movs	r1, #2
 80093e2:	4822      	ldr	r0, [pc, #136]	; (800946c <HW_IPCC_Tx_Handler+0x90>)
 80093e4:	f7ff ff97 	bl	8009316 <LL_C1_IPCC_IsActiveFlag_CHx>
 80093e8:	4603      	mov	r3, r0
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d109      	bne.n	8009402 <HW_IPCC_Tx_Handler+0x26>
 80093ee:	4b1f      	ldr	r3, [pc, #124]	; (800946c <HW_IPCC_Tx_Handler+0x90>)
 80093f0:	685b      	ldr	r3, [r3, #4]
 80093f2:	43db      	mvns	r3, r3
 80093f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d002      	beq.n	8009402 <HW_IPCC_Tx_Handler+0x26>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 80093fc:	f000 f8a6 	bl	800954c <HW_IPCC_SYS_CmdEvtHandler>
 8009400:	e031      	b.n	8009466 <HW_IPCC_Tx_Handler+0x8a>
  if (HW_IPCC_TX_PENDING( HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 8009402:	2102      	movs	r1, #2
 8009404:	4819      	ldr	r0, [pc, #100]	; (800946c <HW_IPCC_Tx_Handler+0x90>)
 8009406:	f7ff ff86 	bl	8009316 <LL_C1_IPCC_IsActiveFlag_CHx>
 800940a:	4603      	mov	r3, r0
 800940c:	2b00      	cmp	r3, #0
 800940e:	d109      	bne.n	8009424 <HW_IPCC_Tx_Handler+0x48>
 8009410:	4b16      	ldr	r3, [pc, #88]	; (800946c <HW_IPCC_Tx_Handler+0x90>)
 8009412:	685b      	ldr	r3, [r3, #4]
 8009414:	43db      	mvns	r3, r3
 8009416:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800941a:	2b00      	cmp	r3, #0
 800941c:	d002      	beq.n	8009424 <HW_IPCC_Tx_Handler+0x48>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 800941e:	f000 f895 	bl	800954c <HW_IPCC_SYS_CmdEvtHandler>
 8009422:	e020      	b.n	8009466 <HW_IPCC_Tx_Handler+0x8a>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 8009424:	2108      	movs	r1, #8
 8009426:	4811      	ldr	r0, [pc, #68]	; (800946c <HW_IPCC_Tx_Handler+0x90>)
 8009428:	f7ff ff75 	bl	8009316 <LL_C1_IPCC_IsActiveFlag_CHx>
 800942c:	4603      	mov	r3, r0
 800942e:	2b00      	cmp	r3, #0
 8009430:	d109      	bne.n	8009446 <HW_IPCC_Tx_Handler+0x6a>
 8009432:	4b0e      	ldr	r3, [pc, #56]	; (800946c <HW_IPCC_Tx_Handler+0x90>)
 8009434:	685b      	ldr	r3, [r3, #4]
 8009436:	43db      	mvns	r3, r3
 8009438:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800943c:	2b00      	cmp	r3, #0
 800943e:	d002      	beq.n	8009446 <HW_IPCC_Tx_Handler+0x6a>
  {
    HW_IPCC_MM_FreeBufHandler();
 8009440:	f000 f8be 	bl	80095c0 <HW_IPCC_MM_FreeBufHandler>
 8009444:	e00f      	b.n	8009466 <HW_IPCC_Tx_Handler+0x8a>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 8009446:	2120      	movs	r1, #32
 8009448:	4808      	ldr	r0, [pc, #32]	; (800946c <HW_IPCC_Tx_Handler+0x90>)
 800944a:	f7ff ff64 	bl	8009316 <LL_C1_IPCC_IsActiveFlag_CHx>
 800944e:	4603      	mov	r3, r0
 8009450:	2b00      	cmp	r3, #0
 8009452:	d109      	bne.n	8009468 <HW_IPCC_Tx_Handler+0x8c>
 8009454:	4b05      	ldr	r3, [pc, #20]	; (800946c <HW_IPCC_Tx_Handler+0x90>)
 8009456:	685b      	ldr	r3, [r3, #4]
 8009458:	43db      	mvns	r3, r3
 800945a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800945e:	2b00      	cmp	r3, #0
 8009460:	d002      	beq.n	8009468 <HW_IPCC_Tx_Handler+0x8c>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 8009462:	f000 f84f 	bl	8009504 <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 8009466:	bf00      	nop
 8009468:	bf00      	nop
}
 800946a:	bd80      	pop	{r7, pc}
 800946c:	58000c00 	.word	0x58000c00

08009470 <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 8009470:	b580      	push	{r7, lr}
 8009472:	af00      	add	r7, sp, #0
  /**
  * Such as IPCC IP available to the CPU2, it is required to keep the IPCC clock running
    when FUS is running on CPU2 and CPU1 enters deep sleep mode
  */
  LL_C2_AHB3_GRP1_EnableClock(LL_C2_AHB3_GRP1_PERIPH_IPCC);
 8009474:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8009478:	f7ff febd 	bl	80091f6 <LL_C2_AHB3_GRP1_EnableClock>

   /**
   * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
   */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 800947c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8009480:	f7ff fe7a 	bl	8009178 <LL_C2_EXTI_EnableEvent_32_63>
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 8009484:	f44f 7000 	mov.w	r0, #512	; 0x200
 8009488:	f7ff fe8a 	bl	80091a0 <LL_EXTI_EnableRisingTrig_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 800948c:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 800948e:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 8009490:	f7ff fe62 	bl	8009158 <LL_PWR_EnableBootC2>

  return;
 8009494:	bf00      	nop
}
 8009496:	bd80      	pop	{r7, pc}

08009498 <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 8009498:	b580      	push	{r7, lr}
 800949a:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 800949c:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80094a0:	f7ff fe90 	bl	80091c4 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 80094a4:	4806      	ldr	r0, [pc, #24]	; (80094c0 <HW_IPCC_Init+0x28>)
 80094a6:	f7ff fed2 	bl	800924e <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 80094aa:	4805      	ldr	r0, [pc, #20]	; (80094c0 <HW_IPCC_Init+0x28>)
 80094ac:	f7ff febf 	bl	800922e <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 80094b0:	202c      	movs	r0, #44	; 0x2c
 80094b2:	f7f8 fc2e 	bl	8001d12 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 80094b6:	202d      	movs	r0, #45	; 0x2d
 80094b8:	f7f8 fc2b 	bl	8001d12 <HAL_NVIC_EnableIRQ>

  return;
 80094bc:	bf00      	nop
}
 80094be:	bd80      	pop	{r7, pc}
 80094c0:	58000c00 	.word	0x58000c00

080094c4 <HW_IPCC_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
void HW_IPCC_BLE_Init( void )
{
 80094c4:	b580      	push	{r7, lr}
 80094c6:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 80094c8:	2101      	movs	r1, #1
 80094ca:	4802      	ldr	r0, [pc, #8]	; (80094d4 <HW_IPCC_BLE_Init+0x10>)
 80094cc:	f7ff fef4 	bl	80092b8 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 80094d0:	bf00      	nop
}
 80094d2:	bd80      	pop	{r7, pc}
 80094d4:	58000c00 	.word	0x58000c00

080094d8 <HW_IPCC_BLE_SendCmd>:

void HW_IPCC_BLE_SendCmd( void )
{
 80094d8:	b580      	push	{r7, lr}
 80094da:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_BLE_CMD_CHANNEL );
 80094dc:	2101      	movs	r1, #1
 80094de:	4802      	ldr	r0, [pc, #8]	; (80094e8 <HW_IPCC_BLE_SendCmd+0x10>)
 80094e0:	f7ff ff0a 	bl	80092f8 <LL_C1_IPCC_SetFlag_CHx>

  return;
 80094e4:	bf00      	nop
}
 80094e6:	bd80      	pop	{r7, pc}
 80094e8:	58000c00 	.word	0x58000c00

080094ec <HW_IPCC_BLE_EvtHandler>:

static void HW_IPCC_BLE_EvtHandler( void )
{
 80094ec:	b580      	push	{r7, lr}
 80094ee:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 80094f0:	f7fe f81a 	bl	8007528 <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 80094f4:	2101      	movs	r1, #1
 80094f6:	4802      	ldr	r0, [pc, #8]	; (8009500 <HW_IPCC_BLE_EvtHandler+0x14>)
 80094f8:	f7ff fef0 	bl	80092dc <LL_C1_IPCC_ClearFlag_CHx>

  return;
 80094fc:	bf00      	nop
}
 80094fe:	bd80      	pop	{r7, pc}
 8009500:	58000c00 	.word	0x58000c00

08009504 <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 8009504:	b580      	push	{r7, lr}
 8009506:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 8009508:	2120      	movs	r1, #32
 800950a:	4803      	ldr	r0, [pc, #12]	; (8009518 <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 800950c:	f7ff fec2 	bl	8009294 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_BLE_AclDataAckNot();
 8009510:	f7fe f83a 	bl	8007588 <HW_IPCC_BLE_AclDataAckNot>

  return;
 8009514:	bf00      	nop
}
 8009516:	bd80      	pop	{r7, pc}
 8009518:	58000c00 	.word	0x58000c00

0800951c <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 800951c:	b580      	push	{r7, lr}
 800951e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8009520:	2102      	movs	r1, #2
 8009522:	4802      	ldr	r0, [pc, #8]	; (800952c <HW_IPCC_SYS_Init+0x10>)
 8009524:	f7ff fec8 	bl	80092b8 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8009528:	bf00      	nop
}
 800952a:	bd80      	pop	{r7, pc}
 800952c:	58000c00 	.word	0x58000c00

08009530 <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 8009530:	b580      	push	{r7, lr}
 8009532:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8009534:	2102      	movs	r1, #2
 8009536:	4804      	ldr	r0, [pc, #16]	; (8009548 <HW_IPCC_SYS_SendCmd+0x18>)
 8009538:	f7ff fede 	bl	80092f8 <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800953c:	2102      	movs	r1, #2
 800953e:	4802      	ldr	r0, [pc, #8]	; (8009548 <HW_IPCC_SYS_SendCmd+0x18>)
 8009540:	f7ff fe95 	bl	800926e <LL_C1_IPCC_EnableTransmitChannel>

  return;
 8009544:	bf00      	nop
}
 8009546:	bd80      	pop	{r7, pc}
 8009548:	58000c00 	.word	0x58000c00

0800954c <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 800954c:	b580      	push	{r7, lr}
 800954e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8009550:	2102      	movs	r1, #2
 8009552:	4803      	ldr	r0, [pc, #12]	; (8009560 <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 8009554:	f7ff fe9e 	bl	8009294 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_SYS_CmdEvtNot();
 8009558:	f7fe f866 	bl	8007628 <HW_IPCC_SYS_CmdEvtNot>

  return;
 800955c:	bf00      	nop
}
 800955e:	bd80      	pop	{r7, pc}
 8009560:	58000c00 	.word	0x58000c00

08009564 <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 8009564:	b580      	push	{r7, lr}
 8009566:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 8009568:	f7fe f874 	bl	8007654 <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 800956c:	2102      	movs	r1, #2
 800956e:	4802      	ldr	r0, [pc, #8]	; (8009578 <HW_IPCC_SYS_EvtHandler+0x14>)
 8009570:	f7ff feb4 	bl	80092dc <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8009574:	bf00      	nop
}
 8009576:	bd80      	pop	{r7, pc}
 8009578:	58000c00 	.word	0x58000c00

0800957c <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 800957c:	b580      	push	{r7, lr}
 800957e:	b082      	sub	sp, #8
 8009580:	af00      	add	r7, sp, #0
 8009582:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 8009584:	2108      	movs	r1, #8
 8009586:	480c      	ldr	r0, [pc, #48]	; (80095b8 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8009588:	f7ff fec5 	bl	8009316 <LL_C1_IPCC_IsActiveFlag_CHx>
 800958c:	4603      	mov	r3, r0
 800958e:	2b00      	cmp	r3, #0
 8009590:	d007      	beq.n	80095a2 <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 8009592:	4a0a      	ldr	r2, [pc, #40]	; (80095bc <HW_IPCC_MM_SendFreeBuf+0x40>)
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8009598:	2108      	movs	r1, #8
 800959a:	4807      	ldr	r0, [pc, #28]	; (80095b8 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800959c:	f7ff fe67 	bl	800926e <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 80095a0:	e006      	b.n	80095b0 <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	4798      	blx	r3
    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 80095a6:	2108      	movs	r1, #8
 80095a8:	4803      	ldr	r0, [pc, #12]	; (80095b8 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 80095aa:	f7ff fea5 	bl	80092f8 <LL_C1_IPCC_SetFlag_CHx>
  return;
 80095ae:	bf00      	nop
}
 80095b0:	3708      	adds	r7, #8
 80095b2:	46bd      	mov	sp, r7
 80095b4:	bd80      	pop	{r7, pc}
 80095b6:	bf00      	nop
 80095b8:	58000c00 	.word	0x58000c00
 80095bc:	200012c4 	.word	0x200012c4

080095c0 <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 80095c0:	b580      	push	{r7, lr}
 80095c2:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 80095c4:	2108      	movs	r1, #8
 80095c6:	4806      	ldr	r0, [pc, #24]	; (80095e0 <HW_IPCC_MM_FreeBufHandler+0x20>)
 80095c8:	f7ff fe64 	bl	8009294 <LL_C1_IPCC_DisableTransmitChannel>

  FreeBufCb();
 80095cc:	4b05      	ldr	r3, [pc, #20]	; (80095e4 <HW_IPCC_MM_FreeBufHandler+0x24>)
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	4798      	blx	r3

  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 80095d2:	2108      	movs	r1, #8
 80095d4:	4802      	ldr	r0, [pc, #8]	; (80095e0 <HW_IPCC_MM_FreeBufHandler+0x20>)
 80095d6:	f7ff fe8f 	bl	80092f8 <LL_C1_IPCC_SetFlag_CHx>

  return;
 80095da:	bf00      	nop
}
 80095dc:	bd80      	pop	{r7, pc}
 80095de:	bf00      	nop
 80095e0:	58000c00 	.word	0x58000c00
 80095e4:	200012c4 	.word	0x200012c4

080095e8 <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 80095e8:	b580      	push	{r7, lr}
 80095ea:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 80095ec:	2108      	movs	r1, #8
 80095ee:	4802      	ldr	r0, [pc, #8]	; (80095f8 <HW_IPCC_TRACES_Init+0x10>)
 80095f0:	f7ff fe62 	bl	80092b8 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 80095f4:	bf00      	nop
}
 80095f6:	bd80      	pop	{r7, pc}
 80095f8:	58000c00 	.word	0x58000c00

080095fc <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 80095fc:	b580      	push	{r7, lr}
 80095fe:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 8009600:	f7fe f8d0 	bl	80077a4 <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 8009604:	2108      	movs	r1, #8
 8009606:	4802      	ldr	r0, [pc, #8]	; (8009610 <HW_IPCC_TRACES_EvtHandler+0x14>)
 8009608:	f7ff fe68 	bl	80092dc <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800960c:	bf00      	nop
}
 800960e:	bd80      	pop	{r7, pc}
 8009610:	58000c00 	.word	0x58000c00

08009614 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 8009614:	b480      	push	{r7}
 8009616:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 8009618:	4b05      	ldr	r3, [pc, #20]	; (8009630 <UTIL_LPM_Init+0x1c>)
 800961a:	2200      	movs	r2, #0
 800961c:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 800961e:	4b05      	ldr	r3, [pc, #20]	; (8009634 <UTIL_LPM_Init+0x20>)
 8009620:	2200      	movs	r2, #0
 8009622:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 8009624:	bf00      	nop
 8009626:	46bd      	mov	sp, r7
 8009628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800962c:	4770      	bx	lr
 800962e:	bf00      	nop
 8009630:	200012c8 	.word	0x200012c8
 8009634:	200012cc 	.word	0x200012cc

08009638 <UTIL_LPM_SetOffMode>:
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 8009638:	b480      	push	{r7}
 800963a:	b087      	sub	sp, #28
 800963c:	af00      	add	r7, sp, #0
 800963e:	6078      	str	r0, [r7, #4]
 8009640:	460b      	mov	r3, r1
 8009642:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009644:	f3ef 8310 	mrs	r3, PRIMASK
 8009648:	613b      	str	r3, [r7, #16]
  return(result);
 800964a:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 800964c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800964e:	b672      	cpsid	i
}
 8009650:	bf00      	nop
  
  switch(state)
 8009652:	78fb      	ldrb	r3, [r7, #3]
 8009654:	2b00      	cmp	r3, #0
 8009656:	d008      	beq.n	800966a <UTIL_LPM_SetOffMode+0x32>
 8009658:	2b01      	cmp	r3, #1
 800965a:	d10e      	bne.n	800967a <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 800965c:	4b0d      	ldr	r3, [pc, #52]	; (8009694 <UTIL_LPM_SetOffMode+0x5c>)
 800965e:	681a      	ldr	r2, [r3, #0]
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	4313      	orrs	r3, r2
 8009664:	4a0b      	ldr	r2, [pc, #44]	; (8009694 <UTIL_LPM_SetOffMode+0x5c>)
 8009666:	6013      	str	r3, [r2, #0]
      break;
 8009668:	e008      	b.n	800967c <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	43da      	mvns	r2, r3
 800966e:	4b09      	ldr	r3, [pc, #36]	; (8009694 <UTIL_LPM_SetOffMode+0x5c>)
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	4013      	ands	r3, r2
 8009674:	4a07      	ldr	r2, [pc, #28]	; (8009694 <UTIL_LPM_SetOffMode+0x5c>)
 8009676:	6013      	str	r3, [r2, #0]
      break;
 8009678:	e000      	b.n	800967c <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 800967a:	bf00      	nop
 800967c:	697b      	ldr	r3, [r7, #20]
 800967e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	f383 8810 	msr	PRIMASK, r3
}
 8009686:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 8009688:	bf00      	nop
 800968a:	371c      	adds	r7, #28
 800968c:	46bd      	mov	sp, r7
 800968e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009692:	4770      	bx	lr
 8009694:	200012cc 	.word	0x200012cc

08009698 <UTIL_SEQ_Run>:
 * This function can be nested.
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 8009698:	b580      	push	{r7, lr}
 800969a:	b08c      	sub	sp, #48	; 0x30
 800969c:	af00      	add	r7, sp, #0
 800969e:	6078      	str	r0, [r7, #4]
  /**
   *  When this function is nested, the mask to be applied cannot be larger than the first call
   *  The mask is always getting smaller and smaller
   *  A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 80096a0:	4b6a      	ldr	r3, [pc, #424]	; (800984c <UTIL_SEQ_Run+0x1b4>)
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	627b      	str	r3, [r7, #36]	; 0x24
  SuperMask &= Mask_bm;
 80096a6:	4b69      	ldr	r3, [pc, #420]	; (800984c <UTIL_SEQ_Run+0x1b4>)
 80096a8:	681a      	ldr	r2, [r3, #0]
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	4013      	ands	r3, r2
 80096ae:	4a67      	ldr	r2, [pc, #412]	; (800984c <UTIL_SEQ_Run+0x1b4>)
 80096b0:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 80096b2:	4b67      	ldr	r3, [pc, #412]	; (8009850 <UTIL_SEQ_Run+0x1b8>)
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	62bb      	str	r3, [r7, #40]	; 0x28
  while(((local_taskset & TaskMask & SuperMask) != 0U) && ((EvtSet & EvtWaited)==0U))
 80096b8:	e086      	b.n	80097c8 <UTIL_SEQ_Run+0x130>
  {
    counter = 0U;
 80096ba:	2300      	movs	r3, #0
 80096bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    /**
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & TaskMask & SuperMask)== 0U)
 80096be:	e002      	b.n	80096c6 <UTIL_SEQ_Run+0x2e>
    {
      counter++;
 80096c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096c2:	3301      	adds	r3, #1
 80096c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    while((TaskPrio[counter].priority & TaskMask & SuperMask)== 0U)
 80096c6:	4a63      	ldr	r2, [pc, #396]	; (8009854 <UTIL_SEQ_Run+0x1bc>)
 80096c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096ca:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80096ce:	4b62      	ldr	r3, [pc, #392]	; (8009858 <UTIL_SEQ_Run+0x1c0>)
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	401a      	ands	r2, r3
 80096d4:	4b5d      	ldr	r3, [pc, #372]	; (800984c <UTIL_SEQ_Run+0x1b4>)
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	4013      	ands	r3, r2
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d0f0      	beq.n	80096c0 <UTIL_SEQ_Run+0x28>
    }

    current_task_set = TaskPrio[counter].priority & TaskMask & SuperMask;
 80096de:	4a5d      	ldr	r2, [pc, #372]	; (8009854 <UTIL_SEQ_Run+0x1bc>)
 80096e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096e2:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80096e6:	4b5c      	ldr	r3, [pc, #368]	; (8009858 <UTIL_SEQ_Run+0x1c0>)
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	401a      	ands	r2, r3
 80096ec:	4b57      	ldr	r3, [pc, #348]	; (800984c <UTIL_SEQ_Run+0x1b4>)
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	4013      	ands	r3, r2
 80096f2:	623b      	str	r3, [r7, #32]
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 80096f4:	4a57      	ldr	r2, [pc, #348]	; (8009854 <UTIL_SEQ_Run+0x1bc>)
 80096f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096f8:	00db      	lsls	r3, r3, #3
 80096fa:	4413      	add	r3, r2
 80096fc:	685a      	ldr	r2, [r3, #4]
 80096fe:	6a3b      	ldr	r3, [r7, #32]
 8009700:	4013      	ands	r3, r2
 8009702:	2b00      	cmp	r3, #0
 8009704:	d106      	bne.n	8009714 <UTIL_SEQ_Run+0x7c>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 8009706:	4a53      	ldr	r2, [pc, #332]	; (8009854 <UTIL_SEQ_Run+0x1bc>)
 8009708:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800970a:	00db      	lsls	r3, r3, #3
 800970c:	4413      	add	r3, r2
 800970e:	f04f 32ff 	mov.w	r2, #4294967295
 8009712:	605a      	str	r2, [r3, #4]

    /** Read the flag index of the task to be executed
	 *  Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 *  before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 8009714:	4a4f      	ldr	r2, [pc, #316]	; (8009854 <UTIL_SEQ_Run+0x1bc>)
 8009716:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009718:	00db      	lsls	r3, r3, #3
 800971a:	4413      	add	r3, r2
 800971c:	685a      	ldr	r2, [r3, #4]
 800971e:	6a3b      	ldr	r3, [r7, #32]
 8009720:	4013      	ands	r3, r2
 8009722:	4618      	mov	r0, r3
 8009724:	f000 f9ac 	bl	8009a80 <SEQ_BitPosition>
 8009728:	4603      	mov	r3, r0
 800972a:	461a      	mov	r2, r3
 800972c:	4b4b      	ldr	r3, [pc, #300]	; (800985c <UTIL_SEQ_Run+0x1c4>)
 800972e:	601a      	str	r2, [r3, #0]

    /** remove from the roun_robin mask the task that has been selected to be executed */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 8009730:	4a48      	ldr	r2, [pc, #288]	; (8009854 <UTIL_SEQ_Run+0x1bc>)
 8009732:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009734:	00db      	lsls	r3, r3, #3
 8009736:	4413      	add	r3, r2
 8009738:	685a      	ldr	r2, [r3, #4]
 800973a:	4b48      	ldr	r3, [pc, #288]	; (800985c <UTIL_SEQ_Run+0x1c4>)
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	2101      	movs	r1, #1
 8009740:	fa01 f303 	lsl.w	r3, r1, r3
 8009744:	43db      	mvns	r3, r3
 8009746:	401a      	ands	r2, r3
 8009748:	4942      	ldr	r1, [pc, #264]	; (8009854 <UTIL_SEQ_Run+0x1bc>)
 800974a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800974c:	00db      	lsls	r3, r3, #3
 800974e:	440b      	add	r3, r1
 8009750:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009752:	f3ef 8310 	mrs	r3, PRIMASK
 8009756:	617b      	str	r3, [r7, #20]
  return(result);
 8009758:	697b      	ldr	r3, [r7, #20]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800975a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800975c:	b672      	cpsid	i
}
 800975e:	bf00      	nop
    /** remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 8009760:	4b3e      	ldr	r3, [pc, #248]	; (800985c <UTIL_SEQ_Run+0x1c4>)
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	2201      	movs	r2, #1
 8009766:	fa02 f303 	lsl.w	r3, r2, r3
 800976a:	43da      	mvns	r2, r3
 800976c:	4b38      	ldr	r3, [pc, #224]	; (8009850 <UTIL_SEQ_Run+0x1b8>)
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	4013      	ands	r3, r2
 8009772:	4a37      	ldr	r2, [pc, #220]	; (8009850 <UTIL_SEQ_Run+0x1b8>)
 8009774:	6013      	str	r3, [r2, #0]
    /** remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 8009776:	2302      	movs	r3, #2
 8009778:	62fb      	str	r3, [r7, #44]	; 0x2c
 800977a:	e013      	b.n	80097a4 <UTIL_SEQ_Run+0x10c>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 800977c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800977e:	3b01      	subs	r3, #1
 8009780:	4a34      	ldr	r2, [pc, #208]	; (8009854 <UTIL_SEQ_Run+0x1bc>)
 8009782:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 8009786:	4b35      	ldr	r3, [pc, #212]	; (800985c <UTIL_SEQ_Run+0x1c4>)
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	2201      	movs	r2, #1
 800978c:	fa02 f303 	lsl.w	r3, r2, r3
 8009790:	43da      	mvns	r2, r3
 8009792:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009794:	3b01      	subs	r3, #1
 8009796:	400a      	ands	r2, r1
 8009798:	492e      	ldr	r1, [pc, #184]	; (8009854 <UTIL_SEQ_Run+0x1bc>)
 800979a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800979e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097a0:	3b01      	subs	r3, #1
 80097a2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80097a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d1e8      	bne.n	800977c <UTIL_SEQ_Run+0xe4>
 80097aa:	69fb      	ldr	r3, [r7, #28]
 80097ac:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80097ae:	693b      	ldr	r3, [r7, #16]
 80097b0:	f383 8810 	msr	PRIMASK, r3
}
 80097b4:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );
    /** Execute the task */
    TaskCb[CurrentTaskIdx]( );
 80097b6:	4b29      	ldr	r3, [pc, #164]	; (800985c <UTIL_SEQ_Run+0x1c4>)
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	4a29      	ldr	r2, [pc, #164]	; (8009860 <UTIL_SEQ_Run+0x1c8>)
 80097bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80097c0:	4798      	blx	r3
    
    local_taskset = TaskSet;
 80097c2:	4b23      	ldr	r3, [pc, #140]	; (8009850 <UTIL_SEQ_Run+0x1b8>)
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	62bb      	str	r3, [r7, #40]	; 0x28
  while(((local_taskset & TaskMask & SuperMask) != 0U) && ((EvtSet & EvtWaited)==0U))
 80097c8:	4b23      	ldr	r3, [pc, #140]	; (8009858 <UTIL_SEQ_Run+0x1c0>)
 80097ca:	681a      	ldr	r2, [r3, #0]
 80097cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097ce:	401a      	ands	r2, r3
 80097d0:	4b1e      	ldr	r3, [pc, #120]	; (800984c <UTIL_SEQ_Run+0x1b4>)
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	4013      	ands	r3, r2
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d007      	beq.n	80097ea <UTIL_SEQ_Run+0x152>
 80097da:	4b22      	ldr	r3, [pc, #136]	; (8009864 <UTIL_SEQ_Run+0x1cc>)
 80097dc:	681a      	ldr	r2, [r3, #0]
 80097de:	4b22      	ldr	r3, [pc, #136]	; (8009868 <UTIL_SEQ_Run+0x1d0>)
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	4013      	ands	r3, r2
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	f43f af68 	beq.w	80096ba <UTIL_SEQ_Run+0x22>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 80097ea:	4b1c      	ldr	r3, [pc, #112]	; (800985c <UTIL_SEQ_Run+0x1c4>)
 80097ec:	f04f 32ff 	mov.w	r2, #4294967295
 80097f0:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 80097f2:	f000 f937 	bl	8009a64 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80097f6:	f3ef 8310 	mrs	r3, PRIMASK
 80097fa:	60fb      	str	r3, [r7, #12]
  return(result);
 80097fc:	68fb      	ldr	r3, [r7, #12]
  
  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 80097fe:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
 8009800:	b672      	cpsid	i
}
 8009802:	bf00      	nop
  local_taskset = TaskSet;
 8009804:	4b12      	ldr	r3, [pc, #72]	; (8009850 <UTIL_SEQ_Run+0x1b8>)
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	62bb      	str	r3, [r7, #40]	; 0x28
  if (!(((local_taskset & TaskMask & SuperMask) != 0U) || ((EvtSet & EvtWaited)!= 0U))) 
 800980a:	4b13      	ldr	r3, [pc, #76]	; (8009858 <UTIL_SEQ_Run+0x1c0>)
 800980c:	681a      	ldr	r2, [r3, #0]
 800980e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009810:	401a      	ands	r2, r3
 8009812:	4b0e      	ldr	r3, [pc, #56]	; (800984c <UTIL_SEQ_Run+0x1b4>)
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	4013      	ands	r3, r2
 8009818:	2b00      	cmp	r3, #0
 800981a:	d108      	bne.n	800982e <UTIL_SEQ_Run+0x196>
 800981c:	4b11      	ldr	r3, [pc, #68]	; (8009864 <UTIL_SEQ_Run+0x1cc>)
 800981e:	681a      	ldr	r2, [r3, #0]
 8009820:	4b11      	ldr	r3, [pc, #68]	; (8009868 <UTIL_SEQ_Run+0x1d0>)
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	4013      	ands	r3, r2
 8009826:	2b00      	cmp	r3, #0
 8009828:	d101      	bne.n	800982e <UTIL_SEQ_Run+0x196>
  {
	UTIL_SEQ_Idle( );
 800982a:	f7f7 fa72 	bl	8000d12 <UTIL_SEQ_Idle>
 800982e:	69bb      	ldr	r3, [r7, #24]
 8009830:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009832:	68bb      	ldr	r3, [r7, #8]
 8009834:	f383 8810 	msr	PRIMASK, r3
}
 8009838:	bf00      	nop
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );
  
  UTIL_SEQ_PostIdle( );
 800983a:	f000 f91a 	bl	8009a72 <UTIL_SEQ_PostIdle>

  /** restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 800983e:	4a03      	ldr	r2, [pc, #12]	; (800984c <UTIL_SEQ_Run+0x1b4>)
 8009840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009842:	6013      	str	r3, [r2, #0]

  return;
 8009844:	bf00      	nop
}
 8009846:	3730      	adds	r7, #48	; 0x30
 8009848:	46bd      	mov	sp, r7
 800984a:	bd80      	pop	{r7, pc}
 800984c:	20000024 	.word	0x20000024
 8009850:	200012d0 	.word	0x200012d0
 8009854:	20001360 	.word	0x20001360
 8009858:	20000020 	.word	0x20000020
 800985c:	200012dc 	.word	0x200012dc
 8009860:	200012e0 	.word	0x200012e0
 8009864:	200012d4 	.word	0x200012d4
 8009868:	200012d8 	.word	0x200012d8

0800986c <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 800986c:	b580      	push	{r7, lr}
 800986e:	b088      	sub	sp, #32
 8009870:	af00      	add	r7, sp, #0
 8009872:	60f8      	str	r0, [r7, #12]
 8009874:	60b9      	str	r1, [r7, #8]
 8009876:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009878:	f3ef 8310 	mrs	r3, PRIMASK
 800987c:	617b      	str	r3, [r7, #20]
  return(result);
 800987e:	697b      	ldr	r3, [r7, #20]
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 8009880:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 8009882:	b672      	cpsid	i
}
 8009884:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 8009886:	68f8      	ldr	r0, [r7, #12]
 8009888:	f000 f8fa 	bl	8009a80 <SEQ_BitPosition>
 800988c:	4603      	mov	r3, r0
 800988e:	4619      	mov	r1, r3
 8009890:	4a06      	ldr	r2, [pc, #24]	; (80098ac <UTIL_SEQ_RegTask+0x40>)
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8009898:	69fb      	ldr	r3, [r7, #28]
 800989a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800989c:	69bb      	ldr	r3, [r7, #24]
 800989e:	f383 8810 	msr	PRIMASK, r3
}
 80098a2:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 80098a4:	bf00      	nop
}
 80098a6:	3720      	adds	r7, #32
 80098a8:	46bd      	mov	sp, r7
 80098aa:	bd80      	pop	{r7, pc}
 80098ac:	200012e0 	.word	0x200012e0

080098b0 <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 80098b0:	b480      	push	{r7}
 80098b2:	b087      	sub	sp, #28
 80098b4:	af00      	add	r7, sp, #0
 80098b6:	6078      	str	r0, [r7, #4]
 80098b8:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80098ba:	f3ef 8310 	mrs	r3, PRIMASK
 80098be:	60fb      	str	r3, [r7, #12]
  return(result);
 80098c0:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 80098c2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80098c4:	b672      	cpsid	i
}
 80098c6:	bf00      	nop

  TaskSet |= TaskId_bm;
 80098c8:	4b0d      	ldr	r3, [pc, #52]	; (8009900 <UTIL_SEQ_SetTask+0x50>)
 80098ca:	681a      	ldr	r2, [r3, #0]
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	4313      	orrs	r3, r2
 80098d0:	4a0b      	ldr	r2, [pc, #44]	; (8009900 <UTIL_SEQ_SetTask+0x50>)
 80098d2:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 80098d4:	4a0b      	ldr	r2, [pc, #44]	; (8009904 <UTIL_SEQ_SetTask+0x54>)
 80098d6:	683b      	ldr	r3, [r7, #0]
 80098d8:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	431a      	orrs	r2, r3
 80098e0:	4908      	ldr	r1, [pc, #32]	; (8009904 <UTIL_SEQ_SetTask+0x54>)
 80098e2:	683b      	ldr	r3, [r7, #0]
 80098e4:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 80098e8:	697b      	ldr	r3, [r7, #20]
 80098ea:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80098ec:	693b      	ldr	r3, [r7, #16]
 80098ee:	f383 8810 	msr	PRIMASK, r3
}
 80098f2:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 80098f4:	bf00      	nop
}
 80098f6:	371c      	adds	r7, #28
 80098f8:	46bd      	mov	sp, r7
 80098fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098fe:	4770      	bx	lr
 8009900:	200012d0 	.word	0x200012d0
 8009904:	20001360 	.word	0x20001360

08009908 <UTIL_SEQ_PauseTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION();
  return _status;
}

void UTIL_SEQ_PauseTask( UTIL_SEQ_bm_t TaskId_bm )
{
 8009908:	b480      	push	{r7}
 800990a:	b087      	sub	sp, #28
 800990c:	af00      	add	r7, sp, #0
 800990e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009910:	f3ef 8310 	mrs	r3, PRIMASK
 8009914:	60fb      	str	r3, [r7, #12]
  return(result);
 8009916:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8009918:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800991a:	b672      	cpsid	i
}
 800991c:	bf00      	nop

  TaskMask &= (~TaskId_bm);
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	43da      	mvns	r2, r3
 8009922:	4b08      	ldr	r3, [pc, #32]	; (8009944 <UTIL_SEQ_PauseTask+0x3c>)
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	4013      	ands	r3, r2
 8009928:	4a06      	ldr	r2, [pc, #24]	; (8009944 <UTIL_SEQ_PauseTask+0x3c>)
 800992a:	6013      	str	r3, [r2, #0]
 800992c:	697b      	ldr	r3, [r7, #20]
 800992e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009930:	693b      	ldr	r3, [r7, #16]
 8009932:	f383 8810 	msr	PRIMASK, r3
}
 8009936:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8009938:	bf00      	nop
}
 800993a:	371c      	adds	r7, #28
 800993c:	46bd      	mov	sp, r7
 800993e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009942:	4770      	bx	lr
 8009944:	20000020 	.word	0x20000020

08009948 <UTIL_SEQ_ResumeTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION( );
  return _status;
}

void UTIL_SEQ_ResumeTask( UTIL_SEQ_bm_t TaskId_bm )
{
 8009948:	b480      	push	{r7}
 800994a:	b087      	sub	sp, #28
 800994c:	af00      	add	r7, sp, #0
 800994e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009950:	f3ef 8310 	mrs	r3, PRIMASK
 8009954:	60fb      	str	r3, [r7, #12]
  return(result);
 8009956:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8009958:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800995a:	b672      	cpsid	i
}
 800995c:	bf00      	nop

  TaskMask |= TaskId_bm;
 800995e:	4b09      	ldr	r3, [pc, #36]	; (8009984 <UTIL_SEQ_ResumeTask+0x3c>)
 8009960:	681a      	ldr	r2, [r3, #0]
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	4313      	orrs	r3, r2
 8009966:	4a07      	ldr	r2, [pc, #28]	; (8009984 <UTIL_SEQ_ResumeTask+0x3c>)
 8009968:	6013      	str	r3, [r2, #0]
 800996a:	697b      	ldr	r3, [r7, #20]
 800996c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800996e:	693b      	ldr	r3, [r7, #16]
 8009970:	f383 8810 	msr	PRIMASK, r3
}
 8009974:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8009976:	bf00      	nop
}
 8009978:	371c      	adds	r7, #28
 800997a:	46bd      	mov	sp, r7
 800997c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009980:	4770      	bx	lr
 8009982:	bf00      	nop
 8009984:	20000020 	.word	0x20000020

08009988 <UTIL_SEQ_SetEvt>:

void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t EvtId_bm )
{
 8009988:	b480      	push	{r7}
 800998a:	b087      	sub	sp, #28
 800998c:	af00      	add	r7, sp, #0
 800998e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009990:	f3ef 8310 	mrs	r3, PRIMASK
 8009994:	60fb      	str	r3, [r7, #12]
  return(result);
 8009996:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8009998:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800999a:	b672      	cpsid	i
}
 800999c:	bf00      	nop

  EvtSet |= EvtId_bm;
 800999e:	4b09      	ldr	r3, [pc, #36]	; (80099c4 <UTIL_SEQ_SetEvt+0x3c>)
 80099a0:	681a      	ldr	r2, [r3, #0]
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	4313      	orrs	r3, r2
 80099a6:	4a07      	ldr	r2, [pc, #28]	; (80099c4 <UTIL_SEQ_SetEvt+0x3c>)
 80099a8:	6013      	str	r3, [r2, #0]
 80099aa:	697b      	ldr	r3, [r7, #20]
 80099ac:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80099ae:	693b      	ldr	r3, [r7, #16]
 80099b0:	f383 8810 	msr	PRIMASK, r3
}
 80099b4:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 80099b6:	bf00      	nop
}
 80099b8:	371c      	adds	r7, #28
 80099ba:	46bd      	mov	sp, r7
 80099bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099c0:	4770      	bx	lr
 80099c2:	bf00      	nop
 80099c4:	200012d4 	.word	0x200012d4

080099c8 <UTIL_SEQ_WaitEvt>:

  return;
}

void UTIL_SEQ_WaitEvt(UTIL_SEQ_bm_t EvtId_bm)
{
 80099c8:	b580      	push	{r7, lr}
 80099ca:	b088      	sub	sp, #32
 80099cc:	af00      	add	r7, sp, #0
 80099ce:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_bm_t current_task_idx;
  UTIL_SEQ_bm_t wait_task_idx;
  /** store in local the current_task_id_bm as the global variable CurrentTaskIdx
   *  may be overwritten in case there are nested call of UTIL_SEQ_Run()
   */
  current_task_idx = CurrentTaskIdx;
 80099d0:	4b21      	ldr	r3, [pc, #132]	; (8009a58 <UTIL_SEQ_WaitEvt+0x90>)
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	61bb      	str	r3, [r7, #24]
  if(UTIL_SEQ_NOTASKRUNNING == CurrentTaskIdx)
 80099d6:	4b20      	ldr	r3, [pc, #128]	; (8009a58 <UTIL_SEQ_WaitEvt+0x90>)
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80099de:	d102      	bne.n	80099e6 <UTIL_SEQ_WaitEvt+0x1e>
  {
    wait_task_idx = 0;
 80099e0:	2300      	movs	r3, #0
 80099e2:	61fb      	str	r3, [r7, #28]
 80099e4:	e005      	b.n	80099f2 <UTIL_SEQ_WaitEvt+0x2a>
  }
  else
  {
    wait_task_idx = 1 << CurrentTaskIdx;
 80099e6:	4b1c      	ldr	r3, [pc, #112]	; (8009a58 <UTIL_SEQ_WaitEvt+0x90>)
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	2201      	movs	r2, #1
 80099ec:	fa02 f303 	lsl.w	r3, r2, r3
 80099f0:	61fb      	str	r3, [r7, #28]
  }

  /** backup the event id that was currently waited */
  event_waited_id_backup = EvtWaited;
 80099f2:	4b1a      	ldr	r3, [pc, #104]	; (8009a5c <UTIL_SEQ_WaitEvt+0x94>)
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	617b      	str	r3, [r7, #20]
  EvtWaited = EvtId_bm;
 80099f8:	4a18      	ldr	r2, [pc, #96]	; (8009a5c <UTIL_SEQ_WaitEvt+0x94>)
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	6013      	str	r3, [r2, #0]
   *  the while loop below.
   *  The system is waiting only for the last waited event.
   *  When it will go out, it will wait again from the previous one.
   *  It case it occurs while waiting for the second one, the while loop will exit immediately
   */
  while ((EvtSet & EvtWaited) == 0U)
 80099fe:	e005      	b.n	8009a0c <UTIL_SEQ_WaitEvt+0x44>
  {
    UTIL_SEQ_EvtIdle(wait_task_idx, EvtWaited);
 8009a00:	4b16      	ldr	r3, [pc, #88]	; (8009a5c <UTIL_SEQ_WaitEvt+0x94>)
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	4619      	mov	r1, r3
 8009a06:	69f8      	ldr	r0, [r7, #28]
 8009a08:	f7f7 f98a 	bl	8000d20 <UTIL_SEQ_EvtIdle>
  while ((EvtSet & EvtWaited) == 0U)
 8009a0c:	4b14      	ldr	r3, [pc, #80]	; (8009a60 <UTIL_SEQ_WaitEvt+0x98>)
 8009a0e:	681a      	ldr	r2, [r3, #0]
 8009a10:	4b12      	ldr	r3, [pc, #72]	; (8009a5c <UTIL_SEQ_WaitEvt+0x94>)
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	4013      	ands	r3, r2
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d0f2      	beq.n	8009a00 <UTIL_SEQ_WaitEvt+0x38>
  /**
   * Restore the CurrentTaskIdx that may have been modified by call of UTIL_SEQ_Run() from UTIL_SEQ_EvtIdle()
   * This is required so that a second call of UTIL_SEQ_WaitEvt() in the same process pass the correct current_task_id_bm
   * in the call of UTIL_SEQ_EvtIdle()
   */
  CurrentTaskIdx = current_task_idx;
 8009a1a:	4a0f      	ldr	r2, [pc, #60]	; (8009a58 <UTIL_SEQ_WaitEvt+0x90>)
 8009a1c:	69bb      	ldr	r3, [r7, #24]
 8009a1e:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009a20:	f3ef 8310 	mrs	r3, PRIMASK
 8009a24:	60bb      	str	r3, [r7, #8]
  return(result);
 8009a26:	68bb      	ldr	r3, [r7, #8]

  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8009a28:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8009a2a:	b672      	cpsid	i
}
 8009a2c:	bf00      	nop

  EvtSet &= (~EvtWaited);
 8009a2e:	4b0b      	ldr	r3, [pc, #44]	; (8009a5c <UTIL_SEQ_WaitEvt+0x94>)
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	43da      	mvns	r2, r3
 8009a34:	4b0a      	ldr	r3, [pc, #40]	; (8009a60 <UTIL_SEQ_WaitEvt+0x98>)
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	4013      	ands	r3, r2
 8009a3a:	4a09      	ldr	r2, [pc, #36]	; (8009a60 <UTIL_SEQ_WaitEvt+0x98>)
 8009a3c:	6013      	str	r3, [r2, #0]
 8009a3e:	693b      	ldr	r3, [r7, #16]
 8009a40:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	f383 8810 	msr	PRIMASK, r3
}
 8009a48:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  EvtWaited = event_waited_id_backup;
 8009a4a:	4a04      	ldr	r2, [pc, #16]	; (8009a5c <UTIL_SEQ_WaitEvt+0x94>)
 8009a4c:	697b      	ldr	r3, [r7, #20]
 8009a4e:	6013      	str	r3, [r2, #0]

  return;
 8009a50:	bf00      	nop
}
 8009a52:	3720      	adds	r7, #32
 8009a54:	46bd      	mov	sp, r7
 8009a56:	bd80      	pop	{r7, pc}
 8009a58:	200012dc 	.word	0x200012dc
 8009a5c:	200012d8 	.word	0x200012d8
 8009a60:	200012d4 	.word	0x200012d4

08009a64 <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 8009a64:	b480      	push	{r7}
 8009a66:	af00      	add	r7, sp, #0
  /**
   * Unless specified by the application, there is nothing to be done
   */
  return;
 8009a68:	bf00      	nop
}
 8009a6a:	46bd      	mov	sp, r7
 8009a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a70:	4770      	bx	lr

08009a72 <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 8009a72:	b480      	push	{r7}
 8009a74:	af00      	add	r7, sp, #0
  /**
   * Unless specified by the application, there is nothing to be done
   */
  return;
 8009a76:	bf00      	nop
}
 8009a78:	46bd      	mov	sp, r7
 8009a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a7e:	4770      	bx	lr

08009a80 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 8009a80:	b480      	push	{r7}
 8009a82:	b085      	sub	sp, #20
 8009a84:	af00      	add	r7, sp, #0
 8009a86:	6078      	str	r0, [r7, #4]
  uint8_t n = 0U;
 8009a88:	2300      	movs	r3, #0
 8009a8a:	73fb      	strb	r3, [r7, #15]

  if ((Value & 0xFFFF0000U) == 0U)  { n  = 16U; Value <<= 16U;  }
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	0c1b      	lsrs	r3, r3, #16
 8009a90:	041b      	lsls	r3, r3, #16
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	d104      	bne.n	8009aa0 <SEQ_BitPosition+0x20>
 8009a96:	2310      	movs	r3, #16
 8009a98:	73fb      	strb	r3, [r7, #15]
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	041b      	lsls	r3, r3, #16
 8009a9e:	607b      	str	r3, [r7, #4]
  if ((Value & 0xFF000000U) == 0U)  { n +=  8U; Value <<=  8U;  }
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	d105      	bne.n	8009ab6 <SEQ_BitPosition+0x36>
 8009aaa:	7bfb      	ldrb	r3, [r7, #15]
 8009aac:	3308      	adds	r3, #8
 8009aae:	73fb      	strb	r3, [r7, #15]
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	021b      	lsls	r3, r3, #8
 8009ab4:	607b      	str	r3, [r7, #4]
  if ((Value & 0xF0000000U) == 0U)  { n +=  4U; Value <<=  4U;  }
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	d105      	bne.n	8009acc <SEQ_BitPosition+0x4c>
 8009ac0:	7bfb      	ldrb	r3, [r7, #15]
 8009ac2:	3304      	adds	r3, #4
 8009ac4:	73fb      	strb	r3, [r7, #15]
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	011b      	lsls	r3, r3, #4
 8009aca:	607b      	str	r3, [r7, #4]

  n += SEQ_clz_table_4bit[Value >> (32-4)];
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	0f1b      	lsrs	r3, r3, #28
 8009ad0:	4a07      	ldr	r2, [pc, #28]	; (8009af0 <SEQ_BitPosition+0x70>)
 8009ad2:	5cd2      	ldrb	r2, [r2, r3]
 8009ad4:	7bfb      	ldrb	r3, [r7, #15]
 8009ad6:	4413      	add	r3, r2
 8009ad8:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 8009ada:	7bfb      	ldrb	r3, [r7, #15]
 8009adc:	f1c3 031f 	rsb	r3, r3, #31
 8009ae0:	b2db      	uxtb	r3, r3
}
 8009ae2:	4618      	mov	r0, r3
 8009ae4:	3714      	adds	r7, #20
 8009ae6:	46bd      	mov	sp, r7
 8009ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aec:	4770      	bx	lr
 8009aee:	bf00      	nop
 8009af0:	0800b650 	.word	0x0800b650

08009af4 <__errno>:
 8009af4:	4b01      	ldr	r3, [pc, #4]	; (8009afc <__errno+0x8>)
 8009af6:	6818      	ldr	r0, [r3, #0]
 8009af8:	4770      	bx	lr
 8009afa:	bf00      	nop
 8009afc:	20000028 	.word	0x20000028

08009b00 <__libc_init_array>:
 8009b00:	b570      	push	{r4, r5, r6, lr}
 8009b02:	4d0d      	ldr	r5, [pc, #52]	; (8009b38 <__libc_init_array+0x38>)
 8009b04:	4c0d      	ldr	r4, [pc, #52]	; (8009b3c <__libc_init_array+0x3c>)
 8009b06:	1b64      	subs	r4, r4, r5
 8009b08:	10a4      	asrs	r4, r4, #2
 8009b0a:	2600      	movs	r6, #0
 8009b0c:	42a6      	cmp	r6, r4
 8009b0e:	d109      	bne.n	8009b24 <__libc_init_array+0x24>
 8009b10:	4d0b      	ldr	r5, [pc, #44]	; (8009b40 <__libc_init_array+0x40>)
 8009b12:	4c0c      	ldr	r4, [pc, #48]	; (8009b44 <__libc_init_array+0x44>)
 8009b14:	f001 f9ee 	bl	800aef4 <_init>
 8009b18:	1b64      	subs	r4, r4, r5
 8009b1a:	10a4      	asrs	r4, r4, #2
 8009b1c:	2600      	movs	r6, #0
 8009b1e:	42a6      	cmp	r6, r4
 8009b20:	d105      	bne.n	8009b2e <__libc_init_array+0x2e>
 8009b22:	bd70      	pop	{r4, r5, r6, pc}
 8009b24:	f855 3b04 	ldr.w	r3, [r5], #4
 8009b28:	4798      	blx	r3
 8009b2a:	3601      	adds	r6, #1
 8009b2c:	e7ee      	b.n	8009b0c <__libc_init_array+0xc>
 8009b2e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009b32:	4798      	blx	r3
 8009b34:	3601      	adds	r6, #1
 8009b36:	e7f2      	b.n	8009b1e <__libc_init_array+0x1e>
 8009b38:	0800b700 	.word	0x0800b700
 8009b3c:	0800b700 	.word	0x0800b700
 8009b40:	0800b700 	.word	0x0800b700
 8009b44:	0800b704 	.word	0x0800b704

08009b48 <memcpy>:
 8009b48:	440a      	add	r2, r1
 8009b4a:	4291      	cmp	r1, r2
 8009b4c:	f100 33ff 	add.w	r3, r0, #4294967295
 8009b50:	d100      	bne.n	8009b54 <memcpy+0xc>
 8009b52:	4770      	bx	lr
 8009b54:	b510      	push	{r4, lr}
 8009b56:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009b5a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009b5e:	4291      	cmp	r1, r2
 8009b60:	d1f9      	bne.n	8009b56 <memcpy+0xe>
 8009b62:	bd10      	pop	{r4, pc}

08009b64 <memset>:
 8009b64:	4402      	add	r2, r0
 8009b66:	4603      	mov	r3, r0
 8009b68:	4293      	cmp	r3, r2
 8009b6a:	d100      	bne.n	8009b6e <memset+0xa>
 8009b6c:	4770      	bx	lr
 8009b6e:	f803 1b01 	strb.w	r1, [r3], #1
 8009b72:	e7f9      	b.n	8009b68 <memset+0x4>

08009b74 <iprintf>:
 8009b74:	b40f      	push	{r0, r1, r2, r3}
 8009b76:	4b0a      	ldr	r3, [pc, #40]	; (8009ba0 <iprintf+0x2c>)
 8009b78:	b513      	push	{r0, r1, r4, lr}
 8009b7a:	681c      	ldr	r4, [r3, #0]
 8009b7c:	b124      	cbz	r4, 8009b88 <iprintf+0x14>
 8009b7e:	69a3      	ldr	r3, [r4, #24]
 8009b80:	b913      	cbnz	r3, 8009b88 <iprintf+0x14>
 8009b82:	4620      	mov	r0, r4
 8009b84:	f000 faa2 	bl	800a0cc <__sinit>
 8009b88:	ab05      	add	r3, sp, #20
 8009b8a:	9a04      	ldr	r2, [sp, #16]
 8009b8c:	68a1      	ldr	r1, [r4, #8]
 8009b8e:	9301      	str	r3, [sp, #4]
 8009b90:	4620      	mov	r0, r4
 8009b92:	f000 fdcf 	bl	800a734 <_vfiprintf_r>
 8009b96:	b002      	add	sp, #8
 8009b98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009b9c:	b004      	add	sp, #16
 8009b9e:	4770      	bx	lr
 8009ba0:	20000028 	.word	0x20000028

08009ba4 <_puts_r>:
 8009ba4:	b570      	push	{r4, r5, r6, lr}
 8009ba6:	460e      	mov	r6, r1
 8009ba8:	4605      	mov	r5, r0
 8009baa:	b118      	cbz	r0, 8009bb4 <_puts_r+0x10>
 8009bac:	6983      	ldr	r3, [r0, #24]
 8009bae:	b90b      	cbnz	r3, 8009bb4 <_puts_r+0x10>
 8009bb0:	f000 fa8c 	bl	800a0cc <__sinit>
 8009bb4:	69ab      	ldr	r3, [r5, #24]
 8009bb6:	68ac      	ldr	r4, [r5, #8]
 8009bb8:	b913      	cbnz	r3, 8009bc0 <_puts_r+0x1c>
 8009bba:	4628      	mov	r0, r5
 8009bbc:	f000 fa86 	bl	800a0cc <__sinit>
 8009bc0:	4b2c      	ldr	r3, [pc, #176]	; (8009c74 <_puts_r+0xd0>)
 8009bc2:	429c      	cmp	r4, r3
 8009bc4:	d120      	bne.n	8009c08 <_puts_r+0x64>
 8009bc6:	686c      	ldr	r4, [r5, #4]
 8009bc8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009bca:	07db      	lsls	r3, r3, #31
 8009bcc:	d405      	bmi.n	8009bda <_puts_r+0x36>
 8009bce:	89a3      	ldrh	r3, [r4, #12]
 8009bd0:	0598      	lsls	r0, r3, #22
 8009bd2:	d402      	bmi.n	8009bda <_puts_r+0x36>
 8009bd4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009bd6:	f000 fb17 	bl	800a208 <__retarget_lock_acquire_recursive>
 8009bda:	89a3      	ldrh	r3, [r4, #12]
 8009bdc:	0719      	lsls	r1, r3, #28
 8009bde:	d51d      	bpl.n	8009c1c <_puts_r+0x78>
 8009be0:	6923      	ldr	r3, [r4, #16]
 8009be2:	b1db      	cbz	r3, 8009c1c <_puts_r+0x78>
 8009be4:	3e01      	subs	r6, #1
 8009be6:	68a3      	ldr	r3, [r4, #8]
 8009be8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8009bec:	3b01      	subs	r3, #1
 8009bee:	60a3      	str	r3, [r4, #8]
 8009bf0:	bb39      	cbnz	r1, 8009c42 <_puts_r+0x9e>
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	da38      	bge.n	8009c68 <_puts_r+0xc4>
 8009bf6:	4622      	mov	r2, r4
 8009bf8:	210a      	movs	r1, #10
 8009bfa:	4628      	mov	r0, r5
 8009bfc:	f000 f88c 	bl	8009d18 <__swbuf_r>
 8009c00:	3001      	adds	r0, #1
 8009c02:	d011      	beq.n	8009c28 <_puts_r+0x84>
 8009c04:	250a      	movs	r5, #10
 8009c06:	e011      	b.n	8009c2c <_puts_r+0x88>
 8009c08:	4b1b      	ldr	r3, [pc, #108]	; (8009c78 <_puts_r+0xd4>)
 8009c0a:	429c      	cmp	r4, r3
 8009c0c:	d101      	bne.n	8009c12 <_puts_r+0x6e>
 8009c0e:	68ac      	ldr	r4, [r5, #8]
 8009c10:	e7da      	b.n	8009bc8 <_puts_r+0x24>
 8009c12:	4b1a      	ldr	r3, [pc, #104]	; (8009c7c <_puts_r+0xd8>)
 8009c14:	429c      	cmp	r4, r3
 8009c16:	bf08      	it	eq
 8009c18:	68ec      	ldreq	r4, [r5, #12]
 8009c1a:	e7d5      	b.n	8009bc8 <_puts_r+0x24>
 8009c1c:	4621      	mov	r1, r4
 8009c1e:	4628      	mov	r0, r5
 8009c20:	f000 f8cc 	bl	8009dbc <__swsetup_r>
 8009c24:	2800      	cmp	r0, #0
 8009c26:	d0dd      	beq.n	8009be4 <_puts_r+0x40>
 8009c28:	f04f 35ff 	mov.w	r5, #4294967295
 8009c2c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009c2e:	07da      	lsls	r2, r3, #31
 8009c30:	d405      	bmi.n	8009c3e <_puts_r+0x9a>
 8009c32:	89a3      	ldrh	r3, [r4, #12]
 8009c34:	059b      	lsls	r3, r3, #22
 8009c36:	d402      	bmi.n	8009c3e <_puts_r+0x9a>
 8009c38:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009c3a:	f000 fae6 	bl	800a20a <__retarget_lock_release_recursive>
 8009c3e:	4628      	mov	r0, r5
 8009c40:	bd70      	pop	{r4, r5, r6, pc}
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	da04      	bge.n	8009c50 <_puts_r+0xac>
 8009c46:	69a2      	ldr	r2, [r4, #24]
 8009c48:	429a      	cmp	r2, r3
 8009c4a:	dc06      	bgt.n	8009c5a <_puts_r+0xb6>
 8009c4c:	290a      	cmp	r1, #10
 8009c4e:	d004      	beq.n	8009c5a <_puts_r+0xb6>
 8009c50:	6823      	ldr	r3, [r4, #0]
 8009c52:	1c5a      	adds	r2, r3, #1
 8009c54:	6022      	str	r2, [r4, #0]
 8009c56:	7019      	strb	r1, [r3, #0]
 8009c58:	e7c5      	b.n	8009be6 <_puts_r+0x42>
 8009c5a:	4622      	mov	r2, r4
 8009c5c:	4628      	mov	r0, r5
 8009c5e:	f000 f85b 	bl	8009d18 <__swbuf_r>
 8009c62:	3001      	adds	r0, #1
 8009c64:	d1bf      	bne.n	8009be6 <_puts_r+0x42>
 8009c66:	e7df      	b.n	8009c28 <_puts_r+0x84>
 8009c68:	6823      	ldr	r3, [r4, #0]
 8009c6a:	250a      	movs	r5, #10
 8009c6c:	1c5a      	adds	r2, r3, #1
 8009c6e:	6022      	str	r2, [r4, #0]
 8009c70:	701d      	strb	r5, [r3, #0]
 8009c72:	e7db      	b.n	8009c2c <_puts_r+0x88>
 8009c74:	0800b684 	.word	0x0800b684
 8009c78:	0800b6a4 	.word	0x0800b6a4
 8009c7c:	0800b664 	.word	0x0800b664

08009c80 <puts>:
 8009c80:	4b02      	ldr	r3, [pc, #8]	; (8009c8c <puts+0xc>)
 8009c82:	4601      	mov	r1, r0
 8009c84:	6818      	ldr	r0, [r3, #0]
 8009c86:	f7ff bf8d 	b.w	8009ba4 <_puts_r>
 8009c8a:	bf00      	nop
 8009c8c:	20000028 	.word	0x20000028

08009c90 <siprintf>:
 8009c90:	b40e      	push	{r1, r2, r3}
 8009c92:	b500      	push	{lr}
 8009c94:	b09c      	sub	sp, #112	; 0x70
 8009c96:	ab1d      	add	r3, sp, #116	; 0x74
 8009c98:	9002      	str	r0, [sp, #8]
 8009c9a:	9006      	str	r0, [sp, #24]
 8009c9c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009ca0:	4809      	ldr	r0, [pc, #36]	; (8009cc8 <siprintf+0x38>)
 8009ca2:	9107      	str	r1, [sp, #28]
 8009ca4:	9104      	str	r1, [sp, #16]
 8009ca6:	4909      	ldr	r1, [pc, #36]	; (8009ccc <siprintf+0x3c>)
 8009ca8:	f853 2b04 	ldr.w	r2, [r3], #4
 8009cac:	9105      	str	r1, [sp, #20]
 8009cae:	6800      	ldr	r0, [r0, #0]
 8009cb0:	9301      	str	r3, [sp, #4]
 8009cb2:	a902      	add	r1, sp, #8
 8009cb4:	f000 fc14 	bl	800a4e0 <_svfiprintf_r>
 8009cb8:	9b02      	ldr	r3, [sp, #8]
 8009cba:	2200      	movs	r2, #0
 8009cbc:	701a      	strb	r2, [r3, #0]
 8009cbe:	b01c      	add	sp, #112	; 0x70
 8009cc0:	f85d eb04 	ldr.w	lr, [sp], #4
 8009cc4:	b003      	add	sp, #12
 8009cc6:	4770      	bx	lr
 8009cc8:	20000028 	.word	0x20000028
 8009ccc:	ffff0208 	.word	0xffff0208

08009cd0 <strcat>:
 8009cd0:	b510      	push	{r4, lr}
 8009cd2:	4602      	mov	r2, r0
 8009cd4:	7814      	ldrb	r4, [r2, #0]
 8009cd6:	4613      	mov	r3, r2
 8009cd8:	3201      	adds	r2, #1
 8009cda:	2c00      	cmp	r4, #0
 8009cdc:	d1fa      	bne.n	8009cd4 <strcat+0x4>
 8009cde:	3b01      	subs	r3, #1
 8009ce0:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009ce4:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009ce8:	2a00      	cmp	r2, #0
 8009cea:	d1f9      	bne.n	8009ce0 <strcat+0x10>
 8009cec:	bd10      	pop	{r4, pc}

08009cee <strrchr>:
 8009cee:	b538      	push	{r3, r4, r5, lr}
 8009cf0:	4603      	mov	r3, r0
 8009cf2:	460c      	mov	r4, r1
 8009cf4:	b969      	cbnz	r1, 8009d12 <strrchr+0x24>
 8009cf6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009cfa:	f001 b832 	b.w	800ad62 <strchr>
 8009cfe:	1c43      	adds	r3, r0, #1
 8009d00:	4605      	mov	r5, r0
 8009d02:	4621      	mov	r1, r4
 8009d04:	4618      	mov	r0, r3
 8009d06:	f001 f82c 	bl	800ad62 <strchr>
 8009d0a:	2800      	cmp	r0, #0
 8009d0c:	d1f7      	bne.n	8009cfe <strrchr+0x10>
 8009d0e:	4628      	mov	r0, r5
 8009d10:	bd38      	pop	{r3, r4, r5, pc}
 8009d12:	2500      	movs	r5, #0
 8009d14:	e7f5      	b.n	8009d02 <strrchr+0x14>
	...

08009d18 <__swbuf_r>:
 8009d18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d1a:	460e      	mov	r6, r1
 8009d1c:	4614      	mov	r4, r2
 8009d1e:	4605      	mov	r5, r0
 8009d20:	b118      	cbz	r0, 8009d2a <__swbuf_r+0x12>
 8009d22:	6983      	ldr	r3, [r0, #24]
 8009d24:	b90b      	cbnz	r3, 8009d2a <__swbuf_r+0x12>
 8009d26:	f000 f9d1 	bl	800a0cc <__sinit>
 8009d2a:	4b21      	ldr	r3, [pc, #132]	; (8009db0 <__swbuf_r+0x98>)
 8009d2c:	429c      	cmp	r4, r3
 8009d2e:	d12b      	bne.n	8009d88 <__swbuf_r+0x70>
 8009d30:	686c      	ldr	r4, [r5, #4]
 8009d32:	69a3      	ldr	r3, [r4, #24]
 8009d34:	60a3      	str	r3, [r4, #8]
 8009d36:	89a3      	ldrh	r3, [r4, #12]
 8009d38:	071a      	lsls	r2, r3, #28
 8009d3a:	d52f      	bpl.n	8009d9c <__swbuf_r+0x84>
 8009d3c:	6923      	ldr	r3, [r4, #16]
 8009d3e:	b36b      	cbz	r3, 8009d9c <__swbuf_r+0x84>
 8009d40:	6923      	ldr	r3, [r4, #16]
 8009d42:	6820      	ldr	r0, [r4, #0]
 8009d44:	1ac0      	subs	r0, r0, r3
 8009d46:	6963      	ldr	r3, [r4, #20]
 8009d48:	b2f6      	uxtb	r6, r6
 8009d4a:	4283      	cmp	r3, r0
 8009d4c:	4637      	mov	r7, r6
 8009d4e:	dc04      	bgt.n	8009d5a <__swbuf_r+0x42>
 8009d50:	4621      	mov	r1, r4
 8009d52:	4628      	mov	r0, r5
 8009d54:	f000 f926 	bl	8009fa4 <_fflush_r>
 8009d58:	bb30      	cbnz	r0, 8009da8 <__swbuf_r+0x90>
 8009d5a:	68a3      	ldr	r3, [r4, #8]
 8009d5c:	3b01      	subs	r3, #1
 8009d5e:	60a3      	str	r3, [r4, #8]
 8009d60:	6823      	ldr	r3, [r4, #0]
 8009d62:	1c5a      	adds	r2, r3, #1
 8009d64:	6022      	str	r2, [r4, #0]
 8009d66:	701e      	strb	r6, [r3, #0]
 8009d68:	6963      	ldr	r3, [r4, #20]
 8009d6a:	3001      	adds	r0, #1
 8009d6c:	4283      	cmp	r3, r0
 8009d6e:	d004      	beq.n	8009d7a <__swbuf_r+0x62>
 8009d70:	89a3      	ldrh	r3, [r4, #12]
 8009d72:	07db      	lsls	r3, r3, #31
 8009d74:	d506      	bpl.n	8009d84 <__swbuf_r+0x6c>
 8009d76:	2e0a      	cmp	r6, #10
 8009d78:	d104      	bne.n	8009d84 <__swbuf_r+0x6c>
 8009d7a:	4621      	mov	r1, r4
 8009d7c:	4628      	mov	r0, r5
 8009d7e:	f000 f911 	bl	8009fa4 <_fflush_r>
 8009d82:	b988      	cbnz	r0, 8009da8 <__swbuf_r+0x90>
 8009d84:	4638      	mov	r0, r7
 8009d86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009d88:	4b0a      	ldr	r3, [pc, #40]	; (8009db4 <__swbuf_r+0x9c>)
 8009d8a:	429c      	cmp	r4, r3
 8009d8c:	d101      	bne.n	8009d92 <__swbuf_r+0x7a>
 8009d8e:	68ac      	ldr	r4, [r5, #8]
 8009d90:	e7cf      	b.n	8009d32 <__swbuf_r+0x1a>
 8009d92:	4b09      	ldr	r3, [pc, #36]	; (8009db8 <__swbuf_r+0xa0>)
 8009d94:	429c      	cmp	r4, r3
 8009d96:	bf08      	it	eq
 8009d98:	68ec      	ldreq	r4, [r5, #12]
 8009d9a:	e7ca      	b.n	8009d32 <__swbuf_r+0x1a>
 8009d9c:	4621      	mov	r1, r4
 8009d9e:	4628      	mov	r0, r5
 8009da0:	f000 f80c 	bl	8009dbc <__swsetup_r>
 8009da4:	2800      	cmp	r0, #0
 8009da6:	d0cb      	beq.n	8009d40 <__swbuf_r+0x28>
 8009da8:	f04f 37ff 	mov.w	r7, #4294967295
 8009dac:	e7ea      	b.n	8009d84 <__swbuf_r+0x6c>
 8009dae:	bf00      	nop
 8009db0:	0800b684 	.word	0x0800b684
 8009db4:	0800b6a4 	.word	0x0800b6a4
 8009db8:	0800b664 	.word	0x0800b664

08009dbc <__swsetup_r>:
 8009dbc:	4b32      	ldr	r3, [pc, #200]	; (8009e88 <__swsetup_r+0xcc>)
 8009dbe:	b570      	push	{r4, r5, r6, lr}
 8009dc0:	681d      	ldr	r5, [r3, #0]
 8009dc2:	4606      	mov	r6, r0
 8009dc4:	460c      	mov	r4, r1
 8009dc6:	b125      	cbz	r5, 8009dd2 <__swsetup_r+0x16>
 8009dc8:	69ab      	ldr	r3, [r5, #24]
 8009dca:	b913      	cbnz	r3, 8009dd2 <__swsetup_r+0x16>
 8009dcc:	4628      	mov	r0, r5
 8009dce:	f000 f97d 	bl	800a0cc <__sinit>
 8009dd2:	4b2e      	ldr	r3, [pc, #184]	; (8009e8c <__swsetup_r+0xd0>)
 8009dd4:	429c      	cmp	r4, r3
 8009dd6:	d10f      	bne.n	8009df8 <__swsetup_r+0x3c>
 8009dd8:	686c      	ldr	r4, [r5, #4]
 8009dda:	89a3      	ldrh	r3, [r4, #12]
 8009ddc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009de0:	0719      	lsls	r1, r3, #28
 8009de2:	d42c      	bmi.n	8009e3e <__swsetup_r+0x82>
 8009de4:	06dd      	lsls	r5, r3, #27
 8009de6:	d411      	bmi.n	8009e0c <__swsetup_r+0x50>
 8009de8:	2309      	movs	r3, #9
 8009dea:	6033      	str	r3, [r6, #0]
 8009dec:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009df0:	81a3      	strh	r3, [r4, #12]
 8009df2:	f04f 30ff 	mov.w	r0, #4294967295
 8009df6:	e03e      	b.n	8009e76 <__swsetup_r+0xba>
 8009df8:	4b25      	ldr	r3, [pc, #148]	; (8009e90 <__swsetup_r+0xd4>)
 8009dfa:	429c      	cmp	r4, r3
 8009dfc:	d101      	bne.n	8009e02 <__swsetup_r+0x46>
 8009dfe:	68ac      	ldr	r4, [r5, #8]
 8009e00:	e7eb      	b.n	8009dda <__swsetup_r+0x1e>
 8009e02:	4b24      	ldr	r3, [pc, #144]	; (8009e94 <__swsetup_r+0xd8>)
 8009e04:	429c      	cmp	r4, r3
 8009e06:	bf08      	it	eq
 8009e08:	68ec      	ldreq	r4, [r5, #12]
 8009e0a:	e7e6      	b.n	8009dda <__swsetup_r+0x1e>
 8009e0c:	0758      	lsls	r0, r3, #29
 8009e0e:	d512      	bpl.n	8009e36 <__swsetup_r+0x7a>
 8009e10:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009e12:	b141      	cbz	r1, 8009e26 <__swsetup_r+0x6a>
 8009e14:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009e18:	4299      	cmp	r1, r3
 8009e1a:	d002      	beq.n	8009e22 <__swsetup_r+0x66>
 8009e1c:	4630      	mov	r0, r6
 8009e1e:	f000 fa59 	bl	800a2d4 <_free_r>
 8009e22:	2300      	movs	r3, #0
 8009e24:	6363      	str	r3, [r4, #52]	; 0x34
 8009e26:	89a3      	ldrh	r3, [r4, #12]
 8009e28:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009e2c:	81a3      	strh	r3, [r4, #12]
 8009e2e:	2300      	movs	r3, #0
 8009e30:	6063      	str	r3, [r4, #4]
 8009e32:	6923      	ldr	r3, [r4, #16]
 8009e34:	6023      	str	r3, [r4, #0]
 8009e36:	89a3      	ldrh	r3, [r4, #12]
 8009e38:	f043 0308 	orr.w	r3, r3, #8
 8009e3c:	81a3      	strh	r3, [r4, #12]
 8009e3e:	6923      	ldr	r3, [r4, #16]
 8009e40:	b94b      	cbnz	r3, 8009e56 <__swsetup_r+0x9a>
 8009e42:	89a3      	ldrh	r3, [r4, #12]
 8009e44:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009e48:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009e4c:	d003      	beq.n	8009e56 <__swsetup_r+0x9a>
 8009e4e:	4621      	mov	r1, r4
 8009e50:	4630      	mov	r0, r6
 8009e52:	f000 f9ff 	bl	800a254 <__smakebuf_r>
 8009e56:	89a0      	ldrh	r0, [r4, #12]
 8009e58:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009e5c:	f010 0301 	ands.w	r3, r0, #1
 8009e60:	d00a      	beq.n	8009e78 <__swsetup_r+0xbc>
 8009e62:	2300      	movs	r3, #0
 8009e64:	60a3      	str	r3, [r4, #8]
 8009e66:	6963      	ldr	r3, [r4, #20]
 8009e68:	425b      	negs	r3, r3
 8009e6a:	61a3      	str	r3, [r4, #24]
 8009e6c:	6923      	ldr	r3, [r4, #16]
 8009e6e:	b943      	cbnz	r3, 8009e82 <__swsetup_r+0xc6>
 8009e70:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009e74:	d1ba      	bne.n	8009dec <__swsetup_r+0x30>
 8009e76:	bd70      	pop	{r4, r5, r6, pc}
 8009e78:	0781      	lsls	r1, r0, #30
 8009e7a:	bf58      	it	pl
 8009e7c:	6963      	ldrpl	r3, [r4, #20]
 8009e7e:	60a3      	str	r3, [r4, #8]
 8009e80:	e7f4      	b.n	8009e6c <__swsetup_r+0xb0>
 8009e82:	2000      	movs	r0, #0
 8009e84:	e7f7      	b.n	8009e76 <__swsetup_r+0xba>
 8009e86:	bf00      	nop
 8009e88:	20000028 	.word	0x20000028
 8009e8c:	0800b684 	.word	0x0800b684
 8009e90:	0800b6a4 	.word	0x0800b6a4
 8009e94:	0800b664 	.word	0x0800b664

08009e98 <__sflush_r>:
 8009e98:	898a      	ldrh	r2, [r1, #12]
 8009e9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009e9e:	4605      	mov	r5, r0
 8009ea0:	0710      	lsls	r0, r2, #28
 8009ea2:	460c      	mov	r4, r1
 8009ea4:	d458      	bmi.n	8009f58 <__sflush_r+0xc0>
 8009ea6:	684b      	ldr	r3, [r1, #4]
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	dc05      	bgt.n	8009eb8 <__sflush_r+0x20>
 8009eac:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	dc02      	bgt.n	8009eb8 <__sflush_r+0x20>
 8009eb2:	2000      	movs	r0, #0
 8009eb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009eb8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009eba:	2e00      	cmp	r6, #0
 8009ebc:	d0f9      	beq.n	8009eb2 <__sflush_r+0x1a>
 8009ebe:	2300      	movs	r3, #0
 8009ec0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009ec4:	682f      	ldr	r7, [r5, #0]
 8009ec6:	602b      	str	r3, [r5, #0]
 8009ec8:	d032      	beq.n	8009f30 <__sflush_r+0x98>
 8009eca:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009ecc:	89a3      	ldrh	r3, [r4, #12]
 8009ece:	075a      	lsls	r2, r3, #29
 8009ed0:	d505      	bpl.n	8009ede <__sflush_r+0x46>
 8009ed2:	6863      	ldr	r3, [r4, #4]
 8009ed4:	1ac0      	subs	r0, r0, r3
 8009ed6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009ed8:	b10b      	cbz	r3, 8009ede <__sflush_r+0x46>
 8009eda:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009edc:	1ac0      	subs	r0, r0, r3
 8009ede:	2300      	movs	r3, #0
 8009ee0:	4602      	mov	r2, r0
 8009ee2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009ee4:	6a21      	ldr	r1, [r4, #32]
 8009ee6:	4628      	mov	r0, r5
 8009ee8:	47b0      	blx	r6
 8009eea:	1c43      	adds	r3, r0, #1
 8009eec:	89a3      	ldrh	r3, [r4, #12]
 8009eee:	d106      	bne.n	8009efe <__sflush_r+0x66>
 8009ef0:	6829      	ldr	r1, [r5, #0]
 8009ef2:	291d      	cmp	r1, #29
 8009ef4:	d82c      	bhi.n	8009f50 <__sflush_r+0xb8>
 8009ef6:	4a2a      	ldr	r2, [pc, #168]	; (8009fa0 <__sflush_r+0x108>)
 8009ef8:	40ca      	lsrs	r2, r1
 8009efa:	07d6      	lsls	r6, r2, #31
 8009efc:	d528      	bpl.n	8009f50 <__sflush_r+0xb8>
 8009efe:	2200      	movs	r2, #0
 8009f00:	6062      	str	r2, [r4, #4]
 8009f02:	04d9      	lsls	r1, r3, #19
 8009f04:	6922      	ldr	r2, [r4, #16]
 8009f06:	6022      	str	r2, [r4, #0]
 8009f08:	d504      	bpl.n	8009f14 <__sflush_r+0x7c>
 8009f0a:	1c42      	adds	r2, r0, #1
 8009f0c:	d101      	bne.n	8009f12 <__sflush_r+0x7a>
 8009f0e:	682b      	ldr	r3, [r5, #0]
 8009f10:	b903      	cbnz	r3, 8009f14 <__sflush_r+0x7c>
 8009f12:	6560      	str	r0, [r4, #84]	; 0x54
 8009f14:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009f16:	602f      	str	r7, [r5, #0]
 8009f18:	2900      	cmp	r1, #0
 8009f1a:	d0ca      	beq.n	8009eb2 <__sflush_r+0x1a>
 8009f1c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009f20:	4299      	cmp	r1, r3
 8009f22:	d002      	beq.n	8009f2a <__sflush_r+0x92>
 8009f24:	4628      	mov	r0, r5
 8009f26:	f000 f9d5 	bl	800a2d4 <_free_r>
 8009f2a:	2000      	movs	r0, #0
 8009f2c:	6360      	str	r0, [r4, #52]	; 0x34
 8009f2e:	e7c1      	b.n	8009eb4 <__sflush_r+0x1c>
 8009f30:	6a21      	ldr	r1, [r4, #32]
 8009f32:	2301      	movs	r3, #1
 8009f34:	4628      	mov	r0, r5
 8009f36:	47b0      	blx	r6
 8009f38:	1c41      	adds	r1, r0, #1
 8009f3a:	d1c7      	bne.n	8009ecc <__sflush_r+0x34>
 8009f3c:	682b      	ldr	r3, [r5, #0]
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	d0c4      	beq.n	8009ecc <__sflush_r+0x34>
 8009f42:	2b1d      	cmp	r3, #29
 8009f44:	d001      	beq.n	8009f4a <__sflush_r+0xb2>
 8009f46:	2b16      	cmp	r3, #22
 8009f48:	d101      	bne.n	8009f4e <__sflush_r+0xb6>
 8009f4a:	602f      	str	r7, [r5, #0]
 8009f4c:	e7b1      	b.n	8009eb2 <__sflush_r+0x1a>
 8009f4e:	89a3      	ldrh	r3, [r4, #12]
 8009f50:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009f54:	81a3      	strh	r3, [r4, #12]
 8009f56:	e7ad      	b.n	8009eb4 <__sflush_r+0x1c>
 8009f58:	690f      	ldr	r7, [r1, #16]
 8009f5a:	2f00      	cmp	r7, #0
 8009f5c:	d0a9      	beq.n	8009eb2 <__sflush_r+0x1a>
 8009f5e:	0793      	lsls	r3, r2, #30
 8009f60:	680e      	ldr	r6, [r1, #0]
 8009f62:	bf08      	it	eq
 8009f64:	694b      	ldreq	r3, [r1, #20]
 8009f66:	600f      	str	r7, [r1, #0]
 8009f68:	bf18      	it	ne
 8009f6a:	2300      	movne	r3, #0
 8009f6c:	eba6 0807 	sub.w	r8, r6, r7
 8009f70:	608b      	str	r3, [r1, #8]
 8009f72:	f1b8 0f00 	cmp.w	r8, #0
 8009f76:	dd9c      	ble.n	8009eb2 <__sflush_r+0x1a>
 8009f78:	6a21      	ldr	r1, [r4, #32]
 8009f7a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009f7c:	4643      	mov	r3, r8
 8009f7e:	463a      	mov	r2, r7
 8009f80:	4628      	mov	r0, r5
 8009f82:	47b0      	blx	r6
 8009f84:	2800      	cmp	r0, #0
 8009f86:	dc06      	bgt.n	8009f96 <__sflush_r+0xfe>
 8009f88:	89a3      	ldrh	r3, [r4, #12]
 8009f8a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009f8e:	81a3      	strh	r3, [r4, #12]
 8009f90:	f04f 30ff 	mov.w	r0, #4294967295
 8009f94:	e78e      	b.n	8009eb4 <__sflush_r+0x1c>
 8009f96:	4407      	add	r7, r0
 8009f98:	eba8 0800 	sub.w	r8, r8, r0
 8009f9c:	e7e9      	b.n	8009f72 <__sflush_r+0xda>
 8009f9e:	bf00      	nop
 8009fa0:	20400001 	.word	0x20400001

08009fa4 <_fflush_r>:
 8009fa4:	b538      	push	{r3, r4, r5, lr}
 8009fa6:	690b      	ldr	r3, [r1, #16]
 8009fa8:	4605      	mov	r5, r0
 8009faa:	460c      	mov	r4, r1
 8009fac:	b913      	cbnz	r3, 8009fb4 <_fflush_r+0x10>
 8009fae:	2500      	movs	r5, #0
 8009fb0:	4628      	mov	r0, r5
 8009fb2:	bd38      	pop	{r3, r4, r5, pc}
 8009fb4:	b118      	cbz	r0, 8009fbe <_fflush_r+0x1a>
 8009fb6:	6983      	ldr	r3, [r0, #24]
 8009fb8:	b90b      	cbnz	r3, 8009fbe <_fflush_r+0x1a>
 8009fba:	f000 f887 	bl	800a0cc <__sinit>
 8009fbe:	4b14      	ldr	r3, [pc, #80]	; (800a010 <_fflush_r+0x6c>)
 8009fc0:	429c      	cmp	r4, r3
 8009fc2:	d11b      	bne.n	8009ffc <_fflush_r+0x58>
 8009fc4:	686c      	ldr	r4, [r5, #4]
 8009fc6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	d0ef      	beq.n	8009fae <_fflush_r+0xa>
 8009fce:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009fd0:	07d0      	lsls	r0, r2, #31
 8009fd2:	d404      	bmi.n	8009fde <_fflush_r+0x3a>
 8009fd4:	0599      	lsls	r1, r3, #22
 8009fd6:	d402      	bmi.n	8009fde <_fflush_r+0x3a>
 8009fd8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009fda:	f000 f915 	bl	800a208 <__retarget_lock_acquire_recursive>
 8009fde:	4628      	mov	r0, r5
 8009fe0:	4621      	mov	r1, r4
 8009fe2:	f7ff ff59 	bl	8009e98 <__sflush_r>
 8009fe6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009fe8:	07da      	lsls	r2, r3, #31
 8009fea:	4605      	mov	r5, r0
 8009fec:	d4e0      	bmi.n	8009fb0 <_fflush_r+0xc>
 8009fee:	89a3      	ldrh	r3, [r4, #12]
 8009ff0:	059b      	lsls	r3, r3, #22
 8009ff2:	d4dd      	bmi.n	8009fb0 <_fflush_r+0xc>
 8009ff4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009ff6:	f000 f908 	bl	800a20a <__retarget_lock_release_recursive>
 8009ffa:	e7d9      	b.n	8009fb0 <_fflush_r+0xc>
 8009ffc:	4b05      	ldr	r3, [pc, #20]	; (800a014 <_fflush_r+0x70>)
 8009ffe:	429c      	cmp	r4, r3
 800a000:	d101      	bne.n	800a006 <_fflush_r+0x62>
 800a002:	68ac      	ldr	r4, [r5, #8]
 800a004:	e7df      	b.n	8009fc6 <_fflush_r+0x22>
 800a006:	4b04      	ldr	r3, [pc, #16]	; (800a018 <_fflush_r+0x74>)
 800a008:	429c      	cmp	r4, r3
 800a00a:	bf08      	it	eq
 800a00c:	68ec      	ldreq	r4, [r5, #12]
 800a00e:	e7da      	b.n	8009fc6 <_fflush_r+0x22>
 800a010:	0800b684 	.word	0x0800b684
 800a014:	0800b6a4 	.word	0x0800b6a4
 800a018:	0800b664 	.word	0x0800b664

0800a01c <std>:
 800a01c:	2300      	movs	r3, #0
 800a01e:	b510      	push	{r4, lr}
 800a020:	4604      	mov	r4, r0
 800a022:	e9c0 3300 	strd	r3, r3, [r0]
 800a026:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a02a:	6083      	str	r3, [r0, #8]
 800a02c:	8181      	strh	r1, [r0, #12]
 800a02e:	6643      	str	r3, [r0, #100]	; 0x64
 800a030:	81c2      	strh	r2, [r0, #14]
 800a032:	6183      	str	r3, [r0, #24]
 800a034:	4619      	mov	r1, r3
 800a036:	2208      	movs	r2, #8
 800a038:	305c      	adds	r0, #92	; 0x5c
 800a03a:	f7ff fd93 	bl	8009b64 <memset>
 800a03e:	4b05      	ldr	r3, [pc, #20]	; (800a054 <std+0x38>)
 800a040:	6263      	str	r3, [r4, #36]	; 0x24
 800a042:	4b05      	ldr	r3, [pc, #20]	; (800a058 <std+0x3c>)
 800a044:	62a3      	str	r3, [r4, #40]	; 0x28
 800a046:	4b05      	ldr	r3, [pc, #20]	; (800a05c <std+0x40>)
 800a048:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a04a:	4b05      	ldr	r3, [pc, #20]	; (800a060 <std+0x44>)
 800a04c:	6224      	str	r4, [r4, #32]
 800a04e:	6323      	str	r3, [r4, #48]	; 0x30
 800a050:	bd10      	pop	{r4, pc}
 800a052:	bf00      	nop
 800a054:	0800acdd 	.word	0x0800acdd
 800a058:	0800acff 	.word	0x0800acff
 800a05c:	0800ad37 	.word	0x0800ad37
 800a060:	0800ad5b 	.word	0x0800ad5b

0800a064 <_cleanup_r>:
 800a064:	4901      	ldr	r1, [pc, #4]	; (800a06c <_cleanup_r+0x8>)
 800a066:	f000 b8af 	b.w	800a1c8 <_fwalk_reent>
 800a06a:	bf00      	nop
 800a06c:	08009fa5 	.word	0x08009fa5

0800a070 <__sfmoreglue>:
 800a070:	b570      	push	{r4, r5, r6, lr}
 800a072:	1e4a      	subs	r2, r1, #1
 800a074:	2568      	movs	r5, #104	; 0x68
 800a076:	4355      	muls	r5, r2
 800a078:	460e      	mov	r6, r1
 800a07a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a07e:	f000 f979 	bl	800a374 <_malloc_r>
 800a082:	4604      	mov	r4, r0
 800a084:	b140      	cbz	r0, 800a098 <__sfmoreglue+0x28>
 800a086:	2100      	movs	r1, #0
 800a088:	e9c0 1600 	strd	r1, r6, [r0]
 800a08c:	300c      	adds	r0, #12
 800a08e:	60a0      	str	r0, [r4, #8]
 800a090:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a094:	f7ff fd66 	bl	8009b64 <memset>
 800a098:	4620      	mov	r0, r4
 800a09a:	bd70      	pop	{r4, r5, r6, pc}

0800a09c <__sfp_lock_acquire>:
 800a09c:	4801      	ldr	r0, [pc, #4]	; (800a0a4 <__sfp_lock_acquire+0x8>)
 800a09e:	f000 b8b3 	b.w	800a208 <__retarget_lock_acquire_recursive>
 800a0a2:	bf00      	nop
 800a0a4:	200016d3 	.word	0x200016d3

0800a0a8 <__sfp_lock_release>:
 800a0a8:	4801      	ldr	r0, [pc, #4]	; (800a0b0 <__sfp_lock_release+0x8>)
 800a0aa:	f000 b8ae 	b.w	800a20a <__retarget_lock_release_recursive>
 800a0ae:	bf00      	nop
 800a0b0:	200016d3 	.word	0x200016d3

0800a0b4 <__sinit_lock_acquire>:
 800a0b4:	4801      	ldr	r0, [pc, #4]	; (800a0bc <__sinit_lock_acquire+0x8>)
 800a0b6:	f000 b8a7 	b.w	800a208 <__retarget_lock_acquire_recursive>
 800a0ba:	bf00      	nop
 800a0bc:	200016ce 	.word	0x200016ce

0800a0c0 <__sinit_lock_release>:
 800a0c0:	4801      	ldr	r0, [pc, #4]	; (800a0c8 <__sinit_lock_release+0x8>)
 800a0c2:	f000 b8a2 	b.w	800a20a <__retarget_lock_release_recursive>
 800a0c6:	bf00      	nop
 800a0c8:	200016ce 	.word	0x200016ce

0800a0cc <__sinit>:
 800a0cc:	b510      	push	{r4, lr}
 800a0ce:	4604      	mov	r4, r0
 800a0d0:	f7ff fff0 	bl	800a0b4 <__sinit_lock_acquire>
 800a0d4:	69a3      	ldr	r3, [r4, #24]
 800a0d6:	b11b      	cbz	r3, 800a0e0 <__sinit+0x14>
 800a0d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a0dc:	f7ff bff0 	b.w	800a0c0 <__sinit_lock_release>
 800a0e0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a0e4:	6523      	str	r3, [r4, #80]	; 0x50
 800a0e6:	4b13      	ldr	r3, [pc, #76]	; (800a134 <__sinit+0x68>)
 800a0e8:	4a13      	ldr	r2, [pc, #76]	; (800a138 <__sinit+0x6c>)
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	62a2      	str	r2, [r4, #40]	; 0x28
 800a0ee:	42a3      	cmp	r3, r4
 800a0f0:	bf04      	itt	eq
 800a0f2:	2301      	moveq	r3, #1
 800a0f4:	61a3      	streq	r3, [r4, #24]
 800a0f6:	4620      	mov	r0, r4
 800a0f8:	f000 f820 	bl	800a13c <__sfp>
 800a0fc:	6060      	str	r0, [r4, #4]
 800a0fe:	4620      	mov	r0, r4
 800a100:	f000 f81c 	bl	800a13c <__sfp>
 800a104:	60a0      	str	r0, [r4, #8]
 800a106:	4620      	mov	r0, r4
 800a108:	f000 f818 	bl	800a13c <__sfp>
 800a10c:	2200      	movs	r2, #0
 800a10e:	60e0      	str	r0, [r4, #12]
 800a110:	2104      	movs	r1, #4
 800a112:	6860      	ldr	r0, [r4, #4]
 800a114:	f7ff ff82 	bl	800a01c <std>
 800a118:	68a0      	ldr	r0, [r4, #8]
 800a11a:	2201      	movs	r2, #1
 800a11c:	2109      	movs	r1, #9
 800a11e:	f7ff ff7d 	bl	800a01c <std>
 800a122:	68e0      	ldr	r0, [r4, #12]
 800a124:	2202      	movs	r2, #2
 800a126:	2112      	movs	r1, #18
 800a128:	f7ff ff78 	bl	800a01c <std>
 800a12c:	2301      	movs	r3, #1
 800a12e:	61a3      	str	r3, [r4, #24]
 800a130:	e7d2      	b.n	800a0d8 <__sinit+0xc>
 800a132:	bf00      	nop
 800a134:	0800b660 	.word	0x0800b660
 800a138:	0800a065 	.word	0x0800a065

0800a13c <__sfp>:
 800a13c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a13e:	4607      	mov	r7, r0
 800a140:	f7ff ffac 	bl	800a09c <__sfp_lock_acquire>
 800a144:	4b1e      	ldr	r3, [pc, #120]	; (800a1c0 <__sfp+0x84>)
 800a146:	681e      	ldr	r6, [r3, #0]
 800a148:	69b3      	ldr	r3, [r6, #24]
 800a14a:	b913      	cbnz	r3, 800a152 <__sfp+0x16>
 800a14c:	4630      	mov	r0, r6
 800a14e:	f7ff ffbd 	bl	800a0cc <__sinit>
 800a152:	3648      	adds	r6, #72	; 0x48
 800a154:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a158:	3b01      	subs	r3, #1
 800a15a:	d503      	bpl.n	800a164 <__sfp+0x28>
 800a15c:	6833      	ldr	r3, [r6, #0]
 800a15e:	b30b      	cbz	r3, 800a1a4 <__sfp+0x68>
 800a160:	6836      	ldr	r6, [r6, #0]
 800a162:	e7f7      	b.n	800a154 <__sfp+0x18>
 800a164:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a168:	b9d5      	cbnz	r5, 800a1a0 <__sfp+0x64>
 800a16a:	4b16      	ldr	r3, [pc, #88]	; (800a1c4 <__sfp+0x88>)
 800a16c:	60e3      	str	r3, [r4, #12]
 800a16e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a172:	6665      	str	r5, [r4, #100]	; 0x64
 800a174:	f000 f847 	bl	800a206 <__retarget_lock_init_recursive>
 800a178:	f7ff ff96 	bl	800a0a8 <__sfp_lock_release>
 800a17c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a180:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a184:	6025      	str	r5, [r4, #0]
 800a186:	61a5      	str	r5, [r4, #24]
 800a188:	2208      	movs	r2, #8
 800a18a:	4629      	mov	r1, r5
 800a18c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a190:	f7ff fce8 	bl	8009b64 <memset>
 800a194:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a198:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a19c:	4620      	mov	r0, r4
 800a19e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a1a0:	3468      	adds	r4, #104	; 0x68
 800a1a2:	e7d9      	b.n	800a158 <__sfp+0x1c>
 800a1a4:	2104      	movs	r1, #4
 800a1a6:	4638      	mov	r0, r7
 800a1a8:	f7ff ff62 	bl	800a070 <__sfmoreglue>
 800a1ac:	4604      	mov	r4, r0
 800a1ae:	6030      	str	r0, [r6, #0]
 800a1b0:	2800      	cmp	r0, #0
 800a1b2:	d1d5      	bne.n	800a160 <__sfp+0x24>
 800a1b4:	f7ff ff78 	bl	800a0a8 <__sfp_lock_release>
 800a1b8:	230c      	movs	r3, #12
 800a1ba:	603b      	str	r3, [r7, #0]
 800a1bc:	e7ee      	b.n	800a19c <__sfp+0x60>
 800a1be:	bf00      	nop
 800a1c0:	0800b660 	.word	0x0800b660
 800a1c4:	ffff0001 	.word	0xffff0001

0800a1c8 <_fwalk_reent>:
 800a1c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a1cc:	4606      	mov	r6, r0
 800a1ce:	4688      	mov	r8, r1
 800a1d0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a1d4:	2700      	movs	r7, #0
 800a1d6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a1da:	f1b9 0901 	subs.w	r9, r9, #1
 800a1de:	d505      	bpl.n	800a1ec <_fwalk_reent+0x24>
 800a1e0:	6824      	ldr	r4, [r4, #0]
 800a1e2:	2c00      	cmp	r4, #0
 800a1e4:	d1f7      	bne.n	800a1d6 <_fwalk_reent+0xe>
 800a1e6:	4638      	mov	r0, r7
 800a1e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a1ec:	89ab      	ldrh	r3, [r5, #12]
 800a1ee:	2b01      	cmp	r3, #1
 800a1f0:	d907      	bls.n	800a202 <_fwalk_reent+0x3a>
 800a1f2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a1f6:	3301      	adds	r3, #1
 800a1f8:	d003      	beq.n	800a202 <_fwalk_reent+0x3a>
 800a1fa:	4629      	mov	r1, r5
 800a1fc:	4630      	mov	r0, r6
 800a1fe:	47c0      	blx	r8
 800a200:	4307      	orrs	r7, r0
 800a202:	3568      	adds	r5, #104	; 0x68
 800a204:	e7e9      	b.n	800a1da <_fwalk_reent+0x12>

0800a206 <__retarget_lock_init_recursive>:
 800a206:	4770      	bx	lr

0800a208 <__retarget_lock_acquire_recursive>:
 800a208:	4770      	bx	lr

0800a20a <__retarget_lock_release_recursive>:
 800a20a:	4770      	bx	lr

0800a20c <__swhatbuf_r>:
 800a20c:	b570      	push	{r4, r5, r6, lr}
 800a20e:	460e      	mov	r6, r1
 800a210:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a214:	2900      	cmp	r1, #0
 800a216:	b096      	sub	sp, #88	; 0x58
 800a218:	4614      	mov	r4, r2
 800a21a:	461d      	mov	r5, r3
 800a21c:	da07      	bge.n	800a22e <__swhatbuf_r+0x22>
 800a21e:	2300      	movs	r3, #0
 800a220:	602b      	str	r3, [r5, #0]
 800a222:	89b3      	ldrh	r3, [r6, #12]
 800a224:	061a      	lsls	r2, r3, #24
 800a226:	d410      	bmi.n	800a24a <__swhatbuf_r+0x3e>
 800a228:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a22c:	e00e      	b.n	800a24c <__swhatbuf_r+0x40>
 800a22e:	466a      	mov	r2, sp
 800a230:	f000 fdc6 	bl	800adc0 <_fstat_r>
 800a234:	2800      	cmp	r0, #0
 800a236:	dbf2      	blt.n	800a21e <__swhatbuf_r+0x12>
 800a238:	9a01      	ldr	r2, [sp, #4]
 800a23a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a23e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a242:	425a      	negs	r2, r3
 800a244:	415a      	adcs	r2, r3
 800a246:	602a      	str	r2, [r5, #0]
 800a248:	e7ee      	b.n	800a228 <__swhatbuf_r+0x1c>
 800a24a:	2340      	movs	r3, #64	; 0x40
 800a24c:	2000      	movs	r0, #0
 800a24e:	6023      	str	r3, [r4, #0]
 800a250:	b016      	add	sp, #88	; 0x58
 800a252:	bd70      	pop	{r4, r5, r6, pc}

0800a254 <__smakebuf_r>:
 800a254:	898b      	ldrh	r3, [r1, #12]
 800a256:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a258:	079d      	lsls	r5, r3, #30
 800a25a:	4606      	mov	r6, r0
 800a25c:	460c      	mov	r4, r1
 800a25e:	d507      	bpl.n	800a270 <__smakebuf_r+0x1c>
 800a260:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a264:	6023      	str	r3, [r4, #0]
 800a266:	6123      	str	r3, [r4, #16]
 800a268:	2301      	movs	r3, #1
 800a26a:	6163      	str	r3, [r4, #20]
 800a26c:	b002      	add	sp, #8
 800a26e:	bd70      	pop	{r4, r5, r6, pc}
 800a270:	ab01      	add	r3, sp, #4
 800a272:	466a      	mov	r2, sp
 800a274:	f7ff ffca 	bl	800a20c <__swhatbuf_r>
 800a278:	9900      	ldr	r1, [sp, #0]
 800a27a:	4605      	mov	r5, r0
 800a27c:	4630      	mov	r0, r6
 800a27e:	f000 f879 	bl	800a374 <_malloc_r>
 800a282:	b948      	cbnz	r0, 800a298 <__smakebuf_r+0x44>
 800a284:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a288:	059a      	lsls	r2, r3, #22
 800a28a:	d4ef      	bmi.n	800a26c <__smakebuf_r+0x18>
 800a28c:	f023 0303 	bic.w	r3, r3, #3
 800a290:	f043 0302 	orr.w	r3, r3, #2
 800a294:	81a3      	strh	r3, [r4, #12]
 800a296:	e7e3      	b.n	800a260 <__smakebuf_r+0xc>
 800a298:	4b0d      	ldr	r3, [pc, #52]	; (800a2d0 <__smakebuf_r+0x7c>)
 800a29a:	62b3      	str	r3, [r6, #40]	; 0x28
 800a29c:	89a3      	ldrh	r3, [r4, #12]
 800a29e:	6020      	str	r0, [r4, #0]
 800a2a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a2a4:	81a3      	strh	r3, [r4, #12]
 800a2a6:	9b00      	ldr	r3, [sp, #0]
 800a2a8:	6163      	str	r3, [r4, #20]
 800a2aa:	9b01      	ldr	r3, [sp, #4]
 800a2ac:	6120      	str	r0, [r4, #16]
 800a2ae:	b15b      	cbz	r3, 800a2c8 <__smakebuf_r+0x74>
 800a2b0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a2b4:	4630      	mov	r0, r6
 800a2b6:	f000 fd95 	bl	800ade4 <_isatty_r>
 800a2ba:	b128      	cbz	r0, 800a2c8 <__smakebuf_r+0x74>
 800a2bc:	89a3      	ldrh	r3, [r4, #12]
 800a2be:	f023 0303 	bic.w	r3, r3, #3
 800a2c2:	f043 0301 	orr.w	r3, r3, #1
 800a2c6:	81a3      	strh	r3, [r4, #12]
 800a2c8:	89a0      	ldrh	r0, [r4, #12]
 800a2ca:	4305      	orrs	r5, r0
 800a2cc:	81a5      	strh	r5, [r4, #12]
 800a2ce:	e7cd      	b.n	800a26c <__smakebuf_r+0x18>
 800a2d0:	0800a065 	.word	0x0800a065

0800a2d4 <_free_r>:
 800a2d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a2d6:	2900      	cmp	r1, #0
 800a2d8:	d048      	beq.n	800a36c <_free_r+0x98>
 800a2da:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a2de:	9001      	str	r0, [sp, #4]
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	f1a1 0404 	sub.w	r4, r1, #4
 800a2e6:	bfb8      	it	lt
 800a2e8:	18e4      	addlt	r4, r4, r3
 800a2ea:	f000 fdb7 	bl	800ae5c <__malloc_lock>
 800a2ee:	4a20      	ldr	r2, [pc, #128]	; (800a370 <_free_r+0x9c>)
 800a2f0:	9801      	ldr	r0, [sp, #4]
 800a2f2:	6813      	ldr	r3, [r2, #0]
 800a2f4:	4615      	mov	r5, r2
 800a2f6:	b933      	cbnz	r3, 800a306 <_free_r+0x32>
 800a2f8:	6063      	str	r3, [r4, #4]
 800a2fa:	6014      	str	r4, [r2, #0]
 800a2fc:	b003      	add	sp, #12
 800a2fe:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a302:	f000 bdb1 	b.w	800ae68 <__malloc_unlock>
 800a306:	42a3      	cmp	r3, r4
 800a308:	d90b      	bls.n	800a322 <_free_r+0x4e>
 800a30a:	6821      	ldr	r1, [r4, #0]
 800a30c:	1862      	adds	r2, r4, r1
 800a30e:	4293      	cmp	r3, r2
 800a310:	bf04      	itt	eq
 800a312:	681a      	ldreq	r2, [r3, #0]
 800a314:	685b      	ldreq	r3, [r3, #4]
 800a316:	6063      	str	r3, [r4, #4]
 800a318:	bf04      	itt	eq
 800a31a:	1852      	addeq	r2, r2, r1
 800a31c:	6022      	streq	r2, [r4, #0]
 800a31e:	602c      	str	r4, [r5, #0]
 800a320:	e7ec      	b.n	800a2fc <_free_r+0x28>
 800a322:	461a      	mov	r2, r3
 800a324:	685b      	ldr	r3, [r3, #4]
 800a326:	b10b      	cbz	r3, 800a32c <_free_r+0x58>
 800a328:	42a3      	cmp	r3, r4
 800a32a:	d9fa      	bls.n	800a322 <_free_r+0x4e>
 800a32c:	6811      	ldr	r1, [r2, #0]
 800a32e:	1855      	adds	r5, r2, r1
 800a330:	42a5      	cmp	r5, r4
 800a332:	d10b      	bne.n	800a34c <_free_r+0x78>
 800a334:	6824      	ldr	r4, [r4, #0]
 800a336:	4421      	add	r1, r4
 800a338:	1854      	adds	r4, r2, r1
 800a33a:	42a3      	cmp	r3, r4
 800a33c:	6011      	str	r1, [r2, #0]
 800a33e:	d1dd      	bne.n	800a2fc <_free_r+0x28>
 800a340:	681c      	ldr	r4, [r3, #0]
 800a342:	685b      	ldr	r3, [r3, #4]
 800a344:	6053      	str	r3, [r2, #4]
 800a346:	4421      	add	r1, r4
 800a348:	6011      	str	r1, [r2, #0]
 800a34a:	e7d7      	b.n	800a2fc <_free_r+0x28>
 800a34c:	d902      	bls.n	800a354 <_free_r+0x80>
 800a34e:	230c      	movs	r3, #12
 800a350:	6003      	str	r3, [r0, #0]
 800a352:	e7d3      	b.n	800a2fc <_free_r+0x28>
 800a354:	6825      	ldr	r5, [r4, #0]
 800a356:	1961      	adds	r1, r4, r5
 800a358:	428b      	cmp	r3, r1
 800a35a:	bf04      	itt	eq
 800a35c:	6819      	ldreq	r1, [r3, #0]
 800a35e:	685b      	ldreq	r3, [r3, #4]
 800a360:	6063      	str	r3, [r4, #4]
 800a362:	bf04      	itt	eq
 800a364:	1949      	addeq	r1, r1, r5
 800a366:	6021      	streq	r1, [r4, #0]
 800a368:	6054      	str	r4, [r2, #4]
 800a36a:	e7c7      	b.n	800a2fc <_free_r+0x28>
 800a36c:	b003      	add	sp, #12
 800a36e:	bd30      	pop	{r4, r5, pc}
 800a370:	20001370 	.word	0x20001370

0800a374 <_malloc_r>:
 800a374:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a376:	1ccd      	adds	r5, r1, #3
 800a378:	f025 0503 	bic.w	r5, r5, #3
 800a37c:	3508      	adds	r5, #8
 800a37e:	2d0c      	cmp	r5, #12
 800a380:	bf38      	it	cc
 800a382:	250c      	movcc	r5, #12
 800a384:	2d00      	cmp	r5, #0
 800a386:	4606      	mov	r6, r0
 800a388:	db01      	blt.n	800a38e <_malloc_r+0x1a>
 800a38a:	42a9      	cmp	r1, r5
 800a38c:	d903      	bls.n	800a396 <_malloc_r+0x22>
 800a38e:	230c      	movs	r3, #12
 800a390:	6033      	str	r3, [r6, #0]
 800a392:	2000      	movs	r0, #0
 800a394:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a396:	f000 fd61 	bl	800ae5c <__malloc_lock>
 800a39a:	4921      	ldr	r1, [pc, #132]	; (800a420 <_malloc_r+0xac>)
 800a39c:	680a      	ldr	r2, [r1, #0]
 800a39e:	4614      	mov	r4, r2
 800a3a0:	b99c      	cbnz	r4, 800a3ca <_malloc_r+0x56>
 800a3a2:	4f20      	ldr	r7, [pc, #128]	; (800a424 <_malloc_r+0xb0>)
 800a3a4:	683b      	ldr	r3, [r7, #0]
 800a3a6:	b923      	cbnz	r3, 800a3b2 <_malloc_r+0x3e>
 800a3a8:	4621      	mov	r1, r4
 800a3aa:	4630      	mov	r0, r6
 800a3ac:	f000 fc86 	bl	800acbc <_sbrk_r>
 800a3b0:	6038      	str	r0, [r7, #0]
 800a3b2:	4629      	mov	r1, r5
 800a3b4:	4630      	mov	r0, r6
 800a3b6:	f000 fc81 	bl	800acbc <_sbrk_r>
 800a3ba:	1c43      	adds	r3, r0, #1
 800a3bc:	d123      	bne.n	800a406 <_malloc_r+0x92>
 800a3be:	230c      	movs	r3, #12
 800a3c0:	6033      	str	r3, [r6, #0]
 800a3c2:	4630      	mov	r0, r6
 800a3c4:	f000 fd50 	bl	800ae68 <__malloc_unlock>
 800a3c8:	e7e3      	b.n	800a392 <_malloc_r+0x1e>
 800a3ca:	6823      	ldr	r3, [r4, #0]
 800a3cc:	1b5b      	subs	r3, r3, r5
 800a3ce:	d417      	bmi.n	800a400 <_malloc_r+0x8c>
 800a3d0:	2b0b      	cmp	r3, #11
 800a3d2:	d903      	bls.n	800a3dc <_malloc_r+0x68>
 800a3d4:	6023      	str	r3, [r4, #0]
 800a3d6:	441c      	add	r4, r3
 800a3d8:	6025      	str	r5, [r4, #0]
 800a3da:	e004      	b.n	800a3e6 <_malloc_r+0x72>
 800a3dc:	6863      	ldr	r3, [r4, #4]
 800a3de:	42a2      	cmp	r2, r4
 800a3e0:	bf0c      	ite	eq
 800a3e2:	600b      	streq	r3, [r1, #0]
 800a3e4:	6053      	strne	r3, [r2, #4]
 800a3e6:	4630      	mov	r0, r6
 800a3e8:	f000 fd3e 	bl	800ae68 <__malloc_unlock>
 800a3ec:	f104 000b 	add.w	r0, r4, #11
 800a3f0:	1d23      	adds	r3, r4, #4
 800a3f2:	f020 0007 	bic.w	r0, r0, #7
 800a3f6:	1ac2      	subs	r2, r0, r3
 800a3f8:	d0cc      	beq.n	800a394 <_malloc_r+0x20>
 800a3fa:	1a1b      	subs	r3, r3, r0
 800a3fc:	50a3      	str	r3, [r4, r2]
 800a3fe:	e7c9      	b.n	800a394 <_malloc_r+0x20>
 800a400:	4622      	mov	r2, r4
 800a402:	6864      	ldr	r4, [r4, #4]
 800a404:	e7cc      	b.n	800a3a0 <_malloc_r+0x2c>
 800a406:	1cc4      	adds	r4, r0, #3
 800a408:	f024 0403 	bic.w	r4, r4, #3
 800a40c:	42a0      	cmp	r0, r4
 800a40e:	d0e3      	beq.n	800a3d8 <_malloc_r+0x64>
 800a410:	1a21      	subs	r1, r4, r0
 800a412:	4630      	mov	r0, r6
 800a414:	f000 fc52 	bl	800acbc <_sbrk_r>
 800a418:	3001      	adds	r0, #1
 800a41a:	d1dd      	bne.n	800a3d8 <_malloc_r+0x64>
 800a41c:	e7cf      	b.n	800a3be <_malloc_r+0x4a>
 800a41e:	bf00      	nop
 800a420:	20001370 	.word	0x20001370
 800a424:	20001374 	.word	0x20001374

0800a428 <__ssputs_r>:
 800a428:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a42c:	688e      	ldr	r6, [r1, #8]
 800a42e:	429e      	cmp	r6, r3
 800a430:	4682      	mov	sl, r0
 800a432:	460c      	mov	r4, r1
 800a434:	4690      	mov	r8, r2
 800a436:	461f      	mov	r7, r3
 800a438:	d838      	bhi.n	800a4ac <__ssputs_r+0x84>
 800a43a:	898a      	ldrh	r2, [r1, #12]
 800a43c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a440:	d032      	beq.n	800a4a8 <__ssputs_r+0x80>
 800a442:	6825      	ldr	r5, [r4, #0]
 800a444:	6909      	ldr	r1, [r1, #16]
 800a446:	eba5 0901 	sub.w	r9, r5, r1
 800a44a:	6965      	ldr	r5, [r4, #20]
 800a44c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a450:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a454:	3301      	adds	r3, #1
 800a456:	444b      	add	r3, r9
 800a458:	106d      	asrs	r5, r5, #1
 800a45a:	429d      	cmp	r5, r3
 800a45c:	bf38      	it	cc
 800a45e:	461d      	movcc	r5, r3
 800a460:	0553      	lsls	r3, r2, #21
 800a462:	d531      	bpl.n	800a4c8 <__ssputs_r+0xa0>
 800a464:	4629      	mov	r1, r5
 800a466:	f7ff ff85 	bl	800a374 <_malloc_r>
 800a46a:	4606      	mov	r6, r0
 800a46c:	b950      	cbnz	r0, 800a484 <__ssputs_r+0x5c>
 800a46e:	230c      	movs	r3, #12
 800a470:	f8ca 3000 	str.w	r3, [sl]
 800a474:	89a3      	ldrh	r3, [r4, #12]
 800a476:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a47a:	81a3      	strh	r3, [r4, #12]
 800a47c:	f04f 30ff 	mov.w	r0, #4294967295
 800a480:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a484:	6921      	ldr	r1, [r4, #16]
 800a486:	464a      	mov	r2, r9
 800a488:	f7ff fb5e 	bl	8009b48 <memcpy>
 800a48c:	89a3      	ldrh	r3, [r4, #12]
 800a48e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a492:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a496:	81a3      	strh	r3, [r4, #12]
 800a498:	6126      	str	r6, [r4, #16]
 800a49a:	6165      	str	r5, [r4, #20]
 800a49c:	444e      	add	r6, r9
 800a49e:	eba5 0509 	sub.w	r5, r5, r9
 800a4a2:	6026      	str	r6, [r4, #0]
 800a4a4:	60a5      	str	r5, [r4, #8]
 800a4a6:	463e      	mov	r6, r7
 800a4a8:	42be      	cmp	r6, r7
 800a4aa:	d900      	bls.n	800a4ae <__ssputs_r+0x86>
 800a4ac:	463e      	mov	r6, r7
 800a4ae:	4632      	mov	r2, r6
 800a4b0:	6820      	ldr	r0, [r4, #0]
 800a4b2:	4641      	mov	r1, r8
 800a4b4:	f000 fcb8 	bl	800ae28 <memmove>
 800a4b8:	68a3      	ldr	r3, [r4, #8]
 800a4ba:	6822      	ldr	r2, [r4, #0]
 800a4bc:	1b9b      	subs	r3, r3, r6
 800a4be:	4432      	add	r2, r6
 800a4c0:	60a3      	str	r3, [r4, #8]
 800a4c2:	6022      	str	r2, [r4, #0]
 800a4c4:	2000      	movs	r0, #0
 800a4c6:	e7db      	b.n	800a480 <__ssputs_r+0x58>
 800a4c8:	462a      	mov	r2, r5
 800a4ca:	f000 fcd3 	bl	800ae74 <_realloc_r>
 800a4ce:	4606      	mov	r6, r0
 800a4d0:	2800      	cmp	r0, #0
 800a4d2:	d1e1      	bne.n	800a498 <__ssputs_r+0x70>
 800a4d4:	6921      	ldr	r1, [r4, #16]
 800a4d6:	4650      	mov	r0, sl
 800a4d8:	f7ff fefc 	bl	800a2d4 <_free_r>
 800a4dc:	e7c7      	b.n	800a46e <__ssputs_r+0x46>
	...

0800a4e0 <_svfiprintf_r>:
 800a4e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a4e4:	4698      	mov	r8, r3
 800a4e6:	898b      	ldrh	r3, [r1, #12]
 800a4e8:	061b      	lsls	r3, r3, #24
 800a4ea:	b09d      	sub	sp, #116	; 0x74
 800a4ec:	4607      	mov	r7, r0
 800a4ee:	460d      	mov	r5, r1
 800a4f0:	4614      	mov	r4, r2
 800a4f2:	d50e      	bpl.n	800a512 <_svfiprintf_r+0x32>
 800a4f4:	690b      	ldr	r3, [r1, #16]
 800a4f6:	b963      	cbnz	r3, 800a512 <_svfiprintf_r+0x32>
 800a4f8:	2140      	movs	r1, #64	; 0x40
 800a4fa:	f7ff ff3b 	bl	800a374 <_malloc_r>
 800a4fe:	6028      	str	r0, [r5, #0]
 800a500:	6128      	str	r0, [r5, #16]
 800a502:	b920      	cbnz	r0, 800a50e <_svfiprintf_r+0x2e>
 800a504:	230c      	movs	r3, #12
 800a506:	603b      	str	r3, [r7, #0]
 800a508:	f04f 30ff 	mov.w	r0, #4294967295
 800a50c:	e0d1      	b.n	800a6b2 <_svfiprintf_r+0x1d2>
 800a50e:	2340      	movs	r3, #64	; 0x40
 800a510:	616b      	str	r3, [r5, #20]
 800a512:	2300      	movs	r3, #0
 800a514:	9309      	str	r3, [sp, #36]	; 0x24
 800a516:	2320      	movs	r3, #32
 800a518:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a51c:	f8cd 800c 	str.w	r8, [sp, #12]
 800a520:	2330      	movs	r3, #48	; 0x30
 800a522:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800a6cc <_svfiprintf_r+0x1ec>
 800a526:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a52a:	f04f 0901 	mov.w	r9, #1
 800a52e:	4623      	mov	r3, r4
 800a530:	469a      	mov	sl, r3
 800a532:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a536:	b10a      	cbz	r2, 800a53c <_svfiprintf_r+0x5c>
 800a538:	2a25      	cmp	r2, #37	; 0x25
 800a53a:	d1f9      	bne.n	800a530 <_svfiprintf_r+0x50>
 800a53c:	ebba 0b04 	subs.w	fp, sl, r4
 800a540:	d00b      	beq.n	800a55a <_svfiprintf_r+0x7a>
 800a542:	465b      	mov	r3, fp
 800a544:	4622      	mov	r2, r4
 800a546:	4629      	mov	r1, r5
 800a548:	4638      	mov	r0, r7
 800a54a:	f7ff ff6d 	bl	800a428 <__ssputs_r>
 800a54e:	3001      	adds	r0, #1
 800a550:	f000 80aa 	beq.w	800a6a8 <_svfiprintf_r+0x1c8>
 800a554:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a556:	445a      	add	r2, fp
 800a558:	9209      	str	r2, [sp, #36]	; 0x24
 800a55a:	f89a 3000 	ldrb.w	r3, [sl]
 800a55e:	2b00      	cmp	r3, #0
 800a560:	f000 80a2 	beq.w	800a6a8 <_svfiprintf_r+0x1c8>
 800a564:	2300      	movs	r3, #0
 800a566:	f04f 32ff 	mov.w	r2, #4294967295
 800a56a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a56e:	f10a 0a01 	add.w	sl, sl, #1
 800a572:	9304      	str	r3, [sp, #16]
 800a574:	9307      	str	r3, [sp, #28]
 800a576:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a57a:	931a      	str	r3, [sp, #104]	; 0x68
 800a57c:	4654      	mov	r4, sl
 800a57e:	2205      	movs	r2, #5
 800a580:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a584:	4851      	ldr	r0, [pc, #324]	; (800a6cc <_svfiprintf_r+0x1ec>)
 800a586:	f7f5 fe03 	bl	8000190 <memchr>
 800a58a:	9a04      	ldr	r2, [sp, #16]
 800a58c:	b9d8      	cbnz	r0, 800a5c6 <_svfiprintf_r+0xe6>
 800a58e:	06d0      	lsls	r0, r2, #27
 800a590:	bf44      	itt	mi
 800a592:	2320      	movmi	r3, #32
 800a594:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a598:	0711      	lsls	r1, r2, #28
 800a59a:	bf44      	itt	mi
 800a59c:	232b      	movmi	r3, #43	; 0x2b
 800a59e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a5a2:	f89a 3000 	ldrb.w	r3, [sl]
 800a5a6:	2b2a      	cmp	r3, #42	; 0x2a
 800a5a8:	d015      	beq.n	800a5d6 <_svfiprintf_r+0xf6>
 800a5aa:	9a07      	ldr	r2, [sp, #28]
 800a5ac:	4654      	mov	r4, sl
 800a5ae:	2000      	movs	r0, #0
 800a5b0:	f04f 0c0a 	mov.w	ip, #10
 800a5b4:	4621      	mov	r1, r4
 800a5b6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a5ba:	3b30      	subs	r3, #48	; 0x30
 800a5bc:	2b09      	cmp	r3, #9
 800a5be:	d94e      	bls.n	800a65e <_svfiprintf_r+0x17e>
 800a5c0:	b1b0      	cbz	r0, 800a5f0 <_svfiprintf_r+0x110>
 800a5c2:	9207      	str	r2, [sp, #28]
 800a5c4:	e014      	b.n	800a5f0 <_svfiprintf_r+0x110>
 800a5c6:	eba0 0308 	sub.w	r3, r0, r8
 800a5ca:	fa09 f303 	lsl.w	r3, r9, r3
 800a5ce:	4313      	orrs	r3, r2
 800a5d0:	9304      	str	r3, [sp, #16]
 800a5d2:	46a2      	mov	sl, r4
 800a5d4:	e7d2      	b.n	800a57c <_svfiprintf_r+0x9c>
 800a5d6:	9b03      	ldr	r3, [sp, #12]
 800a5d8:	1d19      	adds	r1, r3, #4
 800a5da:	681b      	ldr	r3, [r3, #0]
 800a5dc:	9103      	str	r1, [sp, #12]
 800a5de:	2b00      	cmp	r3, #0
 800a5e0:	bfbb      	ittet	lt
 800a5e2:	425b      	neglt	r3, r3
 800a5e4:	f042 0202 	orrlt.w	r2, r2, #2
 800a5e8:	9307      	strge	r3, [sp, #28]
 800a5ea:	9307      	strlt	r3, [sp, #28]
 800a5ec:	bfb8      	it	lt
 800a5ee:	9204      	strlt	r2, [sp, #16]
 800a5f0:	7823      	ldrb	r3, [r4, #0]
 800a5f2:	2b2e      	cmp	r3, #46	; 0x2e
 800a5f4:	d10c      	bne.n	800a610 <_svfiprintf_r+0x130>
 800a5f6:	7863      	ldrb	r3, [r4, #1]
 800a5f8:	2b2a      	cmp	r3, #42	; 0x2a
 800a5fa:	d135      	bne.n	800a668 <_svfiprintf_r+0x188>
 800a5fc:	9b03      	ldr	r3, [sp, #12]
 800a5fe:	1d1a      	adds	r2, r3, #4
 800a600:	681b      	ldr	r3, [r3, #0]
 800a602:	9203      	str	r2, [sp, #12]
 800a604:	2b00      	cmp	r3, #0
 800a606:	bfb8      	it	lt
 800a608:	f04f 33ff 	movlt.w	r3, #4294967295
 800a60c:	3402      	adds	r4, #2
 800a60e:	9305      	str	r3, [sp, #20]
 800a610:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a6dc <_svfiprintf_r+0x1fc>
 800a614:	7821      	ldrb	r1, [r4, #0]
 800a616:	2203      	movs	r2, #3
 800a618:	4650      	mov	r0, sl
 800a61a:	f7f5 fdb9 	bl	8000190 <memchr>
 800a61e:	b140      	cbz	r0, 800a632 <_svfiprintf_r+0x152>
 800a620:	2340      	movs	r3, #64	; 0x40
 800a622:	eba0 000a 	sub.w	r0, r0, sl
 800a626:	fa03 f000 	lsl.w	r0, r3, r0
 800a62a:	9b04      	ldr	r3, [sp, #16]
 800a62c:	4303      	orrs	r3, r0
 800a62e:	3401      	adds	r4, #1
 800a630:	9304      	str	r3, [sp, #16]
 800a632:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a636:	4826      	ldr	r0, [pc, #152]	; (800a6d0 <_svfiprintf_r+0x1f0>)
 800a638:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a63c:	2206      	movs	r2, #6
 800a63e:	f7f5 fda7 	bl	8000190 <memchr>
 800a642:	2800      	cmp	r0, #0
 800a644:	d038      	beq.n	800a6b8 <_svfiprintf_r+0x1d8>
 800a646:	4b23      	ldr	r3, [pc, #140]	; (800a6d4 <_svfiprintf_r+0x1f4>)
 800a648:	bb1b      	cbnz	r3, 800a692 <_svfiprintf_r+0x1b2>
 800a64a:	9b03      	ldr	r3, [sp, #12]
 800a64c:	3307      	adds	r3, #7
 800a64e:	f023 0307 	bic.w	r3, r3, #7
 800a652:	3308      	adds	r3, #8
 800a654:	9303      	str	r3, [sp, #12]
 800a656:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a658:	4433      	add	r3, r6
 800a65a:	9309      	str	r3, [sp, #36]	; 0x24
 800a65c:	e767      	b.n	800a52e <_svfiprintf_r+0x4e>
 800a65e:	fb0c 3202 	mla	r2, ip, r2, r3
 800a662:	460c      	mov	r4, r1
 800a664:	2001      	movs	r0, #1
 800a666:	e7a5      	b.n	800a5b4 <_svfiprintf_r+0xd4>
 800a668:	2300      	movs	r3, #0
 800a66a:	3401      	adds	r4, #1
 800a66c:	9305      	str	r3, [sp, #20]
 800a66e:	4619      	mov	r1, r3
 800a670:	f04f 0c0a 	mov.w	ip, #10
 800a674:	4620      	mov	r0, r4
 800a676:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a67a:	3a30      	subs	r2, #48	; 0x30
 800a67c:	2a09      	cmp	r2, #9
 800a67e:	d903      	bls.n	800a688 <_svfiprintf_r+0x1a8>
 800a680:	2b00      	cmp	r3, #0
 800a682:	d0c5      	beq.n	800a610 <_svfiprintf_r+0x130>
 800a684:	9105      	str	r1, [sp, #20]
 800a686:	e7c3      	b.n	800a610 <_svfiprintf_r+0x130>
 800a688:	fb0c 2101 	mla	r1, ip, r1, r2
 800a68c:	4604      	mov	r4, r0
 800a68e:	2301      	movs	r3, #1
 800a690:	e7f0      	b.n	800a674 <_svfiprintf_r+0x194>
 800a692:	ab03      	add	r3, sp, #12
 800a694:	9300      	str	r3, [sp, #0]
 800a696:	462a      	mov	r2, r5
 800a698:	4b0f      	ldr	r3, [pc, #60]	; (800a6d8 <_svfiprintf_r+0x1f8>)
 800a69a:	a904      	add	r1, sp, #16
 800a69c:	4638      	mov	r0, r7
 800a69e:	f3af 8000 	nop.w
 800a6a2:	1c42      	adds	r2, r0, #1
 800a6a4:	4606      	mov	r6, r0
 800a6a6:	d1d6      	bne.n	800a656 <_svfiprintf_r+0x176>
 800a6a8:	89ab      	ldrh	r3, [r5, #12]
 800a6aa:	065b      	lsls	r3, r3, #25
 800a6ac:	f53f af2c 	bmi.w	800a508 <_svfiprintf_r+0x28>
 800a6b0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a6b2:	b01d      	add	sp, #116	; 0x74
 800a6b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a6b8:	ab03      	add	r3, sp, #12
 800a6ba:	9300      	str	r3, [sp, #0]
 800a6bc:	462a      	mov	r2, r5
 800a6be:	4b06      	ldr	r3, [pc, #24]	; (800a6d8 <_svfiprintf_r+0x1f8>)
 800a6c0:	a904      	add	r1, sp, #16
 800a6c2:	4638      	mov	r0, r7
 800a6c4:	f000 f9d4 	bl	800aa70 <_printf_i>
 800a6c8:	e7eb      	b.n	800a6a2 <_svfiprintf_r+0x1c2>
 800a6ca:	bf00      	nop
 800a6cc:	0800b6c4 	.word	0x0800b6c4
 800a6d0:	0800b6ce 	.word	0x0800b6ce
 800a6d4:	00000000 	.word	0x00000000
 800a6d8:	0800a429 	.word	0x0800a429
 800a6dc:	0800b6ca 	.word	0x0800b6ca

0800a6e0 <__sfputc_r>:
 800a6e0:	6893      	ldr	r3, [r2, #8]
 800a6e2:	3b01      	subs	r3, #1
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	b410      	push	{r4}
 800a6e8:	6093      	str	r3, [r2, #8]
 800a6ea:	da08      	bge.n	800a6fe <__sfputc_r+0x1e>
 800a6ec:	6994      	ldr	r4, [r2, #24]
 800a6ee:	42a3      	cmp	r3, r4
 800a6f0:	db01      	blt.n	800a6f6 <__sfputc_r+0x16>
 800a6f2:	290a      	cmp	r1, #10
 800a6f4:	d103      	bne.n	800a6fe <__sfputc_r+0x1e>
 800a6f6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a6fa:	f7ff bb0d 	b.w	8009d18 <__swbuf_r>
 800a6fe:	6813      	ldr	r3, [r2, #0]
 800a700:	1c58      	adds	r0, r3, #1
 800a702:	6010      	str	r0, [r2, #0]
 800a704:	7019      	strb	r1, [r3, #0]
 800a706:	4608      	mov	r0, r1
 800a708:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a70c:	4770      	bx	lr

0800a70e <__sfputs_r>:
 800a70e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a710:	4606      	mov	r6, r0
 800a712:	460f      	mov	r7, r1
 800a714:	4614      	mov	r4, r2
 800a716:	18d5      	adds	r5, r2, r3
 800a718:	42ac      	cmp	r4, r5
 800a71a:	d101      	bne.n	800a720 <__sfputs_r+0x12>
 800a71c:	2000      	movs	r0, #0
 800a71e:	e007      	b.n	800a730 <__sfputs_r+0x22>
 800a720:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a724:	463a      	mov	r2, r7
 800a726:	4630      	mov	r0, r6
 800a728:	f7ff ffda 	bl	800a6e0 <__sfputc_r>
 800a72c:	1c43      	adds	r3, r0, #1
 800a72e:	d1f3      	bne.n	800a718 <__sfputs_r+0xa>
 800a730:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a734 <_vfiprintf_r>:
 800a734:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a738:	460d      	mov	r5, r1
 800a73a:	b09d      	sub	sp, #116	; 0x74
 800a73c:	4614      	mov	r4, r2
 800a73e:	4698      	mov	r8, r3
 800a740:	4606      	mov	r6, r0
 800a742:	b118      	cbz	r0, 800a74c <_vfiprintf_r+0x18>
 800a744:	6983      	ldr	r3, [r0, #24]
 800a746:	b90b      	cbnz	r3, 800a74c <_vfiprintf_r+0x18>
 800a748:	f7ff fcc0 	bl	800a0cc <__sinit>
 800a74c:	4b89      	ldr	r3, [pc, #548]	; (800a974 <_vfiprintf_r+0x240>)
 800a74e:	429d      	cmp	r5, r3
 800a750:	d11b      	bne.n	800a78a <_vfiprintf_r+0x56>
 800a752:	6875      	ldr	r5, [r6, #4]
 800a754:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a756:	07d9      	lsls	r1, r3, #31
 800a758:	d405      	bmi.n	800a766 <_vfiprintf_r+0x32>
 800a75a:	89ab      	ldrh	r3, [r5, #12]
 800a75c:	059a      	lsls	r2, r3, #22
 800a75e:	d402      	bmi.n	800a766 <_vfiprintf_r+0x32>
 800a760:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a762:	f7ff fd51 	bl	800a208 <__retarget_lock_acquire_recursive>
 800a766:	89ab      	ldrh	r3, [r5, #12]
 800a768:	071b      	lsls	r3, r3, #28
 800a76a:	d501      	bpl.n	800a770 <_vfiprintf_r+0x3c>
 800a76c:	692b      	ldr	r3, [r5, #16]
 800a76e:	b9eb      	cbnz	r3, 800a7ac <_vfiprintf_r+0x78>
 800a770:	4629      	mov	r1, r5
 800a772:	4630      	mov	r0, r6
 800a774:	f7ff fb22 	bl	8009dbc <__swsetup_r>
 800a778:	b1c0      	cbz	r0, 800a7ac <_vfiprintf_r+0x78>
 800a77a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a77c:	07dc      	lsls	r4, r3, #31
 800a77e:	d50e      	bpl.n	800a79e <_vfiprintf_r+0x6a>
 800a780:	f04f 30ff 	mov.w	r0, #4294967295
 800a784:	b01d      	add	sp, #116	; 0x74
 800a786:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a78a:	4b7b      	ldr	r3, [pc, #492]	; (800a978 <_vfiprintf_r+0x244>)
 800a78c:	429d      	cmp	r5, r3
 800a78e:	d101      	bne.n	800a794 <_vfiprintf_r+0x60>
 800a790:	68b5      	ldr	r5, [r6, #8]
 800a792:	e7df      	b.n	800a754 <_vfiprintf_r+0x20>
 800a794:	4b79      	ldr	r3, [pc, #484]	; (800a97c <_vfiprintf_r+0x248>)
 800a796:	429d      	cmp	r5, r3
 800a798:	bf08      	it	eq
 800a79a:	68f5      	ldreq	r5, [r6, #12]
 800a79c:	e7da      	b.n	800a754 <_vfiprintf_r+0x20>
 800a79e:	89ab      	ldrh	r3, [r5, #12]
 800a7a0:	0598      	lsls	r0, r3, #22
 800a7a2:	d4ed      	bmi.n	800a780 <_vfiprintf_r+0x4c>
 800a7a4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a7a6:	f7ff fd30 	bl	800a20a <__retarget_lock_release_recursive>
 800a7aa:	e7e9      	b.n	800a780 <_vfiprintf_r+0x4c>
 800a7ac:	2300      	movs	r3, #0
 800a7ae:	9309      	str	r3, [sp, #36]	; 0x24
 800a7b0:	2320      	movs	r3, #32
 800a7b2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a7b6:	f8cd 800c 	str.w	r8, [sp, #12]
 800a7ba:	2330      	movs	r3, #48	; 0x30
 800a7bc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a980 <_vfiprintf_r+0x24c>
 800a7c0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a7c4:	f04f 0901 	mov.w	r9, #1
 800a7c8:	4623      	mov	r3, r4
 800a7ca:	469a      	mov	sl, r3
 800a7cc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a7d0:	b10a      	cbz	r2, 800a7d6 <_vfiprintf_r+0xa2>
 800a7d2:	2a25      	cmp	r2, #37	; 0x25
 800a7d4:	d1f9      	bne.n	800a7ca <_vfiprintf_r+0x96>
 800a7d6:	ebba 0b04 	subs.w	fp, sl, r4
 800a7da:	d00b      	beq.n	800a7f4 <_vfiprintf_r+0xc0>
 800a7dc:	465b      	mov	r3, fp
 800a7de:	4622      	mov	r2, r4
 800a7e0:	4629      	mov	r1, r5
 800a7e2:	4630      	mov	r0, r6
 800a7e4:	f7ff ff93 	bl	800a70e <__sfputs_r>
 800a7e8:	3001      	adds	r0, #1
 800a7ea:	f000 80aa 	beq.w	800a942 <_vfiprintf_r+0x20e>
 800a7ee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a7f0:	445a      	add	r2, fp
 800a7f2:	9209      	str	r2, [sp, #36]	; 0x24
 800a7f4:	f89a 3000 	ldrb.w	r3, [sl]
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	f000 80a2 	beq.w	800a942 <_vfiprintf_r+0x20e>
 800a7fe:	2300      	movs	r3, #0
 800a800:	f04f 32ff 	mov.w	r2, #4294967295
 800a804:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a808:	f10a 0a01 	add.w	sl, sl, #1
 800a80c:	9304      	str	r3, [sp, #16]
 800a80e:	9307      	str	r3, [sp, #28]
 800a810:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a814:	931a      	str	r3, [sp, #104]	; 0x68
 800a816:	4654      	mov	r4, sl
 800a818:	2205      	movs	r2, #5
 800a81a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a81e:	4858      	ldr	r0, [pc, #352]	; (800a980 <_vfiprintf_r+0x24c>)
 800a820:	f7f5 fcb6 	bl	8000190 <memchr>
 800a824:	9a04      	ldr	r2, [sp, #16]
 800a826:	b9d8      	cbnz	r0, 800a860 <_vfiprintf_r+0x12c>
 800a828:	06d1      	lsls	r1, r2, #27
 800a82a:	bf44      	itt	mi
 800a82c:	2320      	movmi	r3, #32
 800a82e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a832:	0713      	lsls	r3, r2, #28
 800a834:	bf44      	itt	mi
 800a836:	232b      	movmi	r3, #43	; 0x2b
 800a838:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a83c:	f89a 3000 	ldrb.w	r3, [sl]
 800a840:	2b2a      	cmp	r3, #42	; 0x2a
 800a842:	d015      	beq.n	800a870 <_vfiprintf_r+0x13c>
 800a844:	9a07      	ldr	r2, [sp, #28]
 800a846:	4654      	mov	r4, sl
 800a848:	2000      	movs	r0, #0
 800a84a:	f04f 0c0a 	mov.w	ip, #10
 800a84e:	4621      	mov	r1, r4
 800a850:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a854:	3b30      	subs	r3, #48	; 0x30
 800a856:	2b09      	cmp	r3, #9
 800a858:	d94e      	bls.n	800a8f8 <_vfiprintf_r+0x1c4>
 800a85a:	b1b0      	cbz	r0, 800a88a <_vfiprintf_r+0x156>
 800a85c:	9207      	str	r2, [sp, #28]
 800a85e:	e014      	b.n	800a88a <_vfiprintf_r+0x156>
 800a860:	eba0 0308 	sub.w	r3, r0, r8
 800a864:	fa09 f303 	lsl.w	r3, r9, r3
 800a868:	4313      	orrs	r3, r2
 800a86a:	9304      	str	r3, [sp, #16]
 800a86c:	46a2      	mov	sl, r4
 800a86e:	e7d2      	b.n	800a816 <_vfiprintf_r+0xe2>
 800a870:	9b03      	ldr	r3, [sp, #12]
 800a872:	1d19      	adds	r1, r3, #4
 800a874:	681b      	ldr	r3, [r3, #0]
 800a876:	9103      	str	r1, [sp, #12]
 800a878:	2b00      	cmp	r3, #0
 800a87a:	bfbb      	ittet	lt
 800a87c:	425b      	neglt	r3, r3
 800a87e:	f042 0202 	orrlt.w	r2, r2, #2
 800a882:	9307      	strge	r3, [sp, #28]
 800a884:	9307      	strlt	r3, [sp, #28]
 800a886:	bfb8      	it	lt
 800a888:	9204      	strlt	r2, [sp, #16]
 800a88a:	7823      	ldrb	r3, [r4, #0]
 800a88c:	2b2e      	cmp	r3, #46	; 0x2e
 800a88e:	d10c      	bne.n	800a8aa <_vfiprintf_r+0x176>
 800a890:	7863      	ldrb	r3, [r4, #1]
 800a892:	2b2a      	cmp	r3, #42	; 0x2a
 800a894:	d135      	bne.n	800a902 <_vfiprintf_r+0x1ce>
 800a896:	9b03      	ldr	r3, [sp, #12]
 800a898:	1d1a      	adds	r2, r3, #4
 800a89a:	681b      	ldr	r3, [r3, #0]
 800a89c:	9203      	str	r2, [sp, #12]
 800a89e:	2b00      	cmp	r3, #0
 800a8a0:	bfb8      	it	lt
 800a8a2:	f04f 33ff 	movlt.w	r3, #4294967295
 800a8a6:	3402      	adds	r4, #2
 800a8a8:	9305      	str	r3, [sp, #20]
 800a8aa:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a990 <_vfiprintf_r+0x25c>
 800a8ae:	7821      	ldrb	r1, [r4, #0]
 800a8b0:	2203      	movs	r2, #3
 800a8b2:	4650      	mov	r0, sl
 800a8b4:	f7f5 fc6c 	bl	8000190 <memchr>
 800a8b8:	b140      	cbz	r0, 800a8cc <_vfiprintf_r+0x198>
 800a8ba:	2340      	movs	r3, #64	; 0x40
 800a8bc:	eba0 000a 	sub.w	r0, r0, sl
 800a8c0:	fa03 f000 	lsl.w	r0, r3, r0
 800a8c4:	9b04      	ldr	r3, [sp, #16]
 800a8c6:	4303      	orrs	r3, r0
 800a8c8:	3401      	adds	r4, #1
 800a8ca:	9304      	str	r3, [sp, #16]
 800a8cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a8d0:	482c      	ldr	r0, [pc, #176]	; (800a984 <_vfiprintf_r+0x250>)
 800a8d2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a8d6:	2206      	movs	r2, #6
 800a8d8:	f7f5 fc5a 	bl	8000190 <memchr>
 800a8dc:	2800      	cmp	r0, #0
 800a8de:	d03f      	beq.n	800a960 <_vfiprintf_r+0x22c>
 800a8e0:	4b29      	ldr	r3, [pc, #164]	; (800a988 <_vfiprintf_r+0x254>)
 800a8e2:	bb1b      	cbnz	r3, 800a92c <_vfiprintf_r+0x1f8>
 800a8e4:	9b03      	ldr	r3, [sp, #12]
 800a8e6:	3307      	adds	r3, #7
 800a8e8:	f023 0307 	bic.w	r3, r3, #7
 800a8ec:	3308      	adds	r3, #8
 800a8ee:	9303      	str	r3, [sp, #12]
 800a8f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a8f2:	443b      	add	r3, r7
 800a8f4:	9309      	str	r3, [sp, #36]	; 0x24
 800a8f6:	e767      	b.n	800a7c8 <_vfiprintf_r+0x94>
 800a8f8:	fb0c 3202 	mla	r2, ip, r2, r3
 800a8fc:	460c      	mov	r4, r1
 800a8fe:	2001      	movs	r0, #1
 800a900:	e7a5      	b.n	800a84e <_vfiprintf_r+0x11a>
 800a902:	2300      	movs	r3, #0
 800a904:	3401      	adds	r4, #1
 800a906:	9305      	str	r3, [sp, #20]
 800a908:	4619      	mov	r1, r3
 800a90a:	f04f 0c0a 	mov.w	ip, #10
 800a90e:	4620      	mov	r0, r4
 800a910:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a914:	3a30      	subs	r2, #48	; 0x30
 800a916:	2a09      	cmp	r2, #9
 800a918:	d903      	bls.n	800a922 <_vfiprintf_r+0x1ee>
 800a91a:	2b00      	cmp	r3, #0
 800a91c:	d0c5      	beq.n	800a8aa <_vfiprintf_r+0x176>
 800a91e:	9105      	str	r1, [sp, #20]
 800a920:	e7c3      	b.n	800a8aa <_vfiprintf_r+0x176>
 800a922:	fb0c 2101 	mla	r1, ip, r1, r2
 800a926:	4604      	mov	r4, r0
 800a928:	2301      	movs	r3, #1
 800a92a:	e7f0      	b.n	800a90e <_vfiprintf_r+0x1da>
 800a92c:	ab03      	add	r3, sp, #12
 800a92e:	9300      	str	r3, [sp, #0]
 800a930:	462a      	mov	r2, r5
 800a932:	4b16      	ldr	r3, [pc, #88]	; (800a98c <_vfiprintf_r+0x258>)
 800a934:	a904      	add	r1, sp, #16
 800a936:	4630      	mov	r0, r6
 800a938:	f3af 8000 	nop.w
 800a93c:	4607      	mov	r7, r0
 800a93e:	1c78      	adds	r0, r7, #1
 800a940:	d1d6      	bne.n	800a8f0 <_vfiprintf_r+0x1bc>
 800a942:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a944:	07d9      	lsls	r1, r3, #31
 800a946:	d405      	bmi.n	800a954 <_vfiprintf_r+0x220>
 800a948:	89ab      	ldrh	r3, [r5, #12]
 800a94a:	059a      	lsls	r2, r3, #22
 800a94c:	d402      	bmi.n	800a954 <_vfiprintf_r+0x220>
 800a94e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a950:	f7ff fc5b 	bl	800a20a <__retarget_lock_release_recursive>
 800a954:	89ab      	ldrh	r3, [r5, #12]
 800a956:	065b      	lsls	r3, r3, #25
 800a958:	f53f af12 	bmi.w	800a780 <_vfiprintf_r+0x4c>
 800a95c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a95e:	e711      	b.n	800a784 <_vfiprintf_r+0x50>
 800a960:	ab03      	add	r3, sp, #12
 800a962:	9300      	str	r3, [sp, #0]
 800a964:	462a      	mov	r2, r5
 800a966:	4b09      	ldr	r3, [pc, #36]	; (800a98c <_vfiprintf_r+0x258>)
 800a968:	a904      	add	r1, sp, #16
 800a96a:	4630      	mov	r0, r6
 800a96c:	f000 f880 	bl	800aa70 <_printf_i>
 800a970:	e7e4      	b.n	800a93c <_vfiprintf_r+0x208>
 800a972:	bf00      	nop
 800a974:	0800b684 	.word	0x0800b684
 800a978:	0800b6a4 	.word	0x0800b6a4
 800a97c:	0800b664 	.word	0x0800b664
 800a980:	0800b6c4 	.word	0x0800b6c4
 800a984:	0800b6ce 	.word	0x0800b6ce
 800a988:	00000000 	.word	0x00000000
 800a98c:	0800a70f 	.word	0x0800a70f
 800a990:	0800b6ca 	.word	0x0800b6ca

0800a994 <_printf_common>:
 800a994:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a998:	4616      	mov	r6, r2
 800a99a:	4699      	mov	r9, r3
 800a99c:	688a      	ldr	r2, [r1, #8]
 800a99e:	690b      	ldr	r3, [r1, #16]
 800a9a0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a9a4:	4293      	cmp	r3, r2
 800a9a6:	bfb8      	it	lt
 800a9a8:	4613      	movlt	r3, r2
 800a9aa:	6033      	str	r3, [r6, #0]
 800a9ac:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a9b0:	4607      	mov	r7, r0
 800a9b2:	460c      	mov	r4, r1
 800a9b4:	b10a      	cbz	r2, 800a9ba <_printf_common+0x26>
 800a9b6:	3301      	adds	r3, #1
 800a9b8:	6033      	str	r3, [r6, #0]
 800a9ba:	6823      	ldr	r3, [r4, #0]
 800a9bc:	0699      	lsls	r1, r3, #26
 800a9be:	bf42      	ittt	mi
 800a9c0:	6833      	ldrmi	r3, [r6, #0]
 800a9c2:	3302      	addmi	r3, #2
 800a9c4:	6033      	strmi	r3, [r6, #0]
 800a9c6:	6825      	ldr	r5, [r4, #0]
 800a9c8:	f015 0506 	ands.w	r5, r5, #6
 800a9cc:	d106      	bne.n	800a9dc <_printf_common+0x48>
 800a9ce:	f104 0a19 	add.w	sl, r4, #25
 800a9d2:	68e3      	ldr	r3, [r4, #12]
 800a9d4:	6832      	ldr	r2, [r6, #0]
 800a9d6:	1a9b      	subs	r3, r3, r2
 800a9d8:	42ab      	cmp	r3, r5
 800a9da:	dc26      	bgt.n	800aa2a <_printf_common+0x96>
 800a9dc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a9e0:	1e13      	subs	r3, r2, #0
 800a9e2:	6822      	ldr	r2, [r4, #0]
 800a9e4:	bf18      	it	ne
 800a9e6:	2301      	movne	r3, #1
 800a9e8:	0692      	lsls	r2, r2, #26
 800a9ea:	d42b      	bmi.n	800aa44 <_printf_common+0xb0>
 800a9ec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a9f0:	4649      	mov	r1, r9
 800a9f2:	4638      	mov	r0, r7
 800a9f4:	47c0      	blx	r8
 800a9f6:	3001      	adds	r0, #1
 800a9f8:	d01e      	beq.n	800aa38 <_printf_common+0xa4>
 800a9fa:	6823      	ldr	r3, [r4, #0]
 800a9fc:	68e5      	ldr	r5, [r4, #12]
 800a9fe:	6832      	ldr	r2, [r6, #0]
 800aa00:	f003 0306 	and.w	r3, r3, #6
 800aa04:	2b04      	cmp	r3, #4
 800aa06:	bf08      	it	eq
 800aa08:	1aad      	subeq	r5, r5, r2
 800aa0a:	68a3      	ldr	r3, [r4, #8]
 800aa0c:	6922      	ldr	r2, [r4, #16]
 800aa0e:	bf0c      	ite	eq
 800aa10:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800aa14:	2500      	movne	r5, #0
 800aa16:	4293      	cmp	r3, r2
 800aa18:	bfc4      	itt	gt
 800aa1a:	1a9b      	subgt	r3, r3, r2
 800aa1c:	18ed      	addgt	r5, r5, r3
 800aa1e:	2600      	movs	r6, #0
 800aa20:	341a      	adds	r4, #26
 800aa22:	42b5      	cmp	r5, r6
 800aa24:	d11a      	bne.n	800aa5c <_printf_common+0xc8>
 800aa26:	2000      	movs	r0, #0
 800aa28:	e008      	b.n	800aa3c <_printf_common+0xa8>
 800aa2a:	2301      	movs	r3, #1
 800aa2c:	4652      	mov	r2, sl
 800aa2e:	4649      	mov	r1, r9
 800aa30:	4638      	mov	r0, r7
 800aa32:	47c0      	blx	r8
 800aa34:	3001      	adds	r0, #1
 800aa36:	d103      	bne.n	800aa40 <_printf_common+0xac>
 800aa38:	f04f 30ff 	mov.w	r0, #4294967295
 800aa3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aa40:	3501      	adds	r5, #1
 800aa42:	e7c6      	b.n	800a9d2 <_printf_common+0x3e>
 800aa44:	18e1      	adds	r1, r4, r3
 800aa46:	1c5a      	adds	r2, r3, #1
 800aa48:	2030      	movs	r0, #48	; 0x30
 800aa4a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800aa4e:	4422      	add	r2, r4
 800aa50:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800aa54:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800aa58:	3302      	adds	r3, #2
 800aa5a:	e7c7      	b.n	800a9ec <_printf_common+0x58>
 800aa5c:	2301      	movs	r3, #1
 800aa5e:	4622      	mov	r2, r4
 800aa60:	4649      	mov	r1, r9
 800aa62:	4638      	mov	r0, r7
 800aa64:	47c0      	blx	r8
 800aa66:	3001      	adds	r0, #1
 800aa68:	d0e6      	beq.n	800aa38 <_printf_common+0xa4>
 800aa6a:	3601      	adds	r6, #1
 800aa6c:	e7d9      	b.n	800aa22 <_printf_common+0x8e>
	...

0800aa70 <_printf_i>:
 800aa70:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800aa74:	460c      	mov	r4, r1
 800aa76:	4691      	mov	r9, r2
 800aa78:	7e27      	ldrb	r7, [r4, #24]
 800aa7a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800aa7c:	2f78      	cmp	r7, #120	; 0x78
 800aa7e:	4680      	mov	r8, r0
 800aa80:	469a      	mov	sl, r3
 800aa82:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800aa86:	d807      	bhi.n	800aa98 <_printf_i+0x28>
 800aa88:	2f62      	cmp	r7, #98	; 0x62
 800aa8a:	d80a      	bhi.n	800aaa2 <_printf_i+0x32>
 800aa8c:	2f00      	cmp	r7, #0
 800aa8e:	f000 80d8 	beq.w	800ac42 <_printf_i+0x1d2>
 800aa92:	2f58      	cmp	r7, #88	; 0x58
 800aa94:	f000 80a3 	beq.w	800abde <_printf_i+0x16e>
 800aa98:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800aa9c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800aaa0:	e03a      	b.n	800ab18 <_printf_i+0xa8>
 800aaa2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800aaa6:	2b15      	cmp	r3, #21
 800aaa8:	d8f6      	bhi.n	800aa98 <_printf_i+0x28>
 800aaaa:	a001      	add	r0, pc, #4	; (adr r0, 800aab0 <_printf_i+0x40>)
 800aaac:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800aab0:	0800ab09 	.word	0x0800ab09
 800aab4:	0800ab1d 	.word	0x0800ab1d
 800aab8:	0800aa99 	.word	0x0800aa99
 800aabc:	0800aa99 	.word	0x0800aa99
 800aac0:	0800aa99 	.word	0x0800aa99
 800aac4:	0800aa99 	.word	0x0800aa99
 800aac8:	0800ab1d 	.word	0x0800ab1d
 800aacc:	0800aa99 	.word	0x0800aa99
 800aad0:	0800aa99 	.word	0x0800aa99
 800aad4:	0800aa99 	.word	0x0800aa99
 800aad8:	0800aa99 	.word	0x0800aa99
 800aadc:	0800ac29 	.word	0x0800ac29
 800aae0:	0800ab4d 	.word	0x0800ab4d
 800aae4:	0800ac0b 	.word	0x0800ac0b
 800aae8:	0800aa99 	.word	0x0800aa99
 800aaec:	0800aa99 	.word	0x0800aa99
 800aaf0:	0800ac4b 	.word	0x0800ac4b
 800aaf4:	0800aa99 	.word	0x0800aa99
 800aaf8:	0800ab4d 	.word	0x0800ab4d
 800aafc:	0800aa99 	.word	0x0800aa99
 800ab00:	0800aa99 	.word	0x0800aa99
 800ab04:	0800ac13 	.word	0x0800ac13
 800ab08:	680b      	ldr	r3, [r1, #0]
 800ab0a:	1d1a      	adds	r2, r3, #4
 800ab0c:	681b      	ldr	r3, [r3, #0]
 800ab0e:	600a      	str	r2, [r1, #0]
 800ab10:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800ab14:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ab18:	2301      	movs	r3, #1
 800ab1a:	e0a3      	b.n	800ac64 <_printf_i+0x1f4>
 800ab1c:	6825      	ldr	r5, [r4, #0]
 800ab1e:	6808      	ldr	r0, [r1, #0]
 800ab20:	062e      	lsls	r6, r5, #24
 800ab22:	f100 0304 	add.w	r3, r0, #4
 800ab26:	d50a      	bpl.n	800ab3e <_printf_i+0xce>
 800ab28:	6805      	ldr	r5, [r0, #0]
 800ab2a:	600b      	str	r3, [r1, #0]
 800ab2c:	2d00      	cmp	r5, #0
 800ab2e:	da03      	bge.n	800ab38 <_printf_i+0xc8>
 800ab30:	232d      	movs	r3, #45	; 0x2d
 800ab32:	426d      	negs	r5, r5
 800ab34:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ab38:	485e      	ldr	r0, [pc, #376]	; (800acb4 <_printf_i+0x244>)
 800ab3a:	230a      	movs	r3, #10
 800ab3c:	e019      	b.n	800ab72 <_printf_i+0x102>
 800ab3e:	f015 0f40 	tst.w	r5, #64	; 0x40
 800ab42:	6805      	ldr	r5, [r0, #0]
 800ab44:	600b      	str	r3, [r1, #0]
 800ab46:	bf18      	it	ne
 800ab48:	b22d      	sxthne	r5, r5
 800ab4a:	e7ef      	b.n	800ab2c <_printf_i+0xbc>
 800ab4c:	680b      	ldr	r3, [r1, #0]
 800ab4e:	6825      	ldr	r5, [r4, #0]
 800ab50:	1d18      	adds	r0, r3, #4
 800ab52:	6008      	str	r0, [r1, #0]
 800ab54:	0628      	lsls	r0, r5, #24
 800ab56:	d501      	bpl.n	800ab5c <_printf_i+0xec>
 800ab58:	681d      	ldr	r5, [r3, #0]
 800ab5a:	e002      	b.n	800ab62 <_printf_i+0xf2>
 800ab5c:	0669      	lsls	r1, r5, #25
 800ab5e:	d5fb      	bpl.n	800ab58 <_printf_i+0xe8>
 800ab60:	881d      	ldrh	r5, [r3, #0]
 800ab62:	4854      	ldr	r0, [pc, #336]	; (800acb4 <_printf_i+0x244>)
 800ab64:	2f6f      	cmp	r7, #111	; 0x6f
 800ab66:	bf0c      	ite	eq
 800ab68:	2308      	moveq	r3, #8
 800ab6a:	230a      	movne	r3, #10
 800ab6c:	2100      	movs	r1, #0
 800ab6e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ab72:	6866      	ldr	r6, [r4, #4]
 800ab74:	60a6      	str	r6, [r4, #8]
 800ab76:	2e00      	cmp	r6, #0
 800ab78:	bfa2      	ittt	ge
 800ab7a:	6821      	ldrge	r1, [r4, #0]
 800ab7c:	f021 0104 	bicge.w	r1, r1, #4
 800ab80:	6021      	strge	r1, [r4, #0]
 800ab82:	b90d      	cbnz	r5, 800ab88 <_printf_i+0x118>
 800ab84:	2e00      	cmp	r6, #0
 800ab86:	d04d      	beq.n	800ac24 <_printf_i+0x1b4>
 800ab88:	4616      	mov	r6, r2
 800ab8a:	fbb5 f1f3 	udiv	r1, r5, r3
 800ab8e:	fb03 5711 	mls	r7, r3, r1, r5
 800ab92:	5dc7      	ldrb	r7, [r0, r7]
 800ab94:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ab98:	462f      	mov	r7, r5
 800ab9a:	42bb      	cmp	r3, r7
 800ab9c:	460d      	mov	r5, r1
 800ab9e:	d9f4      	bls.n	800ab8a <_printf_i+0x11a>
 800aba0:	2b08      	cmp	r3, #8
 800aba2:	d10b      	bne.n	800abbc <_printf_i+0x14c>
 800aba4:	6823      	ldr	r3, [r4, #0]
 800aba6:	07df      	lsls	r7, r3, #31
 800aba8:	d508      	bpl.n	800abbc <_printf_i+0x14c>
 800abaa:	6923      	ldr	r3, [r4, #16]
 800abac:	6861      	ldr	r1, [r4, #4]
 800abae:	4299      	cmp	r1, r3
 800abb0:	bfde      	ittt	le
 800abb2:	2330      	movle	r3, #48	; 0x30
 800abb4:	f806 3c01 	strble.w	r3, [r6, #-1]
 800abb8:	f106 36ff 	addle.w	r6, r6, #4294967295
 800abbc:	1b92      	subs	r2, r2, r6
 800abbe:	6122      	str	r2, [r4, #16]
 800abc0:	f8cd a000 	str.w	sl, [sp]
 800abc4:	464b      	mov	r3, r9
 800abc6:	aa03      	add	r2, sp, #12
 800abc8:	4621      	mov	r1, r4
 800abca:	4640      	mov	r0, r8
 800abcc:	f7ff fee2 	bl	800a994 <_printf_common>
 800abd0:	3001      	adds	r0, #1
 800abd2:	d14c      	bne.n	800ac6e <_printf_i+0x1fe>
 800abd4:	f04f 30ff 	mov.w	r0, #4294967295
 800abd8:	b004      	add	sp, #16
 800abda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800abde:	4835      	ldr	r0, [pc, #212]	; (800acb4 <_printf_i+0x244>)
 800abe0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800abe4:	6823      	ldr	r3, [r4, #0]
 800abe6:	680e      	ldr	r6, [r1, #0]
 800abe8:	061f      	lsls	r7, r3, #24
 800abea:	f856 5b04 	ldr.w	r5, [r6], #4
 800abee:	600e      	str	r6, [r1, #0]
 800abf0:	d514      	bpl.n	800ac1c <_printf_i+0x1ac>
 800abf2:	07d9      	lsls	r1, r3, #31
 800abf4:	bf44      	itt	mi
 800abf6:	f043 0320 	orrmi.w	r3, r3, #32
 800abfa:	6023      	strmi	r3, [r4, #0]
 800abfc:	b91d      	cbnz	r5, 800ac06 <_printf_i+0x196>
 800abfe:	6823      	ldr	r3, [r4, #0]
 800ac00:	f023 0320 	bic.w	r3, r3, #32
 800ac04:	6023      	str	r3, [r4, #0]
 800ac06:	2310      	movs	r3, #16
 800ac08:	e7b0      	b.n	800ab6c <_printf_i+0xfc>
 800ac0a:	6823      	ldr	r3, [r4, #0]
 800ac0c:	f043 0320 	orr.w	r3, r3, #32
 800ac10:	6023      	str	r3, [r4, #0]
 800ac12:	2378      	movs	r3, #120	; 0x78
 800ac14:	4828      	ldr	r0, [pc, #160]	; (800acb8 <_printf_i+0x248>)
 800ac16:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ac1a:	e7e3      	b.n	800abe4 <_printf_i+0x174>
 800ac1c:	065e      	lsls	r6, r3, #25
 800ac1e:	bf48      	it	mi
 800ac20:	b2ad      	uxthmi	r5, r5
 800ac22:	e7e6      	b.n	800abf2 <_printf_i+0x182>
 800ac24:	4616      	mov	r6, r2
 800ac26:	e7bb      	b.n	800aba0 <_printf_i+0x130>
 800ac28:	680b      	ldr	r3, [r1, #0]
 800ac2a:	6826      	ldr	r6, [r4, #0]
 800ac2c:	6960      	ldr	r0, [r4, #20]
 800ac2e:	1d1d      	adds	r5, r3, #4
 800ac30:	600d      	str	r5, [r1, #0]
 800ac32:	0635      	lsls	r5, r6, #24
 800ac34:	681b      	ldr	r3, [r3, #0]
 800ac36:	d501      	bpl.n	800ac3c <_printf_i+0x1cc>
 800ac38:	6018      	str	r0, [r3, #0]
 800ac3a:	e002      	b.n	800ac42 <_printf_i+0x1d2>
 800ac3c:	0671      	lsls	r1, r6, #25
 800ac3e:	d5fb      	bpl.n	800ac38 <_printf_i+0x1c8>
 800ac40:	8018      	strh	r0, [r3, #0]
 800ac42:	2300      	movs	r3, #0
 800ac44:	6123      	str	r3, [r4, #16]
 800ac46:	4616      	mov	r6, r2
 800ac48:	e7ba      	b.n	800abc0 <_printf_i+0x150>
 800ac4a:	680b      	ldr	r3, [r1, #0]
 800ac4c:	1d1a      	adds	r2, r3, #4
 800ac4e:	600a      	str	r2, [r1, #0]
 800ac50:	681e      	ldr	r6, [r3, #0]
 800ac52:	6862      	ldr	r2, [r4, #4]
 800ac54:	2100      	movs	r1, #0
 800ac56:	4630      	mov	r0, r6
 800ac58:	f7f5 fa9a 	bl	8000190 <memchr>
 800ac5c:	b108      	cbz	r0, 800ac62 <_printf_i+0x1f2>
 800ac5e:	1b80      	subs	r0, r0, r6
 800ac60:	6060      	str	r0, [r4, #4]
 800ac62:	6863      	ldr	r3, [r4, #4]
 800ac64:	6123      	str	r3, [r4, #16]
 800ac66:	2300      	movs	r3, #0
 800ac68:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ac6c:	e7a8      	b.n	800abc0 <_printf_i+0x150>
 800ac6e:	6923      	ldr	r3, [r4, #16]
 800ac70:	4632      	mov	r2, r6
 800ac72:	4649      	mov	r1, r9
 800ac74:	4640      	mov	r0, r8
 800ac76:	47d0      	blx	sl
 800ac78:	3001      	adds	r0, #1
 800ac7a:	d0ab      	beq.n	800abd4 <_printf_i+0x164>
 800ac7c:	6823      	ldr	r3, [r4, #0]
 800ac7e:	079b      	lsls	r3, r3, #30
 800ac80:	d413      	bmi.n	800acaa <_printf_i+0x23a>
 800ac82:	68e0      	ldr	r0, [r4, #12]
 800ac84:	9b03      	ldr	r3, [sp, #12]
 800ac86:	4298      	cmp	r0, r3
 800ac88:	bfb8      	it	lt
 800ac8a:	4618      	movlt	r0, r3
 800ac8c:	e7a4      	b.n	800abd8 <_printf_i+0x168>
 800ac8e:	2301      	movs	r3, #1
 800ac90:	4632      	mov	r2, r6
 800ac92:	4649      	mov	r1, r9
 800ac94:	4640      	mov	r0, r8
 800ac96:	47d0      	blx	sl
 800ac98:	3001      	adds	r0, #1
 800ac9a:	d09b      	beq.n	800abd4 <_printf_i+0x164>
 800ac9c:	3501      	adds	r5, #1
 800ac9e:	68e3      	ldr	r3, [r4, #12]
 800aca0:	9903      	ldr	r1, [sp, #12]
 800aca2:	1a5b      	subs	r3, r3, r1
 800aca4:	42ab      	cmp	r3, r5
 800aca6:	dcf2      	bgt.n	800ac8e <_printf_i+0x21e>
 800aca8:	e7eb      	b.n	800ac82 <_printf_i+0x212>
 800acaa:	2500      	movs	r5, #0
 800acac:	f104 0619 	add.w	r6, r4, #25
 800acb0:	e7f5      	b.n	800ac9e <_printf_i+0x22e>
 800acb2:	bf00      	nop
 800acb4:	0800b6d5 	.word	0x0800b6d5
 800acb8:	0800b6e6 	.word	0x0800b6e6

0800acbc <_sbrk_r>:
 800acbc:	b538      	push	{r3, r4, r5, lr}
 800acbe:	4d06      	ldr	r5, [pc, #24]	; (800acd8 <_sbrk_r+0x1c>)
 800acc0:	2300      	movs	r3, #0
 800acc2:	4604      	mov	r4, r0
 800acc4:	4608      	mov	r0, r1
 800acc6:	602b      	str	r3, [r5, #0]
 800acc8:	f7f6 fc9c 	bl	8001604 <_sbrk>
 800accc:	1c43      	adds	r3, r0, #1
 800acce:	d102      	bne.n	800acd6 <_sbrk_r+0x1a>
 800acd0:	682b      	ldr	r3, [r5, #0]
 800acd2:	b103      	cbz	r3, 800acd6 <_sbrk_r+0x1a>
 800acd4:	6023      	str	r3, [r4, #0]
 800acd6:	bd38      	pop	{r3, r4, r5, pc}
 800acd8:	200016d4 	.word	0x200016d4

0800acdc <__sread>:
 800acdc:	b510      	push	{r4, lr}
 800acde:	460c      	mov	r4, r1
 800ace0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ace4:	f000 f8ec 	bl	800aec0 <_read_r>
 800ace8:	2800      	cmp	r0, #0
 800acea:	bfab      	itete	ge
 800acec:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800acee:	89a3      	ldrhlt	r3, [r4, #12]
 800acf0:	181b      	addge	r3, r3, r0
 800acf2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800acf6:	bfac      	ite	ge
 800acf8:	6563      	strge	r3, [r4, #84]	; 0x54
 800acfa:	81a3      	strhlt	r3, [r4, #12]
 800acfc:	bd10      	pop	{r4, pc}

0800acfe <__swrite>:
 800acfe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad02:	461f      	mov	r7, r3
 800ad04:	898b      	ldrh	r3, [r1, #12]
 800ad06:	05db      	lsls	r3, r3, #23
 800ad08:	4605      	mov	r5, r0
 800ad0a:	460c      	mov	r4, r1
 800ad0c:	4616      	mov	r6, r2
 800ad0e:	d505      	bpl.n	800ad1c <__swrite+0x1e>
 800ad10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ad14:	2302      	movs	r3, #2
 800ad16:	2200      	movs	r2, #0
 800ad18:	f000 f874 	bl	800ae04 <_lseek_r>
 800ad1c:	89a3      	ldrh	r3, [r4, #12]
 800ad1e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ad22:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ad26:	81a3      	strh	r3, [r4, #12]
 800ad28:	4632      	mov	r2, r6
 800ad2a:	463b      	mov	r3, r7
 800ad2c:	4628      	mov	r0, r5
 800ad2e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ad32:	f000 b823 	b.w	800ad7c <_write_r>

0800ad36 <__sseek>:
 800ad36:	b510      	push	{r4, lr}
 800ad38:	460c      	mov	r4, r1
 800ad3a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ad3e:	f000 f861 	bl	800ae04 <_lseek_r>
 800ad42:	1c43      	adds	r3, r0, #1
 800ad44:	89a3      	ldrh	r3, [r4, #12]
 800ad46:	bf15      	itete	ne
 800ad48:	6560      	strne	r0, [r4, #84]	; 0x54
 800ad4a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ad4e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ad52:	81a3      	strheq	r3, [r4, #12]
 800ad54:	bf18      	it	ne
 800ad56:	81a3      	strhne	r3, [r4, #12]
 800ad58:	bd10      	pop	{r4, pc}

0800ad5a <__sclose>:
 800ad5a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ad5e:	f000 b81f 	b.w	800ada0 <_close_r>

0800ad62 <strchr>:
 800ad62:	b2c9      	uxtb	r1, r1
 800ad64:	4603      	mov	r3, r0
 800ad66:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ad6a:	b11a      	cbz	r2, 800ad74 <strchr+0x12>
 800ad6c:	428a      	cmp	r2, r1
 800ad6e:	d1f9      	bne.n	800ad64 <strchr+0x2>
 800ad70:	4618      	mov	r0, r3
 800ad72:	4770      	bx	lr
 800ad74:	2900      	cmp	r1, #0
 800ad76:	bf18      	it	ne
 800ad78:	2300      	movne	r3, #0
 800ad7a:	e7f9      	b.n	800ad70 <strchr+0xe>

0800ad7c <_write_r>:
 800ad7c:	b538      	push	{r3, r4, r5, lr}
 800ad7e:	4d07      	ldr	r5, [pc, #28]	; (800ad9c <_write_r+0x20>)
 800ad80:	4604      	mov	r4, r0
 800ad82:	4608      	mov	r0, r1
 800ad84:	4611      	mov	r1, r2
 800ad86:	2200      	movs	r2, #0
 800ad88:	602a      	str	r2, [r5, #0]
 800ad8a:	461a      	mov	r2, r3
 800ad8c:	f7fc fdfa 	bl	8007984 <_write>
 800ad90:	1c43      	adds	r3, r0, #1
 800ad92:	d102      	bne.n	800ad9a <_write_r+0x1e>
 800ad94:	682b      	ldr	r3, [r5, #0]
 800ad96:	b103      	cbz	r3, 800ad9a <_write_r+0x1e>
 800ad98:	6023      	str	r3, [r4, #0]
 800ad9a:	bd38      	pop	{r3, r4, r5, pc}
 800ad9c:	200016d4 	.word	0x200016d4

0800ada0 <_close_r>:
 800ada0:	b538      	push	{r3, r4, r5, lr}
 800ada2:	4d06      	ldr	r5, [pc, #24]	; (800adbc <_close_r+0x1c>)
 800ada4:	2300      	movs	r3, #0
 800ada6:	4604      	mov	r4, r0
 800ada8:	4608      	mov	r0, r1
 800adaa:	602b      	str	r3, [r5, #0]
 800adac:	f7f6 fbf5 	bl	800159a <_close>
 800adb0:	1c43      	adds	r3, r0, #1
 800adb2:	d102      	bne.n	800adba <_close_r+0x1a>
 800adb4:	682b      	ldr	r3, [r5, #0]
 800adb6:	b103      	cbz	r3, 800adba <_close_r+0x1a>
 800adb8:	6023      	str	r3, [r4, #0]
 800adba:	bd38      	pop	{r3, r4, r5, pc}
 800adbc:	200016d4 	.word	0x200016d4

0800adc0 <_fstat_r>:
 800adc0:	b538      	push	{r3, r4, r5, lr}
 800adc2:	4d07      	ldr	r5, [pc, #28]	; (800ade0 <_fstat_r+0x20>)
 800adc4:	2300      	movs	r3, #0
 800adc6:	4604      	mov	r4, r0
 800adc8:	4608      	mov	r0, r1
 800adca:	4611      	mov	r1, r2
 800adcc:	602b      	str	r3, [r5, #0]
 800adce:	f7f6 fbf0 	bl	80015b2 <_fstat>
 800add2:	1c43      	adds	r3, r0, #1
 800add4:	d102      	bne.n	800addc <_fstat_r+0x1c>
 800add6:	682b      	ldr	r3, [r5, #0]
 800add8:	b103      	cbz	r3, 800addc <_fstat_r+0x1c>
 800adda:	6023      	str	r3, [r4, #0]
 800addc:	bd38      	pop	{r3, r4, r5, pc}
 800adde:	bf00      	nop
 800ade0:	200016d4 	.word	0x200016d4

0800ade4 <_isatty_r>:
 800ade4:	b538      	push	{r3, r4, r5, lr}
 800ade6:	4d06      	ldr	r5, [pc, #24]	; (800ae00 <_isatty_r+0x1c>)
 800ade8:	2300      	movs	r3, #0
 800adea:	4604      	mov	r4, r0
 800adec:	4608      	mov	r0, r1
 800adee:	602b      	str	r3, [r5, #0]
 800adf0:	f7f6 fbef 	bl	80015d2 <_isatty>
 800adf4:	1c43      	adds	r3, r0, #1
 800adf6:	d102      	bne.n	800adfe <_isatty_r+0x1a>
 800adf8:	682b      	ldr	r3, [r5, #0]
 800adfa:	b103      	cbz	r3, 800adfe <_isatty_r+0x1a>
 800adfc:	6023      	str	r3, [r4, #0]
 800adfe:	bd38      	pop	{r3, r4, r5, pc}
 800ae00:	200016d4 	.word	0x200016d4

0800ae04 <_lseek_r>:
 800ae04:	b538      	push	{r3, r4, r5, lr}
 800ae06:	4d07      	ldr	r5, [pc, #28]	; (800ae24 <_lseek_r+0x20>)
 800ae08:	4604      	mov	r4, r0
 800ae0a:	4608      	mov	r0, r1
 800ae0c:	4611      	mov	r1, r2
 800ae0e:	2200      	movs	r2, #0
 800ae10:	602a      	str	r2, [r5, #0]
 800ae12:	461a      	mov	r2, r3
 800ae14:	f7f6 fbe8 	bl	80015e8 <_lseek>
 800ae18:	1c43      	adds	r3, r0, #1
 800ae1a:	d102      	bne.n	800ae22 <_lseek_r+0x1e>
 800ae1c:	682b      	ldr	r3, [r5, #0]
 800ae1e:	b103      	cbz	r3, 800ae22 <_lseek_r+0x1e>
 800ae20:	6023      	str	r3, [r4, #0]
 800ae22:	bd38      	pop	{r3, r4, r5, pc}
 800ae24:	200016d4 	.word	0x200016d4

0800ae28 <memmove>:
 800ae28:	4288      	cmp	r0, r1
 800ae2a:	b510      	push	{r4, lr}
 800ae2c:	eb01 0402 	add.w	r4, r1, r2
 800ae30:	d902      	bls.n	800ae38 <memmove+0x10>
 800ae32:	4284      	cmp	r4, r0
 800ae34:	4623      	mov	r3, r4
 800ae36:	d807      	bhi.n	800ae48 <memmove+0x20>
 800ae38:	1e43      	subs	r3, r0, #1
 800ae3a:	42a1      	cmp	r1, r4
 800ae3c:	d008      	beq.n	800ae50 <memmove+0x28>
 800ae3e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ae42:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ae46:	e7f8      	b.n	800ae3a <memmove+0x12>
 800ae48:	4402      	add	r2, r0
 800ae4a:	4601      	mov	r1, r0
 800ae4c:	428a      	cmp	r2, r1
 800ae4e:	d100      	bne.n	800ae52 <memmove+0x2a>
 800ae50:	bd10      	pop	{r4, pc}
 800ae52:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ae56:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ae5a:	e7f7      	b.n	800ae4c <memmove+0x24>

0800ae5c <__malloc_lock>:
 800ae5c:	4801      	ldr	r0, [pc, #4]	; (800ae64 <__malloc_lock+0x8>)
 800ae5e:	f7ff b9d3 	b.w	800a208 <__retarget_lock_acquire_recursive>
 800ae62:	bf00      	nop
 800ae64:	200016cf 	.word	0x200016cf

0800ae68 <__malloc_unlock>:
 800ae68:	4801      	ldr	r0, [pc, #4]	; (800ae70 <__malloc_unlock+0x8>)
 800ae6a:	f7ff b9ce 	b.w	800a20a <__retarget_lock_release_recursive>
 800ae6e:	bf00      	nop
 800ae70:	200016cf 	.word	0x200016cf

0800ae74 <_realloc_r>:
 800ae74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae76:	4607      	mov	r7, r0
 800ae78:	4614      	mov	r4, r2
 800ae7a:	460e      	mov	r6, r1
 800ae7c:	b921      	cbnz	r1, 800ae88 <_realloc_r+0x14>
 800ae7e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800ae82:	4611      	mov	r1, r2
 800ae84:	f7ff ba76 	b.w	800a374 <_malloc_r>
 800ae88:	b922      	cbnz	r2, 800ae94 <_realloc_r+0x20>
 800ae8a:	f7ff fa23 	bl	800a2d4 <_free_r>
 800ae8e:	4625      	mov	r5, r4
 800ae90:	4628      	mov	r0, r5
 800ae92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ae94:	f000 f826 	bl	800aee4 <_malloc_usable_size_r>
 800ae98:	42a0      	cmp	r0, r4
 800ae9a:	d20f      	bcs.n	800aebc <_realloc_r+0x48>
 800ae9c:	4621      	mov	r1, r4
 800ae9e:	4638      	mov	r0, r7
 800aea0:	f7ff fa68 	bl	800a374 <_malloc_r>
 800aea4:	4605      	mov	r5, r0
 800aea6:	2800      	cmp	r0, #0
 800aea8:	d0f2      	beq.n	800ae90 <_realloc_r+0x1c>
 800aeaa:	4631      	mov	r1, r6
 800aeac:	4622      	mov	r2, r4
 800aeae:	f7fe fe4b 	bl	8009b48 <memcpy>
 800aeb2:	4631      	mov	r1, r6
 800aeb4:	4638      	mov	r0, r7
 800aeb6:	f7ff fa0d 	bl	800a2d4 <_free_r>
 800aeba:	e7e9      	b.n	800ae90 <_realloc_r+0x1c>
 800aebc:	4635      	mov	r5, r6
 800aebe:	e7e7      	b.n	800ae90 <_realloc_r+0x1c>

0800aec0 <_read_r>:
 800aec0:	b538      	push	{r3, r4, r5, lr}
 800aec2:	4d07      	ldr	r5, [pc, #28]	; (800aee0 <_read_r+0x20>)
 800aec4:	4604      	mov	r4, r0
 800aec6:	4608      	mov	r0, r1
 800aec8:	4611      	mov	r1, r2
 800aeca:	2200      	movs	r2, #0
 800aecc:	602a      	str	r2, [r5, #0]
 800aece:	461a      	mov	r2, r3
 800aed0:	f7f6 fb46 	bl	8001560 <_read>
 800aed4:	1c43      	adds	r3, r0, #1
 800aed6:	d102      	bne.n	800aede <_read_r+0x1e>
 800aed8:	682b      	ldr	r3, [r5, #0]
 800aeda:	b103      	cbz	r3, 800aede <_read_r+0x1e>
 800aedc:	6023      	str	r3, [r4, #0]
 800aede:	bd38      	pop	{r3, r4, r5, pc}
 800aee0:	200016d4 	.word	0x200016d4

0800aee4 <_malloc_usable_size_r>:
 800aee4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aee8:	1f18      	subs	r0, r3, #4
 800aeea:	2b00      	cmp	r3, #0
 800aeec:	bfbc      	itt	lt
 800aeee:	580b      	ldrlt	r3, [r1, r0]
 800aef0:	18c0      	addlt	r0, r0, r3
 800aef2:	4770      	bx	lr

0800aef4 <_init>:
 800aef4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aef6:	bf00      	nop
 800aef8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aefa:	bc08      	pop	{r3}
 800aefc:	469e      	mov	lr, r3
 800aefe:	4770      	bx	lr

0800af00 <_fini>:
 800af00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af02:	bf00      	nop
 800af04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800af06:	bc08      	pop	{r3}
 800af08:	469e      	mov	lr, r3
 800af0a:	4770      	bx	lr
