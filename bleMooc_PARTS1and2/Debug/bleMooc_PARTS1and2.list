
bleMooc_PARTS1and2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a644  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000594  0800a784  0800a784  0001a784  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800ad18  0800ad18  0001ad18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800ad20  0800ad20  0001ad20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800ad24  0800ad24  0001ad24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000088  20000004  0800ad28  00020004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 TIMERSERVER_CONTEXT 00000099  2000008c  0800adb0  0002008c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 BLE_DRIVER_CONTEXT 0000003e  20000128  0800ae49  00020128  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 SYSTEM_DRIVER_CONTEXT 00000011  20000168  0800ae87  00020168  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 BLE_APP_CONTEXT 00000084  2000017c  0800ae98  0002017c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          000012e4  20000200  0800af1c  00020200  2**2
                  ALLOC
 12 ._user_heap_stack 00001404  200014e4  0800af1c  000214e4  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  00020200  2**0
                  CONTENTS, READONLY
 14 MAPPING_TABLE 00000028  20030000  20030000  00030000  2**2
                  ALLOC
 15 MB_MEM1       000001b7  20030028  20030028  00030000  2**2
                  ALLOC
 16 MB_MEM2       00000877  200301e0  200301e0  00030000  2**2
                  ALLOC
 17 .debug_info   00044e61  00000000  00000000  00020230  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_abbrev 0000807a  00000000  00000000  00065091  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_aranges 00002840  00000000  00000000  0006d110  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_ranges 00002540  00000000  00000000  0006f950  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_macro  0002f2e4  00000000  00000000  00071e90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line   00030867  00000000  00000000  000a1174  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_str    000f6ec2  00000000  00000000  000d19db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .comment      00000053  00000000  00000000  001c889d  2**0
                  CONTENTS, READONLY
 25 .debug_frame  0000ac88  00000000  00000000  001c88f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000200 	.word	0x20000200
 800015c:	00000000 	.word	0x00000000
 8000160:	0800a76c 	.word	0x0800a76c

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000204 	.word	0x20000204
 800017c:	0800a76c 	.word	0x0800a76c

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <memchr>:
 8000190:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000194:	2a10      	cmp	r2, #16
 8000196:	db2b      	blt.n	80001f0 <memchr+0x60>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	d008      	beq.n	80001b0 <memchr+0x20>
 800019e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001a2:	3a01      	subs	r2, #1
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d02d      	beq.n	8000204 <memchr+0x74>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	b342      	cbz	r2, 8000200 <memchr+0x70>
 80001ae:	d1f6      	bne.n	800019e <memchr+0xe>
 80001b0:	b4f0      	push	{r4, r5, r6, r7}
 80001b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ba:	f022 0407 	bic.w	r4, r2, #7
 80001be:	f07f 0700 	mvns.w	r7, #0
 80001c2:	2300      	movs	r3, #0
 80001c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001c8:	3c08      	subs	r4, #8
 80001ca:	ea85 0501 	eor.w	r5, r5, r1
 80001ce:	ea86 0601 	eor.w	r6, r6, r1
 80001d2:	fa85 f547 	uadd8	r5, r5, r7
 80001d6:	faa3 f587 	sel	r5, r3, r7
 80001da:	fa86 f647 	uadd8	r6, r6, r7
 80001de:	faa5 f687 	sel	r6, r5, r7
 80001e2:	b98e      	cbnz	r6, 8000208 <memchr+0x78>
 80001e4:	d1ee      	bne.n	80001c4 <memchr+0x34>
 80001e6:	bcf0      	pop	{r4, r5, r6, r7}
 80001e8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001ec:	f002 0207 	and.w	r2, r2, #7
 80001f0:	b132      	cbz	r2, 8000200 <memchr+0x70>
 80001f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f6:	3a01      	subs	r2, #1
 80001f8:	ea83 0301 	eor.w	r3, r3, r1
 80001fc:	b113      	cbz	r3, 8000204 <memchr+0x74>
 80001fe:	d1f8      	bne.n	80001f2 <memchr+0x62>
 8000200:	2000      	movs	r0, #0
 8000202:	4770      	bx	lr
 8000204:	3801      	subs	r0, #1
 8000206:	4770      	bx	lr
 8000208:	2d00      	cmp	r5, #0
 800020a:	bf06      	itte	eq
 800020c:	4635      	moveq	r5, r6
 800020e:	3803      	subeq	r0, #3
 8000210:	3807      	subne	r0, #7
 8000212:	f015 0f01 	tst.w	r5, #1
 8000216:	d107      	bne.n	8000228 <memchr+0x98>
 8000218:	3001      	adds	r0, #1
 800021a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800021e:	bf02      	ittt	eq
 8000220:	3001      	addeq	r0, #1
 8000222:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000226:	3001      	addeq	r0, #1
 8000228:	bcf0      	pop	{r4, r5, r6, r7}
 800022a:	3801      	subs	r0, #1
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop

08000230 <__aeabi_uldivmod>:
 8000230:	b953      	cbnz	r3, 8000248 <__aeabi_uldivmod+0x18>
 8000232:	b94a      	cbnz	r2, 8000248 <__aeabi_uldivmod+0x18>
 8000234:	2900      	cmp	r1, #0
 8000236:	bf08      	it	eq
 8000238:	2800      	cmpeq	r0, #0
 800023a:	bf1c      	itt	ne
 800023c:	f04f 31ff 	movne.w	r1, #4294967295
 8000240:	f04f 30ff 	movne.w	r0, #4294967295
 8000244:	f000 b96e 	b.w	8000524 <__aeabi_idiv0>
 8000248:	f1ad 0c08 	sub.w	ip, sp, #8
 800024c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000250:	f000 f806 	bl	8000260 <__udivmoddi4>
 8000254:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000258:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800025c:	b004      	add	sp, #16
 800025e:	4770      	bx	lr

08000260 <__udivmoddi4>:
 8000260:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000264:	9d08      	ldr	r5, [sp, #32]
 8000266:	4604      	mov	r4, r0
 8000268:	468c      	mov	ip, r1
 800026a:	2b00      	cmp	r3, #0
 800026c:	f040 8083 	bne.w	8000376 <__udivmoddi4+0x116>
 8000270:	428a      	cmp	r2, r1
 8000272:	4617      	mov	r7, r2
 8000274:	d947      	bls.n	8000306 <__udivmoddi4+0xa6>
 8000276:	fab2 f282 	clz	r2, r2
 800027a:	b142      	cbz	r2, 800028e <__udivmoddi4+0x2e>
 800027c:	f1c2 0020 	rsb	r0, r2, #32
 8000280:	fa24 f000 	lsr.w	r0, r4, r0
 8000284:	4091      	lsls	r1, r2
 8000286:	4097      	lsls	r7, r2
 8000288:	ea40 0c01 	orr.w	ip, r0, r1
 800028c:	4094      	lsls	r4, r2
 800028e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000292:	0c23      	lsrs	r3, r4, #16
 8000294:	fbbc f6f8 	udiv	r6, ip, r8
 8000298:	fa1f fe87 	uxth.w	lr, r7
 800029c:	fb08 c116 	mls	r1, r8, r6, ip
 80002a0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002a4:	fb06 f10e 	mul.w	r1, r6, lr
 80002a8:	4299      	cmp	r1, r3
 80002aa:	d909      	bls.n	80002c0 <__udivmoddi4+0x60>
 80002ac:	18fb      	adds	r3, r7, r3
 80002ae:	f106 30ff 	add.w	r0, r6, #4294967295
 80002b2:	f080 8119 	bcs.w	80004e8 <__udivmoddi4+0x288>
 80002b6:	4299      	cmp	r1, r3
 80002b8:	f240 8116 	bls.w	80004e8 <__udivmoddi4+0x288>
 80002bc:	3e02      	subs	r6, #2
 80002be:	443b      	add	r3, r7
 80002c0:	1a5b      	subs	r3, r3, r1
 80002c2:	b2a4      	uxth	r4, r4
 80002c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80002c8:	fb08 3310 	mls	r3, r8, r0, r3
 80002cc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80002d4:	45a6      	cmp	lr, r4
 80002d6:	d909      	bls.n	80002ec <__udivmoddi4+0x8c>
 80002d8:	193c      	adds	r4, r7, r4
 80002da:	f100 33ff 	add.w	r3, r0, #4294967295
 80002de:	f080 8105 	bcs.w	80004ec <__udivmoddi4+0x28c>
 80002e2:	45a6      	cmp	lr, r4
 80002e4:	f240 8102 	bls.w	80004ec <__udivmoddi4+0x28c>
 80002e8:	3802      	subs	r0, #2
 80002ea:	443c      	add	r4, r7
 80002ec:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002f0:	eba4 040e 	sub.w	r4, r4, lr
 80002f4:	2600      	movs	r6, #0
 80002f6:	b11d      	cbz	r5, 8000300 <__udivmoddi4+0xa0>
 80002f8:	40d4      	lsrs	r4, r2
 80002fa:	2300      	movs	r3, #0
 80002fc:	e9c5 4300 	strd	r4, r3, [r5]
 8000300:	4631      	mov	r1, r6
 8000302:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000306:	b902      	cbnz	r2, 800030a <__udivmoddi4+0xaa>
 8000308:	deff      	udf	#255	; 0xff
 800030a:	fab2 f282 	clz	r2, r2
 800030e:	2a00      	cmp	r2, #0
 8000310:	d150      	bne.n	80003b4 <__udivmoddi4+0x154>
 8000312:	1bcb      	subs	r3, r1, r7
 8000314:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000318:	fa1f f887 	uxth.w	r8, r7
 800031c:	2601      	movs	r6, #1
 800031e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000322:	0c21      	lsrs	r1, r4, #16
 8000324:	fb0e 331c 	mls	r3, lr, ip, r3
 8000328:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800032c:	fb08 f30c 	mul.w	r3, r8, ip
 8000330:	428b      	cmp	r3, r1
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0xe4>
 8000334:	1879      	adds	r1, r7, r1
 8000336:	f10c 30ff 	add.w	r0, ip, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0xe2>
 800033c:	428b      	cmp	r3, r1
 800033e:	f200 80e9 	bhi.w	8000514 <__udivmoddi4+0x2b4>
 8000342:	4684      	mov	ip, r0
 8000344:	1ac9      	subs	r1, r1, r3
 8000346:	b2a3      	uxth	r3, r4
 8000348:	fbb1 f0fe 	udiv	r0, r1, lr
 800034c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000350:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000354:	fb08 f800 	mul.w	r8, r8, r0
 8000358:	45a0      	cmp	r8, r4
 800035a:	d907      	bls.n	800036c <__udivmoddi4+0x10c>
 800035c:	193c      	adds	r4, r7, r4
 800035e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x10a>
 8000364:	45a0      	cmp	r8, r4
 8000366:	f200 80d9 	bhi.w	800051c <__udivmoddi4+0x2bc>
 800036a:	4618      	mov	r0, r3
 800036c:	eba4 0408 	sub.w	r4, r4, r8
 8000370:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000374:	e7bf      	b.n	80002f6 <__udivmoddi4+0x96>
 8000376:	428b      	cmp	r3, r1
 8000378:	d909      	bls.n	800038e <__udivmoddi4+0x12e>
 800037a:	2d00      	cmp	r5, #0
 800037c:	f000 80b1 	beq.w	80004e2 <__udivmoddi4+0x282>
 8000380:	2600      	movs	r6, #0
 8000382:	e9c5 0100 	strd	r0, r1, [r5]
 8000386:	4630      	mov	r0, r6
 8000388:	4631      	mov	r1, r6
 800038a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038e:	fab3 f683 	clz	r6, r3
 8000392:	2e00      	cmp	r6, #0
 8000394:	d14a      	bne.n	800042c <__udivmoddi4+0x1cc>
 8000396:	428b      	cmp	r3, r1
 8000398:	d302      	bcc.n	80003a0 <__udivmoddi4+0x140>
 800039a:	4282      	cmp	r2, r0
 800039c:	f200 80b8 	bhi.w	8000510 <__udivmoddi4+0x2b0>
 80003a0:	1a84      	subs	r4, r0, r2
 80003a2:	eb61 0103 	sbc.w	r1, r1, r3
 80003a6:	2001      	movs	r0, #1
 80003a8:	468c      	mov	ip, r1
 80003aa:	2d00      	cmp	r5, #0
 80003ac:	d0a8      	beq.n	8000300 <__udivmoddi4+0xa0>
 80003ae:	e9c5 4c00 	strd	r4, ip, [r5]
 80003b2:	e7a5      	b.n	8000300 <__udivmoddi4+0xa0>
 80003b4:	f1c2 0320 	rsb	r3, r2, #32
 80003b8:	fa20 f603 	lsr.w	r6, r0, r3
 80003bc:	4097      	lsls	r7, r2
 80003be:	fa01 f002 	lsl.w	r0, r1, r2
 80003c2:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c6:	40d9      	lsrs	r1, r3
 80003c8:	4330      	orrs	r0, r6
 80003ca:	0c03      	lsrs	r3, r0, #16
 80003cc:	fbb1 f6fe 	udiv	r6, r1, lr
 80003d0:	fa1f f887 	uxth.w	r8, r7
 80003d4:	fb0e 1116 	mls	r1, lr, r6, r1
 80003d8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003dc:	fb06 f108 	mul.w	r1, r6, r8
 80003e0:	4299      	cmp	r1, r3
 80003e2:	fa04 f402 	lsl.w	r4, r4, r2
 80003e6:	d909      	bls.n	80003fc <__udivmoddi4+0x19c>
 80003e8:	18fb      	adds	r3, r7, r3
 80003ea:	f106 3cff 	add.w	ip, r6, #4294967295
 80003ee:	f080 808d 	bcs.w	800050c <__udivmoddi4+0x2ac>
 80003f2:	4299      	cmp	r1, r3
 80003f4:	f240 808a 	bls.w	800050c <__udivmoddi4+0x2ac>
 80003f8:	3e02      	subs	r6, #2
 80003fa:	443b      	add	r3, r7
 80003fc:	1a5b      	subs	r3, r3, r1
 80003fe:	b281      	uxth	r1, r0
 8000400:	fbb3 f0fe 	udiv	r0, r3, lr
 8000404:	fb0e 3310 	mls	r3, lr, r0, r3
 8000408:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800040c:	fb00 f308 	mul.w	r3, r0, r8
 8000410:	428b      	cmp	r3, r1
 8000412:	d907      	bls.n	8000424 <__udivmoddi4+0x1c4>
 8000414:	1879      	adds	r1, r7, r1
 8000416:	f100 3cff 	add.w	ip, r0, #4294967295
 800041a:	d273      	bcs.n	8000504 <__udivmoddi4+0x2a4>
 800041c:	428b      	cmp	r3, r1
 800041e:	d971      	bls.n	8000504 <__udivmoddi4+0x2a4>
 8000420:	3802      	subs	r0, #2
 8000422:	4439      	add	r1, r7
 8000424:	1acb      	subs	r3, r1, r3
 8000426:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800042a:	e778      	b.n	800031e <__udivmoddi4+0xbe>
 800042c:	f1c6 0c20 	rsb	ip, r6, #32
 8000430:	fa03 f406 	lsl.w	r4, r3, r6
 8000434:	fa22 f30c 	lsr.w	r3, r2, ip
 8000438:	431c      	orrs	r4, r3
 800043a:	fa20 f70c 	lsr.w	r7, r0, ip
 800043e:	fa01 f306 	lsl.w	r3, r1, r6
 8000442:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000446:	fa21 f10c 	lsr.w	r1, r1, ip
 800044a:	431f      	orrs	r7, r3
 800044c:	0c3b      	lsrs	r3, r7, #16
 800044e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000452:	fa1f f884 	uxth.w	r8, r4
 8000456:	fb0e 1119 	mls	r1, lr, r9, r1
 800045a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800045e:	fb09 fa08 	mul.w	sl, r9, r8
 8000462:	458a      	cmp	sl, r1
 8000464:	fa02 f206 	lsl.w	r2, r2, r6
 8000468:	fa00 f306 	lsl.w	r3, r0, r6
 800046c:	d908      	bls.n	8000480 <__udivmoddi4+0x220>
 800046e:	1861      	adds	r1, r4, r1
 8000470:	f109 30ff 	add.w	r0, r9, #4294967295
 8000474:	d248      	bcs.n	8000508 <__udivmoddi4+0x2a8>
 8000476:	458a      	cmp	sl, r1
 8000478:	d946      	bls.n	8000508 <__udivmoddi4+0x2a8>
 800047a:	f1a9 0902 	sub.w	r9, r9, #2
 800047e:	4421      	add	r1, r4
 8000480:	eba1 010a 	sub.w	r1, r1, sl
 8000484:	b2bf      	uxth	r7, r7
 8000486:	fbb1 f0fe 	udiv	r0, r1, lr
 800048a:	fb0e 1110 	mls	r1, lr, r0, r1
 800048e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000492:	fb00 f808 	mul.w	r8, r0, r8
 8000496:	45b8      	cmp	r8, r7
 8000498:	d907      	bls.n	80004aa <__udivmoddi4+0x24a>
 800049a:	19e7      	adds	r7, r4, r7
 800049c:	f100 31ff 	add.w	r1, r0, #4294967295
 80004a0:	d22e      	bcs.n	8000500 <__udivmoddi4+0x2a0>
 80004a2:	45b8      	cmp	r8, r7
 80004a4:	d92c      	bls.n	8000500 <__udivmoddi4+0x2a0>
 80004a6:	3802      	subs	r0, #2
 80004a8:	4427      	add	r7, r4
 80004aa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ae:	eba7 0708 	sub.w	r7, r7, r8
 80004b2:	fba0 8902 	umull	r8, r9, r0, r2
 80004b6:	454f      	cmp	r7, r9
 80004b8:	46c6      	mov	lr, r8
 80004ba:	4649      	mov	r1, r9
 80004bc:	d31a      	bcc.n	80004f4 <__udivmoddi4+0x294>
 80004be:	d017      	beq.n	80004f0 <__udivmoddi4+0x290>
 80004c0:	b15d      	cbz	r5, 80004da <__udivmoddi4+0x27a>
 80004c2:	ebb3 020e 	subs.w	r2, r3, lr
 80004c6:	eb67 0701 	sbc.w	r7, r7, r1
 80004ca:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004ce:	40f2      	lsrs	r2, r6
 80004d0:	ea4c 0202 	orr.w	r2, ip, r2
 80004d4:	40f7      	lsrs	r7, r6
 80004d6:	e9c5 2700 	strd	r2, r7, [r5]
 80004da:	2600      	movs	r6, #0
 80004dc:	4631      	mov	r1, r6
 80004de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004e2:	462e      	mov	r6, r5
 80004e4:	4628      	mov	r0, r5
 80004e6:	e70b      	b.n	8000300 <__udivmoddi4+0xa0>
 80004e8:	4606      	mov	r6, r0
 80004ea:	e6e9      	b.n	80002c0 <__udivmoddi4+0x60>
 80004ec:	4618      	mov	r0, r3
 80004ee:	e6fd      	b.n	80002ec <__udivmoddi4+0x8c>
 80004f0:	4543      	cmp	r3, r8
 80004f2:	d2e5      	bcs.n	80004c0 <__udivmoddi4+0x260>
 80004f4:	ebb8 0e02 	subs.w	lr, r8, r2
 80004f8:	eb69 0104 	sbc.w	r1, r9, r4
 80004fc:	3801      	subs	r0, #1
 80004fe:	e7df      	b.n	80004c0 <__udivmoddi4+0x260>
 8000500:	4608      	mov	r0, r1
 8000502:	e7d2      	b.n	80004aa <__udivmoddi4+0x24a>
 8000504:	4660      	mov	r0, ip
 8000506:	e78d      	b.n	8000424 <__udivmoddi4+0x1c4>
 8000508:	4681      	mov	r9, r0
 800050a:	e7b9      	b.n	8000480 <__udivmoddi4+0x220>
 800050c:	4666      	mov	r6, ip
 800050e:	e775      	b.n	80003fc <__udivmoddi4+0x19c>
 8000510:	4630      	mov	r0, r6
 8000512:	e74a      	b.n	80003aa <__udivmoddi4+0x14a>
 8000514:	f1ac 0c02 	sub.w	ip, ip, #2
 8000518:	4439      	add	r1, r7
 800051a:	e713      	b.n	8000344 <__udivmoddi4+0xe4>
 800051c:	3802      	subs	r0, #2
 800051e:	443c      	add	r4, r7
 8000520:	e724      	b.n	800036c <__udivmoddi4+0x10c>
 8000522:	bf00      	nop

08000524 <__aeabi_idiv0>:
 8000524:	4770      	bx	lr
 8000526:	bf00      	nop

08000528 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8000528:	b480      	push	{r7}
 800052a:	b083      	sub	sp, #12
 800052c:	af00      	add	r7, sp, #0
 800052e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8000530:	4b06      	ldr	r3, [pc, #24]	; (800054c <LL_EXTI_EnableIT_32_63+0x24>)
 8000532:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8000536:	4905      	ldr	r1, [pc, #20]	; (800054c <LL_EXTI_EnableIT_32_63+0x24>)
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	4313      	orrs	r3, r2
 800053c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8000540:	bf00      	nop
 8000542:	370c      	adds	r7, #12
 8000544:	46bd      	mov	sp, r7
 8000546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800054a:	4770      	bx	lr
 800054c:	58000800 	.word	0x58000800

08000550 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000550:	b480      	push	{r7}
 8000552:	b085      	sub	sp, #20
 8000554:	af00      	add	r7, sp, #0
 8000556:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000558:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800055c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800055e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	4313      	orrs	r3, r2
 8000566:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000568:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800056c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	4013      	ands	r3, r2
 8000572:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000574:	68fb      	ldr	r3, [r7, #12]
}
 8000576:	bf00      	nop
 8000578:	3714      	adds	r7, #20
 800057a:	46bd      	mov	sp, r7
 800057c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000580:	4770      	bx	lr

08000582 <LL_C2_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000582:	b480      	push	{r7}
 8000584:	b085      	sub	sp, #20
 8000586:	af00      	add	r7, sp, #0
 8000588:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB2ENR, Periphs);
 800058a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800058e:	f8d3 214c 	ldr.w	r2, [r3, #332]	; 0x14c
 8000592:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	4313      	orrs	r3, r2
 800059a:	f8c1 314c 	str.w	r3, [r1, #332]	; 0x14c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB2ENR, Periphs);
 800059e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80005a2:	f8d3 214c 	ldr.w	r2, [r3, #332]	; 0x14c
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	4013      	ands	r3, r2
 80005aa:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80005ac:	68fb      	ldr	r3, [r7, #12]
}
 80005ae:	bf00      	nop
 80005b0:	3714      	adds	r7, #20
 80005b2:	46bd      	mov	sp, r7
 80005b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b8:	4770      	bx	lr

080005ba <APPD_Init>:
static void APPD_BleDtbCfg( void );
/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void APPD_Init( void )
{
 80005ba:	b580      	push	{r7, lr}
 80005bc:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_Init */
#if (CFG_DEBUGGER_SUPPORTED == 1)
  /**
   * Keep debugger enabled while in any low power mode
   */
  HAL_DBGMCU_EnableDBGSleepMode();
 80005be:	f001 fa47 	bl	8001a50 <HAL_DBGMCU_EnableDBGSleepMode>
  HAL_DBGMCU_EnableDBGStopMode();
 80005c2:	f001 fa4b 	bl	8001a5c <HAL_DBGMCU_EnableDBGStopMode>

  /***************** ENABLE DEBUGGER *************************************/
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_48);
 80005c6:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80005ca:	f7ff ffad 	bl	8000528 <LL_EXTI_EnableIT_32_63>
  HAL_DBGMCU_DisableDBGStandbyMode();

#endif /* (CFG_DEBUGGER_SUPPORTED == 1) */

#if(CFG_DEBUG_TRACE != 0)
  DbgTraceInit();
 80005ce:	f007 f987 	bl	80078e0 <DbgTraceInit>
#endif

  APPD_SetCPU2GpioConfig( );
 80005d2:	f000 f821 	bl	8000618 <APPD_SetCPU2GpioConfig>
  APPD_BleDtbCfg( );
 80005d6:	f000 f8c3 	bl	8000760 <APPD_BleDtbCfg>

/* USER CODE END APPD_Init */
  return;
 80005da:	bf00      	nop
}
 80005dc:	bd80      	pop	{r7, pc}
	...

080005e0 <APPD_EnableCPU2>:

void APPD_EnableCPU2( void )
{
 80005e0:	b5b0      	push	{r4, r5, r7, lr}
 80005e2:	b088      	sub	sp, #32
 80005e4:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_EnableCPU2 */
  SHCI_C2_DEBUG_Init_Cmd_Packet_t DebugCmdPacket =
 80005e6:	4b0b      	ldr	r3, [pc, #44]	; (8000614 <APPD_EnableCPU2+0x34>)
 80005e8:	1d3c      	adds	r4, r7, #4
 80005ea:	461d      	mov	r5, r3
 80005ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005f0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005f4:	c403      	stmia	r4!, {r0, r1}
 80005f6:	8022      	strh	r2, [r4, #0]
 80005f8:	3402      	adds	r4, #2
 80005fa:	0c13      	lsrs	r3, r2, #16
 80005fc:	7023      	strb	r3, [r4, #0]
    NBR_OF_TRACES_CONFIG_PARAMETERS,
    NBR_OF_GENERAL_CONFIG_PARAMETERS}
  };

  /**< Traces channel initialization */
  TL_TRACES_Init( );
 80005fe:	f007 f883 	bl	8007708 <TL_TRACES_Init>

  /** GPIO DEBUG Initialization */
  SHCI_C2_DEBUG_Init( &DebugCmdPacket  );
 8000602:	1d3b      	adds	r3, r7, #4
 8000604:	4618      	mov	r0, r3
 8000606:	f006 fbe2 	bl	8006dce <SHCI_C2_DEBUG_Init>

/* USER CODE END APPD_EnableCPU2 */
  return;
 800060a:	bf00      	nop
}
 800060c:	3720      	adds	r7, #32
 800060e:	46bd      	mov	sp, r7
 8000610:	bdb0      	pop	{r4, r5, r7, pc}
 8000612:	bf00      	nop
 8000614:	0800a784 	.word	0x0800a784

08000618 <APPD_SetCPU2GpioConfig>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void APPD_SetCPU2GpioConfig( void )
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b088      	sub	sp, #32
 800061c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_SetCPU2GpioConfig */
  GPIO_InitTypeDef gpio_config = {0};
 800061e:	1d3b      	adds	r3, r7, #4
 8000620:	2200      	movs	r2, #0
 8000622:	601a      	str	r2, [r3, #0]
 8000624:	605a      	str	r2, [r3, #4]
 8000626:	609a      	str	r2, [r3, #8]
 8000628:	60da      	str	r2, [r3, #12]
 800062a:	611a      	str	r2, [r3, #16]
  uint8_t local_loop;
  uint16_t gpioa_pin_list;
  uint16_t gpiob_pin_list;
  uint16_t gpioc_pin_list;

  gpioa_pin_list = 0;
 800062c:	2300      	movs	r3, #0
 800062e:	83bb      	strh	r3, [r7, #28]
  gpiob_pin_list = 0;
 8000630:	2300      	movs	r3, #0
 8000632:	837b      	strh	r3, [r7, #26]
  gpioc_pin_list = 0;
 8000634:	2300      	movs	r3, #0
 8000636:	833b      	strh	r3, [r7, #24]

  for(local_loop = 0 ; local_loop < GPIO_CFG_NBR_OF_FEATURES; local_loop++)
 8000638:	2300      	movs	r3, #0
 800063a:	77fb      	strb	r3, [r7, #31]
 800063c:	e038      	b.n	80006b0 <APPD_SetCPU2GpioConfig+0x98>
  {
    if( aGpioConfigList[local_loop].enable != 0)
 800063e:	7ffb      	ldrb	r3, [r7, #31]
 8000640:	4a44      	ldr	r2, [pc, #272]	; (8000754 <APPD_SetCPU2GpioConfig+0x13c>)
 8000642:	00db      	lsls	r3, r3, #3
 8000644:	4413      	add	r3, r2
 8000646:	799b      	ldrb	r3, [r3, #6]
 8000648:	2b00      	cmp	r3, #0
 800064a:	d02b      	beq.n	80006a4 <APPD_SetCPU2GpioConfig+0x8c>
    {
      switch((uint32_t)aGpioConfigList[local_loop].port)
 800064c:	7ffb      	ldrb	r3, [r7, #31]
 800064e:	4a41      	ldr	r2, [pc, #260]	; (8000754 <APPD_SetCPU2GpioConfig+0x13c>)
 8000650:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000654:	4a40      	ldr	r2, [pc, #256]	; (8000758 <APPD_SetCPU2GpioConfig+0x140>)
 8000656:	4293      	cmp	r3, r2
 8000658:	d01b      	beq.n	8000692 <APPD_SetCPU2GpioConfig+0x7a>
 800065a:	4a3f      	ldr	r2, [pc, #252]	; (8000758 <APPD_SetCPU2GpioConfig+0x140>)
 800065c:	4293      	cmp	r3, r2
 800065e:	d823      	bhi.n	80006a8 <APPD_SetCPU2GpioConfig+0x90>
 8000660:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000664:	d003      	beq.n	800066e <APPD_SetCPU2GpioConfig+0x56>
 8000666:	4a3d      	ldr	r2, [pc, #244]	; (800075c <APPD_SetCPU2GpioConfig+0x144>)
 8000668:	4293      	cmp	r3, r2
 800066a:	d009      	beq.n	8000680 <APPD_SetCPU2GpioConfig+0x68>
        case (uint32_t)GPIOC:
            gpioc_pin_list |= aGpioConfigList[local_loop].pin;
          break;

        default:
          break;
 800066c:	e01c      	b.n	80006a8 <APPD_SetCPU2GpioConfig+0x90>
            gpioa_pin_list |= aGpioConfigList[local_loop].pin;
 800066e:	7ffb      	ldrb	r3, [r7, #31]
 8000670:	4a38      	ldr	r2, [pc, #224]	; (8000754 <APPD_SetCPU2GpioConfig+0x13c>)
 8000672:	00db      	lsls	r3, r3, #3
 8000674:	4413      	add	r3, r2
 8000676:	889a      	ldrh	r2, [r3, #4]
 8000678:	8bbb      	ldrh	r3, [r7, #28]
 800067a:	4313      	orrs	r3, r2
 800067c:	83bb      	strh	r3, [r7, #28]
          break;
 800067e:	e014      	b.n	80006aa <APPD_SetCPU2GpioConfig+0x92>
            gpiob_pin_list |= aGpioConfigList[local_loop].pin;
 8000680:	7ffb      	ldrb	r3, [r7, #31]
 8000682:	4a34      	ldr	r2, [pc, #208]	; (8000754 <APPD_SetCPU2GpioConfig+0x13c>)
 8000684:	00db      	lsls	r3, r3, #3
 8000686:	4413      	add	r3, r2
 8000688:	889a      	ldrh	r2, [r3, #4]
 800068a:	8b7b      	ldrh	r3, [r7, #26]
 800068c:	4313      	orrs	r3, r2
 800068e:	837b      	strh	r3, [r7, #26]
          break;
 8000690:	e00b      	b.n	80006aa <APPD_SetCPU2GpioConfig+0x92>
            gpioc_pin_list |= aGpioConfigList[local_loop].pin;
 8000692:	7ffb      	ldrb	r3, [r7, #31]
 8000694:	4a2f      	ldr	r2, [pc, #188]	; (8000754 <APPD_SetCPU2GpioConfig+0x13c>)
 8000696:	00db      	lsls	r3, r3, #3
 8000698:	4413      	add	r3, r2
 800069a:	889a      	ldrh	r2, [r3, #4]
 800069c:	8b3b      	ldrh	r3, [r7, #24]
 800069e:	4313      	orrs	r3, r2
 80006a0:	833b      	strh	r3, [r7, #24]
          break;
 80006a2:	e002      	b.n	80006aa <APPD_SetCPU2GpioConfig+0x92>
      }
    }
 80006a4:	bf00      	nop
 80006a6:	e000      	b.n	80006aa <APPD_SetCPU2GpioConfig+0x92>
          break;
 80006a8:	bf00      	nop
  for(local_loop = 0 ; local_loop < GPIO_CFG_NBR_OF_FEATURES; local_loop++)
 80006aa:	7ffb      	ldrb	r3, [r7, #31]
 80006ac:	3301      	adds	r3, #1
 80006ae:	77fb      	strb	r3, [r7, #31]
 80006b0:	7ffb      	ldrb	r3, [r7, #31]
 80006b2:	2b21      	cmp	r3, #33	; 0x21
 80006b4:	d9c3      	bls.n	800063e <APPD_SetCPU2GpioConfig+0x26>
  }

  gpio_config.Pull = GPIO_NOPULL;
 80006b6:	2300      	movs	r3, #0
 80006b8:	60fb      	str	r3, [r7, #12]
  gpio_config.Mode = GPIO_MODE_OUTPUT_PP;
 80006ba:	2301      	movs	r3, #1
 80006bc:	60bb      	str	r3, [r7, #8]
  gpio_config.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006be:	2303      	movs	r3, #3
 80006c0:	613b      	str	r3, [r7, #16]

  if(gpioa_pin_list != 0)
 80006c2:	8bbb      	ldrh	r3, [r7, #28]
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d014      	beq.n	80006f2 <APPD_SetCPU2GpioConfig+0xda>
  {
    gpio_config.Pin = gpioa_pin_list;
 80006c8:	8bbb      	ldrh	r3, [r7, #28]
 80006ca:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006cc:	2001      	movs	r0, #1
 80006ce:	f7ff ff3f 	bl	8000550 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOA_CLK_ENABLE();
 80006d2:	2001      	movs	r0, #1
 80006d4:	f7ff ff55 	bl	8000582 <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOA, &gpio_config);
 80006d8:	1d3b      	adds	r3, r7, #4
 80006da:	4619      	mov	r1, r3
 80006dc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006e0:	f001 fe5c 	bl	800239c <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOA, gpioa_pin_list, GPIO_PIN_RESET);
 80006e4:	8bbb      	ldrh	r3, [r7, #28]
 80006e6:	2200      	movs	r2, #0
 80006e8:	4619      	mov	r1, r3
 80006ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006ee:	f001 ffc5 	bl	800267c <HAL_GPIO_WritePin>
  }

  if(gpiob_pin_list != 0)
 80006f2:	8b7b      	ldrh	r3, [r7, #26]
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d012      	beq.n	800071e <APPD_SetCPU2GpioConfig+0x106>
  {
    gpio_config.Pin = gpiob_pin_list;
 80006f8:	8b7b      	ldrh	r3, [r7, #26]
 80006fa:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006fc:	2002      	movs	r0, #2
 80006fe:	f7ff ff27 	bl	8000550 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOB_CLK_ENABLE();
 8000702:	2002      	movs	r0, #2
 8000704:	f7ff ff3d 	bl	8000582 <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOB, &gpio_config);
 8000708:	1d3b      	adds	r3, r7, #4
 800070a:	4619      	mov	r1, r3
 800070c:	4813      	ldr	r0, [pc, #76]	; (800075c <APPD_SetCPU2GpioConfig+0x144>)
 800070e:	f001 fe45 	bl	800239c <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOB, gpiob_pin_list, GPIO_PIN_RESET);
 8000712:	8b7b      	ldrh	r3, [r7, #26]
 8000714:	2200      	movs	r2, #0
 8000716:	4619      	mov	r1, r3
 8000718:	4810      	ldr	r0, [pc, #64]	; (800075c <APPD_SetCPU2GpioConfig+0x144>)
 800071a:	f001 ffaf 	bl	800267c <HAL_GPIO_WritePin>
  }

  if(gpioc_pin_list != 0)
 800071e:	8b3b      	ldrh	r3, [r7, #24]
 8000720:	2b00      	cmp	r3, #0
 8000722:	d013      	beq.n	800074c <APPD_SetCPU2GpioConfig+0x134>
  {
    gpio_config.Pin = gpioc_pin_list;
 8000724:	8b3b      	ldrh	r3, [r7, #24]
 8000726:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000728:	2004      	movs	r0, #4
 800072a:	f7ff ff11 	bl	8000550 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOC_CLK_ENABLE();
 800072e:	2004      	movs	r0, #4
 8000730:	f7ff ff27 	bl	8000582 <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOC, &gpio_config);
 8000734:	1d3b      	adds	r3, r7, #4
 8000736:	4619      	mov	r1, r3
 8000738:	4807      	ldr	r0, [pc, #28]	; (8000758 <APPD_SetCPU2GpioConfig+0x140>)
 800073a:	f001 fe2f 	bl	800239c <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOC, gpioc_pin_list, GPIO_PIN_RESET);
 800073e:	8b3b      	ldrh	r3, [r7, #24]
 8000740:	2200      	movs	r2, #0
 8000742:	4619      	mov	r1, r3
 8000744:	4804      	ldr	r0, [pc, #16]	; (8000758 <APPD_SetCPU2GpioConfig+0x140>)
 8000746:	f001 ff99 	bl	800267c <HAL_GPIO_WritePin>
  }

/* USER CODE END APPD_SetCPU2GpioConfig */
  return;
 800074a:	bf00      	nop
 800074c:	bf00      	nop
}
 800074e:	3720      	adds	r7, #32
 8000750:	46bd      	mov	sp, r7
 8000752:	bd80      	pop	{r7, pc}
 8000754:	0800aa40 	.word	0x0800aa40
 8000758:	48000800 	.word	0x48000800
 800075c:	48000400 	.word	0x48000400

08000760 <APPD_BleDtbCfg>:

static void APPD_BleDtbCfg( void )
{
 8000760:	b480      	push	{r7}
 8000762:	af00      	add	r7, sp, #0
    HAL_GPIO_Init(GPIOB, &gpio_config);
  }
#endif

/* USER CODE END APPD_BleDtbCfg */
  return;
 8000764:	bf00      	nop
}
 8000766:	46bd      	mov	sp, r7
 8000768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800076c:	4770      	bx	lr

0800076e <DbgOutputInit>:
 * WRAP FUNCTIONS
 *
*************************************************************/
#if(CFG_DEBUG_TRACE != 0)
void DbgOutputInit( void )
{
 800076e:	b580      	push	{r7, lr}
 8000770:	af00      	add	r7, sp, #0
#endif
}
else if (CFG_DEBUG_TRACE_UART == hw_uart1)
{
#if(CFG_HW_USART1_ENABLED == 1)
    MX_USART1_UART_Init();
 8000772:	f000 ffdd 	bl	8001730 <MX_USART1_UART_Init>
#endif
}
#endif

/* USER CODE END DbgOutputInit */
  return;
 8000776:	bf00      	nop
}
 8000778:	bd80      	pop	{r7, pc}

0800077a <DbgOutputTraces>:

void DbgOutputTraces(  uint8_t *p_data, uint16_t size, void (*cb)(void) )
{
 800077a:	b580      	push	{r7, lr}
 800077c:	b084      	sub	sp, #16
 800077e:	af00      	add	r7, sp, #0
 8000780:	60f8      	str	r0, [r7, #12]
 8000782:	460b      	mov	r3, r1
 8000784:	607a      	str	r2, [r7, #4]
 8000786:	817b      	strh	r3, [r7, #10]
/* USER CODE END DbgOutputTraces */
  HW_UART_Transmit_DMA(CFG_DEBUG_TRACE_UART, p_data, size, cb);
 8000788:	897a      	ldrh	r2, [r7, #10]
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	68f9      	ldr	r1, [r7, #12]
 800078e:	2000      	movs	r0, #0
 8000790:	f000 fc66 	bl	8001060 <HW_UART_Transmit_DMA>

/* USER CODE END DbgOutputTraces */
  return;
 8000794:	bf00      	nop
}
 8000796:	3710      	adds	r7, #16
 8000798:	46bd      	mov	sp, r7
 800079a:	bd80      	pop	{r7, pc}

0800079c <LL_PWR_SMPS_Enable>:
  *         @ref LL_PWR_SMPS_SetMode() should be used instead.
  * @rmtoll CR5          SMPSEN        LL_PWR_SMPS_Enable
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SMPS_Enable(void)
{
 800079c:	b480      	push	{r7}
 800079e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR5, PWR_CR5_SMPSEN);
 80007a0:	4b05      	ldr	r3, [pc, #20]	; (80007b8 <LL_PWR_SMPS_Enable+0x1c>)
 80007a2:	69db      	ldr	r3, [r3, #28]
 80007a4:	4a04      	ldr	r2, [pc, #16]	; (80007b8 <LL_PWR_SMPS_Enable+0x1c>)
 80007a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80007aa:	61d3      	str	r3, [r2, #28]
}
 80007ac:	bf00      	nop
 80007ae:	46bd      	mov	sp, r7
 80007b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b4:	4770      	bx	lr
 80007b6:	bf00      	nop
 80007b8:	58000400 	.word	0x58000400

080007bc <LL_PWR_SMPS_SetStartupCurrent>:
  *         @arg @ref LL_PWR_SMPS_STARTUP_CURRENT_200MA
  *         @arg @ref LL_PWR_SMPS_STARTUP_CURRENT_220MA
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SMPS_SetStartupCurrent(uint32_t StartupCurrent)
{
 80007bc:	b480      	push	{r7}
 80007be:	b083      	sub	sp, #12
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR5, PWR_CR5_SMPSSC, StartupCurrent);
 80007c4:	4b06      	ldr	r3, [pc, #24]	; (80007e0 <LL_PWR_SMPS_SetStartupCurrent+0x24>)
 80007c6:	69db      	ldr	r3, [r3, #28]
 80007c8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80007cc:	4904      	ldr	r1, [pc, #16]	; (80007e0 <LL_PWR_SMPS_SetStartupCurrent+0x24>)
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	4313      	orrs	r3, r2
 80007d2:	61cb      	str	r3, [r1, #28]
}
 80007d4:	bf00      	nop
 80007d6:	370c      	adds	r7, #12
 80007d8:	46bd      	mov	sp, r7
 80007da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007de:	4770      	bx	lr
 80007e0:	58000400 	.word	0x58000400

080007e4 <LL_PWR_SMPS_SetOutputVoltageLevel>:
  *         @arg @ref LL_PWR_SMPS_OUTPUT_VOLTAGE_1V85
  *         @arg @ref LL_PWR_SMPS_OUTPUT_VOLTAGE_1V90
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SMPS_SetOutputVoltageLevel(uint32_t OutputVoltageLevel)
{
 80007e4:	b480      	push	{r7}
 80007e6:	b087      	sub	sp, #28
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	6078      	str	r0, [r7, #4]
  __IO const uint32_t OutputVoltageLevel_calibration = (((*SMPS_VOLTAGE_CAL_ADDR) & SMPS_VOLTAGE_CAL) >> SMPS_VOLTAGE_CAL_POS);  /* SMPS output voltage level calibrated in production */
 80007ec:	4b18      	ldr	r3, [pc, #96]	; (8000850 <LL_PWR_SMPS_SetOutputVoltageLevel+0x6c>)
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	0a1b      	lsrs	r3, r3, #8
 80007f2:	f003 030f 	and.w	r3, r3, #15
 80007f6:	60fb      	str	r3, [r7, #12]
  int32_t TrimmingSteps;                               /* Trimming steps between theorical output voltage and calibrated output voltage */
  int32_t OutputVoltageLevelTrimmed;                   /* SMPS output voltage level after calibration: trimming value added to required level */

  if(OutputVoltageLevel_calibration == 0UL)
 80007f8:	68fb      	ldr	r3, [r7, #12]
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d108      	bne.n	8000810 <LL_PWR_SMPS_SetOutputVoltageLevel+0x2c>
  {
    /* Device with SMPS output voltage not calibrated in production: Apply output voltage value directly */
    
    /* Update register */
    MODIFY_REG(PWR->CR5, PWR_CR5_SMPSVOS, OutputVoltageLevel);
 80007fe:	4b15      	ldr	r3, [pc, #84]	; (8000854 <LL_PWR_SMPS_SetOutputVoltageLevel+0x70>)
 8000800:	69db      	ldr	r3, [r3, #28]
 8000802:	f023 020f 	bic.w	r2, r3, #15
 8000806:	4913      	ldr	r1, [pc, #76]	; (8000854 <LL_PWR_SMPS_SetOutputVoltageLevel+0x70>)
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	4313      	orrs	r3, r2
 800080c:	61cb      	str	r3, [r1, #28]
    }

    /* Update register */
    MODIFY_REG(PWR->CR5, PWR_CR5_SMPSVOS, (uint32_t)OutputVoltageLevelTrimmed);
  }
}
 800080e:	e019      	b.n	8000844 <LL_PWR_SMPS_SetOutputVoltageLevel+0x60>
    TrimmingSteps = ((int32_t)OutputVoltageLevel_calibration - (int32_t)(LL_PWR_SMPS_OUTPUT_VOLTAGE_1V50 >> PWR_CR5_SMPSVOS_Pos));
 8000810:	68fb      	ldr	r3, [r7, #12]
 8000812:	3b06      	subs	r3, #6
 8000814:	613b      	str	r3, [r7, #16]
    OutputVoltageLevelTrimmed = ((int32_t)((uint32_t)(OutputVoltageLevel >> PWR_CR5_SMPSVOS_Pos)) + (int32_t)TrimmingSteps);
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	693a      	ldr	r2, [r7, #16]
 800081a:	4413      	add	r3, r2
 800081c:	617b      	str	r3, [r7, #20]
    if(OutputVoltageLevelTrimmed < 0)
 800081e:	697b      	ldr	r3, [r7, #20]
 8000820:	2b00      	cmp	r3, #0
 8000822:	da02      	bge.n	800082a <LL_PWR_SMPS_SetOutputVoltageLevel+0x46>
      OutputVoltageLevelTrimmed = 0;
 8000824:	2300      	movs	r3, #0
 8000826:	617b      	str	r3, [r7, #20]
 8000828:	e004      	b.n	8000834 <LL_PWR_SMPS_SetOutputVoltageLevel+0x50>
      if(OutputVoltageLevelTrimmed > (int32_t)PWR_CR5_SMPSVOS)
 800082a:	697b      	ldr	r3, [r7, #20]
 800082c:	2b0f      	cmp	r3, #15
 800082e:	dd01      	ble.n	8000834 <LL_PWR_SMPS_SetOutputVoltageLevel+0x50>
        OutputVoltageLevelTrimmed = (int32_t)PWR_CR5_SMPSVOS;
 8000830:	230f      	movs	r3, #15
 8000832:	617b      	str	r3, [r7, #20]
    MODIFY_REG(PWR->CR5, PWR_CR5_SMPSVOS, (uint32_t)OutputVoltageLevelTrimmed);
 8000834:	4b07      	ldr	r3, [pc, #28]	; (8000854 <LL_PWR_SMPS_SetOutputVoltageLevel+0x70>)
 8000836:	69db      	ldr	r3, [r3, #28]
 8000838:	f023 020f 	bic.w	r2, r3, #15
 800083c:	697b      	ldr	r3, [r7, #20]
 800083e:	4905      	ldr	r1, [pc, #20]	; (8000854 <LL_PWR_SMPS_SetOutputVoltageLevel+0x70>)
 8000840:	4313      	orrs	r3, r2
 8000842:	61cb      	str	r3, [r1, #28]
}
 8000844:	bf00      	nop
 8000846:	371c      	adds	r7, #28
 8000848:	46bd      	mov	sp, r7
 800084a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084e:	4770      	bx	lr
 8000850:	1fff7558 	.word	0x1fff7558
 8000854:	58000400 	.word	0x58000400

08000858 <LL_C2_PWR_SetPowerMode>:
  *
  *         (*) Not available on devices STM32WB15xx, STM32WB10xx
  * @retval None
  */
__STATIC_INLINE void LL_C2_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 8000858:	b480      	push	{r7}
 800085a:	b083      	sub	sp, #12
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 8000860:	4b07      	ldr	r3, [pc, #28]	; (8000880 <LL_C2_PWR_SetPowerMode+0x28>)
 8000862:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000866:	f023 0207 	bic.w	r2, r3, #7
 800086a:	4905      	ldr	r1, [pc, #20]	; (8000880 <LL_C2_PWR_SetPowerMode+0x28>)
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	4313      	orrs	r3, r2
 8000870:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8000874:	bf00      	nop
 8000876:	370c      	adds	r7, #12
 8000878:	46bd      	mov	sp, r7
 800087a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087e:	4770      	bx	lr
 8000880:	58000400 	.word	0x58000400

08000884 <LL_EXTI_DisableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 8000884:	b480      	push	{r7}
 8000886:	b083      	sub	sp, #12
 8000888:	af00      	add	r7, sp, #0
 800088a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 800088c:	4b07      	ldr	r3, [pc, #28]	; (80008ac <LL_EXTI_DisableIT_0_31+0x28>)
 800088e:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	43db      	mvns	r3, r3
 8000896:	4905      	ldr	r1, [pc, #20]	; (80008ac <LL_EXTI_DisableIT_0_31+0x28>)
 8000898:	4013      	ands	r3, r2
 800089a:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 800089e:	bf00      	nop
 80008a0:	370c      	adds	r7, #12
 80008a2:	46bd      	mov	sp, r7
 80008a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a8:	4770      	bx	lr
 80008aa:	bf00      	nop
 80008ac:	58000800 	.word	0x58000800

080008b0 <LL_EXTI_DisableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_32_63(uint32_t ExtiLine)
{
 80008b0:	b480      	push	{r7}
 80008b2:	b083      	sub	sp, #12
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 80008b8:	4b07      	ldr	r3, [pc, #28]	; (80008d8 <LL_EXTI_DisableIT_32_63+0x28>)
 80008ba:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	43db      	mvns	r3, r3
 80008c2:	4905      	ldr	r1, [pc, #20]	; (80008d8 <LL_EXTI_DisableIT_32_63+0x28>)
 80008c4:	4013      	ands	r3, r2
 80008c6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80008ca:	bf00      	nop
 80008cc:	370c      	adds	r7, #12
 80008ce:	46bd      	mov	sp, r7
 80008d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d4:	4770      	bx	lr
 80008d6:	bf00      	nop
 80008d8:	58000800 	.word	0x58000800

080008dc <LL_RCC_HSE_SetCapacitorTuning>:
  * @rmtoll HSECR        HSETUNE       LL_RCC_HSE_SetCapacitorTuning
  * @param  Value Between Min_Data = 0 and Max_Data = 63
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_SetCapacitorTuning(uint32_t Value)
{
 80008dc:	b480      	push	{r7}
 80008de:	b083      	sub	sp, #12
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 80008e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80008e8:	4a0a      	ldr	r2, [pc, #40]	; (8000914 <LL_RCC_HSE_SetCapacitorTuning+0x38>)
 80008ea:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 80008ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80008f2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80008f6:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	021b      	lsls	r3, r3, #8
 80008fe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000902:	4313      	orrs	r3, r2
 8000904:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
}
 8000908:	bf00      	nop
 800090a:	370c      	adds	r7, #12
 800090c:	46bd      	mov	sp, r7
 800090e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000912:	4770      	bx	lr
 8000914:	cafecafe 	.word	0xcafecafe

08000918 <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 8000918:	b480      	push	{r7}
 800091a:	b083      	sub	sp, #12
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8000920:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000924:	689b      	ldr	r3, [r3, #8]
 8000926:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800092a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	4313      	orrs	r3, r2
 8000932:	608b      	str	r3, [r1, #8]
}
 8000934:	bf00      	nop
 8000936:	370c      	adds	r7, #12
 8000938:	46bd      	mov	sp, r7
 800093a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093e:	4770      	bx	lr

08000940 <LL_RCC_ForceBackupDomainReset>:
  * @brief  Force the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ForceBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ForceBackupDomainReset(void)
{
 8000940:	b480      	push	{r7}
 8000942:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8000944:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000948:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800094c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000950:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000954:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8000958:	bf00      	nop
 800095a:	46bd      	mov	sp, r7
 800095c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000960:	4770      	bx	lr

08000962 <LL_RCC_ReleaseBackupDomainReset>:
  * @brief  Release the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ReleaseBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ReleaseBackupDomainReset(void)
{
 8000962:	b480      	push	{r7}
 8000964:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8000966:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800096a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800096e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000972:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000976:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800097a:	bf00      	nop
 800097c:	46bd      	mov	sp, r7
 800097e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000982:	4770      	bx	lr

08000984 <LL_RCC_IsActiveFlag_PINRST>:
  * @brief  Check if RCC flag Pin reset is set or not.
  * @rmtoll CSR          PINRSTF       LL_RCC_IsActiveFlag_PINRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PINRST(void)
{
 8000984:	b480      	push	{r7}
 8000986:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_PINRSTF) == (RCC_CSR_PINRSTF)) ? 1UL : 0UL);
 8000988:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800098c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000990:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000994:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8000998:	d101      	bne.n	800099e <LL_RCC_IsActiveFlag_PINRST+0x1a>
 800099a:	2301      	movs	r3, #1
 800099c:	e000      	b.n	80009a0 <LL_RCC_IsActiveFlag_PINRST+0x1c>
 800099e:	2300      	movs	r3, #0
}
 80009a0:	4618      	mov	r0, r3
 80009a2:	46bd      	mov	sp, r7
 80009a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a8:	4770      	bx	lr

080009aa <LL_RCC_IsActiveFlag_SFTRST>:
  * @brief  Check if RCC flag Software reset is set or not.
  * @rmtoll CSR          SFTRSTF       LL_RCC_IsActiveFlag_SFTRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SFTRST(void)
{
 80009aa:	b480      	push	{r7}
 80009ac:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_SFTRSTF) == (RCC_CSR_SFTRSTF)) ? 1UL : 0UL);
 80009ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80009b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80009b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009ba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80009be:	d101      	bne.n	80009c4 <LL_RCC_IsActiveFlag_SFTRST+0x1a>
 80009c0:	2301      	movs	r3, #1
 80009c2:	e000      	b.n	80009c6 <LL_RCC_IsActiveFlag_SFTRST+0x1c>
 80009c4:	2300      	movs	r3, #0
}
 80009c6:	4618      	mov	r0, r3
 80009c8:	46bd      	mov	sp, r7
 80009ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ce:	4770      	bx	lr

080009d0 <LL_AHB3_GRP1_EnableClock>:
{
 80009d0:	b480      	push	{r7}
 80009d2:	b085      	sub	sp, #20
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 80009d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80009dc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80009de:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	4313      	orrs	r3, r2
 80009e6:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 80009e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80009ec:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	4013      	ands	r3, r2
 80009f2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80009f4:	68fb      	ldr	r3, [r7, #12]
}
 80009f6:	bf00      	nop
 80009f8:	3714      	adds	r7, #20
 80009fa:	46bd      	mov	sp, r7
 80009fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a00:	4770      	bx	lr

08000a02 <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8000a02:	b480      	push	{r7}
 8000a04:	b083      	sub	sp, #12
 8000a06:	af00      	add	r7, sp, #0
 8000a08:	6078      	str	r0, [r7, #4]
 8000a0a:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	685a      	ldr	r2, [r3, #4]
 8000a10:	683b      	ldr	r3, [r7, #0]
 8000a12:	041b      	lsls	r3, r3, #16
 8000a14:	431a      	orrs	r2, r3
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	605a      	str	r2, [r3, #4]
}
 8000a1a:	bf00      	nop
 8000a1c:	370c      	adds	r7, #12
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a24:	4770      	bx	lr

08000a26 <LL_C1_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8000a26:	b480      	push	{r7}
 8000a28:	b083      	sub	sp, #12
 8000a2a:	af00      	add	r7, sp, #0
 8000a2c:	6078      	str	r0, [r7, #4]
 8000a2e:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel);
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	685a      	ldr	r2, [r3, #4]
 8000a34:	683b      	ldr	r3, [r7, #0]
 8000a36:	431a      	orrs	r2, r3
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	605a      	str	r2, [r3, #4]
}
 8000a3c:	bf00      	nop
 8000a3e:	370c      	adds	r7, #12
 8000a40:	46bd      	mov	sp, r7
 8000a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a46:	4770      	bx	lr

08000a48 <LL_C2_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	b083      	sub	sp, #12
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
 8000a50:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel << (IPCC_C2MR_CH1FM_Pos));
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	695a      	ldr	r2, [r3, #20]
 8000a56:	683b      	ldr	r3, [r7, #0]
 8000a58:	041b      	lsls	r3, r3, #16
 8000a5a:	431a      	orrs	r2, r3
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	615a      	str	r2, [r3, #20]
}
 8000a60:	bf00      	nop
 8000a62:	370c      	adds	r7, #12
 8000a64:	46bd      	mov	sp, r7
 8000a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6a:	4770      	bx	lr

08000a6c <LL_C2_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	b083      	sub	sp, #12
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
 8000a74:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel);
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	695a      	ldr	r2, [r3, #20]
 8000a7a:	683b      	ldr	r3, [r7, #0]
 8000a7c:	431a      	orrs	r2, r3
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	615a      	str	r2, [r3, #20]
}
 8000a82:	bf00      	nop
 8000a84:	370c      	adds	r7, #12
 8000a86:	46bd      	mov	sp, r7
 8000a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8c:	4770      	bx	lr

08000a8e <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8000a8e:	b480      	push	{r7}
 8000a90:	b083      	sub	sp, #12
 8000a92:	af00      	add	r7, sp, #0
 8000a94:	6078      	str	r0, [r7, #4]
 8000a96:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	683a      	ldr	r2, [r7, #0]
 8000a9c:	609a      	str	r2, [r3, #8]
}
 8000a9e:	bf00      	nop
 8000aa0:	370c      	adds	r7, #12
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa8:	4770      	bx	lr

08000aaa <LL_C2_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8000aaa:	b480      	push	{r7}
 8000aac:	b083      	sub	sp, #12
 8000aae:	af00      	add	r7, sp, #0
 8000ab0:	6078      	str	r0, [r7, #4]
 8000ab2:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C2SCR, Channel);
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	683a      	ldr	r2, [r7, #0]
 8000ab8:	619a      	str	r2, [r3, #24]
}
 8000aba:	bf00      	nop
 8000abc:	370c      	adds	r7, #12
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac4:	4770      	bx	lr

08000ac6 <LL_RTC_EnableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_EnableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableWriteProtection(RTC_TypeDef *RTCx)
{
 8000ac6:	b480      	push	{r7}
 8000ac8:	b083      	sub	sp, #12
 8000aca:	af00      	add	r7, sp, #0
 8000acc:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	22ff      	movs	r2, #255	; 0xff
 8000ad2:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000ad4:	bf00      	nop
 8000ad6:	370c      	adds	r7, #12
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ade:	4770      	bx	lr

08000ae0 <LL_RTC_DisableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_DisableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableWriteProtection(RTC_TypeDef *RTCx)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	b083      	sub	sp, #12
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	22ca      	movs	r2, #202	; 0xca
 8000aec:	625a      	str	r2, [r3, #36]	; 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	2253      	movs	r2, #83	; 0x53
 8000af2:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000af4:	bf00      	nop
 8000af6:	370c      	adds	r7, #12
 8000af8:	46bd      	mov	sp, r7
 8000afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afe:	4770      	bx	lr

08000b00 <LL_RTC_WAKEUP_SetClock>:
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE_WUT
  * @retval None
  */
__STATIC_INLINE void LL_RTC_WAKEUP_SetClock(RTC_TypeDef *RTCx, uint32_t WakeupClock)
{
 8000b00:	b480      	push	{r7}
 8000b02:	b083      	sub	sp, #12
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
 8000b08:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->CR, RTC_CR_WUCKSEL, WakeupClock);
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	689b      	ldr	r3, [r3, #8]
 8000b0e:	f023 0207 	bic.w	r2, r3, #7
 8000b12:	683b      	ldr	r3, [r7, #0]
 8000b14:	431a      	orrs	r2, r3
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	609a      	str	r2, [r3, #8]
}
 8000b1a:	bf00      	nop
 8000b1c:	370c      	adds	r7, #12
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b24:	4770      	bx	lr
	...

08000b28 <MX_APPE_Config>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void MX_APPE_Config( void )
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	af00      	add	r7, sp, #0
  /**
   * The OPTVERR flag is wrongly set at power on
   * It shall be cleared before using any HAL_FLASH_xxx() api
   */
  __HAL_FLASH_CLEAR_FLAG( FLASH_FLAG_OPTVERR );
 8000b2c:	4b04      	ldr	r3, [pc, #16]	; (8000b40 <MX_APPE_Config+0x18>)
 8000b2e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000b32:	611a      	str	r2, [r3, #16]

  /**
   * Reset some configurations so that the system behave in the same way
   * when either out of nReset or Power On
   */
  Reset_Device( );
 8000b34:	f000 f830 	bl	8000b98 <Reset_Device>

  /* Configure HSE Tuning */
  Config_HSE();
 8000b38:	f000 f870 	bl	8000c1c <Config_HSE>

  return;
 8000b3c:	bf00      	nop
}
 8000b3e:	bd80      	pop	{r7, pc}
 8000b40:	58004000 	.word	0x58004000

08000b44 <MX_APPE_Init>:

void MX_APPE_Init( void )
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	af00      	add	r7, sp, #0
  System_Init( );       /**< System initialization */
 8000b48:	f000 f87c 	bl	8000c44 <System_Init>

  SystemPower_Config(); /**< Configure the system Power Mode */
 8000b4c:	f000 f894 	bl	8000c78 <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 8000b50:	4904      	ldr	r1, [pc, #16]	; (8000b64 <MX_APPE_Init+0x20>)
 8000b52:	2000      	movs	r0, #0
 8000b54:	f000 f99e 	bl	8000e94 <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */
  APPD_Init();//added by javi
 8000b58:	f7ff fd2f 	bl	80005ba <APPD_Init>
/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 8000b5c:	f000 f89a 	bl	8000c94 <appe_Tl_Init>
   * This system event is received with APPE_SysUserEvtRx()
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */
   return;
 8000b60:	bf00      	nop
}
 8000b62:	bd80      	pop	{r7, pc}
 8000b64:	200013b8 	.word	0x200013b8

08000b68 <Init_Smps>:

void Init_Smps( void )
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	af00      	add	r7, sp, #0
   *
   *  The SMPS configuration is not yet supported by CubeMx
   *  when SMPS output voltage is set to 1.4V, the RF output power is limited to 3.7dBm
   *  the SMPS output voltage shall be increased for higher RF output power
   */
  LL_PWR_SMPS_SetStartupCurrent(LL_PWR_SMPS_STARTUP_CURRENT_80MA);
 8000b6c:	2000      	movs	r0, #0
 8000b6e:	f7ff fe25 	bl	80007bc <LL_PWR_SMPS_SetStartupCurrent>
  LL_PWR_SMPS_SetOutputVoltageLevel(LL_PWR_SMPS_OUTPUT_VOLTAGE_1V40);
 8000b72:	2004      	movs	r0, #4
 8000b74:	f7ff fe36 	bl	80007e4 <LL_PWR_SMPS_SetOutputVoltageLevel>
  LL_PWR_SMPS_Enable();
 8000b78:	f7ff fe10 	bl	800079c <LL_PWR_SMPS_Enable>
#endif

  return;
 8000b7c:	bf00      	nop
}
 8000b7e:	bd80      	pop	{r7, pc}

08000b80 <Init_Exti>:

void Init_Exti( void )
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	af00      	add	r7, sp, #0
  /**< Disable all wakeup interrupt on CPU1  except IPCC(36), HSEM(38) */
  LL_EXTI_DisableIT_0_31(~0);
 8000b84:	f04f 30ff 	mov.w	r0, #4294967295
 8000b88:	f7ff fe7c 	bl	8000884 <LL_EXTI_DisableIT_0_31>
  LL_EXTI_DisableIT_32_63( (~0) & (~(LL_EXTI_LINE_36 | LL_EXTI_LINE_38)) );
 8000b8c:	f06f 0050 	mvn.w	r0, #80	; 0x50
 8000b90:	f7ff fe8e 	bl	80008b0 <LL_EXTI_DisableIT_32_63>

  return;
 8000b94:	bf00      	nop
}
 8000b96:	bd80      	pop	{r7, pc}

08000b98 <Reset_Device>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Reset_Device( void )
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	af00      	add	r7, sp, #0
#if ( CFG_HW_RESET_BY_FW == 1 )
  Reset_BackupDomain();
 8000b9c:	f000 f804 	bl	8000ba8 <Reset_BackupDomain>

  Reset_IPCC();
 8000ba0:	f000 f81a 	bl	8000bd8 <Reset_IPCC>
#endif /* CFG_HW_RESET_BY_FW */

  return;
 8000ba4:	bf00      	nop
}
 8000ba6:	bd80      	pop	{r7, pc}

08000ba8 <Reset_BackupDomain>:

#if ( CFG_HW_RESET_BY_FW == 1 )
static void Reset_BackupDomain( void )
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	af00      	add	r7, sp, #0
  if ((LL_RCC_IsActiveFlag_PINRST() != FALSE) && (LL_RCC_IsActiveFlag_SFTRST() == FALSE))
 8000bac:	f7ff feea 	bl	8000984 <LL_RCC_IsActiveFlag_PINRST>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d00d      	beq.n	8000bd2 <Reset_BackupDomain+0x2a>
 8000bb6:	f7ff fef8 	bl	80009aa <LL_RCC_IsActiveFlag_SFTRST>
 8000bba:	4603      	mov	r3, r0
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d108      	bne.n	8000bd2 <Reset_BackupDomain+0x2a>
  {
    HAL_PWR_EnableBkUpAccess(); /**< Enable access to the RTC registers */
 8000bc0:	f001 fe1e 	bl	8002800 <HAL_PWR_EnableBkUpAccess>

    /**
     *  Write twice the value to flush the APB-AHB bridge
     *  This bit shall be written in the register before writing the next one
     */
    HAL_PWR_EnableBkUpAccess();
 8000bc4:	f001 fe1c 	bl	8002800 <HAL_PWR_EnableBkUpAccess>

    __HAL_RCC_BACKUPRESET_FORCE();
 8000bc8:	f7ff feba 	bl	8000940 <LL_RCC_ForceBackupDomainReset>
    __HAL_RCC_BACKUPRESET_RELEASE();
 8000bcc:	f7ff fec9 	bl	8000962 <LL_RCC_ReleaseBackupDomainReset>
  }

  return;
 8000bd0:	bf00      	nop
 8000bd2:	bf00      	nop
}
 8000bd4:	bd80      	pop	{r7, pc}
	...

08000bd8 <Reset_IPCC>:

static void Reset_IPCC( void )
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock(LL_AHB3_GRP1_PERIPH_IPCC);
 8000bdc:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000be0:	f7ff fef6 	bl	80009d0 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_ClearFlag_CHx(
 8000be4:	213f      	movs	r1, #63	; 0x3f
 8000be6:	480c      	ldr	r0, [pc, #48]	; (8000c18 <Reset_IPCC+0x40>)
 8000be8:	f7ff ff51 	bl	8000a8e <LL_C1_IPCC_ClearFlag_CHx>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_ClearFlag_CHx(
 8000bec:	213f      	movs	r1, #63	; 0x3f
 8000bee:	480a      	ldr	r0, [pc, #40]	; (8000c18 <Reset_IPCC+0x40>)
 8000bf0:	f7ff ff5b 	bl	8000aaa <LL_C2_IPCC_ClearFlag_CHx>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C1_IPCC_DisableTransmitChannel(
 8000bf4:	213f      	movs	r1, #63	; 0x3f
 8000bf6:	4808      	ldr	r0, [pc, #32]	; (8000c18 <Reset_IPCC+0x40>)
 8000bf8:	f7ff ff03 	bl	8000a02 <LL_C1_IPCC_DisableTransmitChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_DisableTransmitChannel(
 8000bfc:	213f      	movs	r1, #63	; 0x3f
 8000bfe:	4806      	ldr	r0, [pc, #24]	; (8000c18 <Reset_IPCC+0x40>)
 8000c00:	f7ff ff22 	bl	8000a48 <LL_C2_IPCC_DisableTransmitChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C1_IPCC_DisableReceiveChannel(
 8000c04:	213f      	movs	r1, #63	; 0x3f
 8000c06:	4804      	ldr	r0, [pc, #16]	; (8000c18 <Reset_IPCC+0x40>)
 8000c08:	f7ff ff0d 	bl	8000a26 <LL_C1_IPCC_DisableReceiveChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_DisableReceiveChannel(
 8000c0c:	213f      	movs	r1, #63	; 0x3f
 8000c0e:	4802      	ldr	r0, [pc, #8]	; (8000c18 <Reset_IPCC+0x40>)
 8000c10:	f7ff ff2c 	bl	8000a6c <LL_C2_IPCC_DisableReceiveChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  return;
 8000c14:	bf00      	nop
}
 8000c16:	bd80      	pop	{r7, pc}
 8000c18:	58000c00 	.word	0x58000c00

08000c1c <Config_HSE>:
#endif /* CFG_HW_RESET_BY_FW */

static void Config_HSE(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b082      	sub	sp, #8
 8000c20:	af00      	add	r7, sp, #0
    OTP_ID0_t * p_otp;

  /**
   * Read HSE_Tuning from OTP
   */
  p_otp = (OTP_ID0_t *) OTP_Read(0);
 8000c22:	2000      	movs	r0, #0
 8000c24:	f006 feda 	bl	80079dc <OTP_Read>
 8000c28:	6078      	str	r0, [r7, #4]
  if (p_otp)
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d005      	beq.n	8000c3c <Config_HSE+0x20>
  {
    LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	799b      	ldrb	r3, [r3, #6]
 8000c34:	4618      	mov	r0, r3
 8000c36:	f7ff fe51 	bl	80008dc <LL_RCC_HSE_SetCapacitorTuning>
  }

  return;
 8000c3a:	bf00      	nop
 8000c3c:	bf00      	nop
}
 8000c3e:	3708      	adds	r7, #8
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bd80      	pop	{r7, pc}

08000c44 <System_Init>:

static void System_Init( void )
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	af00      	add	r7, sp, #0
  Init_Smps( );
 8000c48:	f7ff ff8e 	bl	8000b68 <Init_Smps>

  Init_Exti( );
 8000c4c:	f7ff ff98 	bl	8000b80 <Init_Exti>

  Init_Rtc( );
 8000c50:	f000 f802 	bl	8000c58 <Init_Rtc>

  return;
 8000c54:	bf00      	nop
}
 8000c56:	bd80      	pop	{r7, pc}

08000c58 <Init_Rtc>:

static void Init_Rtc( void )
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	af00      	add	r7, sp, #0
  /* Disable RTC registers write protection */
  LL_RTC_DisableWriteProtection(RTC);
 8000c5c:	4805      	ldr	r0, [pc, #20]	; (8000c74 <Init_Rtc+0x1c>)
 8000c5e:	f7ff ff3f 	bl	8000ae0 <LL_RTC_DisableWriteProtection>

  LL_RTC_WAKEUP_SetClock(RTC, CFG_RTC_WUCKSEL_DIVIDER);
 8000c62:	2100      	movs	r1, #0
 8000c64:	4803      	ldr	r0, [pc, #12]	; (8000c74 <Init_Rtc+0x1c>)
 8000c66:	f7ff ff4b 	bl	8000b00 <LL_RTC_WAKEUP_SetClock>

  /* Enable RTC registers write protection */
  LL_RTC_EnableWriteProtection(RTC);
 8000c6a:	4802      	ldr	r0, [pc, #8]	; (8000c74 <Init_Rtc+0x1c>)
 8000c6c:	f7ff ff2b 	bl	8000ac6 <LL_RTC_EnableWriteProtection>

  return;
 8000c70:	bf00      	nop
}
 8000c72:	bd80      	pop	{r7, pc}
 8000c74:	40002800 	.word	0x40002800

08000c78 <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	af00      	add	r7, sp, #0
  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 8000c7c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8000c80:	f7ff fe4a 	bl	8000918 <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init();
 8000c84:	f008 fad6 	bl	8009234 <UTIL_LPM_Init>
  /* Initialize the CPU2 reset value before starting CPU2 with C2BOOT */
  LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);
 8000c88:	2004      	movs	r0, #4
 8000c8a:	f7ff fde5 	bl	8000858 <LL_C2_PWR_SetPowerMode>
   *  Enable USB power
   */
  HAL_PWREx_EnableVddUSB();
#endif

  return;
 8000c8e:	bf00      	nop
}
 8000c90:	bd80      	pop	{r7, pc}
	...

08000c94 <appe_Tl_Init>:

static void appe_Tl_Init( void )
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b088      	sub	sp, #32
 8000c98:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;
  /**< Reference table initialization */
  TL_Init();
 8000c9a:	f006 fb7f 	bl	800739c <TL_Init>

  /**< System channel initialization */
  UTIL_SEQ_RegTask( 1<< CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, shci_user_evt_proc );
 8000c9e:	4a11      	ldr	r2, [pc, #68]	; (8000ce4 <appe_Tl_Init+0x50>)
 8000ca0:	2100      	movs	r1, #0
 8000ca2:	2004      	movs	r0, #4
 8000ca4:	f008 fbf2 	bl	800948c <UTIL_SEQ_RegTask>
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 8000ca8:	4b0f      	ldr	r3, [pc, #60]	; (8000ce8 <appe_Tl_Init+0x54>)
 8000caa:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 8000cac:	4b0f      	ldr	r3, [pc, #60]	; (8000cec <appe_Tl_Init+0x58>)
 8000cae:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 8000cb0:	463b      	mov	r3, r7
 8000cb2:	4619      	mov	r1, r3
 8000cb4:	480e      	ldr	r0, [pc, #56]	; (8000cf0 <appe_Tl_Init+0x5c>)
 8000cb6:	f006 fa37 	bl	8007128 <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = BleSpareEvtBuffer;
 8000cba:	4b0e      	ldr	r3, [pc, #56]	; (8000cf4 <appe_Tl_Init+0x60>)
 8000cbc:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 8000cbe:	4b0e      	ldr	r3, [pc, #56]	; (8000cf8 <appe_Tl_Init+0x64>)
 8000cc0:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 8000cc2:	4b0e      	ldr	r3, [pc, #56]	; (8000cfc <appe_Tl_Init+0x68>)
 8000cc4:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 8000cc6:	f240 533c 	movw	r3, #1340	; 0x53c
 8000cca:	617b      	str	r3, [r7, #20]
  TL_MM_Init( &tl_mm_config );
 8000ccc:	f107 0308 	add.w	r3, r7, #8
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	f006 fca5 	bl	8007620 <TL_MM_Init>

  TL_Enable();
 8000cd6:	f006 fb5b 	bl	8007390 <TL_Enable>

  return;
 8000cda:	bf00      	nop
}
 8000cdc:	3720      	adds	r7, #32
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bd80      	pop	{r7, pc}
 8000ce2:	bf00      	nop
 8000ce4:	08007161 	.word	0x08007161
 8000ce8:	20030724 	.word	0x20030724
 8000cec:	08000d01 	.word	0x08000d01
 8000cf0:	08000d17 	.word	0x08000d17
 8000cf4:	2003093c 	.word	0x2003093c
 8000cf8:	20030830 	.word	0x20030830
 8000cfc:	200301e8 	.word	0x200301e8

08000d00 <APPE_SysStatusNot>:

static void APPE_SysStatusNot( SHCI_TL_CmdStatus_t status )
{
 8000d00:	b480      	push	{r7}
 8000d02:	b083      	sub	sp, #12
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	4603      	mov	r3, r0
 8000d08:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);
  return;
 8000d0a:	bf00      	nop
}
 8000d0c:	370c      	adds	r7, #12
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d14:	4770      	bx	lr

08000d16 <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * ( eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable )
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx( void * pPayload )
{
 8000d16:	b580      	push	{r7, lr}
 8000d18:	b082      	sub	sp, #8
 8000d1a:	af00      	add	r7, sp, #0
 8000d1c:	6078      	str	r0, [r7, #4]
  UNUSED(pPayload);
  /* Traces channel initialization */
  APPD_EnableCPU2( );
 8000d1e:	f7ff fc5f 	bl	80005e0 <APPD_EnableCPU2>

  APP_BLE_Init( );
 8000d22:	f007 fb67 	bl	80083f4 <APP_BLE_Init>
  UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 8000d26:	2100      	movs	r1, #0
 8000d28:	2001      	movs	r0, #1
 8000d2a:	f008 fa95 	bl	8009258 <UTIL_LPM_SetOffMode>
  return;
 8000d2e:	bf00      	nop
}
 8000d30:	3708      	adds	r7, #8
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}

08000d36 <MX_APPE_Process>:
    __WFI( );
  }
}

void MX_APPE_Process(void)
{
 8000d36:	b580      	push	{r7, lr}
 8000d38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_APPE_Process_1 */

  /* USER CODE END MX_APPE_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8000d3a:	f04f 30ff 	mov.w	r0, #4294967295
 8000d3e:	f008 fabb 	bl	80092b8 <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_APPE_Process_2 */

  /* USER CODE END MX_APPE_Process_2 */
}
 8000d42:	bf00      	nop
 8000d44:	bd80      	pop	{r7, pc}

08000d46 <UTIL_SEQ_Idle>:

void UTIL_SEQ_Idle( void )
{
 8000d46:	b480      	push	{r7}
 8000d48:	af00      	add	r7, sp, #0
#if ( CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower( );
#endif
  return;
 8000d4a:	bf00      	nop
}
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d52:	4770      	bx	lr

08000d54 <UTIL_SEQ_EvtIdle>:
  *
  * @param  evt_waited_bm : Event pending.
  * @retval None
  */
void UTIL_SEQ_EvtIdle( UTIL_SEQ_bm_t task_id_bm, UTIL_SEQ_bm_t evt_waited_bm )
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b082      	sub	sp, #8
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
 8000d5c:	6039      	str	r1, [r7, #0]
  UTIL_SEQ_Run( UTIL_SEQ_DEFAULT );
 8000d5e:	f04f 30ff 	mov.w	r0, #4294967295
 8000d62:	f008 faa9 	bl	80092b8 <UTIL_SEQ_Run>
}
 8000d66:	bf00      	nop
 8000d68:	3708      	adds	r7, #8
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}

08000d6e <shci_notify_asynch_evt>:

void shci_notify_asynch_evt(void* pdata)
{
 8000d6e:	b580      	push	{r7, lr}
 8000d70:	b082      	sub	sp, #8
 8000d72:	af00      	add	r7, sp, #0
 8000d74:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask( 1<<CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 8000d76:	2100      	movs	r1, #0
 8000d78:	2004      	movs	r0, #4
 8000d7a:	f008 fba9 	bl	80094d0 <UTIL_SEQ_SetTask>
  return;
 8000d7e:	bf00      	nop
}
 8000d80:	3708      	adds	r7, #8
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bd80      	pop	{r7, pc}

08000d86 <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 8000d86:	b580      	push	{r7, lr}
 8000d88:	b082      	sub	sp, #8
 8000d8a:	af00      	add	r7, sp, #0
 8000d8c:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt( 1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID );
 8000d8e:	2002      	movs	r0, #2
 8000d90:	f008 fc0a 	bl	80095a8 <UTIL_SEQ_SetEvt>
  return;
 8000d94:	bf00      	nop
}
 8000d96:	3708      	adds	r7, #8
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	bd80      	pop	{r7, pc}

08000d9c <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b082      	sub	sp, #8
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt( 1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID );
 8000da4:	2002      	movs	r0, #2
 8000da6:	f008 fc1f 	bl	80095e8 <UTIL_SEQ_WaitEvt>
  return;
 8000daa:	bf00      	nop
}
 8000dac:	3708      	adds	r7, #8
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd80      	pop	{r7, pc}

08000db2 <LL_AHB1_GRP1_EnableClock>:
{
 8000db2:	b480      	push	{r7}
 8000db4:	b085      	sub	sp, #20
 8000db6:	af00      	add	r7, sp, #0
 8000db8:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000dba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000dbe:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8000dc0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	4313      	orrs	r3, r2
 8000dc8:	648b      	str	r3, [r1, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000dca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000dce:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	4013      	ands	r3, r2
 8000dd4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000dd6:	68fb      	ldr	r3, [r7, #12]
}
 8000dd8:	bf00      	nop
 8000dda:	3714      	adds	r7, #20
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de2:	4770      	bx	lr

08000de4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000de8:	2004      	movs	r0, #4
 8000dea:	f7ff ffe2 	bl	8000db2 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000dee:	2002      	movs	r0, #2
 8000df0:	f7ff ffdf 	bl	8000db2 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA2_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel4_IRQn, 0, 0);
 8000df4:	2200      	movs	r2, #0
 8000df6:	2100      	movs	r1, #0
 8000df8:	203a      	movs	r0, #58	; 0x3a
 8000dfa:	f000 ff4c 	bl	8001c96 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel4_IRQn);
 8000dfe:	203a      	movs	r0, #58	; 0x3a
 8000e00:	f000 ff63 	bl	8001cca <HAL_NVIC_EnableIRQ>

}
 8000e04:	bf00      	nop
 8000e06:	bd80      	pop	{r7, pc}

08000e08 <LL_AHB2_GRP1_EnableClock>:
{
 8000e08:	b480      	push	{r7}
 8000e0a:	b085      	sub	sp, #20
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000e10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e14:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000e16:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	4313      	orrs	r3, r2
 8000e1e:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000e20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e24:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	4013      	ands	r3, r2
 8000e2a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000e2c:	68fb      	ldr	r3, [r7, #12]
}
 8000e2e:	bf00      	nop
 8000e30:	3714      	adds	r7, #20
 8000e32:	46bd      	mov	sp, r7
 8000e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e38:	4770      	bx	lr

08000e3a <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Pinout Configuration
*/
void MX_GPIO_Init(void)
{
 8000e3a:	b580      	push	{r7, lr}
 8000e3c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e3e:	2002      	movs	r0, #2
 8000e40:	f7ff ffe2 	bl	8000e08 <LL_AHB2_GRP1_EnableClock>

}
 8000e44:	bf00      	nop
 8000e46:	bd80      	pop	{r7, pc}

08000e48 <LL_EXTI_EnableIT_0_31>:
{
 8000e48:	b480      	push	{r7}
 8000e4a:	b083      	sub	sp, #12
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8000e50:	4b06      	ldr	r3, [pc, #24]	; (8000e6c <LL_EXTI_EnableIT_0_31+0x24>)
 8000e52:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8000e56:	4905      	ldr	r1, [pc, #20]	; (8000e6c <LL_EXTI_EnableIT_0_31+0x24>)
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	4313      	orrs	r3, r2
 8000e5c:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8000e60:	bf00      	nop
 8000e62:	370c      	adds	r7, #12
 8000e64:	46bd      	mov	sp, r7
 8000e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6a:	4770      	bx	lr
 8000e6c:	58000800 	.word	0x58000800

08000e70 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8000e70:	b480      	push	{r7}
 8000e72:	b083      	sub	sp, #12
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8000e78:	4b05      	ldr	r3, [pc, #20]	; (8000e90 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8000e7a:	681a      	ldr	r2, [r3, #0]
 8000e7c:	4904      	ldr	r1, [pc, #16]	; (8000e90 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	4313      	orrs	r3, r2
 8000e82:	600b      	str	r3, [r1, #0]

}
 8000e84:	bf00      	nop
 8000e86:	370c      	adds	r7, #12
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8e:	4770      	bx	lr
 8000e90:	58000800 	.word	0x58000800

08000e94 <HW_TS_Init>:

  return;
}

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *hrtc)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b088      	sub	sp, #32
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	6039      	str	r1, [r7, #0]
 8000e9e:	71fb      	strb	r3, [r7, #7]
  uint32_t localmaxwakeuptimersetup;

  /**
   * Get RTC handler
   */
  phrtc = hrtc;
 8000ea0:	4a64      	ldr	r2, [pc, #400]	; (8001034 <HW_TS_Init+0x1a0>)
 8000ea2:	683b      	ldr	r3, [r7, #0]
 8000ea4:	6013      	str	r3, [r2, #0]

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8000ea6:	4b63      	ldr	r3, [pc, #396]	; (8001034 <HW_TS_Init+0x1a0>)
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	22ca      	movs	r2, #202	; 0xca
 8000eae:	625a      	str	r2, [r3, #36]	; 0x24
 8000eb0:	4b60      	ldr	r3, [pc, #384]	; (8001034 <HW_TS_Init+0x1a0>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	2253      	movs	r2, #83	; 0x53
 8000eb8:	625a      	str	r2, [r3, #36]	; 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8000eba:	4b5f      	ldr	r3, [pc, #380]	; (8001038 <HW_TS_Init+0x1a4>)
 8000ebc:	689b      	ldr	r3, [r3, #8]
 8000ebe:	4a5e      	ldr	r2, [pc, #376]	; (8001038 <HW_TS_Init+0x1a4>)
 8000ec0:	f043 0320 	orr.w	r3, r3, #32
 8000ec4:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 8000ec6:	4b5c      	ldr	r3, [pc, #368]	; (8001038 <HW_TS_Init+0x1a4>)
 8000ec8:	689b      	ldr	r3, [r3, #8]
 8000eca:	b2db      	uxtb	r3, r3
 8000ecc:	f003 0307 	and.w	r3, r3, #7
 8000ed0:	b2db      	uxtb	r3, r3
 8000ed2:	f1c3 0304 	rsb	r3, r3, #4
 8000ed6:	b2da      	uxtb	r2, r3
 8000ed8:	4b58      	ldr	r3, [pc, #352]	; (800103c <HW_TS_Init+0x1a8>)
 8000eda:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 8000edc:	4b56      	ldr	r3, [pc, #344]	; (8001038 <HW_TS_Init+0x1a4>)
 8000ede:	691b      	ldr	r3, [r3, #16]
 8000ee0:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8000ee4:	f44f 02fe 	mov.w	r2, #8323072	; 0x7f0000
 8000ee8:	613a      	str	r2, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000eea:	693a      	ldr	r2, [r7, #16]
 8000eec:	fa92 f2a2 	rbit	r2, r2
 8000ef0:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000ef2:	68fa      	ldr	r2, [r7, #12]
 8000ef4:	617a      	str	r2, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8000ef6:	697a      	ldr	r2, [r7, #20]
 8000ef8:	2a00      	cmp	r2, #0
 8000efa:	d101      	bne.n	8000f00 <HW_TS_Init+0x6c>
  {
    return 32U;
 8000efc:	2220      	movs	r2, #32
 8000efe:	e003      	b.n	8000f08 <HW_TS_Init+0x74>
  }
  return __builtin_clz(value);
 8000f00:	697a      	ldr	r2, [r7, #20]
 8000f02:	fab2 f282 	clz	r2, r2
 8000f06:	b2d2      	uxtb	r2, r2
 8000f08:	40d3      	lsrs	r3, r2
 8000f0a:	b2db      	uxtb	r3, r3
 8000f0c:	3301      	adds	r3, #1
 8000f0e:	b2da      	uxtb	r2, r3
 8000f10:	4b4b      	ldr	r3, [pc, #300]	; (8001040 <HW_TS_Init+0x1ac>)
 8000f12:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 8000f14:	4b48      	ldr	r3, [pc, #288]	; (8001038 <HW_TS_Init+0x1a4>)
 8000f16:	691b      	ldr	r3, [r3, #16]
 8000f18:	b29b      	uxth	r3, r3
 8000f1a:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000f1e:	b29b      	uxth	r3, r3
 8000f20:	3301      	adds	r3, #1
 8000f22:	b29a      	uxth	r2, r3
 8000f24:	4b47      	ldr	r3, [pc, #284]	; (8001044 <HW_TS_Init+0x1b0>)
 8000f26:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 8000f28:	4b46      	ldr	r3, [pc, #280]	; (8001044 <HW_TS_Init+0x1b0>)
 8000f2a:	881b      	ldrh	r3, [r3, #0]
 8000f2c:	3b01      	subs	r3, #1
 8000f2e:	4a44      	ldr	r2, [pc, #272]	; (8001040 <HW_TS_Init+0x1ac>)
 8000f30:	7812      	ldrb	r2, [r2, #0]
 8000f32:	fb02 f303 	mul.w	r3, r2, r3
 8000f36:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8000f3a:	4a40      	ldr	r2, [pc, #256]	; (800103c <HW_TS_Init+0x1a8>)
 8000f3c:	7812      	ldrb	r2, [r2, #0]
 8000f3e:	40d3      	lsrs	r3, r2
 8000f40:	61bb      	str	r3, [r7, #24]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 8000f42:	69bb      	ldr	r3, [r7, #24]
 8000f44:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8000f48:	4293      	cmp	r3, r2
 8000f4a:	d904      	bls.n	8000f56 <HW_TS_Init+0xc2>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 8000f4c:	4b3e      	ldr	r3, [pc, #248]	; (8001048 <HW_TS_Init+0x1b4>)
 8000f4e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000f52:	801a      	strh	r2, [r3, #0]
 8000f54:	e003      	b.n	8000f5e <HW_TS_Init+0xca>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 8000f56:	69bb      	ldr	r3, [r7, #24]
 8000f58:	b29a      	uxth	r2, r3
 8000f5a:	4b3b      	ldr	r3, [pc, #236]	; (8001048 <HW_TS_Init+0x1b4>)
 8000f5c:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8000f5e:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8000f62:	f7ff ff85 	bl	8000e70 <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8000f66:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8000f6a:	f7ff ff6d 	bl	8000e48 <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 8000f6e:	79fb      	ldrb	r3, [r7, #7]
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d143      	bne.n	8000ffc <HW_TS_Init+0x168>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8000f74:	4b35      	ldr	r3, [pc, #212]	; (800104c <HW_TS_Init+0x1b8>)
 8000f76:	2201      	movs	r2, #1
 8000f78:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8000f7a:	4b35      	ldr	r3, [pc, #212]	; (8001050 <HW_TS_Init+0x1bc>)
 8000f7c:	f04f 32ff 	mov.w	r2, #4294967295
 8000f80:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8000f82:	2300      	movs	r3, #0
 8000f84:	77fb      	strb	r3, [r7, #31]
 8000f86:	e00c      	b.n	8000fa2 <HW_TS_Init+0x10e>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 8000f88:	7ffa      	ldrb	r2, [r7, #31]
 8000f8a:	4932      	ldr	r1, [pc, #200]	; (8001054 <HW_TS_Init+0x1c0>)
 8000f8c:	4613      	mov	r3, r2
 8000f8e:	005b      	lsls	r3, r3, #1
 8000f90:	4413      	add	r3, r2
 8000f92:	00db      	lsls	r3, r3, #3
 8000f94:	440b      	add	r3, r1
 8000f96:	330c      	adds	r3, #12
 8000f98:	2200      	movs	r2, #0
 8000f9a:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8000f9c:	7ffb      	ldrb	r3, [r7, #31]
 8000f9e:	3301      	adds	r3, #1
 8000fa0:	77fb      	strb	r3, [r7, #31]
 8000fa2:	7ffb      	ldrb	r3, [r7, #31]
 8000fa4:	2b05      	cmp	r3, #5
 8000fa6:	d9ef      	bls.n	8000f88 <HW_TS_Init+0xf4>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 8000fa8:	4b2b      	ldr	r3, [pc, #172]	; (8001058 <HW_TS_Init+0x1c4>)
 8000faa:	2206      	movs	r2, #6
 8000fac:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);                       /**<  Disable the Wakeup Timer */
 8000fae:	4b21      	ldr	r3, [pc, #132]	; (8001034 <HW_TS_Init+0x1a0>)
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	689a      	ldr	r2, [r3, #8]
 8000fb6:	4b1f      	ldr	r3, [pc, #124]	; (8001034 <HW_TS_Init+0x1a0>)
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000fc0:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 8000fc2:	4b1c      	ldr	r3, [pc, #112]	; (8001034 <HW_TS_Init+0x1a0>)
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	68db      	ldr	r3, [r3, #12]
 8000fca:	b2da      	uxtb	r2, r3
 8000fcc:	4b19      	ldr	r3, [pc, #100]	; (8001034 <HW_TS_Init+0x1a0>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8000fd6:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 8000fd8:	4b20      	ldr	r3, [pc, #128]	; (800105c <HW_TS_Init+0x1c8>)
 8000fda:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000fde:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 8000fe0:	2003      	movs	r0, #3
 8000fe2:	f000 fe9a 	bl	8001d1a <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(phrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 8000fe6:	4b13      	ldr	r3, [pc, #76]	; (8001034 <HW_TS_Init+0x1a0>)
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	689a      	ldr	r2, [r3, #8]
 8000fee:	4b11      	ldr	r3, [pc, #68]	; (8001034 <HW_TS_Init+0x1a0>)
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000ff8:	609a      	str	r2, [r3, #8]
 8000ffa:	e00a      	b.n	8001012 <HW_TS_Init+0x17e>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTF) != RESET)
 8000ffc:	4b0d      	ldr	r3, [pc, #52]	; (8001034 <HW_TS_Init+0x1a0>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	68db      	ldr	r3, [r3, #12]
 8001004:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001008:	2b00      	cmp	r3, #0
 800100a:	d002      	beq.n	8001012 <HW_TS_Init+0x17e>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 800100c:	2003      	movs	r0, #3
 800100e:	f000 fe76 	bl	8001cfe <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 8001012:	4b08      	ldr	r3, [pc, #32]	; (8001034 <HW_TS_Init+0x1a0>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	22ff      	movs	r2, #255	; 0xff
 800101a:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 800101c:	2200      	movs	r2, #0
 800101e:	2103      	movs	r1, #3
 8001020:	2003      	movs	r0, #3
 8001022:	f000 fe38 	bl	8001c96 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8001026:	2003      	movs	r0, #3
 8001028:	f000 fe4f 	bl	8001cca <HAL_NVIC_EnableIRQ>

  return;
 800102c:	bf00      	nop
}
 800102e:	3720      	adds	r7, #32
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}
 8001034:	2000021c 	.word	0x2000021c
 8001038:	40002800 	.word	0x40002800
 800103c:	20000220 	.word	0x20000220
 8001040:	20000221 	.word	0x20000221
 8001044:	20000222 	.word	0x20000222
 8001048:	20000224 	.word	0x20000224
 800104c:	20000124 	.word	0x20000124
 8001050:	20000120 	.word	0x20000120
 8001054:	2000008c 	.word	0x2000008c
 8001058:	2000011c 	.word	0x2000011c
 800105c:	58000800 	.word	0x58000800

08001060 <HW_UART_Transmit_DMA>:

    return hw_status;
}

hw_status_t HW_UART_Transmit_DMA(hw_uart_id_t hw_uart_id, uint8_t *p_data, uint16_t size, void (*cb)(void))
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b086      	sub	sp, #24
 8001064:	af00      	add	r7, sp, #0
 8001066:	60b9      	str	r1, [r7, #8]
 8001068:	607b      	str	r3, [r7, #4]
 800106a:	4603      	mov	r3, r0
 800106c:	73fb      	strb	r3, [r7, #15]
 800106e:	4613      	mov	r3, r2
 8001070:	81bb      	strh	r3, [r7, #12]
    HAL_StatusTypeDef hal_status = HAL_OK;
 8001072:	2300      	movs	r3, #0
 8001074:	75fb      	strb	r3, [r7, #23]
    hw_status_t hw_status = hw_uart_ok;
 8001076:	2300      	movs	r3, #0
 8001078:	75bb      	strb	r3, [r7, #22]

    switch (hw_uart_id)
 800107a:	7bfb      	ldrb	r3, [r7, #15]
 800107c:	2b00      	cmp	r3, #0
 800107e:	d10e      	bne.n	800109e <HW_UART_Transmit_DMA+0x3e>
    {
#if (CFG_HW_USART1_ENABLED == 1)
        case hw_uart1:
            HW_huart1TxCb = cb;
 8001080:	4a17      	ldr	r2, [pc, #92]	; (80010e0 <HW_UART_Transmit_DMA+0x80>)
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	6013      	str	r3, [r2, #0]
            huart1.Instance = USART1;
 8001086:	4b17      	ldr	r3, [pc, #92]	; (80010e4 <HW_UART_Transmit_DMA+0x84>)
 8001088:	4a17      	ldr	r2, [pc, #92]	; (80010e8 <HW_UART_Transmit_DMA+0x88>)
 800108a:	601a      	str	r2, [r3, #0]
            hal_status = HAL_UART_Transmit_DMA(&huart1, p_data, size);
 800108c:	89bb      	ldrh	r3, [r7, #12]
 800108e:	461a      	mov	r2, r3
 8001090:	68b9      	ldr	r1, [r7, #8]
 8001092:	4814      	ldr	r0, [pc, #80]	; (80010e4 <HW_UART_Transmit_DMA+0x84>)
 8001094:	f003 fb96 	bl	80047c4 <HAL_UART_Transmit_DMA>
 8001098:	4603      	mov	r3, r0
 800109a:	75fb      	strb	r3, [r7, #23]
            break;
 800109c:	e000      	b.n	80010a0 <HW_UART_Transmit_DMA+0x40>
            hal_status = HAL_UART_Transmit_DMA(&hlpuart1, p_data, size);
            break;
#endif

        default:
            break;
 800109e:	bf00      	nop
    }

    switch (hal_status)
 80010a0:	7dfb      	ldrb	r3, [r7, #23]
 80010a2:	2b03      	cmp	r3, #3
 80010a4:	d816      	bhi.n	80010d4 <HW_UART_Transmit_DMA+0x74>
 80010a6:	a201      	add	r2, pc, #4	; (adr r2, 80010ac <HW_UART_Transmit_DMA+0x4c>)
 80010a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010ac:	080010bd 	.word	0x080010bd
 80010b0:	080010c3 	.word	0x080010c3
 80010b4:	080010c9 	.word	0x080010c9
 80010b8:	080010cf 	.word	0x080010cf
    {
        case HAL_OK:
            hw_status = hw_uart_ok;
 80010bc:	2300      	movs	r3, #0
 80010be:	75bb      	strb	r3, [r7, #22]
            break;
 80010c0:	e009      	b.n	80010d6 <HW_UART_Transmit_DMA+0x76>

        case HAL_ERROR:
            hw_status = hw_uart_error;
 80010c2:	2301      	movs	r3, #1
 80010c4:	75bb      	strb	r3, [r7, #22]
            break;
 80010c6:	e006      	b.n	80010d6 <HW_UART_Transmit_DMA+0x76>

        case HAL_BUSY:
            hw_status = hw_uart_busy;
 80010c8:	2302      	movs	r3, #2
 80010ca:	75bb      	strb	r3, [r7, #22]
            break;
 80010cc:	e003      	b.n	80010d6 <HW_UART_Transmit_DMA+0x76>

        case HAL_TIMEOUT:
            hw_status = hw_uart_to;
 80010ce:	2303      	movs	r3, #3
 80010d0:	75bb      	strb	r3, [r7, #22]
            break;
 80010d2:	e000      	b.n	80010d6 <HW_UART_Transmit_DMA+0x76>

        default:
            break;
 80010d4:	bf00      	nop
    }

    return hw_status;
 80010d6:	7dbb      	ldrb	r3, [r7, #22]
}
 80010d8:	4618      	mov	r0, r3
 80010da:	3718      	adds	r7, #24
 80010dc:	46bd      	mov	sp, r7
 80010de:	bd80      	pop	{r7, pc}
 80010e0:	20001378 	.word	0x20001378
 80010e4:	2000143c 	.word	0x2000143c
 80010e8:	40013800 	.word	0x40013800

080010ec <HAL_UART_TxCpltCallback>:

    return;
}

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b082      	sub	sp, #8
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
    switch ((uint32_t)huart->Instance)
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	461a      	mov	r2, r3
 80010fa:	4b09      	ldr	r3, [pc, #36]	; (8001120 <HAL_UART_TxCpltCallback+0x34>)
 80010fc:	429a      	cmp	r2, r3
 80010fe:	d107      	bne.n	8001110 <HAL_UART_TxCpltCallback+0x24>
    {
#if (CFG_HW_USART1_ENABLED == 1)
        case (uint32_t)USART1:
            if(HW_huart1TxCb)
 8001100:	4b08      	ldr	r3, [pc, #32]	; (8001124 <HAL_UART_TxCpltCallback+0x38>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	2b00      	cmp	r3, #0
 8001106:	d005      	beq.n	8001114 <HAL_UART_TxCpltCallback+0x28>
            {
                HW_huart1TxCb();
 8001108:	4b06      	ldr	r3, [pc, #24]	; (8001124 <HAL_UART_TxCpltCallback+0x38>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	4798      	blx	r3
            }
            break;
 800110e:	e001      	b.n	8001114 <HAL_UART_TxCpltCallback+0x28>
            }
            break;
#endif

        default:
            break;
 8001110:	bf00      	nop
 8001112:	e000      	b.n	8001116 <HAL_UART_TxCpltCallback+0x2a>
            break;
 8001114:	bf00      	nop
    }

    return;
 8001116:	bf00      	nop
}
 8001118:	3708      	adds	r7, #8
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}
 800111e:	bf00      	nop
 8001120:	40013800 	.word	0x40013800
 8001124:	20001378 	.word	0x20001378

08001128 <LL_AHB3_GRP1_EnableClock>:
{
 8001128:	b480      	push	{r7}
 800112a:	b085      	sub	sp, #20
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8001130:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001134:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001136:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	4313      	orrs	r3, r2
 800113e:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8001140:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001144:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	4013      	ands	r3, r2
 800114a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800114c:	68fb      	ldr	r3, [r7, #12]
}
 800114e:	bf00      	nop
 8001150:	3714      	adds	r7, #20
 8001152:	46bd      	mov	sp, r7
 8001154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001158:	4770      	bx	lr
	...

0800115c <MX_IPCC_Init>:

IPCC_HandleTypeDef hipcc;

/* IPCC init function */
void MX_IPCC_Init(void)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	af00      	add	r7, sp, #0
  /* USER CODE END IPCC_Init 0 */

  /* USER CODE BEGIN IPCC_Init 1 */

  /* USER CODE END IPCC_Init 1 */
  hipcc.Instance = IPCC;
 8001160:	4b06      	ldr	r3, [pc, #24]	; (800117c <MX_IPCC_Init+0x20>)
 8001162:	4a07      	ldr	r2, [pc, #28]	; (8001180 <MX_IPCC_Init+0x24>)
 8001164:	601a      	str	r2, [r3, #0]
  if (HAL_IPCC_Init(&hipcc) != HAL_OK)
 8001166:	4805      	ldr	r0, [pc, #20]	; (800117c <MX_IPCC_Init+0x20>)
 8001168:	f001 fac4 	bl	80026f4 <HAL_IPCC_Init>
 800116c:	4603      	mov	r3, r0
 800116e:	2b00      	cmp	r3, #0
 8001170:	d001      	beq.n	8001176 <MX_IPCC_Init+0x1a>
  {
    Error_Handler();
 8001172:	f000 f8d7 	bl	8001324 <Error_Handler>
  }
  /* USER CODE BEGIN IPCC_Init 2 */

  /* USER CODE END IPCC_Init 2 */

}
 8001176:	bf00      	nop
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	2000137c 	.word	0x2000137c
 8001180:	58000c00 	.word	0x58000c00

08001184 <HAL_IPCC_MspInit>:

void HAL_IPCC_MspInit(IPCC_HandleTypeDef* ipccHandle)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b082      	sub	sp, #8
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]

  if(ipccHandle->Instance==IPCC)
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	4a0d      	ldr	r2, [pc, #52]	; (80011c8 <HAL_IPCC_MspInit+0x44>)
 8001192:	4293      	cmp	r3, r2
 8001194:	d113      	bne.n	80011be <HAL_IPCC_MspInit+0x3a>
  {
  /* USER CODE BEGIN IPCC_MspInit 0 */

  /* USER CODE END IPCC_MspInit 0 */
    /* IPCC clock enable */
    __HAL_RCC_IPCC_CLK_ENABLE();
 8001196:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800119a:	f7ff ffc5 	bl	8001128 <LL_AHB3_GRP1_EnableClock>

    /* IPCC interrupt Init */
    HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn, 0, 0);
 800119e:	2200      	movs	r2, #0
 80011a0:	2100      	movs	r1, #0
 80011a2:	202c      	movs	r0, #44	; 0x2c
 80011a4:	f000 fd77 	bl	8001c96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 80011a8:	202c      	movs	r0, #44	; 0x2c
 80011aa:	f000 fd8e 	bl	8001cca <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn, 0, 0);
 80011ae:	2200      	movs	r2, #0
 80011b0:	2100      	movs	r1, #0
 80011b2:	202d      	movs	r0, #45	; 0x2d
 80011b4:	f000 fd6f 	bl	8001c96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 80011b8:	202d      	movs	r0, #45	; 0x2d
 80011ba:	f000 fd86 	bl	8001cca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN IPCC_MspInit 1 */

  /* USER CODE END IPCC_MspInit 1 */
  }
}
 80011be:	bf00      	nop
 80011c0:	3708      	adds	r7, #8
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	58000c00 	.word	0x58000c00

080011cc <LL_RCC_LSE_SetDriveCapability>:
{
 80011cc:	b480      	push	{r7}
 80011ce:	b083      	sub	sp, #12
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 80011d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80011dc:	f023 0218 	bic.w	r2, r3, #24
 80011e0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	4313      	orrs	r3, r2
 80011e8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80011ec:	bf00      	nop
 80011ee:	370c      	adds	r7, #12
 80011f0:	46bd      	mov	sp, r7
 80011f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f6:	4770      	bx	lr

080011f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011fc:	f000 fba2 	bl	8001944 <HAL_Init>
  /* Config code for STM32_WPAN (HSE Tuning must be done before system clock configuration) */
  MX_APPE_Config();
 8001200:	f7ff fc92 	bl	8000b28 <MX_APPE_Config>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001204:	f000 f810 	bl	8001228 <SystemClock_Config>

  /* IPCC initialisation */
   MX_IPCC_Init();
 8001208:	f7ff ffa8 	bl	800115c <MX_IPCC_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_RF_Init();
 800120c:	f000 f88f 	bl	800132e <MX_RF_Init>
  MX_RTC_Init();
 8001210:	f000 f8be 	bl	8001390 <MX_RTC_Init>
  MX_GPIO_Init();
 8001214:	f7ff fe11 	bl	8000e3a <MX_GPIO_Init>
  MX_DMA_Init();
 8001218:	f7ff fde4 	bl	8000de4 <MX_DMA_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init code for STM32_WPAN */
  MX_APPE_Init();
 800121c:	f7ff fc92 	bl	8000b44 <MX_APPE_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_APPE_Process();
 8001220:	f7ff fd89 	bl	8000d36 <MX_APPE_Process>
 8001224:	e7fc      	b.n	8001220 <main+0x28>
	...

08001228 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b0ae      	sub	sp, #184	; 0xb8
 800122c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800122e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001232:	2248      	movs	r2, #72	; 0x48
 8001234:	2100      	movs	r1, #0
 8001236:	4618      	mov	r0, r3
 8001238:	f008 faa4 	bl	8009784 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800123c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001240:	2200      	movs	r2, #0
 8001242:	601a      	str	r2, [r3, #0]
 8001244:	605a      	str	r2, [r3, #4]
 8001246:	609a      	str	r2, [r3, #8]
 8001248:	60da      	str	r2, [r3, #12]
 800124a:	611a      	str	r2, [r3, #16]
 800124c:	615a      	str	r2, [r3, #20]
 800124e:	619a      	str	r2, [r3, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001250:	1d3b      	adds	r3, r7, #4
 8001252:	2250      	movs	r2, #80	; 0x50
 8001254:	2100      	movs	r1, #0
 8001256:	4618      	mov	r0, r3
 8001258:	f008 fa94 	bl	8009784 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800125c:	f001 fad0 	bl	8002800 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001260:	2000      	movs	r0, #0
 8001262:	f7ff ffb3 	bl	80011cc <LL_RCC_LSE_SetDriveCapability>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001266:	4b2e      	ldr	r3, [pc, #184]	; (8001320 <SystemClock_Config+0xf8>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800126e:	4a2c      	ldr	r2, [pc, #176]	; (8001320 <SystemClock_Config+0xf8>)
 8001270:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001274:	6013      	str	r3, [r2, #0]
 8001276:	4b2a      	ldr	r3, [pc, #168]	; (8001320 <SystemClock_Config+0xf8>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800127e:	603b      	str	r3, [r7, #0]
 8001280:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 8001282:	2307      	movs	r3, #7
 8001284:	673b      	str	r3, [r7, #112]	; 0x70
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001286:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800128a:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800128c:	2301      	movs	r3, #1
 800128e:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001290:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001294:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001296:	2340      	movs	r3, #64	; 0x40
 8001298:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800129c:	2300      	movs	r3, #0
 800129e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012a2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80012a6:	4618      	mov	r0, r3
 80012a8:	f001 fe3e 	bl	8002f28 <HAL_RCC_OscConfig>
 80012ac:	4603      	mov	r3, r0
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d001      	beq.n	80012b6 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80012b2:	f000 f837 	bl	8001324 <Error_Handler>
  }
  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 80012b6:	236f      	movs	r3, #111	; 0x6f
 80012b8:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 80012ba:	2302      	movs	r3, #2
 80012bc:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012be:	2300      	movs	r3, #0
 80012c0:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80012c2:	2300      	movs	r3, #0
 80012c4:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012c6:	2300      	movs	r3, #0
 80012c8:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 80012ca:	2300      	movs	r3, #0
 80012cc:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 80012ce:	2300      	movs	r3, #0
 80012d0:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80012d2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80012d6:	2101      	movs	r1, #1
 80012d8:	4618      	mov	r0, r3
 80012da:	f002 f9b1 	bl	8003640 <HAL_RCC_ClockConfig>
 80012de:	4603      	mov	r3, r0
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d001      	beq.n	80012e8 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80012e4:	f000 f81e 	bl	8001324 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP
 80012e8:	f643 0301 	movw	r3, #14337	; 0x3801
 80012ec:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART1;
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80012ee:	2300      	movs	r3, #0
 80012f0:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80012f2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80012f6:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_LSE;
 80012f8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80012fc:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSE;
 80012fe:	2302      	movs	r3, #2
 8001300:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 8001302:	2310      	movs	r3, #16
 8001304:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001306:	1d3b      	adds	r3, r7, #4
 8001308:	4618      	mov	r0, r3
 800130a:	f002 fdda 	bl	8003ec2 <HAL_RCCEx_PeriphCLKConfig>
 800130e:	4603      	mov	r3, r0
 8001310:	2b00      	cmp	r3, #0
 8001312:	d001      	beq.n	8001318 <SystemClock_Config+0xf0>
  {
    Error_Handler();
 8001314:	f000 f806 	bl	8001324 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 8001318:	bf00      	nop
 800131a:	37b8      	adds	r7, #184	; 0xb8
 800131c:	46bd      	mov	sp, r7
 800131e:	bd80      	pop	{r7, pc}
 8001320:	58000400 	.word	0x58000400

08001324 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001324:	b480      	push	{r7}
 8001326:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001328:	b672      	cpsid	i
}
 800132a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800132c:	e7fe      	b.n	800132c <Error_Handler+0x8>

0800132e <MX_RF_Init>:

/* USER CODE END 0 */

/* RF init function */
void MX_RF_Init(void)
{
 800132e:	b480      	push	{r7}
 8001330:	af00      	add	r7, sp, #0
  /* USER CODE END RF_Init 1 */
  /* USER CODE BEGIN RF_Init 2 */

  /* USER CODE END RF_Init 2 */

}
 8001332:	bf00      	nop
 8001334:	46bd      	mov	sp, r7
 8001336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133a:	4770      	bx	lr

0800133c <LL_RCC_EnableRTC>:
{
 800133c:	b480      	push	{r7}
 800133e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8001340:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001344:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001348:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800134c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001350:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001354:	bf00      	nop
 8001356:	46bd      	mov	sp, r7
 8001358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135c:	4770      	bx	lr

0800135e <LL_APB1_GRP1_EnableClock>:
{
 800135e:	b480      	push	{r7}
 8001360:	b085      	sub	sp, #20
 8001362:	af00      	add	r7, sp, #0
 8001364:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001366:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800136a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800136c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	4313      	orrs	r3, r2
 8001374:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001376:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800137a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	4013      	ands	r3, r2
 8001380:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001382:	68fb      	ldr	r3, [r7, #12]
}
 8001384:	bf00      	nop
 8001386:	3714      	adds	r7, #20
 8001388:	46bd      	mov	sp, r7
 800138a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138e:	4770      	bx	lr

08001390 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001394:	4b16      	ldr	r3, [pc, #88]	; (80013f0 <MX_RTC_Init+0x60>)
 8001396:	4a17      	ldr	r2, [pc, #92]	; (80013f4 <MX_RTC_Init+0x64>)
 8001398:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800139a:	4b15      	ldr	r3, [pc, #84]	; (80013f0 <MX_RTC_Init+0x60>)
 800139c:	2200      	movs	r2, #0
 800139e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 80013a0:	4b13      	ldr	r3, [pc, #76]	; (80013f0 <MX_RTC_Init+0x60>)
 80013a2:	220f      	movs	r2, #15
 80013a4:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 80013a6:	4b12      	ldr	r3, [pc, #72]	; (80013f0 <MX_RTC_Init+0x60>)
 80013a8:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80013ac:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80013ae:	4b10      	ldr	r3, [pc, #64]	; (80013f0 <MX_RTC_Init+0x60>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80013b4:	4b0e      	ldr	r3, [pc, #56]	; (80013f0 <MX_RTC_Init+0x60>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80013ba:	4b0d      	ldr	r3, [pc, #52]	; (80013f0 <MX_RTC_Init+0x60>)
 80013bc:	2200      	movs	r2, #0
 80013be:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80013c0:	4b0b      	ldr	r3, [pc, #44]	; (80013f0 <MX_RTC_Init+0x60>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80013c6:	480a      	ldr	r0, [pc, #40]	; (80013f0 <MX_RTC_Init+0x60>)
 80013c8:	f003 f802 	bl	80043d0 <HAL_RTC_Init>
 80013cc:	4603      	mov	r3, r0
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d001      	beq.n	80013d6 <MX_RTC_Init+0x46>
  {
    Error_Handler();
 80013d2:	f7ff ffa7 	bl	8001324 <Error_Handler>
  }
  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 80013d6:	2200      	movs	r2, #0
 80013d8:	2100      	movs	r1, #0
 80013da:	4805      	ldr	r0, [pc, #20]	; (80013f0 <MX_RTC_Init+0x60>)
 80013dc:	f003 f8e6 	bl	80045ac <HAL_RTCEx_SetWakeUpTimer>
 80013e0:	4603      	mov	r3, r0
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d001      	beq.n	80013ea <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 80013e6:	f7ff ff9d 	bl	8001324 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80013ea:	bf00      	nop
 80013ec:	bd80      	pop	{r7, pc}
 80013ee:	bf00      	nop
 80013f0:	200013b8 	.word	0x200013b8
 80013f4:	40002800 	.word	0x40002800

080013f8 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b082      	sub	sp, #8
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	4a06      	ldr	r2, [pc, #24]	; (8001420 <HAL_RTC_MspInit+0x28>)
 8001406:	4293      	cmp	r3, r2
 8001408:	d105      	bne.n	8001416 <HAL_RTC_MspInit+0x1e>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 800140a:	f7ff ff97 	bl	800133c <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 800140e:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001412:	f7ff ffa4 	bl	800135e <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8001416:	bf00      	nop
 8001418:	3708      	adds	r7, #8
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}
 800141e:	bf00      	nop
 8001420:	40002800 	.word	0x40002800

08001424 <LL_AHB3_GRP1_EnableClock>:
{
 8001424:	b480      	push	{r7}
 8001426:	b085      	sub	sp, #20
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 800142c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001430:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001432:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	4313      	orrs	r3, r2
 800143a:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 800143c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001440:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	4013      	ands	r3, r2
 8001446:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001448:	68fb      	ldr	r3, [r7, #12]
}
 800144a:	bf00      	nop
 800144c:	3714      	adds	r7, #20
 800144e:	46bd      	mov	sp, r7
 8001450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001454:	4770      	bx	lr

08001456 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001456:	b580      	push	{r7, lr}
 8001458:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 800145a:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800145e:	f7ff ffe1 	bl	8001424 <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 8001462:	2200      	movs	r2, #0
 8001464:	2100      	movs	r1, #0
 8001466:	202e      	movs	r0, #46	; 0x2e
 8001468:	f000 fc15 	bl	8001c96 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 800146c:	202e      	movs	r0, #46	; 0x2e
 800146e:	f000 fc2c 	bl	8001cca <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001472:	bf00      	nop
 8001474:	bd80      	pop	{r7, pc}

08001476 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001476:	b480      	push	{r7}
 8001478:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800147a:	e7fe      	b.n	800147a <NMI_Handler+0x4>

0800147c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800147c:	b480      	push	{r7}
 800147e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001480:	e7fe      	b.n	8001480 <HardFault_Handler+0x4>

08001482 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001482:	b480      	push	{r7}
 8001484:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001486:	e7fe      	b.n	8001486 <MemManage_Handler+0x4>

08001488 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001488:	b480      	push	{r7}
 800148a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800148c:	e7fe      	b.n	800148c <BusFault_Handler+0x4>

0800148e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800148e:	b480      	push	{r7}
 8001490:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001492:	e7fe      	b.n	8001492 <UsageFault_Handler+0x4>

08001494 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001494:	b480      	push	{r7}
 8001496:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001498:	bf00      	nop
 800149a:	46bd      	mov	sp, r7
 800149c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a0:	4770      	bx	lr

080014a2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014a2:	b480      	push	{r7}
 80014a4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014a6:	bf00      	nop
 80014a8:	46bd      	mov	sp, r7
 80014aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ae:	4770      	bx	lr

080014b0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014b0:	b480      	push	{r7}
 80014b2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014b4:	bf00      	nop
 80014b6:	46bd      	mov	sp, r7
 80014b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014bc:	4770      	bx	lr

080014be <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014be:	b580      	push	{r7, lr}
 80014c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014c2:	f000 fa99 	bl	80019f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014c6:	bf00      	nop
 80014c8:	bd80      	pop	{r7, pc}
	...

080014cc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80014d0:	4802      	ldr	r0, [pc, #8]	; (80014dc <USART1_IRQHandler+0x10>)
 80014d2:	f003 fa09 	bl	80048e8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80014d6:	bf00      	nop
 80014d8:	bd80      	pop	{r7, pc}
 80014da:	bf00      	nop
 80014dc:	2000143c 	.word	0x2000143c

080014e0 <IPCC_C1_RX_IRQHandler>:

/**
  * @brief This function handles IPCC RX occupied interrupt.
  */
void IPCC_C1_RX_IRQHandler(void)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 0 */

  /* USER CODE END IPCC_C1_RX_IRQn 0 */
  HAL_IPCC_RX_IRQHandler(&hipcc);
 80014e4:	f007 fd52 	bl	8008f8c <HW_IPCC_Rx_Handler>
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 1 */

  /* USER CODE END IPCC_C1_RX_IRQn 1 */
}
 80014e8:	bf00      	nop
 80014ea:	bd80      	pop	{r7, pc}

080014ec <IPCC_C1_TX_IRQHandler>:

/**
  * @brief This function handles IPCC TX free interrupt.
  */
void IPCC_C1_TX_IRQHandler(void)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 0 */

  /* USER CODE END IPCC_C1_TX_IRQn 0 */
  HAL_IPCC_TX_IRQHandler(&hipcc);
 80014f0:	f007 fd84 	bl	8008ffc <HW_IPCC_Tx_Handler>
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 1 */

  /* USER CODE END IPCC_C1_TX_IRQn 1 */
}
 80014f4:	bf00      	nop
 80014f6:	bd80      	pop	{r7, pc}

080014f8 <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 80014fc:	f001 f8d6 	bl	80026ac <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 8001500:	bf00      	nop
 8001502:	bd80      	pop	{r7, pc}

08001504 <DMA2_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA2 channel4 global interrupt.
  */
void DMA2_Channel4_IRQHandler(void)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel4_IRQn 0 */

  /* USER CODE END DMA2_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001508:	4802      	ldr	r0, [pc, #8]	; (8001514 <DMA2_Channel4_IRQHandler+0x10>)
 800150a:	f000 fdf6 	bl	80020fa <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel4_IRQn 1 */

  /* USER CODE END DMA2_Channel4_IRQn 1 */
}
 800150e:	bf00      	nop
 8001510:	bd80      	pop	{r7, pc}
 8001512:	bf00      	nop
 8001514:	200013dc 	.word	0x200013dc

08001518 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b086      	sub	sp, #24
 800151c:	af00      	add	r7, sp, #0
 800151e:	60f8      	str	r0, [r7, #12]
 8001520:	60b9      	str	r1, [r7, #8]
 8001522:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001524:	2300      	movs	r3, #0
 8001526:	617b      	str	r3, [r7, #20]
 8001528:	e00a      	b.n	8001540 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800152a:	f3af 8000 	nop.w
 800152e:	4601      	mov	r1, r0
 8001530:	68bb      	ldr	r3, [r7, #8]
 8001532:	1c5a      	adds	r2, r3, #1
 8001534:	60ba      	str	r2, [r7, #8]
 8001536:	b2ca      	uxtb	r2, r1
 8001538:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800153a:	697b      	ldr	r3, [r7, #20]
 800153c:	3301      	adds	r3, #1
 800153e:	617b      	str	r3, [r7, #20]
 8001540:	697a      	ldr	r2, [r7, #20]
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	429a      	cmp	r2, r3
 8001546:	dbf0      	blt.n	800152a <_read+0x12>
	}

return len;
 8001548:	687b      	ldr	r3, [r7, #4]
}
 800154a:	4618      	mov	r0, r3
 800154c:	3718      	adds	r7, #24
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}

08001552 <_close>:
	}
	return len;
}

int _close(int file)
{
 8001552:	b480      	push	{r7}
 8001554:	b083      	sub	sp, #12
 8001556:	af00      	add	r7, sp, #0
 8001558:	6078      	str	r0, [r7, #4]
	return -1;
 800155a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800155e:	4618      	mov	r0, r3
 8001560:	370c      	adds	r7, #12
 8001562:	46bd      	mov	sp, r7
 8001564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001568:	4770      	bx	lr

0800156a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800156a:	b480      	push	{r7}
 800156c:	b083      	sub	sp, #12
 800156e:	af00      	add	r7, sp, #0
 8001570:	6078      	str	r0, [r7, #4]
 8001572:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800157a:	605a      	str	r2, [r3, #4]
	return 0;
 800157c:	2300      	movs	r3, #0
}
 800157e:	4618      	mov	r0, r3
 8001580:	370c      	adds	r7, #12
 8001582:	46bd      	mov	sp, r7
 8001584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001588:	4770      	bx	lr

0800158a <_isatty>:

int _isatty(int file)
{
 800158a:	b480      	push	{r7}
 800158c:	b083      	sub	sp, #12
 800158e:	af00      	add	r7, sp, #0
 8001590:	6078      	str	r0, [r7, #4]
	return 1;
 8001592:	2301      	movs	r3, #1
}
 8001594:	4618      	mov	r0, r3
 8001596:	370c      	adds	r7, #12
 8001598:	46bd      	mov	sp, r7
 800159a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159e:	4770      	bx	lr

080015a0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80015a0:	b480      	push	{r7}
 80015a2:	b085      	sub	sp, #20
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	60f8      	str	r0, [r7, #12]
 80015a8:	60b9      	str	r1, [r7, #8]
 80015aa:	607a      	str	r2, [r7, #4]
	return 0;
 80015ac:	2300      	movs	r3, #0
}
 80015ae:	4618      	mov	r0, r3
 80015b0:	3714      	adds	r7, #20
 80015b2:	46bd      	mov	sp, r7
 80015b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b8:	4770      	bx	lr
	...

080015bc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b086      	sub	sp, #24
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80015c4:	4a14      	ldr	r2, [pc, #80]	; (8001618 <_sbrk+0x5c>)
 80015c6:	4b15      	ldr	r3, [pc, #84]	; (800161c <_sbrk+0x60>)
 80015c8:	1ad3      	subs	r3, r2, r3
 80015ca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80015cc:	697b      	ldr	r3, [r7, #20]
 80015ce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80015d0:	4b13      	ldr	r3, [pc, #76]	; (8001620 <_sbrk+0x64>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d102      	bne.n	80015de <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80015d8:	4b11      	ldr	r3, [pc, #68]	; (8001620 <_sbrk+0x64>)
 80015da:	4a12      	ldr	r2, [pc, #72]	; (8001624 <_sbrk+0x68>)
 80015dc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80015de:	4b10      	ldr	r3, [pc, #64]	; (8001620 <_sbrk+0x64>)
 80015e0:	681a      	ldr	r2, [r3, #0]
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	4413      	add	r3, r2
 80015e6:	693a      	ldr	r2, [r7, #16]
 80015e8:	429a      	cmp	r2, r3
 80015ea:	d207      	bcs.n	80015fc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80015ec:	f008 f892 	bl	8009714 <__errno>
 80015f0:	4603      	mov	r3, r0
 80015f2:	220c      	movs	r2, #12
 80015f4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80015f6:	f04f 33ff 	mov.w	r3, #4294967295
 80015fa:	e009      	b.n	8001610 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80015fc:	4b08      	ldr	r3, [pc, #32]	; (8001620 <_sbrk+0x64>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001602:	4b07      	ldr	r3, [pc, #28]	; (8001620 <_sbrk+0x64>)
 8001604:	681a      	ldr	r2, [r3, #0]
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	4413      	add	r3, r2
 800160a:	4a05      	ldr	r2, [pc, #20]	; (8001620 <_sbrk+0x64>)
 800160c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800160e:	68fb      	ldr	r3, [r7, #12]
}
 8001610:	4618      	mov	r0, r3
 8001612:	3718      	adds	r7, #24
 8001614:	46bd      	mov	sp, r7
 8001616:	bd80      	pop	{r7, pc}
 8001618:	20030000 	.word	0x20030000
 800161c:	00000400 	.word	0x00000400
 8001620:	20000228 	.word	0x20000228
 8001624:	200014e8 	.word	0x200014e8

08001628 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001628:	b480      	push	{r7}
 800162a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 800162c:	4b24      	ldr	r3, [pc, #144]	; (80016c0 <SystemInit+0x98>)
 800162e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001632:	4a23      	ldr	r2, [pc, #140]	; (80016c0 <SystemInit+0x98>)
 8001634:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001638:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800163c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001646:	f043 0301 	orr.w	r3, r3, #1
 800164a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 800164c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001650:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8001654:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8001656:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800165a:	681a      	ldr	r2, [r3, #0]
 800165c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001660:	4b18      	ldr	r3, [pc, #96]	; (80016c4 <SystemInit+0x9c>)
 8001662:	4013      	ands	r3, r2
 8001664:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8001666:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800166a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800166e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001672:	f023 0305 	bic.w	r3, r3, #5
 8001676:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 800167a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800167e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001682:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001686:	f023 0301 	bic.w	r3, r3, #1
 800168a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
    
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 800168e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001692:	4a0d      	ldr	r2, [pc, #52]	; (80016c8 <SystemInit+0xa0>)
 8001694:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8001696:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800169a:	4a0b      	ldr	r2, [pc, #44]	; (80016c8 <SystemInit+0xa0>)
 800169c:	611a      	str	r2, [r3, #16]
#endif
  
  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800169e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80016a8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016ac:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80016ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016b2:	2200      	movs	r2, #0
 80016b4:	619a      	str	r2, [r3, #24]
}
 80016b6:	bf00      	nop
 80016b8:	46bd      	mov	sp, r7
 80016ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016be:	4770      	bx	lr
 80016c0:	e000ed00 	.word	0xe000ed00
 80016c4:	faf6fefb 	.word	0xfaf6fefb
 80016c8:	22041000 	.word	0x22041000

080016cc <LL_AHB2_GRP1_EnableClock>:
{
 80016cc:	b480      	push	{r7}
 80016ce:	b085      	sub	sp, #20
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80016d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016d8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80016da:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	4313      	orrs	r3, r2
 80016e2:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80016e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016e8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	4013      	ands	r3, r2
 80016ee:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80016f0:	68fb      	ldr	r3, [r7, #12]
}
 80016f2:	bf00      	nop
 80016f4:	3714      	adds	r7, #20
 80016f6:	46bd      	mov	sp, r7
 80016f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fc:	4770      	bx	lr

080016fe <LL_APB2_GRP1_EnableClock>:
{
 80016fe:	b480      	push	{r7}
 8001700:	b085      	sub	sp, #20
 8001702:	af00      	add	r7, sp, #0
 8001704:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8001706:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800170a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800170c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	4313      	orrs	r3, r2
 8001714:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001716:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800171a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	4013      	ands	r3, r2
 8001720:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001722:	68fb      	ldr	r3, [r7, #12]
}
 8001724:	bf00      	nop
 8001726:	3714      	adds	r7, #20
 8001728:	46bd      	mov	sp, r7
 800172a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172e:	4770      	bx	lr

08001730 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001734:	4b22      	ldr	r3, [pc, #136]	; (80017c0 <MX_USART1_UART_Init+0x90>)
 8001736:	4a23      	ldr	r2, [pc, #140]	; (80017c4 <MX_USART1_UART_Init+0x94>)
 8001738:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800173a:	4b21      	ldr	r3, [pc, #132]	; (80017c0 <MX_USART1_UART_Init+0x90>)
 800173c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001740:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001742:	4b1f      	ldr	r3, [pc, #124]	; (80017c0 <MX_USART1_UART_Init+0x90>)
 8001744:	2200      	movs	r2, #0
 8001746:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001748:	4b1d      	ldr	r3, [pc, #116]	; (80017c0 <MX_USART1_UART_Init+0x90>)
 800174a:	2200      	movs	r2, #0
 800174c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800174e:	4b1c      	ldr	r3, [pc, #112]	; (80017c0 <MX_USART1_UART_Init+0x90>)
 8001750:	2200      	movs	r2, #0
 8001752:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001754:	4b1a      	ldr	r3, [pc, #104]	; (80017c0 <MX_USART1_UART_Init+0x90>)
 8001756:	220c      	movs	r2, #12
 8001758:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800175a:	4b19      	ldr	r3, [pc, #100]	; (80017c0 <MX_USART1_UART_Init+0x90>)
 800175c:	2200      	movs	r2, #0
 800175e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001760:	4b17      	ldr	r3, [pc, #92]	; (80017c0 <MX_USART1_UART_Init+0x90>)
 8001762:	2200      	movs	r2, #0
 8001764:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001766:	4b16      	ldr	r3, [pc, #88]	; (80017c0 <MX_USART1_UART_Init+0x90>)
 8001768:	2200      	movs	r2, #0
 800176a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800176c:	4b14      	ldr	r3, [pc, #80]	; (80017c0 <MX_USART1_UART_Init+0x90>)
 800176e:	2200      	movs	r2, #0
 8001770:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001772:	4b13      	ldr	r3, [pc, #76]	; (80017c0 <MX_USART1_UART_Init+0x90>)
 8001774:	2200      	movs	r2, #0
 8001776:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001778:	4811      	ldr	r0, [pc, #68]	; (80017c0 <MX_USART1_UART_Init+0x90>)
 800177a:	f002 ffd2 	bl	8004722 <HAL_UART_Init>
 800177e:	4603      	mov	r3, r0
 8001780:	2b00      	cmp	r3, #0
 8001782:	d001      	beq.n	8001788 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001784:	f7ff fdce 	bl	8001324 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001788:	2100      	movs	r1, #0
 800178a:	480d      	ldr	r0, [pc, #52]	; (80017c0 <MX_USART1_UART_Init+0x90>)
 800178c:	f004 f979 	bl	8005a82 <HAL_UARTEx_SetTxFifoThreshold>
 8001790:	4603      	mov	r3, r0
 8001792:	2b00      	cmp	r3, #0
 8001794:	d001      	beq.n	800179a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001796:	f7ff fdc5 	bl	8001324 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800179a:	2100      	movs	r1, #0
 800179c:	4808      	ldr	r0, [pc, #32]	; (80017c0 <MX_USART1_UART_Init+0x90>)
 800179e:	f004 f9ae 	bl	8005afe <HAL_UARTEx_SetRxFifoThreshold>
 80017a2:	4603      	mov	r3, r0
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d001      	beq.n	80017ac <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80017a8:	f7ff fdbc 	bl	8001324 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80017ac:	4804      	ldr	r0, [pc, #16]	; (80017c0 <MX_USART1_UART_Init+0x90>)
 80017ae:	f004 f92f 	bl	8005a10 <HAL_UARTEx_DisableFifoMode>
 80017b2:	4603      	mov	r3, r0
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d001      	beq.n	80017bc <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80017b8:	f7ff fdb4 	bl	8001324 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80017bc:	bf00      	nop
 80017be:	bd80      	pop	{r7, pc}
 80017c0:	2000143c 	.word	0x2000143c
 80017c4:	40013800 	.word	0x40013800

080017c8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b088      	sub	sp, #32
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017d0:	f107 030c 	add.w	r3, r7, #12
 80017d4:	2200      	movs	r2, #0
 80017d6:	601a      	str	r2, [r3, #0]
 80017d8:	605a      	str	r2, [r3, #4]
 80017da:	609a      	str	r2, [r3, #8]
 80017dc:	60da      	str	r2, [r3, #12]
 80017de:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	4a27      	ldr	r2, [pc, #156]	; (8001884 <HAL_UART_MspInit+0xbc>)
 80017e6:	4293      	cmp	r3, r2
 80017e8:	d147      	bne.n	800187a <HAL_UART_MspInit+0xb2>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80017ea:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80017ee:	f7ff ff86 	bl	80016fe <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017f2:	2002      	movs	r0, #2
 80017f4:	f7ff ff6a 	bl	80016cc <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 80017f8:	23c0      	movs	r3, #192	; 0xc0
 80017fa:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017fc:	2302      	movs	r3, #2
 80017fe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001800:	2300      	movs	r3, #0
 8001802:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001804:	2300      	movs	r3, #0
 8001806:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001808:	2307      	movs	r3, #7
 800180a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800180c:	f107 030c 	add.w	r3, r7, #12
 8001810:	4619      	mov	r1, r3
 8001812:	481d      	ldr	r0, [pc, #116]	; (8001888 <HAL_UART_MspInit+0xc0>)
 8001814:	f000 fdc2 	bl	800239c <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Channel4;
 8001818:	4b1c      	ldr	r3, [pc, #112]	; (800188c <HAL_UART_MspInit+0xc4>)
 800181a:	4a1d      	ldr	r2, [pc, #116]	; (8001890 <HAL_UART_MspInit+0xc8>)
 800181c:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 800181e:	4b1b      	ldr	r3, [pc, #108]	; (800188c <HAL_UART_MspInit+0xc4>)
 8001820:	220f      	movs	r2, #15
 8001822:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001824:	4b19      	ldr	r3, [pc, #100]	; (800188c <HAL_UART_MspInit+0xc4>)
 8001826:	2210      	movs	r2, #16
 8001828:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800182a:	4b18      	ldr	r3, [pc, #96]	; (800188c <HAL_UART_MspInit+0xc4>)
 800182c:	2200      	movs	r2, #0
 800182e:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001830:	4b16      	ldr	r3, [pc, #88]	; (800188c <HAL_UART_MspInit+0xc4>)
 8001832:	2280      	movs	r2, #128	; 0x80
 8001834:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001836:	4b15      	ldr	r3, [pc, #84]	; (800188c <HAL_UART_MspInit+0xc4>)
 8001838:	2200      	movs	r2, #0
 800183a:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800183c:	4b13      	ldr	r3, [pc, #76]	; (800188c <HAL_UART_MspInit+0xc4>)
 800183e:	2200      	movs	r2, #0
 8001840:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8001842:	4b12      	ldr	r3, [pc, #72]	; (800188c <HAL_UART_MspInit+0xc4>)
 8001844:	2200      	movs	r2, #0
 8001846:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001848:	4b10      	ldr	r3, [pc, #64]	; (800188c <HAL_UART_MspInit+0xc4>)
 800184a:	2200      	movs	r2, #0
 800184c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 800184e:	480f      	ldr	r0, [pc, #60]	; (800188c <HAL_UART_MspInit+0xc4>)
 8001850:	f000 fa72 	bl	8001d38 <HAL_DMA_Init>
 8001854:	4603      	mov	r3, r0
 8001856:	2b00      	cmp	r3, #0
 8001858:	d001      	beq.n	800185e <HAL_UART_MspInit+0x96>
    {
      Error_Handler();
 800185a:	f7ff fd63 	bl	8001324 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	4a0a      	ldr	r2, [pc, #40]	; (800188c <HAL_UART_MspInit+0xc4>)
 8001862:	679a      	str	r2, [r3, #120]	; 0x78
 8001864:	4a09      	ldr	r2, [pc, #36]	; (800188c <HAL_UART_MspInit+0xc4>)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800186a:	2200      	movs	r2, #0
 800186c:	2100      	movs	r1, #0
 800186e:	2024      	movs	r0, #36	; 0x24
 8001870:	f000 fa11 	bl	8001c96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001874:	2024      	movs	r0, #36	; 0x24
 8001876:	f000 fa28 	bl	8001cca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800187a:	bf00      	nop
 800187c:	3720      	adds	r7, #32
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}
 8001882:	bf00      	nop
 8001884:	40013800 	.word	0x40013800
 8001888:	48000400 	.word	0x48000400
 800188c:	200013dc 	.word	0x200013dc
 8001890:	40020444 	.word	0x40020444

08001894 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8001894:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001896:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001898:	3304      	adds	r3, #4

0800189a <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800189a:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800189c:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 800189e:	d3f9      	bcc.n	8001894 <CopyDataInit>
  bx lr
 80018a0:	4770      	bx	lr

080018a2 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 80018a2:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 80018a4:	3004      	adds	r0, #4

080018a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 80018a6:	4288      	cmp	r0, r1
  bcc FillZerobss
 80018a8:	d3fb      	bcc.n	80018a2 <FillZerobss>
  bx lr
 80018aa:	4770      	bx	lr

080018ac <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80018ac:	480c      	ldr	r0, [pc, #48]	; (80018e0 <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 80018ae:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 80018b0:	f7ff feba 	bl	8001628 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 80018b4:	480b      	ldr	r0, [pc, #44]	; (80018e4 <LoopForever+0x8>)
 80018b6:	490c      	ldr	r1, [pc, #48]	; (80018e8 <LoopForever+0xc>)
 80018b8:	4a0c      	ldr	r2, [pc, #48]	; (80018ec <LoopForever+0x10>)
 80018ba:	2300      	movs	r3, #0
 80018bc:	f7ff ffed 	bl	800189a <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 80018c0:	480b      	ldr	r0, [pc, #44]	; (80018f0 <LoopForever+0x14>)
 80018c2:	490c      	ldr	r1, [pc, #48]	; (80018f4 <LoopForever+0x18>)
 80018c4:	2300      	movs	r3, #0
 80018c6:	f7ff ffee 	bl	80018a6 <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 80018ca:	480b      	ldr	r0, [pc, #44]	; (80018f8 <LoopForever+0x1c>)
 80018cc:	490b      	ldr	r1, [pc, #44]	; (80018fc <LoopForever+0x20>)
 80018ce:	2300      	movs	r3, #0
 80018d0:	f7ff ffe9 	bl	80018a6 <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80018d4:	f007 ff24 	bl	8009720 <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 80018d8:	f7ff fc8e 	bl	80011f8 <main>

080018dc <LoopForever>:

LoopForever:
  b LoopForever
 80018dc:	e7fe      	b.n	80018dc <LoopForever>
 80018de:	0000      	.short	0x0000
  ldr   r0, =_estack
 80018e0:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 80018e4:	20000004 	.word	0x20000004
 80018e8:	2000008c 	.word	0x2000008c
 80018ec:	0800ad28 	.word	0x0800ad28
  INIT_BSS _sbss, _ebss
 80018f0:	20000200 	.word	0x20000200
 80018f4:	200014e4 	.word	0x200014e4
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 80018f8:	200301e0 	.word	0x200301e0
 80018fc:	20030a57 	.word	0x20030a57

08001900 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001900:	e7fe      	b.n	8001900 <ADC1_IRQHandler>
	...

08001904 <LL_DBGMCU_EnableDBGSleepMode>:
  * @brief  Enable the Debug Module during SLEEP mode
  * @rmtoll DBGMCU_CR    DBG_SLEEP     LL_DBGMCU_EnableDBGSleepMode
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_EnableDBGSleepMode(void)
{
 8001904:	b480      	push	{r7}
 8001906:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 8001908:	4b05      	ldr	r3, [pc, #20]	; (8001920 <LL_DBGMCU_EnableDBGSleepMode+0x1c>)
 800190a:	685b      	ldr	r3, [r3, #4]
 800190c:	4a04      	ldr	r2, [pc, #16]	; (8001920 <LL_DBGMCU_EnableDBGSleepMode+0x1c>)
 800190e:	f043 0301 	orr.w	r3, r3, #1
 8001912:	6053      	str	r3, [r2, #4]
}
 8001914:	bf00      	nop
 8001916:	46bd      	mov	sp, r7
 8001918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191c:	4770      	bx	lr
 800191e:	bf00      	nop
 8001920:	e0042000 	.word	0xe0042000

08001924 <LL_DBGMCU_EnableDBGStopMode>:
  * @brief  Enable the Debug Module during STOP mode
  * @rmtoll DBGMCU_CR    DBG_STOP      LL_DBGMCU_EnableDBGStopMode
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_EnableDBGStopMode(void)
{
 8001924:	b480      	push	{r7}
 8001926:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 8001928:	4b05      	ldr	r3, [pc, #20]	; (8001940 <LL_DBGMCU_EnableDBGStopMode+0x1c>)
 800192a:	685b      	ldr	r3, [r3, #4]
 800192c:	4a04      	ldr	r2, [pc, #16]	; (8001940 <LL_DBGMCU_EnableDBGStopMode+0x1c>)
 800192e:	f043 0302 	orr.w	r3, r3, #2
 8001932:	6053      	str	r3, [r2, #4]
}
 8001934:	bf00      	nop
 8001936:	46bd      	mov	sp, r7
 8001938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193c:	4770      	bx	lr
 800193e:	bf00      	nop
 8001940:	e0042000 	.word	0xe0042000

08001944 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b082      	sub	sp, #8
 8001948:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800194a:	2300      	movs	r3, #0
 800194c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800194e:	4b0c      	ldr	r3, [pc, #48]	; (8001980 <HAL_Init+0x3c>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	4a0b      	ldr	r2, [pc, #44]	; (8001980 <HAL_Init+0x3c>)
 8001954:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001958:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800195a:	2003      	movs	r0, #3
 800195c:	f000 f990 	bl	8001c80 <HAL_NVIC_SetPriorityGrouping>
  
  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001960:	200f      	movs	r0, #15
 8001962:	f000 f80f 	bl	8001984 <HAL_InitTick>
 8001966:	4603      	mov	r3, r0
 8001968:	2b00      	cmp	r3, #0
 800196a:	d002      	beq.n	8001972 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 800196c:	2301      	movs	r3, #1
 800196e:	71fb      	strb	r3, [r7, #7]
 8001970:	e001      	b.n	8001976 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001972:	f7ff fd70 	bl	8001456 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001976:	79fb      	ldrb	r3, [r7, #7]
}
 8001978:	4618      	mov	r0, r3
 800197a:	3708      	adds	r7, #8
 800197c:	46bd      	mov	sp, r7
 800197e:	bd80      	pop	{r7, pc}
 8001980:	58004000 	.word	0x58004000

08001984 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b084      	sub	sp, #16
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800198c:	2300      	movs	r3, #0
 800198e:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8001990:	4b17      	ldr	r3, [pc, #92]	; (80019f0 <HAL_InitTick+0x6c>)
 8001992:	781b      	ldrb	r3, [r3, #0]
 8001994:	2b00      	cmp	r3, #0
 8001996:	d024      	beq.n	80019e2 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/ (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001998:	f001 fffe 	bl	8003998 <HAL_RCC_GetHCLKFreq>
 800199c:	4602      	mov	r2, r0
 800199e:	4b14      	ldr	r3, [pc, #80]	; (80019f0 <HAL_InitTick+0x6c>)
 80019a0:	781b      	ldrb	r3, [r3, #0]
 80019a2:	4619      	mov	r1, r3
 80019a4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019a8:	fbb3 f3f1 	udiv	r3, r3, r1
 80019ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80019b0:	4618      	mov	r0, r3
 80019b2:	f000 f998 	bl	8001ce6 <HAL_SYSTICK_Config>
 80019b6:	4603      	mov	r3, r0
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d10f      	bne.n	80019dc <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	2b0f      	cmp	r3, #15
 80019c0:	d809      	bhi.n	80019d6 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019c2:	2200      	movs	r2, #0
 80019c4:	6879      	ldr	r1, [r7, #4]
 80019c6:	f04f 30ff 	mov.w	r0, #4294967295
 80019ca:	f000 f964 	bl	8001c96 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80019ce:	4a09      	ldr	r2, [pc, #36]	; (80019f4 <HAL_InitTick+0x70>)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	6013      	str	r3, [r2, #0]
 80019d4:	e007      	b.n	80019e6 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 80019d6:	2301      	movs	r3, #1
 80019d8:	73fb      	strb	r3, [r7, #15]
 80019da:	e004      	b.n	80019e6 <HAL_InitTick+0x62>
      }
    }
    else
    {  
      status = HAL_ERROR;
 80019dc:	2301      	movs	r3, #1
 80019de:	73fb      	strb	r3, [r7, #15]
 80019e0:	e001      	b.n	80019e6 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 80019e2:	2301      	movs	r3, #1
 80019e4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80019e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80019e8:	4618      	mov	r0, r3
 80019ea:	3710      	adds	r7, #16
 80019ec:	46bd      	mov	sp, r7
 80019ee:	bd80      	pop	{r7, pc}
 80019f0:	2000000c 	.word	0x2000000c
 80019f4:	20000008 	.word	0x20000008

080019f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019f8:	b480      	push	{r7}
 80019fa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80019fc:	4b06      	ldr	r3, [pc, #24]	; (8001a18 <HAL_IncTick+0x20>)
 80019fe:	781b      	ldrb	r3, [r3, #0]
 8001a00:	461a      	mov	r2, r3
 8001a02:	4b06      	ldr	r3, [pc, #24]	; (8001a1c <HAL_IncTick+0x24>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	4413      	add	r3, r2
 8001a08:	4a04      	ldr	r2, [pc, #16]	; (8001a1c <HAL_IncTick+0x24>)
 8001a0a:	6013      	str	r3, [r2, #0]
}
 8001a0c:	bf00      	nop
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a14:	4770      	bx	lr
 8001a16:	bf00      	nop
 8001a18:	2000000c 	.word	0x2000000c
 8001a1c:	200014cc 	.word	0x200014cc

08001a20 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a20:	b480      	push	{r7}
 8001a22:	af00      	add	r7, sp, #0
  return uwTick;
 8001a24:	4b03      	ldr	r3, [pc, #12]	; (8001a34 <HAL_GetTick+0x14>)
 8001a26:	681b      	ldr	r3, [r3, #0]
}
 8001a28:	4618      	mov	r0, r3
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a30:	4770      	bx	lr
 8001a32:	bf00      	nop
 8001a34:	200014cc 	.word	0x200014cc

08001a38 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8001a3c:	4b03      	ldr	r3, [pc, #12]	; (8001a4c <HAL_GetTickPrio+0x14>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
}
 8001a40:	4618      	mov	r0, r3
 8001a42:	46bd      	mov	sp, r7
 8001a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a48:	4770      	bx	lr
 8001a4a:	bf00      	nop
 8001a4c:	20000008 	.word	0x20000008

08001a50 <HAL_DBGMCU_EnableDBGSleepMode>:
/**
  * @brief  Enable the Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGSleepMode();
 8001a54:	f7ff ff56 	bl	8001904 <LL_DBGMCU_EnableDBGSleepMode>
}
 8001a58:	bf00      	nop
 8001a5a:	bd80      	pop	{r7, pc}

08001a5c <HAL_DBGMCU_EnableDBGStopMode>:
/**
  * @brief  Enable the Debug Module during STOP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStopMode(void)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGStopMode();
 8001a60:	f7ff ff60 	bl	8001924 <LL_DBGMCU_EnableDBGStopMode>
}
 8001a64:	bf00      	nop
 8001a66:	bd80      	pop	{r7, pc}

08001a68 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	b085      	sub	sp, #20
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	f003 0307 	and.w	r3, r3, #7
 8001a76:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a78:	4b0c      	ldr	r3, [pc, #48]	; (8001aac <__NVIC_SetPriorityGrouping+0x44>)
 8001a7a:	68db      	ldr	r3, [r3, #12]
 8001a7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a7e:	68ba      	ldr	r2, [r7, #8]
 8001a80:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a84:	4013      	ands	r3, r2
 8001a86:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a8c:	68bb      	ldr	r3, [r7, #8]
 8001a8e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a90:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a9a:	4a04      	ldr	r2, [pc, #16]	; (8001aac <__NVIC_SetPriorityGrouping+0x44>)
 8001a9c:	68bb      	ldr	r3, [r7, #8]
 8001a9e:	60d3      	str	r3, [r2, #12]
}
 8001aa0:	bf00      	nop
 8001aa2:	3714      	adds	r7, #20
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aaa:	4770      	bx	lr
 8001aac:	e000ed00 	.word	0xe000ed00

08001ab0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ab4:	4b04      	ldr	r3, [pc, #16]	; (8001ac8 <__NVIC_GetPriorityGrouping+0x18>)
 8001ab6:	68db      	ldr	r3, [r3, #12]
 8001ab8:	0a1b      	lsrs	r3, r3, #8
 8001aba:	f003 0307 	and.w	r3, r3, #7
}
 8001abe:	4618      	mov	r0, r3
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac6:	4770      	bx	lr
 8001ac8:	e000ed00 	.word	0xe000ed00

08001acc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001acc:	b480      	push	{r7}
 8001ace:	b083      	sub	sp, #12
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ad6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	db0b      	blt.n	8001af6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ade:	79fb      	ldrb	r3, [r7, #7]
 8001ae0:	f003 021f 	and.w	r2, r3, #31
 8001ae4:	4907      	ldr	r1, [pc, #28]	; (8001b04 <__NVIC_EnableIRQ+0x38>)
 8001ae6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aea:	095b      	lsrs	r3, r3, #5
 8001aec:	2001      	movs	r0, #1
 8001aee:	fa00 f202 	lsl.w	r2, r0, r2
 8001af2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001af6:	bf00      	nop
 8001af8:	370c      	adds	r7, #12
 8001afa:	46bd      	mov	sp, r7
 8001afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b00:	4770      	bx	lr
 8001b02:	bf00      	nop
 8001b04:	e000e100 	.word	0xe000e100

08001b08 <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	b083      	sub	sp, #12
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	4603      	mov	r3, r0
 8001b10:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	db0c      	blt.n	8001b34 <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b1a:	79fb      	ldrb	r3, [r7, #7]
 8001b1c:	f003 021f 	and.w	r2, r3, #31
 8001b20:	4907      	ldr	r1, [pc, #28]	; (8001b40 <__NVIC_SetPendingIRQ+0x38>)
 8001b22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b26:	095b      	lsrs	r3, r3, #5
 8001b28:	2001      	movs	r0, #1
 8001b2a:	fa00 f202 	lsl.w	r2, r0, r2
 8001b2e:	3340      	adds	r3, #64	; 0x40
 8001b30:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001b34:	bf00      	nop
 8001b36:	370c      	adds	r7, #12
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3e:	4770      	bx	lr
 8001b40:	e000e100 	.word	0xe000e100

08001b44 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8001b44:	b480      	push	{r7}
 8001b46:	b083      	sub	sp, #12
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	db0c      	blt.n	8001b70 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b56:	79fb      	ldrb	r3, [r7, #7]
 8001b58:	f003 021f 	and.w	r2, r3, #31
 8001b5c:	4907      	ldr	r1, [pc, #28]	; (8001b7c <__NVIC_ClearPendingIRQ+0x38>)
 8001b5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b62:	095b      	lsrs	r3, r3, #5
 8001b64:	2001      	movs	r0, #1
 8001b66:	fa00 f202 	lsl.w	r2, r0, r2
 8001b6a:	3360      	adds	r3, #96	; 0x60
 8001b6c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001b70:	bf00      	nop
 8001b72:	370c      	adds	r7, #12
 8001b74:	46bd      	mov	sp, r7
 8001b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7a:	4770      	bx	lr
 8001b7c:	e000e100 	.word	0xe000e100

08001b80 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b80:	b480      	push	{r7}
 8001b82:	b083      	sub	sp, #12
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	4603      	mov	r3, r0
 8001b88:	6039      	str	r1, [r7, #0]
 8001b8a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	db0a      	blt.n	8001baa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	b2da      	uxtb	r2, r3
 8001b98:	490c      	ldr	r1, [pc, #48]	; (8001bcc <__NVIC_SetPriority+0x4c>)
 8001b9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b9e:	0112      	lsls	r2, r2, #4
 8001ba0:	b2d2      	uxtb	r2, r2
 8001ba2:	440b      	add	r3, r1
 8001ba4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ba8:	e00a      	b.n	8001bc0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	b2da      	uxtb	r2, r3
 8001bae:	4908      	ldr	r1, [pc, #32]	; (8001bd0 <__NVIC_SetPriority+0x50>)
 8001bb0:	79fb      	ldrb	r3, [r7, #7]
 8001bb2:	f003 030f 	and.w	r3, r3, #15
 8001bb6:	3b04      	subs	r3, #4
 8001bb8:	0112      	lsls	r2, r2, #4
 8001bba:	b2d2      	uxtb	r2, r2
 8001bbc:	440b      	add	r3, r1
 8001bbe:	761a      	strb	r2, [r3, #24]
}
 8001bc0:	bf00      	nop
 8001bc2:	370c      	adds	r7, #12
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bca:	4770      	bx	lr
 8001bcc:	e000e100 	.word	0xe000e100
 8001bd0:	e000ed00 	.word	0xe000ed00

08001bd4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	b089      	sub	sp, #36	; 0x24
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	60f8      	str	r0, [r7, #12]
 8001bdc:	60b9      	str	r1, [r7, #8]
 8001bde:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	f003 0307 	and.w	r3, r3, #7
 8001be6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001be8:	69fb      	ldr	r3, [r7, #28]
 8001bea:	f1c3 0307 	rsb	r3, r3, #7
 8001bee:	2b04      	cmp	r3, #4
 8001bf0:	bf28      	it	cs
 8001bf2:	2304      	movcs	r3, #4
 8001bf4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001bf6:	69fb      	ldr	r3, [r7, #28]
 8001bf8:	3304      	adds	r3, #4
 8001bfa:	2b06      	cmp	r3, #6
 8001bfc:	d902      	bls.n	8001c04 <NVIC_EncodePriority+0x30>
 8001bfe:	69fb      	ldr	r3, [r7, #28]
 8001c00:	3b03      	subs	r3, #3
 8001c02:	e000      	b.n	8001c06 <NVIC_EncodePriority+0x32>
 8001c04:	2300      	movs	r3, #0
 8001c06:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c08:	f04f 32ff 	mov.w	r2, #4294967295
 8001c0c:	69bb      	ldr	r3, [r7, #24]
 8001c0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c12:	43da      	mvns	r2, r3
 8001c14:	68bb      	ldr	r3, [r7, #8]
 8001c16:	401a      	ands	r2, r3
 8001c18:	697b      	ldr	r3, [r7, #20]
 8001c1a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c1c:	f04f 31ff 	mov.w	r1, #4294967295
 8001c20:	697b      	ldr	r3, [r7, #20]
 8001c22:	fa01 f303 	lsl.w	r3, r1, r3
 8001c26:	43d9      	mvns	r1, r3
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c2c:	4313      	orrs	r3, r2
         );
}
 8001c2e:	4618      	mov	r0, r3
 8001c30:	3724      	adds	r7, #36	; 0x24
 8001c32:	46bd      	mov	sp, r7
 8001c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c38:	4770      	bx	lr
	...

08001c3c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b082      	sub	sp, #8
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	3b01      	subs	r3, #1
 8001c48:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c4c:	d301      	bcc.n	8001c52 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c4e:	2301      	movs	r3, #1
 8001c50:	e00f      	b.n	8001c72 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c52:	4a0a      	ldr	r2, [pc, #40]	; (8001c7c <SysTick_Config+0x40>)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	3b01      	subs	r3, #1
 8001c58:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c5a:	210f      	movs	r1, #15
 8001c5c:	f04f 30ff 	mov.w	r0, #4294967295
 8001c60:	f7ff ff8e 	bl	8001b80 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c64:	4b05      	ldr	r3, [pc, #20]	; (8001c7c <SysTick_Config+0x40>)
 8001c66:	2200      	movs	r2, #0
 8001c68:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c6a:	4b04      	ldr	r3, [pc, #16]	; (8001c7c <SysTick_Config+0x40>)
 8001c6c:	2207      	movs	r2, #7
 8001c6e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c70:	2300      	movs	r3, #0
}
 8001c72:	4618      	mov	r0, r3
 8001c74:	3708      	adds	r7, #8
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bd80      	pop	{r7, pc}
 8001c7a:	bf00      	nop
 8001c7c:	e000e010 	.word	0xe000e010

08001c80 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b082      	sub	sp, #8
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c88:	6878      	ldr	r0, [r7, #4]
 8001c8a:	f7ff feed 	bl	8001a68 <__NVIC_SetPriorityGrouping>
}
 8001c8e:	bf00      	nop
 8001c90:	3708      	adds	r7, #8
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd80      	pop	{r7, pc}

08001c96 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c96:	b580      	push	{r7, lr}
 8001c98:	b086      	sub	sp, #24
 8001c9a:	af00      	add	r7, sp, #0
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	60b9      	str	r1, [r7, #8]
 8001ca0:	607a      	str	r2, [r7, #4]
 8001ca2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001ca4:	f7ff ff04 	bl	8001ab0 <__NVIC_GetPriorityGrouping>
 8001ca8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001caa:	687a      	ldr	r2, [r7, #4]
 8001cac:	68b9      	ldr	r1, [r7, #8]
 8001cae:	6978      	ldr	r0, [r7, #20]
 8001cb0:	f7ff ff90 	bl	8001bd4 <NVIC_EncodePriority>
 8001cb4:	4602      	mov	r2, r0
 8001cb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cba:	4611      	mov	r1, r2
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	f7ff ff5f 	bl	8001b80 <__NVIC_SetPriority>
}
 8001cc2:	bf00      	nop
 8001cc4:	3718      	adds	r7, #24
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bd80      	pop	{r7, pc}

08001cca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cca:	b580      	push	{r7, lr}
 8001ccc:	b082      	sub	sp, #8
 8001cce:	af00      	add	r7, sp, #0
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001cd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cd8:	4618      	mov	r0, r3
 8001cda:	f7ff fef7 	bl	8001acc <__NVIC_EnableIRQ>
}
 8001cde:	bf00      	nop
 8001ce0:	3708      	adds	r7, #8
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}

08001ce6 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ce6:	b580      	push	{r7, lr}
 8001ce8:	b082      	sub	sp, #8
 8001cea:	af00      	add	r7, sp, #0
 8001cec:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001cee:	6878      	ldr	r0, [r7, #4]
 8001cf0:	f7ff ffa4 	bl	8001c3c <SysTick_Config>
 8001cf4:	4603      	mov	r3, r0
}
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	3708      	adds	r7, #8
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bd80      	pop	{r7, pc}

08001cfe <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8001cfe:	b580      	push	{r7, lr}
 8001d00:	b082      	sub	sp, #8
 8001d02:	af00      	add	r7, sp, #0
 8001d04:	4603      	mov	r3, r0
 8001d06:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 8001d08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	f7ff fefb 	bl	8001b08 <__NVIC_SetPendingIRQ>
}
 8001d12:	bf00      	nop
 8001d14:	3708      	adds	r7, #8
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd80      	pop	{r7, pc}

08001d1a <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8001d1a:	b580      	push	{r7, lr}
 8001d1c:	b082      	sub	sp, #8
 8001d1e:	af00      	add	r7, sp, #0
 8001d20:	4603      	mov	r3, r0
 8001d22:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8001d24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d28:	4618      	mov	r0, r3
 8001d2a:	f7ff ff0b 	bl	8001b44 <__NVIC_ClearPendingIRQ>
}
 8001d2e:	bf00      	nop
 8001d30:	3708      	adds	r7, #8
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bd80      	pop	{r7, pc}
	...

08001d38 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b084      	sub	sp, #16
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d101      	bne.n	8001d4a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001d46:	2301      	movs	r3, #1
 8001d48:	e08e      	b.n	8001e68 <HAL_DMA_Init+0x130>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

#if defined(DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	461a      	mov	r2, r3
 8001d50:	4b47      	ldr	r3, [pc, #284]	; (8001e70 <HAL_DMA_Init+0x138>)
 8001d52:	429a      	cmp	r2, r3
 8001d54:	d80f      	bhi.n	8001d76 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	461a      	mov	r2, r3
 8001d5c:	4b45      	ldr	r3, [pc, #276]	; (8001e74 <HAL_DMA_Init+0x13c>)
 8001d5e:	4413      	add	r3, r2
 8001d60:	4a45      	ldr	r2, [pc, #276]	; (8001e78 <HAL_DMA_Init+0x140>)
 8001d62:	fba2 2303 	umull	r2, r3, r2, r3
 8001d66:	091b      	lsrs	r3, r3, #4
 8001d68:	009a      	lsls	r2, r3, #2
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	4a42      	ldr	r2, [pc, #264]	; (8001e7c <HAL_DMA_Init+0x144>)
 8001d72:	641a      	str	r2, [r3, #64]	; 0x40
 8001d74:	e00e      	b.n	8001d94 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	461a      	mov	r2, r3
 8001d7c:	4b40      	ldr	r3, [pc, #256]	; (8001e80 <HAL_DMA_Init+0x148>)
 8001d7e:	4413      	add	r3, r2
 8001d80:	4a3d      	ldr	r2, [pc, #244]	; (8001e78 <HAL_DMA_Init+0x140>)
 8001d82:	fba2 2303 	umull	r2, r3, r2, r3
 8001d86:	091b      	lsrs	r3, r3, #4
 8001d88:	009a      	lsls	r2, r3, #2
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	4a3c      	ldr	r2, [pc, #240]	; (8001e84 <HAL_DMA_Init+0x14c>)
 8001d92:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	2202      	movs	r2, #2
 8001d98:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8001daa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001dae:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001db8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	691b      	ldr	r3, [r3, #16]
 8001dbe:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001dc4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	699b      	ldr	r3, [r3, #24]
 8001dca:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001dd0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	6a1b      	ldr	r3, [r3, #32]
 8001dd6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001dd8:	68fa      	ldr	r2, [r7, #12]
 8001dda:	4313      	orrs	r3, r2
 8001ddc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	68fa      	ldr	r2, [r7, #12]
 8001de4:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001de6:	6878      	ldr	r0, [r7, #4]
 8001de8:	f000 fa74 	bl	80022d4 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	689b      	ldr	r3, [r3, #8]
 8001df0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001df4:	d102      	bne.n	8001dfc <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	2200      	movs	r2, #0
 8001dfa:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	685a      	ldr	r2, [r3, #4]
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e04:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8001e08:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e0e:	687a      	ldr	r2, [r7, #4]
 8001e10:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001e12:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d010      	beq.n	8001e3e <HAL_DMA_Init+0x106>
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	2b04      	cmp	r3, #4
 8001e22:	d80c      	bhi.n	8001e3e <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001e24:	6878      	ldr	r0, [r7, #4]
 8001e26:	f000 fa93 	bl	8002350 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e2e:	2200      	movs	r2, #0
 8001e30:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e36:	687a      	ldr	r2, [r7, #4]
 8001e38:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001e3a:	605a      	str	r2, [r3, #4]
 8001e3c:	e008      	b.n	8001e50 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	2200      	movs	r2, #0
 8001e42:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	2200      	movs	r2, #0
 8001e48:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2200      	movs	r2, #0
 8001e54:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	2201      	movs	r2, #1
 8001e5a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	2200      	movs	r2, #0
 8001e62:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8001e66:	2300      	movs	r3, #0
}
 8001e68:	4618      	mov	r0, r3
 8001e6a:	3710      	adds	r7, #16
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	bd80      	pop	{r7, pc}
 8001e70:	40020407 	.word	0x40020407
 8001e74:	bffdfff8 	.word	0xbffdfff8
 8001e78:	cccccccd 	.word	0xcccccccd
 8001e7c:	40020000 	.word	0x40020000
 8001e80:	bffdfbf8 	.word	0xbffdfbf8
 8001e84:	40020400 	.word	0x40020400

08001e88 <HAL_DMA_Start_IT>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b086      	sub	sp, #24
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	60f8      	str	r0, [r7, #12]
 8001e90:	60b9      	str	r1, [r7, #8]
 8001e92:	607a      	str	r2, [r7, #4]
 8001e94:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001e96:	2300      	movs	r3, #0
 8001e98:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001ea0:	2b01      	cmp	r3, #1
 8001ea2:	d101      	bne.n	8001ea8 <HAL_DMA_Start_IT+0x20>
 8001ea4:	2302      	movs	r3, #2
 8001ea6:	e066      	b.n	8001f76 <HAL_DMA_Start_IT+0xee>
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	2201      	movs	r2, #1
 8001eac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001eb6:	b2db      	uxtb	r3, r3
 8001eb8:	2b01      	cmp	r3, #1
 8001eba:	d155      	bne.n	8001f68 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	2202      	movs	r2, #2
 8001ec0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	681a      	ldr	r2, [r3, #0]
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f022 0201 	bic.w	r2, r2, #1
 8001ed8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	687a      	ldr	r2, [r7, #4]
 8001ede:	68b9      	ldr	r1, [r7, #8]
 8001ee0:	68f8      	ldr	r0, [r7, #12]
 8001ee2:	f000 f9b9 	bl	8002258 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d008      	beq.n	8001f00 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	681a      	ldr	r2, [r3, #0]
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f042 020e 	orr.w	r2, r2, #14
 8001efc:	601a      	str	r2, [r3, #0]
 8001efe:	e00f      	b.n	8001f20 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	681a      	ldr	r2, [r3, #0]
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f022 0204 	bic.w	r2, r2, #4
 8001f0e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	681a      	ldr	r2, [r3, #0]
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f042 020a 	orr.w	r2, r2, #10
 8001f1e:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d007      	beq.n	8001f3e <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f32:	681a      	ldr	r2, [r3, #0]
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f38:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001f3c:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d007      	beq.n	8001f56 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f4a:	681a      	ldr	r2, [r3, #0]
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f50:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001f54:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	681a      	ldr	r2, [r3, #0]
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f042 0201 	orr.w	r2, r2, #1
 8001f64:	601a      	str	r2, [r3, #0]
 8001f66:	e005      	b.n	8001f74 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8001f70:	2302      	movs	r3, #2
 8001f72:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8001f74:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f76:	4618      	mov	r0, r3
 8001f78:	3718      	adds	r7, #24
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bd80      	pop	{r7, pc}

08001f7e <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001f7e:	b480      	push	{r7}
 8001f80:	b083      	sub	sp, #12
 8001f82:	af00      	add	r7, sp, #0
 8001f84:	6078      	str	r0, [r7, #4]

  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d101      	bne.n	8001f90 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8001f8c:	2301      	movs	r3, #1
 8001f8e:	e04f      	b.n	8002030 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001f96:	b2db      	uxtb	r3, r3
 8001f98:	2b02      	cmp	r3, #2
 8001f9a:	d008      	beq.n	8001fae <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	2204      	movs	r2, #4
 8001fa0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001faa:	2301      	movs	r3, #1
 8001fac:	e040      	b.n	8002030 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	681a      	ldr	r2, [r3, #0]
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f022 020e 	bic.w	r2, r2, #14
 8001fbc:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001fc2:	681a      	ldr	r2, [r3, #0]
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001fc8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001fcc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	681a      	ldr	r2, [r3, #0]
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f022 0201 	bic.w	r2, r2, #1
 8001fdc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fe2:	f003 021c 	and.w	r2, r3, #28
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fea:	2101      	movs	r1, #1
 8001fec:	fa01 f202 	lsl.w	r2, r1, r2
 8001ff0:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ff6:	687a      	ldr	r2, [r7, #4]
 8001ff8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001ffa:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002000:	2b00      	cmp	r3, #0
 8002002:	d00c      	beq.n	800201e <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002008:	681a      	ldr	r2, [r3, #0]
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800200e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002012:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002018:	687a      	ldr	r2, [r7, #4]
 800201a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800201c:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	2201      	movs	r2, #1
 8002022:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	2200      	movs	r2, #0
 800202a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 800202e:	2300      	movs	r3, #0
}
 8002030:	4618      	mov	r0, r3
 8002032:	370c      	adds	r7, #12
 8002034:	46bd      	mov	sp, r7
 8002036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203a:	4770      	bx	lr

0800203c <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b084      	sub	sp, #16
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002044:	2300      	movs	r3, #0
 8002046:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800204e:	b2db      	uxtb	r3, r3
 8002050:	2b02      	cmp	r3, #2
 8002052:	d005      	beq.n	8002060 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	2204      	movs	r2, #4
 8002058:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800205a:	2301      	movs	r3, #1
 800205c:	73fb      	strb	r3, [r7, #15]
 800205e:	e047      	b.n	80020f0 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	681a      	ldr	r2, [r3, #0]
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f022 020e 	bic.w	r2, r2, #14
 800206e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	681a      	ldr	r2, [r3, #0]
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f022 0201 	bic.w	r2, r2, #1
 800207e:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002084:	681a      	ldr	r2, [r3, #0]
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800208a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800208e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002094:	f003 021c 	and.w	r2, r3, #28
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800209c:	2101      	movs	r1, #1
 800209e:	fa01 f202 	lsl.w	r2, r1, r2
 80020a2:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020a8:	687a      	ldr	r2, [r7, #4]
 80020aa:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80020ac:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d00c      	beq.n	80020d0 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020ba:	681a      	ldr	r2, [r3, #0]
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020c0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80020c4:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020ca:	687a      	ldr	r2, [r7, #4]
 80020cc:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80020ce:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	2201      	movs	r2, #1
 80020d4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2200      	movs	r2, #0
 80020dc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d003      	beq.n	80020f0 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020ec:	6878      	ldr	r0, [r7, #4]
 80020ee:	4798      	blx	r3
    }
  }
  return status;
 80020f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80020f2:	4618      	mov	r0, r3
 80020f4:	3710      	adds	r7, #16
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bd80      	pop	{r7, pc}

080020fa <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80020fa:	b580      	push	{r7, lr}
 80020fc:	b084      	sub	sp, #16
 80020fe:	af00      	add	r7, sp, #0
 8002100:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002116:	f003 031c 	and.w	r3, r3, #28
 800211a:	2204      	movs	r2, #4
 800211c:	409a      	lsls	r2, r3
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	4013      	ands	r3, r2
 8002122:	2b00      	cmp	r3, #0
 8002124:	d026      	beq.n	8002174 <HAL_DMA_IRQHandler+0x7a>
 8002126:	68bb      	ldr	r3, [r7, #8]
 8002128:	f003 0304 	and.w	r3, r3, #4
 800212c:	2b00      	cmp	r3, #0
 800212e:	d021      	beq.n	8002174 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f003 0320 	and.w	r3, r3, #32
 800213a:	2b00      	cmp	r3, #0
 800213c:	d107      	bne.n	800214e <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	681a      	ldr	r2, [r3, #0]
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f022 0204 	bic.w	r2, r2, #4
 800214c:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002152:	f003 021c 	and.w	r2, r3, #28
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800215a:	2104      	movs	r1, #4
 800215c:	fa01 f202 	lsl.w	r2, r1, r2
 8002160:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002166:	2b00      	cmp	r3, #0
 8002168:	d071      	beq.n	800224e <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800216e:	6878      	ldr	r0, [r7, #4]
 8002170:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8002172:	e06c      	b.n	800224e <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002178:	f003 031c 	and.w	r3, r3, #28
 800217c:	2202      	movs	r2, #2
 800217e:	409a      	lsls	r2, r3
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	4013      	ands	r3, r2
 8002184:	2b00      	cmp	r3, #0
 8002186:	d02e      	beq.n	80021e6 <HAL_DMA_IRQHandler+0xec>
 8002188:	68bb      	ldr	r3, [r7, #8]
 800218a:	f003 0302 	and.w	r3, r3, #2
 800218e:	2b00      	cmp	r3, #0
 8002190:	d029      	beq.n	80021e6 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f003 0320 	and.w	r3, r3, #32
 800219c:	2b00      	cmp	r3, #0
 800219e:	d10b      	bne.n	80021b8 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	681a      	ldr	r2, [r3, #0]
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f022 020a 	bic.w	r2, r2, #10
 80021ae:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2201      	movs	r2, #1
 80021b4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021bc:	f003 021c 	and.w	r2, r3, #28
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021c4:	2102      	movs	r1, #2
 80021c6:	fa01 f202 	lsl.w	r2, r1, r2
 80021ca:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	2200      	movs	r2, #0
 80021d0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d038      	beq.n	800224e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021e0:	6878      	ldr	r0, [r7, #4]
 80021e2:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80021e4:	e033      	b.n	800224e <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))!= 0U) && ((source_it & DMA_IT_TE) != 0U))
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021ea:	f003 031c 	and.w	r3, r3, #28
 80021ee:	2208      	movs	r2, #8
 80021f0:	409a      	lsls	r2, r3
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	4013      	ands	r3, r2
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d02a      	beq.n	8002250 <HAL_DMA_IRQHandler+0x156>
 80021fa:	68bb      	ldr	r3, [r7, #8]
 80021fc:	f003 0308 	and.w	r3, r3, #8
 8002200:	2b00      	cmp	r3, #0
 8002202:	d025      	beq.n	8002250 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	681a      	ldr	r2, [r3, #0]
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f022 020e 	bic.w	r2, r2, #14
 8002212:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002218:	f003 021c 	and.w	r2, r3, #28
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002220:	2101      	movs	r1, #1
 8002222:	fa01 f202 	lsl.w	r2, r1, r2
 8002226:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	2201      	movs	r2, #1
 800222c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	2201      	movs	r2, #1
 8002232:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	2200      	movs	r2, #0
 800223a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002242:	2b00      	cmp	r3, #0
 8002244:	d004      	beq.n	8002250 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800224a:	6878      	ldr	r0, [r7, #4]
 800224c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800224e:	bf00      	nop
 8002250:	bf00      	nop
}
 8002252:	3710      	adds	r7, #16
 8002254:	46bd      	mov	sp, r7
 8002256:	bd80      	pop	{r7, pc}

08002258 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002258:	b480      	push	{r7}
 800225a:	b085      	sub	sp, #20
 800225c:	af00      	add	r7, sp, #0
 800225e:	60f8      	str	r0, [r7, #12]
 8002260:	60b9      	str	r1, [r7, #8]
 8002262:	607a      	str	r2, [r7, #4]
 8002264:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800226a:	68fa      	ldr	r2, [r7, #12]
 800226c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800226e:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002274:	2b00      	cmp	r3, #0
 8002276:	d004      	beq.n	8002282 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800227c:	68fa      	ldr	r2, [r7, #12]
 800227e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002280:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002286:	f003 021c 	and.w	r2, r3, #28
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800228e:	2101      	movs	r1, #1
 8002290:	fa01 f202 	lsl.w	r2, r1, r2
 8002294:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	683a      	ldr	r2, [r7, #0]
 800229c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	689b      	ldr	r3, [r3, #8]
 80022a2:	2b10      	cmp	r3, #16
 80022a4:	d108      	bne.n	80022b8 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	687a      	ldr	r2, [r7, #4]
 80022ac:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	68ba      	ldr	r2, [r7, #8]
 80022b4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80022b6:	e007      	b.n	80022c8 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	68ba      	ldr	r2, [r7, #8]
 80022be:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	687a      	ldr	r2, [r7, #4]
 80022c6:	60da      	str	r2, [r3, #12]
}
 80022c8:	bf00      	nop
 80022ca:	3714      	adds	r7, #20
 80022cc:	46bd      	mov	sp, r7
 80022ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d2:	4770      	bx	lr

080022d4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80022d4:	b480      	push	{r7}
 80022d6:	b085      	sub	sp, #20
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
#if defined(DMA2)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	461a      	mov	r2, r3
 80022e2:	4b17      	ldr	r3, [pc, #92]	; (8002340 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80022e4:	429a      	cmp	r2, r3
 80022e6:	d80a      	bhi.n	80022fe <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022ec:	089b      	lsrs	r3, r3, #2
 80022ee:	009b      	lsls	r3, r3, #2
 80022f0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80022f4:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 80022f8:	687a      	ldr	r2, [r7, #4]
 80022fa:	6493      	str	r3, [r2, #72]	; 0x48
 80022fc:	e007      	b.n	800230e <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002302:	089b      	lsrs	r3, r3, #2
 8002304:	009a      	lsls	r2, r3, #2
 8002306:	4b0f      	ldr	r3, [pc, #60]	; (8002344 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8002308:	4413      	add	r3, r2
 800230a:	687a      	ldr	r2, [r7, #4]
 800230c:	6493      	str	r3, [r2, #72]	; 0x48
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
#endif
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	b2db      	uxtb	r3, r3
 8002314:	3b08      	subs	r3, #8
 8002316:	4a0c      	ldr	r2, [pc, #48]	; (8002348 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8002318:	fba2 2303 	umull	r2, r3, r2, r3
 800231c:	091b      	lsrs	r3, r3, #4
 800231e:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	4a0a      	ldr	r2, [pc, #40]	; (800234c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8002324:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	f003 031f 	and.w	r3, r3, #31
 800232c:	2201      	movs	r2, #1
 800232e:	409a      	lsls	r2, r3
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002334:	bf00      	nop
 8002336:	3714      	adds	r7, #20
 8002338:	46bd      	mov	sp, r7
 800233a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233e:	4770      	bx	lr
 8002340:	40020407 	.word	0x40020407
 8002344:	4002081c 	.word	0x4002081c
 8002348:	cccccccd 	.word	0xcccccccd
 800234c:	40020880 	.word	0x40020880

08002350 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002350:	b480      	push	{r7}
 8002352:	b085      	sub	sp, #20
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	685b      	ldr	r3, [r3, #4]
 800235c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002360:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002362:	68fa      	ldr	r2, [r7, #12]
 8002364:	4b0b      	ldr	r3, [pc, #44]	; (8002394 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8002366:	4413      	add	r3, r2
 8002368:	009b      	lsls	r3, r3, #2
 800236a:	461a      	mov	r2, r3
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	4a09      	ldr	r2, [pc, #36]	; (8002398 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x48>)
 8002374:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	3b01      	subs	r3, #1
 800237a:	f003 0303 	and.w	r3, r3, #3
 800237e:	2201      	movs	r2, #1
 8002380:	409a      	lsls	r2, r3
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8002386:	bf00      	nop
 8002388:	3714      	adds	r7, #20
 800238a:	46bd      	mov	sp, r7
 800238c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002390:	4770      	bx	lr
 8002392:	bf00      	nop
 8002394:	1000823f 	.word	0x1000823f
 8002398:	40020940 	.word	0x40020940

0800239c <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800239c:	b480      	push	{r7}
 800239e:	b087      	sub	sp, #28
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
 80023a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80023a6:	2300      	movs	r3, #0
 80023a8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80023aa:	e14c      	b.n	8002646 <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	681a      	ldr	r2, [r3, #0]
 80023b0:	2101      	movs	r1, #1
 80023b2:	697b      	ldr	r3, [r7, #20]
 80023b4:	fa01 f303 	lsl.w	r3, r1, r3
 80023b8:	4013      	ands	r3, r2
 80023ba:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	f000 813e 	beq.w	8002640 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	f003 0303 	and.w	r3, r3, #3
 80023cc:	2b01      	cmp	r3, #1
 80023ce:	d005      	beq.n	80023dc <HAL_GPIO_Init+0x40>
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	685b      	ldr	r3, [r3, #4]
 80023d4:	f003 0303 	and.w	r3, r3, #3
 80023d8:	2b02      	cmp	r3, #2
 80023da:	d130      	bne.n	800243e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	689b      	ldr	r3, [r3, #8]
 80023e0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80023e2:	697b      	ldr	r3, [r7, #20]
 80023e4:	005b      	lsls	r3, r3, #1
 80023e6:	2203      	movs	r2, #3
 80023e8:	fa02 f303 	lsl.w	r3, r2, r3
 80023ec:	43db      	mvns	r3, r3
 80023ee:	693a      	ldr	r2, [r7, #16]
 80023f0:	4013      	ands	r3, r2
 80023f2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	68da      	ldr	r2, [r3, #12]
 80023f8:	697b      	ldr	r3, [r7, #20]
 80023fa:	005b      	lsls	r3, r3, #1
 80023fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002400:	693a      	ldr	r2, [r7, #16]
 8002402:	4313      	orrs	r3, r2
 8002404:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	693a      	ldr	r2, [r7, #16]
 800240a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	685b      	ldr	r3, [r3, #4]
 8002410:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002412:	2201      	movs	r2, #1
 8002414:	697b      	ldr	r3, [r7, #20]
 8002416:	fa02 f303 	lsl.w	r3, r2, r3
 800241a:	43db      	mvns	r3, r3
 800241c:	693a      	ldr	r2, [r7, #16]
 800241e:	4013      	ands	r3, r2
 8002420:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	685b      	ldr	r3, [r3, #4]
 8002426:	091b      	lsrs	r3, r3, #4
 8002428:	f003 0201 	and.w	r2, r3, #1
 800242c:	697b      	ldr	r3, [r7, #20]
 800242e:	fa02 f303 	lsl.w	r3, r2, r3
 8002432:	693a      	ldr	r2, [r7, #16]
 8002434:	4313      	orrs	r3, r2
 8002436:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	693a      	ldr	r2, [r7, #16]
 800243c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	685b      	ldr	r3, [r3, #4]
 8002442:	f003 0303 	and.w	r3, r3, #3
 8002446:	2b03      	cmp	r3, #3
 8002448:	d017      	beq.n	800247a <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	68db      	ldr	r3, [r3, #12]
 800244e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002450:	697b      	ldr	r3, [r7, #20]
 8002452:	005b      	lsls	r3, r3, #1
 8002454:	2203      	movs	r2, #3
 8002456:	fa02 f303 	lsl.w	r3, r2, r3
 800245a:	43db      	mvns	r3, r3
 800245c:	693a      	ldr	r2, [r7, #16]
 800245e:	4013      	ands	r3, r2
 8002460:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	689a      	ldr	r2, [r3, #8]
 8002466:	697b      	ldr	r3, [r7, #20]
 8002468:	005b      	lsls	r3, r3, #1
 800246a:	fa02 f303 	lsl.w	r3, r2, r3
 800246e:	693a      	ldr	r2, [r7, #16]
 8002470:	4313      	orrs	r3, r2
 8002472:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	693a      	ldr	r2, [r7, #16]
 8002478:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	685b      	ldr	r3, [r3, #4]
 800247e:	f003 0303 	and.w	r3, r3, #3
 8002482:	2b02      	cmp	r3, #2
 8002484:	d123      	bne.n	80024ce <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002486:	697b      	ldr	r3, [r7, #20]
 8002488:	08da      	lsrs	r2, r3, #3
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	3208      	adds	r2, #8
 800248e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002492:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002494:	697b      	ldr	r3, [r7, #20]
 8002496:	f003 0307 	and.w	r3, r3, #7
 800249a:	009b      	lsls	r3, r3, #2
 800249c:	220f      	movs	r2, #15
 800249e:	fa02 f303 	lsl.w	r3, r2, r3
 80024a2:	43db      	mvns	r3, r3
 80024a4:	693a      	ldr	r2, [r7, #16]
 80024a6:	4013      	ands	r3, r2
 80024a8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	691a      	ldr	r2, [r3, #16]
 80024ae:	697b      	ldr	r3, [r7, #20]
 80024b0:	f003 0307 	and.w	r3, r3, #7
 80024b4:	009b      	lsls	r3, r3, #2
 80024b6:	fa02 f303 	lsl.w	r3, r2, r3
 80024ba:	693a      	ldr	r2, [r7, #16]
 80024bc:	4313      	orrs	r3, r2
 80024be:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80024c0:	697b      	ldr	r3, [r7, #20]
 80024c2:	08da      	lsrs	r2, r3, #3
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	3208      	adds	r2, #8
 80024c8:	6939      	ldr	r1, [r7, #16]
 80024ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80024d4:	697b      	ldr	r3, [r7, #20]
 80024d6:	005b      	lsls	r3, r3, #1
 80024d8:	2203      	movs	r2, #3
 80024da:	fa02 f303 	lsl.w	r3, r2, r3
 80024de:	43db      	mvns	r3, r3
 80024e0:	693a      	ldr	r2, [r7, #16]
 80024e2:	4013      	ands	r3, r2
 80024e4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	685b      	ldr	r3, [r3, #4]
 80024ea:	f003 0203 	and.w	r2, r3, #3
 80024ee:	697b      	ldr	r3, [r7, #20]
 80024f0:	005b      	lsls	r3, r3, #1
 80024f2:	fa02 f303 	lsl.w	r3, r2, r3
 80024f6:	693a      	ldr	r2, [r7, #16]
 80024f8:	4313      	orrs	r3, r2
 80024fa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	693a      	ldr	r2, [r7, #16]
 8002500:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	685b      	ldr	r3, [r3, #4]
 8002506:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800250a:	2b00      	cmp	r3, #0
 800250c:	f000 8098 	beq.w	8002640 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8002510:	4a54      	ldr	r2, [pc, #336]	; (8002664 <HAL_GPIO_Init+0x2c8>)
 8002512:	697b      	ldr	r3, [r7, #20]
 8002514:	089b      	lsrs	r3, r3, #2
 8002516:	3302      	adds	r3, #2
 8002518:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800251c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800251e:	697b      	ldr	r3, [r7, #20]
 8002520:	f003 0303 	and.w	r3, r3, #3
 8002524:	009b      	lsls	r3, r3, #2
 8002526:	220f      	movs	r2, #15
 8002528:	fa02 f303 	lsl.w	r3, r2, r3
 800252c:	43db      	mvns	r3, r3
 800252e:	693a      	ldr	r2, [r7, #16]
 8002530:	4013      	ands	r3, r2
 8002532:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800253a:	d019      	beq.n	8002570 <HAL_GPIO_Init+0x1d4>
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	4a4a      	ldr	r2, [pc, #296]	; (8002668 <HAL_GPIO_Init+0x2cc>)
 8002540:	4293      	cmp	r3, r2
 8002542:	d013      	beq.n	800256c <HAL_GPIO_Init+0x1d0>
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	4a49      	ldr	r2, [pc, #292]	; (800266c <HAL_GPIO_Init+0x2d0>)
 8002548:	4293      	cmp	r3, r2
 800254a:	d00d      	beq.n	8002568 <HAL_GPIO_Init+0x1cc>
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	4a48      	ldr	r2, [pc, #288]	; (8002670 <HAL_GPIO_Init+0x2d4>)
 8002550:	4293      	cmp	r3, r2
 8002552:	d007      	beq.n	8002564 <HAL_GPIO_Init+0x1c8>
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	4a47      	ldr	r2, [pc, #284]	; (8002674 <HAL_GPIO_Init+0x2d8>)
 8002558:	4293      	cmp	r3, r2
 800255a:	d101      	bne.n	8002560 <HAL_GPIO_Init+0x1c4>
 800255c:	2304      	movs	r3, #4
 800255e:	e008      	b.n	8002572 <HAL_GPIO_Init+0x1d6>
 8002560:	2307      	movs	r3, #7
 8002562:	e006      	b.n	8002572 <HAL_GPIO_Init+0x1d6>
 8002564:	2303      	movs	r3, #3
 8002566:	e004      	b.n	8002572 <HAL_GPIO_Init+0x1d6>
 8002568:	2302      	movs	r3, #2
 800256a:	e002      	b.n	8002572 <HAL_GPIO_Init+0x1d6>
 800256c:	2301      	movs	r3, #1
 800256e:	e000      	b.n	8002572 <HAL_GPIO_Init+0x1d6>
 8002570:	2300      	movs	r3, #0
 8002572:	697a      	ldr	r2, [r7, #20]
 8002574:	f002 0203 	and.w	r2, r2, #3
 8002578:	0092      	lsls	r2, r2, #2
 800257a:	4093      	lsls	r3, r2
 800257c:	693a      	ldr	r2, [r7, #16]
 800257e:	4313      	orrs	r3, r2
 8002580:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002582:	4938      	ldr	r1, [pc, #224]	; (8002664 <HAL_GPIO_Init+0x2c8>)
 8002584:	697b      	ldr	r3, [r7, #20]
 8002586:	089b      	lsrs	r3, r3, #2
 8002588:	3302      	adds	r3, #2
 800258a:	693a      	ldr	r2, [r7, #16]
 800258c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002590:	4b39      	ldr	r3, [pc, #228]	; (8002678 <HAL_GPIO_Init+0x2dc>)
 8002592:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002596:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	43db      	mvns	r3, r3
 800259c:	693a      	ldr	r2, [r7, #16]
 800259e:	4013      	ands	r3, r2
 80025a0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	685b      	ldr	r3, [r3, #4]
 80025a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d003      	beq.n	80025b6 <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 80025ae:	693a      	ldr	r2, [r7, #16]
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	4313      	orrs	r3, r2
 80025b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80025b6:	4a30      	ldr	r2, [pc, #192]	; (8002678 <HAL_GPIO_Init+0x2dc>)
 80025b8:	693b      	ldr	r3, [r7, #16]
 80025ba:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 80025be:	4b2e      	ldr	r3, [pc, #184]	; (8002678 <HAL_GPIO_Init+0x2dc>)
 80025c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80025c4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	43db      	mvns	r3, r3
 80025ca:	693a      	ldr	r2, [r7, #16]
 80025cc:	4013      	ands	r3, r2
 80025ce:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	685b      	ldr	r3, [r3, #4]
 80025d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d003      	beq.n	80025e4 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 80025dc:	693a      	ldr	r2, [r7, #16]
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	4313      	orrs	r3, r2
 80025e2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80025e4:	4a24      	ldr	r2, [pc, #144]	; (8002678 <HAL_GPIO_Init+0x2dc>)
 80025e6:	693b      	ldr	r3, [r7, #16]
 80025e8:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80025ec:	4b22      	ldr	r3, [pc, #136]	; (8002678 <HAL_GPIO_Init+0x2dc>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	43db      	mvns	r3, r3
 80025f6:	693a      	ldr	r2, [r7, #16]
 80025f8:	4013      	ands	r3, r2
 80025fa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	685b      	ldr	r3, [r3, #4]
 8002600:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002604:	2b00      	cmp	r3, #0
 8002606:	d003      	beq.n	8002610 <HAL_GPIO_Init+0x274>
        {
          temp |= iocurrent;
 8002608:	693a      	ldr	r2, [r7, #16]
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	4313      	orrs	r3, r2
 800260e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002610:	4a19      	ldr	r2, [pc, #100]	; (8002678 <HAL_GPIO_Init+0x2dc>)
 8002612:	693b      	ldr	r3, [r7, #16]
 8002614:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002616:	4b18      	ldr	r3, [pc, #96]	; (8002678 <HAL_GPIO_Init+0x2dc>)
 8002618:	685b      	ldr	r3, [r3, #4]
 800261a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	43db      	mvns	r3, r3
 8002620:	693a      	ldr	r2, [r7, #16]
 8002622:	4013      	ands	r3, r2
 8002624:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	685b      	ldr	r3, [r3, #4]
 800262a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800262e:	2b00      	cmp	r3, #0
 8002630:	d003      	beq.n	800263a <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8002632:	693a      	ldr	r2, [r7, #16]
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	4313      	orrs	r3, r2
 8002638:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800263a:	4a0f      	ldr	r2, [pc, #60]	; (8002678 <HAL_GPIO_Init+0x2dc>)
 800263c:	693b      	ldr	r3, [r7, #16]
 800263e:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8002640:	697b      	ldr	r3, [r7, #20]
 8002642:	3301      	adds	r3, #1
 8002644:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	681a      	ldr	r2, [r3, #0]
 800264a:	697b      	ldr	r3, [r7, #20]
 800264c:	fa22 f303 	lsr.w	r3, r2, r3
 8002650:	2b00      	cmp	r3, #0
 8002652:	f47f aeab 	bne.w	80023ac <HAL_GPIO_Init+0x10>
  }
}
 8002656:	bf00      	nop
 8002658:	bf00      	nop
 800265a:	371c      	adds	r7, #28
 800265c:	46bd      	mov	sp, r7
 800265e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002662:	4770      	bx	lr
 8002664:	40010000 	.word	0x40010000
 8002668:	48000400 	.word	0x48000400
 800266c:	48000800 	.word	0x48000800
 8002670:	48000c00 	.word	0x48000c00
 8002674:	48001000 	.word	0x48001000
 8002678:	58000800 	.word	0x58000800

0800267c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800267c:	b480      	push	{r7}
 800267e:	b083      	sub	sp, #12
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
 8002684:	460b      	mov	r3, r1
 8002686:	807b      	strh	r3, [r7, #2]
 8002688:	4613      	mov	r3, r2
 800268a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800268c:	787b      	ldrb	r3, [r7, #1]
 800268e:	2b00      	cmp	r3, #0
 8002690:	d003      	beq.n	800269a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002692:	887a      	ldrh	r2, [r7, #2]
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002698:	e002      	b.n	80026a0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800269a:	887a      	ldrh	r2, [r7, #2]
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	629a      	str	r2, [r3, #40]	; 0x28
}
 80026a0:	bf00      	nop
 80026a2:	370c      	adds	r7, #12
 80026a4:	46bd      	mov	sp, r7
 80026a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026aa:	4770      	bx	lr

080026ac <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b082      	sub	sp, #8
 80026b0:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 80026b2:	4b0a      	ldr	r3, [pc, #40]	; (80026dc <HAL_HSEM_IRQHandler+0x30>)
 80026b4:	68db      	ldr	r3, [r3, #12]
 80026b6:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 80026b8:	4b08      	ldr	r3, [pc, #32]	; (80026dc <HAL_HSEM_IRQHandler+0x30>)
 80026ba:	681a      	ldr	r2, [r3, #0]
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	43db      	mvns	r3, r3
 80026c0:	4906      	ldr	r1, [pc, #24]	; (80026dc <HAL_HSEM_IRQHandler+0x30>)
 80026c2:	4013      	ands	r3, r2
 80026c4:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 80026c6:	4a05      	ldr	r2, [pc, #20]	; (80026dc <HAL_HSEM_IRQHandler+0x30>)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 80026cc:	6878      	ldr	r0, [r7, #4]
 80026ce:	f000 f807 	bl	80026e0 <HAL_HSEM_FreeCallback>
}
 80026d2:	bf00      	nop
 80026d4:	3708      	adds	r7, #8
 80026d6:	46bd      	mov	sp, r7
 80026d8:	bd80      	pop	{r7, pc}
 80026da:	bf00      	nop
 80026dc:	58001500 	.word	0x58001500

080026e0 <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 80026e0:	b480      	push	{r7}
 80026e2:	b083      	sub	sp, #12
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 80026e8:	bf00      	nop
 80026ea:	370c      	adds	r7, #12
 80026ec:	46bd      	mov	sp, r7
 80026ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f2:	4770      	bx	lr

080026f4 <HAL_IPCC_Init>:
  * @brief  Initialize the IPCC peripheral.
  * @param  hipcc IPCC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_Init(IPCC_HandleTypeDef *hipcc)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b084      	sub	sp, #16
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
 80026fc:	2300      	movs	r3, #0
 80026fe:	73fb      	strb	r3, [r7, #15]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2b00      	cmp	r3, #0
 8002704:	d01e      	beq.n	8002744 <HAL_IPCC_Init+0x50>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

    IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 8002706:	4b13      	ldr	r3, [pc, #76]	; (8002754 <HAL_IPCC_Init+0x60>)
 8002708:	60bb      	str	r3, [r7, #8]

    if (hipcc->State == HAL_IPCC_STATE_RESET)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002710:	b2db      	uxtb	r3, r3
 8002712:	2b00      	cmp	r3, #0
 8002714:	d102      	bne.n	800271c <HAL_IPCC_Init+0x28>
    {
      /* Init the low level hardware : CLOCK, NVIC */
      HAL_IPCC_MspInit(hipcc);
 8002716:	6878      	ldr	r0, [r7, #4]
 8002718:	f7fe fd34 	bl	8001184 <HAL_IPCC_MspInit>
    }

    /* Reset all registers of the current cpu to default state */
    IPCC_Reset_Register(currentInstance);
 800271c:	68b8      	ldr	r0, [r7, #8]
 800271e:	f000 f85b 	bl	80027d8 <IPCC_Reset_Register>

    /* Activate the interrupts */
    currentInstance->CR |= (IPCC_CR_RXOIE | IPCC_CR_TXFIE);
 8002722:	68bb      	ldr	r3, [r7, #8]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f043 1201 	orr.w	r2, r3, #65537	; 0x10001
 800272a:	68bb      	ldr	r3, [r7, #8]
 800272c:	601a      	str	r2, [r3, #0]

    /* Clear callback pointers */
    IPCC_SetDefaultCallbacks(hipcc);
 800272e:	6878      	ldr	r0, [r7, #4]
 8002730:	f000 f82c 	bl	800278c <IPCC_SetDefaultCallbacks>

    /* Reset all callback notification request */
    hipcc->callbackRequest = 0;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	2200      	movs	r2, #0
 8002738:	635a      	str	r2, [r3, #52]	; 0x34

    hipcc->State = HAL_IPCC_STATE_READY;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	2201      	movs	r2, #1
 800273e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 8002742:	e001      	b.n	8002748 <HAL_IPCC_Init+0x54>
  }
  else
  {
    err = HAL_ERROR;
 8002744:	2301      	movs	r3, #1
 8002746:	73fb      	strb	r3, [r7, #15]
  }

  return err;
 8002748:	7bfb      	ldrb	r3, [r7, #15]
}
 800274a:	4618      	mov	r0, r3
 800274c:	3710      	adds	r7, #16
 800274e:	46bd      	mov	sp, r7
 8002750:	bd80      	pop	{r7, pc}
 8002752:	bf00      	nop
 8002754:	58000c00 	.word	0x58000c00

08002758 <HAL_IPCC_RxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_RxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8002758:	b480      	push	{r7}
 800275a:	b085      	sub	sp, #20
 800275c:	af00      	add	r7, sp, #0
 800275e:	60f8      	str	r0, [r7, #12]
 8002760:	60b9      	str	r1, [r7, #8]
 8002762:	4613      	mov	r3, r2
 8002764:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_RxCallback can be implemented in the user file
   */
}
 8002766:	bf00      	nop
 8002768:	3714      	adds	r7, #20
 800276a:	46bd      	mov	sp, r7
 800276c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002770:	4770      	bx	lr

08002772 <HAL_IPCC_TxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_TxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8002772:	b480      	push	{r7}
 8002774:	b085      	sub	sp, #20
 8002776:	af00      	add	r7, sp, #0
 8002778:	60f8      	str	r0, [r7, #12]
 800277a:	60b9      	str	r1, [r7, #8]
 800277c:	4613      	mov	r3, r2
 800277e:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_TxCallback can be implemented in the user file
   */
}
 8002780:	bf00      	nop
 8002782:	3714      	adds	r7, #20
 8002784:	46bd      	mov	sp, r7
 8002786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278a:	4770      	bx	lr

0800278c <IPCC_SetDefaultCallbacks>:
/**
  * @brief Reset all callbacks of the handle to NULL.
  * @param  hipcc IPCC handle
  */
void IPCC_SetDefaultCallbacks(IPCC_HandleTypeDef *hipcc)
{
 800278c:	b480      	push	{r7}
 800278e:	b085      	sub	sp, #20
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
  uint32_t i;
  /* Set all callbacks to default */
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8002794:	2300      	movs	r3, #0
 8002796:	60fb      	str	r3, [r7, #12]
 8002798:	e00f      	b.n	80027ba <IPCC_SetDefaultCallbacks+0x2e>
  {
    hipcc->ChannelCallbackRx[i] = HAL_IPCC_RxCallback;
 800279a:	687a      	ldr	r2, [r7, #4]
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	009b      	lsls	r3, r3, #2
 80027a0:	4413      	add	r3, r2
 80027a2:	4a0b      	ldr	r2, [pc, #44]	; (80027d0 <IPCC_SetDefaultCallbacks+0x44>)
 80027a4:	605a      	str	r2, [r3, #4]
    hipcc->ChannelCallbackTx[i] = HAL_IPCC_TxCallback;
 80027a6:	687a      	ldr	r2, [r7, #4]
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	3306      	adds	r3, #6
 80027ac:	009b      	lsls	r3, r3, #2
 80027ae:	4413      	add	r3, r2
 80027b0:	4a08      	ldr	r2, [pc, #32]	; (80027d4 <IPCC_SetDefaultCallbacks+0x48>)
 80027b2:	605a      	str	r2, [r3, #4]
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	3301      	adds	r3, #1
 80027b8:	60fb      	str	r3, [r7, #12]
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	2b05      	cmp	r3, #5
 80027be:	d9ec      	bls.n	800279a <IPCC_SetDefaultCallbacks+0xe>
  }
}
 80027c0:	bf00      	nop
 80027c2:	bf00      	nop
 80027c4:	3714      	adds	r7, #20
 80027c6:	46bd      	mov	sp, r7
 80027c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027cc:	4770      	bx	lr
 80027ce:	bf00      	nop
 80027d0:	08002759 	.word	0x08002759
 80027d4:	08002773 	.word	0x08002773

080027d8 <IPCC_Reset_Register>:
/**
  * @brief Reset IPCC register to default value for the concerned instance.
  * @param  Instance pointer to register
  */
void IPCC_Reset_Register(IPCC_CommonTypeDef *Instance)
{
 80027d8:	b480      	push	{r7}
 80027da:	b083      	sub	sp, #12
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
  /* Disable RX and TX interrupts */
  Instance->CR  = 0x00000000U;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2200      	movs	r2, #0
 80027e4:	601a      	str	r2, [r3, #0]

  /* Mask RX and TX interrupts */
  Instance->MR  = (IPCC_ALL_TX_BUF | IPCC_ALL_RX_BUF);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	f04f 123f 	mov.w	r2, #4128831	; 0x3f003f
 80027ec:	605a      	str	r2, [r3, #4]

  /* Clear RX status */
  Instance->SCR = IPCC_ALL_RX_BUF;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	223f      	movs	r2, #63	; 0x3f
 80027f2:	609a      	str	r2, [r3, #8]
}
 80027f4:	bf00      	nop
 80027f6:	370c      	adds	r7, #12
 80027f8:	46bd      	mov	sp, r7
 80027fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fe:	4770      	bx	lr

08002800 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002800:	b480      	push	{r7}
 8002802:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002804:	4b05      	ldr	r3, [pc, #20]	; (800281c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4a04      	ldr	r2, [pc, #16]	; (800281c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800280a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800280e:	6013      	str	r3, [r2, #0]
}
 8002810:	bf00      	nop
 8002812:	46bd      	mov	sp, r7
 8002814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002818:	4770      	bx	lr
 800281a:	bf00      	nop
 800281c:	58000400 	.word	0x58000400

08002820 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002820:	b480      	push	{r7}
 8002822:	af00      	add	r7, sp, #0
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002824:	4b04      	ldr	r3, [pc, #16]	; (8002838 <HAL_PWREx_GetVoltageRange+0x18>)
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 800282c:	4618      	mov	r0, r3
 800282e:	46bd      	mov	sp, r7
 8002830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002834:	4770      	bx	lr
 8002836:	bf00      	nop
 8002838:	58000400 	.word	0x58000400

0800283c <LL_RCC_HSE_IsEnabledDiv2>:
{
 800283c:	b480      	push	{r7}
 800283e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8002840:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800284a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800284e:	d101      	bne.n	8002854 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8002850:	2301      	movs	r3, #1
 8002852:	e000      	b.n	8002856 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8002854:	2300      	movs	r3, #0
}
 8002856:	4618      	mov	r0, r3
 8002858:	46bd      	mov	sp, r7
 800285a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285e:	4770      	bx	lr

08002860 <LL_RCC_HSE_Enable>:
{
 8002860:	b480      	push	{r7}
 8002862:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8002864:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800286e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002872:	6013      	str	r3, [r2, #0]
}
 8002874:	bf00      	nop
 8002876:	46bd      	mov	sp, r7
 8002878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287c:	4770      	bx	lr

0800287e <LL_RCC_HSE_Disable>:
{
 800287e:	b480      	push	{r7}
 8002880:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8002882:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800288c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002890:	6013      	str	r3, [r2, #0]
}
 8002892:	bf00      	nop
 8002894:	46bd      	mov	sp, r7
 8002896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289a:	4770      	bx	lr

0800289c <LL_RCC_HSE_IsReady>:
{
 800289c:	b480      	push	{r7}
 800289e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80028a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028aa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80028ae:	d101      	bne.n	80028b4 <LL_RCC_HSE_IsReady+0x18>
 80028b0:	2301      	movs	r3, #1
 80028b2:	e000      	b.n	80028b6 <LL_RCC_HSE_IsReady+0x1a>
 80028b4:	2300      	movs	r3, #0
}
 80028b6:	4618      	mov	r0, r3
 80028b8:	46bd      	mov	sp, r7
 80028ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028be:	4770      	bx	lr

080028c0 <LL_RCC_HSI_Enable>:
{
 80028c0:	b480      	push	{r7}
 80028c2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80028c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80028ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028d2:	6013      	str	r3, [r2, #0]
}
 80028d4:	bf00      	nop
 80028d6:	46bd      	mov	sp, r7
 80028d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028dc:	4770      	bx	lr

080028de <LL_RCC_HSI_Disable>:
{
 80028de:	b480      	push	{r7}
 80028e0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 80028e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80028ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80028f0:	6013      	str	r3, [r2, #0]
}
 80028f2:	bf00      	nop
 80028f4:	46bd      	mov	sp, r7
 80028f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fa:	4770      	bx	lr

080028fc <LL_RCC_HSI_IsReady>:
{
 80028fc:	b480      	push	{r7}
 80028fe:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8002900:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800290a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800290e:	d101      	bne.n	8002914 <LL_RCC_HSI_IsReady+0x18>
 8002910:	2301      	movs	r3, #1
 8002912:	e000      	b.n	8002916 <LL_RCC_HSI_IsReady+0x1a>
 8002914:	2300      	movs	r3, #0
}
 8002916:	4618      	mov	r0, r3
 8002918:	46bd      	mov	sp, r7
 800291a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291e:	4770      	bx	lr

08002920 <LL_RCC_HSI_SetCalibTrimming>:
{
 8002920:	b480      	push	{r7}
 8002922:	b083      	sub	sp, #12
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8002928:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800292c:	685b      	ldr	r3, [r3, #4]
 800292e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	061b      	lsls	r3, r3, #24
 8002936:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800293a:	4313      	orrs	r3, r2
 800293c:	604b      	str	r3, [r1, #4]
}
 800293e:	bf00      	nop
 8002940:	370c      	adds	r7, #12
 8002942:	46bd      	mov	sp, r7
 8002944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002948:	4770      	bx	lr

0800294a <LL_RCC_HSI48_Enable>:
{
 800294a:	b480      	push	{r7}
 800294c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800294e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002952:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002956:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800295a:	f043 0301 	orr.w	r3, r3, #1
 800295e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8002962:	bf00      	nop
 8002964:	46bd      	mov	sp, r7
 8002966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296a:	4770      	bx	lr

0800296c <LL_RCC_HSI48_Disable>:
{
 800296c:	b480      	push	{r7}
 800296e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8002970:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002974:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002978:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800297c:	f023 0301 	bic.w	r3, r3, #1
 8002980:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8002984:	bf00      	nop
 8002986:	46bd      	mov	sp, r7
 8002988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298c:	4770      	bx	lr

0800298e <LL_RCC_HSI48_IsReady>:
{
 800298e:	b480      	push	{r7}
 8002990:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8002992:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002996:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800299a:	f003 0302 	and.w	r3, r3, #2
 800299e:	2b02      	cmp	r3, #2
 80029a0:	d101      	bne.n	80029a6 <LL_RCC_HSI48_IsReady+0x18>
 80029a2:	2301      	movs	r3, #1
 80029a4:	e000      	b.n	80029a8 <LL_RCC_HSI48_IsReady+0x1a>
 80029a6:	2300      	movs	r3, #0
}
 80029a8:	4618      	mov	r0, r3
 80029aa:	46bd      	mov	sp, r7
 80029ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b0:	4770      	bx	lr

080029b2 <LL_RCC_LSE_Enable>:
{
 80029b2:	b480      	push	{r7}
 80029b4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80029b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029be:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80029c2:	f043 0301 	orr.w	r3, r3, #1
 80029c6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80029ca:	bf00      	nop
 80029cc:	46bd      	mov	sp, r7
 80029ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d2:	4770      	bx	lr

080029d4 <LL_RCC_LSE_Disable>:
{
 80029d4:	b480      	push	{r7}
 80029d6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80029d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029e0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80029e4:	f023 0301 	bic.w	r3, r3, #1
 80029e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80029ec:	bf00      	nop
 80029ee:	46bd      	mov	sp, r7
 80029f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f4:	4770      	bx	lr

080029f6 <LL_RCC_LSE_EnableBypass>:
{
 80029f6:	b480      	push	{r7}
 80029f8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80029fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a02:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002a06:	f043 0304 	orr.w	r3, r3, #4
 8002a0a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002a0e:	bf00      	nop
 8002a10:	46bd      	mov	sp, r7
 8002a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a16:	4770      	bx	lr

08002a18 <LL_RCC_LSE_DisableBypass>:
{
 8002a18:	b480      	push	{r7}
 8002a1a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002a1c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a24:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002a28:	f023 0304 	bic.w	r3, r3, #4
 8002a2c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002a30:	bf00      	nop
 8002a32:	46bd      	mov	sp, r7
 8002a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a38:	4770      	bx	lr

08002a3a <LL_RCC_LSE_IsReady>:
{
 8002a3a:	b480      	push	{r7}
 8002a3c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8002a3e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a46:	f003 0302 	and.w	r3, r3, #2
 8002a4a:	2b02      	cmp	r3, #2
 8002a4c:	d101      	bne.n	8002a52 <LL_RCC_LSE_IsReady+0x18>
 8002a4e:	2301      	movs	r3, #1
 8002a50:	e000      	b.n	8002a54 <LL_RCC_LSE_IsReady+0x1a>
 8002a52:	2300      	movs	r3, #0
}
 8002a54:	4618      	mov	r0, r3
 8002a56:	46bd      	mov	sp, r7
 8002a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5c:	4770      	bx	lr

08002a5e <LL_RCC_LSI1_Enable>:
{
 8002a5e:	b480      	push	{r7}
 8002a60:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8002a62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a66:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a6a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002a6e:	f043 0301 	orr.w	r3, r3, #1
 8002a72:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8002a76:	bf00      	nop
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7e:	4770      	bx	lr

08002a80 <LL_RCC_LSI1_Disable>:
{
 8002a80:	b480      	push	{r7}
 8002a82:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8002a84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a88:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a8c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002a90:	f023 0301 	bic.w	r3, r3, #1
 8002a94:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8002a98:	bf00      	nop
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa0:	4770      	bx	lr

08002aa2 <LL_RCC_LSI1_IsReady>:
{
 8002aa2:	b480      	push	{r7}
 8002aa4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8002aa6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002aaa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002aae:	f003 0302 	and.w	r3, r3, #2
 8002ab2:	2b02      	cmp	r3, #2
 8002ab4:	d101      	bne.n	8002aba <LL_RCC_LSI1_IsReady+0x18>
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	e000      	b.n	8002abc <LL_RCC_LSI1_IsReady+0x1a>
 8002aba:	2300      	movs	r3, #0
}
 8002abc:	4618      	mov	r0, r3
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac4:	4770      	bx	lr

08002ac6 <LL_RCC_LSI2_Enable>:
{
 8002ac6:	b480      	push	{r7}
 8002ac8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8002aca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ace:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ad2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002ad6:	f043 0304 	orr.w	r3, r3, #4
 8002ada:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8002ade:	bf00      	nop
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae6:	4770      	bx	lr

08002ae8 <LL_RCC_LSI2_Disable>:
{
 8002ae8:	b480      	push	{r7}
 8002aea:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8002aec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002af0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002af4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002af8:	f023 0304 	bic.w	r3, r3, #4
 8002afc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8002b00:	bf00      	nop
 8002b02:	46bd      	mov	sp, r7
 8002b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b08:	4770      	bx	lr

08002b0a <LL_RCC_LSI2_IsReady>:
{
 8002b0a:	b480      	push	{r7}
 8002b0c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8002b0e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b12:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b16:	f003 0308 	and.w	r3, r3, #8
 8002b1a:	2b08      	cmp	r3, #8
 8002b1c:	d101      	bne.n	8002b22 <LL_RCC_LSI2_IsReady+0x18>
 8002b1e:	2301      	movs	r3, #1
 8002b20:	e000      	b.n	8002b24 <LL_RCC_LSI2_IsReady+0x1a>
 8002b22:	2300      	movs	r3, #0
}
 8002b24:	4618      	mov	r0, r3
 8002b26:	46bd      	mov	sp, r7
 8002b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2c:	4770      	bx	lr

08002b2e <LL_RCC_LSI2_SetTrimming>:
{
 8002b2e:	b480      	push	{r7}
 8002b30:	b083      	sub	sp, #12
 8002b32:	af00      	add	r7, sp, #0
 8002b34:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8002b36:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b3e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	021b      	lsls	r3, r3, #8
 8002b46:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002b4a:	4313      	orrs	r3, r2
 8002b4c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8002b50:	bf00      	nop
 8002b52:	370c      	adds	r7, #12
 8002b54:	46bd      	mov	sp, r7
 8002b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5a:	4770      	bx	lr

08002b5c <LL_RCC_MSI_Enable>:
{
 8002b5c:	b480      	push	{r7}
 8002b5e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8002b60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002b6a:	f043 0301 	orr.w	r3, r3, #1
 8002b6e:	6013      	str	r3, [r2, #0]
}
 8002b70:	bf00      	nop
 8002b72:	46bd      	mov	sp, r7
 8002b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b78:	4770      	bx	lr

08002b7a <LL_RCC_MSI_Disable>:
{
 8002b7a:	b480      	push	{r7}
 8002b7c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8002b7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002b88:	f023 0301 	bic.w	r3, r3, #1
 8002b8c:	6013      	str	r3, [r2, #0]
}
 8002b8e:	bf00      	nop
 8002b90:	46bd      	mov	sp, r7
 8002b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b96:	4770      	bx	lr

08002b98 <LL_RCC_MSI_IsReady>:
{
 8002b98:	b480      	push	{r7}
 8002b9a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8002b9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f003 0302 	and.w	r3, r3, #2
 8002ba6:	2b02      	cmp	r3, #2
 8002ba8:	d101      	bne.n	8002bae <LL_RCC_MSI_IsReady+0x16>
 8002baa:	2301      	movs	r3, #1
 8002bac:	e000      	b.n	8002bb0 <LL_RCC_MSI_IsReady+0x18>
 8002bae:	2300      	movs	r3, #0
}
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb8:	4770      	bx	lr

08002bba <LL_RCC_MSI_SetRange>:
{
 8002bba:	b480      	push	{r7}
 8002bbc:	b083      	sub	sp, #12
 8002bbe:	af00      	add	r7, sp, #0
 8002bc0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8002bc2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002bcc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	4313      	orrs	r3, r2
 8002bd4:	600b      	str	r3, [r1, #0]
}
 8002bd6:	bf00      	nop
 8002bd8:	370c      	adds	r7, #12
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be0:	4770      	bx	lr

08002be2 <LL_RCC_MSI_GetRange>:
{
 8002be2:	b480      	push	{r7}
 8002be4:	b083      	sub	sp, #12
 8002be6:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8002be8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002bf2:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2bb0      	cmp	r3, #176	; 0xb0
 8002bf8:	d901      	bls.n	8002bfe <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 8002bfa:	23b0      	movs	r3, #176	; 0xb0
 8002bfc:	607b      	str	r3, [r7, #4]
  return msiRange;
 8002bfe:	687b      	ldr	r3, [r7, #4]
}
 8002c00:	4618      	mov	r0, r3
 8002c02:	370c      	adds	r7, #12
 8002c04:	46bd      	mov	sp, r7
 8002c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0a:	4770      	bx	lr

08002c0c <LL_RCC_MSI_SetCalibTrimming>:
{
 8002c0c:	b480      	push	{r7}
 8002c0e:	b083      	sub	sp, #12
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8002c14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c18:	685b      	ldr	r3, [r3, #4]
 8002c1a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	021b      	lsls	r3, r3, #8
 8002c22:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002c26:	4313      	orrs	r3, r2
 8002c28:	604b      	str	r3, [r1, #4]
}
 8002c2a:	bf00      	nop
 8002c2c:	370c      	adds	r7, #12
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c34:	4770      	bx	lr

08002c36 <LL_RCC_SetSysClkSource>:
{
 8002c36:	b480      	push	{r7}
 8002c38:	b083      	sub	sp, #12
 8002c3a:	af00      	add	r7, sp, #0
 8002c3c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8002c3e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c42:	689b      	ldr	r3, [r3, #8]
 8002c44:	f023 0203 	bic.w	r2, r3, #3
 8002c48:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	4313      	orrs	r3, r2
 8002c50:	608b      	str	r3, [r1, #8]
}
 8002c52:	bf00      	nop
 8002c54:	370c      	adds	r7, #12
 8002c56:	46bd      	mov	sp, r7
 8002c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5c:	4770      	bx	lr

08002c5e <LL_RCC_GetSysClkSource>:
{
 8002c5e:	b480      	push	{r7}
 8002c60:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002c62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c66:	689b      	ldr	r3, [r3, #8]
 8002c68:	f003 030c 	and.w	r3, r3, #12
}
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c74:	4770      	bx	lr

08002c76 <LL_RCC_SetAHBPrescaler>:
{
 8002c76:	b480      	push	{r7}
 8002c78:	b083      	sub	sp, #12
 8002c7a:	af00      	add	r7, sp, #0
 8002c7c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8002c7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c82:	689b      	ldr	r3, [r3, #8]
 8002c84:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c88:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	4313      	orrs	r3, r2
 8002c90:	608b      	str	r3, [r1, #8]
}
 8002c92:	bf00      	nop
 8002c94:	370c      	adds	r7, #12
 8002c96:	46bd      	mov	sp, r7
 8002c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9c:	4770      	bx	lr

08002c9e <LL_C2_RCC_SetAHBPrescaler>:
{
 8002c9e:	b480      	push	{r7}
 8002ca0:	b083      	sub	sp, #12
 8002ca2:	af00      	add	r7, sp, #0
 8002ca4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8002ca6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002caa:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002cae:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002cb2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	4313      	orrs	r3, r2
 8002cba:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8002cbe:	bf00      	nop
 8002cc0:	370c      	adds	r7, #12
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc8:	4770      	bx	lr

08002cca <LL_RCC_SetAHB4Prescaler>:
{
 8002cca:	b480      	push	{r7}
 8002ccc:	b083      	sub	sp, #12
 8002cce:	af00      	add	r7, sp, #0
 8002cd0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8002cd2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cd6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002cda:	f023 020f 	bic.w	r2, r3, #15
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	091b      	lsrs	r3, r3, #4
 8002ce2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002ce6:	4313      	orrs	r3, r2
 8002ce8:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8002cec:	bf00      	nop
 8002cee:	370c      	adds	r7, #12
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf6:	4770      	bx	lr

08002cf8 <LL_RCC_SetAPB1Prescaler>:
{
 8002cf8:	b480      	push	{r7}
 8002cfa:	b083      	sub	sp, #12
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8002d00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d04:	689b      	ldr	r3, [r3, #8]
 8002d06:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002d0a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	4313      	orrs	r3, r2
 8002d12:	608b      	str	r3, [r1, #8]
}
 8002d14:	bf00      	nop
 8002d16:	370c      	adds	r7, #12
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1e:	4770      	bx	lr

08002d20 <LL_RCC_SetAPB2Prescaler>:
{
 8002d20:	b480      	push	{r7}
 8002d22:	b083      	sub	sp, #12
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8002d28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d2c:	689b      	ldr	r3, [r3, #8]
 8002d2e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002d32:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	4313      	orrs	r3, r2
 8002d3a:	608b      	str	r3, [r1, #8]
}
 8002d3c:	bf00      	nop
 8002d3e:	370c      	adds	r7, #12
 8002d40:	46bd      	mov	sp, r7
 8002d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d46:	4770      	bx	lr

08002d48 <LL_RCC_GetAHBPrescaler>:
{
 8002d48:	b480      	push	{r7}
 8002d4a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8002d4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d50:	689b      	ldr	r3, [r3, #8]
 8002d52:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8002d56:	4618      	mov	r0, r3
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5e:	4770      	bx	lr

08002d60 <LL_RCC_GetAHB4Prescaler>:
{
 8002d60:	b480      	push	{r7}
 8002d62:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8002d64:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d68:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002d6c:	011b      	lsls	r3, r3, #4
 8002d6e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8002d72:	4618      	mov	r0, r3
 8002d74:	46bd      	mov	sp, r7
 8002d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7a:	4770      	bx	lr

08002d7c <LL_RCC_GetAPB1Prescaler>:
{
 8002d7c:	b480      	push	{r7}
 8002d7e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8002d80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d84:	689b      	ldr	r3, [r3, #8]
 8002d86:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d92:	4770      	bx	lr

08002d94 <LL_RCC_GetAPB2Prescaler>:
{
 8002d94:	b480      	push	{r7}
 8002d96:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8002d98:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d9c:	689b      	ldr	r3, [r3, #8]
 8002d9e:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8002da2:	4618      	mov	r0, r3
 8002da4:	46bd      	mov	sp, r7
 8002da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002daa:	4770      	bx	lr

08002dac <LL_RCC_PLL_Enable>:
{
 8002dac:	b480      	push	{r7}
 8002dae:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8002db0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002dba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002dbe:	6013      	str	r3, [r2, #0]
}
 8002dc0:	bf00      	nop
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc8:	4770      	bx	lr

08002dca <LL_RCC_PLL_Disable>:
{
 8002dca:	b480      	push	{r7}
 8002dcc:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8002dce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002dd8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002ddc:	6013      	str	r3, [r2, #0]
}
 8002dde:	bf00      	nop
 8002de0:	46bd      	mov	sp, r7
 8002de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de6:	4770      	bx	lr

08002de8 <LL_RCC_PLL_IsReady>:
{
 8002de8:	b480      	push	{r7}
 8002dea:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8002dec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002df6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002dfa:	d101      	bne.n	8002e00 <LL_RCC_PLL_IsReady+0x18>
 8002dfc:	2301      	movs	r3, #1
 8002dfe:	e000      	b.n	8002e02 <LL_RCC_PLL_IsReady+0x1a>
 8002e00:	2300      	movs	r3, #0
}
 8002e02:	4618      	mov	r0, r3
 8002e04:	46bd      	mov	sp, r7
 8002e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0a:	4770      	bx	lr

08002e0c <LL_RCC_PLL_GetN>:
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8002e10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e14:	68db      	ldr	r3, [r3, #12]
 8002e16:	0a1b      	lsrs	r3, r3, #8
 8002e18:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e24:	4770      	bx	lr

08002e26 <LL_RCC_PLL_GetR>:
{
 8002e26:	b480      	push	{r7}
 8002e28:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8002e2a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e2e:	68db      	ldr	r3, [r3, #12]
 8002e30:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8002e34:	4618      	mov	r0, r3
 8002e36:	46bd      	mov	sp, r7
 8002e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3c:	4770      	bx	lr

08002e3e <LL_RCC_PLL_GetDivider>:
{
 8002e3e:	b480      	push	{r7}
 8002e40:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8002e42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e46:	68db      	ldr	r3, [r3, #12]
 8002e48:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e54:	4770      	bx	lr

08002e56 <LL_RCC_PLL_GetMainSource>:
{
 8002e56:	b480      	push	{r7}
 8002e58:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8002e5a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e5e:	68db      	ldr	r3, [r3, #12]
 8002e60:	f003 0303 	and.w	r3, r3, #3
}
 8002e64:	4618      	mov	r0, r3
 8002e66:	46bd      	mov	sp, r7
 8002e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6c:	4770      	bx	lr

08002e6e <LL_RCC_IsActiveFlag_HPRE>:
{
 8002e6e:	b480      	push	{r7}
 8002e70:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8002e72:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e76:	689b      	ldr	r3, [r3, #8]
 8002e78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e80:	d101      	bne.n	8002e86 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8002e82:	2301      	movs	r3, #1
 8002e84:	e000      	b.n	8002e88 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8002e86:	2300      	movs	r3, #0
}
 8002e88:	4618      	mov	r0, r3
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e90:	4770      	bx	lr

08002e92 <LL_RCC_IsActiveFlag_C2HPRE>:
{
 8002e92:	b480      	push	{r7}
 8002e94:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8002e96:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e9a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002e9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ea2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002ea6:	d101      	bne.n	8002eac <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8002ea8:	2301      	movs	r3, #1
 8002eaa:	e000      	b.n	8002eae <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8002eac:	2300      	movs	r3, #0
}
 8002eae:	4618      	mov	r0, r3
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb6:	4770      	bx	lr

08002eb8 <LL_RCC_IsActiveFlag_SHDHPRE>:
{
 8002eb8:	b480      	push	{r7}
 8002eba:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8002ebc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ec0:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002ec4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ec8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ecc:	d101      	bne.n	8002ed2 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8002ece:	2301      	movs	r3, #1
 8002ed0:	e000      	b.n	8002ed4 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8002ed2:	2300      	movs	r3, #0
}
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002edc:	4770      	bx	lr

08002ede <LL_RCC_IsActiveFlag_PPRE1>:
{
 8002ede:	b480      	push	{r7}
 8002ee0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8002ee2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ee6:	689b      	ldr	r3, [r3, #8]
 8002ee8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002eec:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002ef0:	d101      	bne.n	8002ef6 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8002ef2:	2301      	movs	r3, #1
 8002ef4:	e000      	b.n	8002ef8 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8002ef6:	2300      	movs	r3, #0
}
 8002ef8:	4618      	mov	r0, r3
 8002efa:	46bd      	mov	sp, r7
 8002efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f00:	4770      	bx	lr

08002f02 <LL_RCC_IsActiveFlag_PPRE2>:
{
 8002f02:	b480      	push	{r7}
 8002f04:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8002f06:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f0a:	689b      	ldr	r3, [r3, #8]
 8002f0c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f10:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002f14:	d101      	bne.n	8002f1a <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8002f16:	2301      	movs	r3, #1
 8002f18:	e000      	b.n	8002f1c <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8002f1a:	2300      	movs	r3, #0
}
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f24:	4770      	bx	lr
	...

08002f28 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f28:	b590      	push	{r4, r7, lr}
 8002f2a:	b08d      	sub	sp, #52	; 0x34
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d101      	bne.n	8002f3a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002f36:	2301      	movs	r3, #1
 8002f38:	e37e      	b.n	8003638 <HAL_RCC_OscConfig+0x710>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f003 0320 	and.w	r3, r3, #32
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	f000 8092 	beq.w	800306c <HAL_RCC_OscConfig+0x144>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002f48:	f7ff fe89 	bl	8002c5e <LL_RCC_GetSysClkSource>
 8002f4c:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002f4e:	f7ff ff82 	bl	8002e56 <LL_RCC_PLL_GetMainSource>
 8002f52:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8002f54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d005      	beq.n	8002f66 <HAL_RCC_OscConfig+0x3e>
 8002f5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f5c:	2b0c      	cmp	r3, #12
 8002f5e:	d14c      	bne.n	8002ffa <HAL_RCC_OscConfig+0xd2>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8002f60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f62:	2b01      	cmp	r3, #1
 8002f64:	d149      	bne.n	8002ffa <HAL_RCC_OscConfig+0xd2>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002f66:	f7ff fe17 	bl	8002b98 <LL_RCC_MSI_IsReady>
 8002f6a:	4603      	mov	r3, r0
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d005      	beq.n	8002f7c <HAL_RCC_OscConfig+0x54>
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	69db      	ldr	r3, [r3, #28]
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d101      	bne.n	8002f7c <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8002f78:	2301      	movs	r3, #1
 8002f7a:	e35d      	b.n	8003638 <HAL_RCC_OscConfig+0x710>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8002f80:	f7ff fe2f 	bl	8002be2 <LL_RCC_MSI_GetRange>
 8002f84:	4603      	mov	r3, r0
 8002f86:	429c      	cmp	r4, r3
 8002f88:	d914      	bls.n	8002fb4 <HAL_RCC_OscConfig+0x8c>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f8e:	4618      	mov	r0, r3
 8002f90:	f000 fd42 	bl	8003a18 <RCC_SetFlashLatencyFromMSIRange>
 8002f94:	4603      	mov	r3, r0
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d001      	beq.n	8002f9e <HAL_RCC_OscConfig+0x76>
          {
            return HAL_ERROR;
 8002f9a:	2301      	movs	r3, #1
 8002f9c:	e34c      	b.n	8003638 <HAL_RCC_OscConfig+0x710>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	f7ff fe09 	bl	8002bba <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6a1b      	ldr	r3, [r3, #32]
 8002fac:	4618      	mov	r0, r3
 8002fae:	f7ff fe2d 	bl	8002c0c <LL_RCC_MSI_SetCalibTrimming>
 8002fb2:	e013      	b.n	8002fdc <HAL_RCC_OscConfig+0xb4>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fb8:	4618      	mov	r0, r3
 8002fba:	f7ff fdfe 	bl	8002bba <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6a1b      	ldr	r3, [r3, #32]
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	f7ff fe22 	bl	8002c0c <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fcc:	4618      	mov	r0, r3
 8002fce:	f000 fd23 	bl	8003a18 <RCC_SetFlashLatencyFromMSIRange>
 8002fd2:	4603      	mov	r3, r0
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d001      	beq.n	8002fdc <HAL_RCC_OscConfig+0xb4>
          {
            return HAL_ERROR;
 8002fd8:	2301      	movs	r3, #1
 8002fda:	e32d      	b.n	8003638 <HAL_RCC_OscConfig+0x710>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002fdc:	f000 fcdc 	bl	8003998 <HAL_RCC_GetHCLKFreq>
 8002fe0:	4603      	mov	r3, r0
 8002fe2:	4ab3      	ldr	r2, [pc, #716]	; (80032b0 <HAL_RCC_OscConfig+0x388>)
 8002fe4:	6013      	str	r3, [r2, #0]
        
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002fe6:	4bb3      	ldr	r3, [pc, #716]	; (80032b4 <HAL_RCC_OscConfig+0x38c>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	4618      	mov	r0, r3
 8002fec:	f7fe fcca 	bl	8001984 <HAL_InitTick>
 8002ff0:	4603      	mov	r3, r0
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d039      	beq.n	800306a <HAL_RCC_OscConfig+0x142>
        {
          return HAL_ERROR;
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	e31e      	b.n	8003638 <HAL_RCC_OscConfig+0x710>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	69db      	ldr	r3, [r3, #28]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d01e      	beq.n	8003040 <HAL_RCC_OscConfig+0x118>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003002:	f7ff fdab 	bl	8002b5c <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003006:	f7fe fd0b 	bl	8001a20 <HAL_GetTick>
 800300a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 800300c:	e008      	b.n	8003020 <HAL_RCC_OscConfig+0xf8>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800300e:	f7fe fd07 	bl	8001a20 <HAL_GetTick>
 8003012:	4602      	mov	r2, r0
 8003014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003016:	1ad3      	subs	r3, r2, r3
 8003018:	2b02      	cmp	r3, #2
 800301a:	d901      	bls.n	8003020 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 800301c:	2303      	movs	r3, #3
 800301e:	e30b      	b.n	8003638 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_MSI_IsReady() == 0U)
 8003020:	f7ff fdba 	bl	8002b98 <LL_RCC_MSI_IsReady>
 8003024:	4603      	mov	r3, r0
 8003026:	2b00      	cmp	r3, #0
 8003028:	d0f1      	beq.n	800300e <HAL_RCC_OscConfig+0xe6>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800302e:	4618      	mov	r0, r3
 8003030:	f7ff fdc3 	bl	8002bba <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6a1b      	ldr	r3, [r3, #32]
 8003038:	4618      	mov	r0, r3
 800303a:	f7ff fde7 	bl	8002c0c <LL_RCC_MSI_SetCalibTrimming>
 800303e:	e015      	b.n	800306c <HAL_RCC_OscConfig+0x144>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003040:	f7ff fd9b 	bl	8002b7a <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003044:	f7fe fcec 	bl	8001a20 <HAL_GetTick>
 8003048:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 800304a:	e008      	b.n	800305e <HAL_RCC_OscConfig+0x136>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800304c:	f7fe fce8 	bl	8001a20 <HAL_GetTick>
 8003050:	4602      	mov	r2, r0
 8003052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003054:	1ad3      	subs	r3, r2, r3
 8003056:	2b02      	cmp	r3, #2
 8003058:	d901      	bls.n	800305e <HAL_RCC_OscConfig+0x136>
          {
            return HAL_TIMEOUT;
 800305a:	2303      	movs	r3, #3
 800305c:	e2ec      	b.n	8003638 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_MSI_IsReady() != 0U)
 800305e:	f7ff fd9b 	bl	8002b98 <LL_RCC_MSI_IsReady>
 8003062:	4603      	mov	r3, r0
 8003064:	2b00      	cmp	r3, #0
 8003066:	d1f1      	bne.n	800304c <HAL_RCC_OscConfig+0x124>
 8003068:	e000      	b.n	800306c <HAL_RCC_OscConfig+0x144>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800306a:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f003 0301 	and.w	r3, r3, #1
 8003074:	2b00      	cmp	r3, #0
 8003076:	d04e      	beq.n	8003116 <HAL_RCC_OscConfig+0x1ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003078:	f7ff fdf1 	bl	8002c5e <LL_RCC_GetSysClkSource>
 800307c:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800307e:	f7ff feea 	bl	8002e56 <LL_RCC_PLL_GetMainSource>
 8003082:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8003084:	6a3b      	ldr	r3, [r7, #32]
 8003086:	2b08      	cmp	r3, #8
 8003088:	d005      	beq.n	8003096 <HAL_RCC_OscConfig+0x16e>
 800308a:	6a3b      	ldr	r3, [r7, #32]
 800308c:	2b0c      	cmp	r3, #12
 800308e:	d10d      	bne.n	80030ac <HAL_RCC_OscConfig+0x184>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8003090:	69fb      	ldr	r3, [r7, #28]
 8003092:	2b03      	cmp	r3, #3
 8003094:	d10a      	bne.n	80030ac <HAL_RCC_OscConfig+0x184>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003096:	f7ff fc01 	bl	800289c <LL_RCC_HSE_IsReady>
 800309a:	4603      	mov	r3, r0
 800309c:	2b00      	cmp	r3, #0
 800309e:	d039      	beq.n	8003114 <HAL_RCC_OscConfig+0x1ec>
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	685b      	ldr	r3, [r3, #4]
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d135      	bne.n	8003114 <HAL_RCC_OscConfig+0x1ec>
      {
        return HAL_ERROR;
 80030a8:	2301      	movs	r3, #1
 80030aa:	e2c5      	b.n	8003638 <HAL_RCC_OscConfig+0x710>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	685b      	ldr	r3, [r3, #4]
 80030b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030b4:	d102      	bne.n	80030bc <HAL_RCC_OscConfig+0x194>
 80030b6:	f7ff fbd3 	bl	8002860 <LL_RCC_HSE_Enable>
 80030ba:	e001      	b.n	80030c0 <HAL_RCC_OscConfig+0x198>
 80030bc:	f7ff fbdf 	bl	800287e <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	685b      	ldr	r3, [r3, #4]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d012      	beq.n	80030ee <HAL_RCC_OscConfig+0x1c6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030c8:	f7fe fcaa 	bl	8001a20 <HAL_GetTick>
 80030cc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 80030ce:	e008      	b.n	80030e2 <HAL_RCC_OscConfig+0x1ba>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80030d0:	f7fe fca6 	bl	8001a20 <HAL_GetTick>
 80030d4:	4602      	mov	r2, r0
 80030d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030d8:	1ad3      	subs	r3, r2, r3
 80030da:	2b64      	cmp	r3, #100	; 0x64
 80030dc:	d901      	bls.n	80030e2 <HAL_RCC_OscConfig+0x1ba>
          {
            return HAL_TIMEOUT;
 80030de:	2303      	movs	r3, #3
 80030e0:	e2aa      	b.n	8003638 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSE_IsReady() == 0U)
 80030e2:	f7ff fbdb 	bl	800289c <LL_RCC_HSE_IsReady>
 80030e6:	4603      	mov	r3, r0
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d0f1      	beq.n	80030d0 <HAL_RCC_OscConfig+0x1a8>
 80030ec:	e013      	b.n	8003116 <HAL_RCC_OscConfig+0x1ee>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030ee:	f7fe fc97 	bl	8001a20 <HAL_GetTick>
 80030f2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 80030f4:	e008      	b.n	8003108 <HAL_RCC_OscConfig+0x1e0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80030f6:	f7fe fc93 	bl	8001a20 <HAL_GetTick>
 80030fa:	4602      	mov	r2, r0
 80030fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030fe:	1ad3      	subs	r3, r2, r3
 8003100:	2b64      	cmp	r3, #100	; 0x64
 8003102:	d901      	bls.n	8003108 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8003104:	2303      	movs	r3, #3
 8003106:	e297      	b.n	8003638 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSE_IsReady() != 0U)
 8003108:	f7ff fbc8 	bl	800289c <LL_RCC_HSE_IsReady>
 800310c:	4603      	mov	r3, r0
 800310e:	2b00      	cmp	r3, #0
 8003110:	d1f1      	bne.n	80030f6 <HAL_RCC_OscConfig+0x1ce>
 8003112:	e000      	b.n	8003116 <HAL_RCC_OscConfig+0x1ee>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003114:	bf00      	nop
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f003 0302 	and.w	r3, r3, #2
 800311e:	2b00      	cmp	r3, #0
 8003120:	d051      	beq.n	80031c6 <HAL_RCC_OscConfig+0x29e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003122:	f7ff fd9c 	bl	8002c5e <LL_RCC_GetSysClkSource>
 8003126:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003128:	f7ff fe95 	bl	8002e56 <LL_RCC_PLL_GetMainSource>
 800312c:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800312e:	69bb      	ldr	r3, [r7, #24]
 8003130:	2b04      	cmp	r3, #4
 8003132:	d005      	beq.n	8003140 <HAL_RCC_OscConfig+0x218>
 8003134:	69bb      	ldr	r3, [r7, #24]
 8003136:	2b0c      	cmp	r3, #12
 8003138:	d113      	bne.n	8003162 <HAL_RCC_OscConfig+0x23a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 800313a:	697b      	ldr	r3, [r7, #20]
 800313c:	2b02      	cmp	r3, #2
 800313e:	d110      	bne.n	8003162 <HAL_RCC_OscConfig+0x23a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003140:	f7ff fbdc 	bl	80028fc <LL_RCC_HSI_IsReady>
 8003144:	4603      	mov	r3, r0
 8003146:	2b00      	cmp	r3, #0
 8003148:	d005      	beq.n	8003156 <HAL_RCC_OscConfig+0x22e>
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	68db      	ldr	r3, [r3, #12]
 800314e:	2b00      	cmp	r3, #0
 8003150:	d101      	bne.n	8003156 <HAL_RCC_OscConfig+0x22e>
      {
        return HAL_ERROR;
 8003152:	2301      	movs	r3, #1
 8003154:	e270      	b.n	8003638 <HAL_RCC_OscConfig+0x710>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	691b      	ldr	r3, [r3, #16]
 800315a:	4618      	mov	r0, r3
 800315c:	f7ff fbe0 	bl	8002920 <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003160:	e031      	b.n	80031c6 <HAL_RCC_OscConfig+0x29e>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	68db      	ldr	r3, [r3, #12]
 8003166:	2b00      	cmp	r3, #0
 8003168:	d019      	beq.n	800319e <HAL_RCC_OscConfig+0x276>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800316a:	f7ff fba9 	bl	80028c0 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800316e:	f7fe fc57 	bl	8001a20 <HAL_GetTick>
 8003172:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8003174:	e008      	b.n	8003188 <HAL_RCC_OscConfig+0x260>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003176:	f7fe fc53 	bl	8001a20 <HAL_GetTick>
 800317a:	4602      	mov	r2, r0
 800317c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800317e:	1ad3      	subs	r3, r2, r3
 8003180:	2b02      	cmp	r3, #2
 8003182:	d901      	bls.n	8003188 <HAL_RCC_OscConfig+0x260>
          {
            return HAL_TIMEOUT;
 8003184:	2303      	movs	r3, #3
 8003186:	e257      	b.n	8003638 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSI_IsReady() == 0U)
 8003188:	f7ff fbb8 	bl	80028fc <LL_RCC_HSI_IsReady>
 800318c:	4603      	mov	r3, r0
 800318e:	2b00      	cmp	r3, #0
 8003190:	d0f1      	beq.n	8003176 <HAL_RCC_OscConfig+0x24e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	691b      	ldr	r3, [r3, #16]
 8003196:	4618      	mov	r0, r3
 8003198:	f7ff fbc2 	bl	8002920 <LL_RCC_HSI_SetCalibTrimming>
 800319c:	e013      	b.n	80031c6 <HAL_RCC_OscConfig+0x29e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800319e:	f7ff fb9e 	bl	80028de <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031a2:	f7fe fc3d 	bl	8001a20 <HAL_GetTick>
 80031a6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 80031a8:	e008      	b.n	80031bc <HAL_RCC_OscConfig+0x294>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80031aa:	f7fe fc39 	bl	8001a20 <HAL_GetTick>
 80031ae:	4602      	mov	r2, r0
 80031b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031b2:	1ad3      	subs	r3, r2, r3
 80031b4:	2b02      	cmp	r3, #2
 80031b6:	d901      	bls.n	80031bc <HAL_RCC_OscConfig+0x294>
          {
            return HAL_TIMEOUT;
 80031b8:	2303      	movs	r3, #3
 80031ba:	e23d      	b.n	8003638 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSI_IsReady() != 0U)
 80031bc:	f7ff fb9e 	bl	80028fc <LL_RCC_HSI_IsReady>
 80031c0:	4603      	mov	r3, r0
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d1f1      	bne.n	80031aa <HAL_RCC_OscConfig+0x282>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f003 0308 	and.w	r3, r3, #8
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d106      	bne.n	80031e0 <HAL_RCC_OscConfig+0x2b8>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80031da:	2b00      	cmp	r3, #0
 80031dc:	f000 80a3 	beq.w	8003326 <HAL_RCC_OscConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	695b      	ldr	r3, [r3, #20]
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d076      	beq.n	80032d6 <HAL_RCC_OscConfig+0x3ae>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f003 0310 	and.w	r3, r3, #16
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d046      	beq.n	8003282 <HAL_RCC_OscConfig+0x35a>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 80031f4:	f7ff fc55 	bl	8002aa2 <LL_RCC_LSI1_IsReady>
 80031f8:	4603      	mov	r3, r0
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d113      	bne.n	8003226 <HAL_RCC_OscConfig+0x2fe>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 80031fe:	f7ff fc2e 	bl	8002a5e <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003202:	f7fe fc0d 	bl	8001a20 <HAL_GetTick>
 8003206:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8003208:	e008      	b.n	800321c <HAL_RCC_OscConfig+0x2f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800320a:	f7fe fc09 	bl	8001a20 <HAL_GetTick>
 800320e:	4602      	mov	r2, r0
 8003210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003212:	1ad3      	subs	r3, r2, r3
 8003214:	2b02      	cmp	r3, #2
 8003216:	d901      	bls.n	800321c <HAL_RCC_OscConfig+0x2f4>
            {
              return HAL_TIMEOUT;
 8003218:	2303      	movs	r3, #3
 800321a:	e20d      	b.n	8003638 <HAL_RCC_OscConfig+0x710>
          while (LL_RCC_LSI1_IsReady() == 0U)
 800321c:	f7ff fc41 	bl	8002aa2 <LL_RCC_LSI1_IsReady>
 8003220:	4603      	mov	r3, r0
 8003222:	2b00      	cmp	r3, #0
 8003224:	d0f1      	beq.n	800320a <HAL_RCC_OscConfig+0x2e2>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8003226:	f7ff fc4e 	bl	8002ac6 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800322a:	f7fe fbf9 	bl	8001a20 <HAL_GetTick>
 800322e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8003230:	e008      	b.n	8003244 <HAL_RCC_OscConfig+0x31c>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8003232:	f7fe fbf5 	bl	8001a20 <HAL_GetTick>
 8003236:	4602      	mov	r2, r0
 8003238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800323a:	1ad3      	subs	r3, r2, r3
 800323c:	2b03      	cmp	r3, #3
 800323e:	d901      	bls.n	8003244 <HAL_RCC_OscConfig+0x31c>
          {
            return HAL_TIMEOUT;
 8003240:	2303      	movs	r3, #3
 8003242:	e1f9      	b.n	8003638 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8003244:	f7ff fc61 	bl	8002b0a <LL_RCC_LSI2_IsReady>
 8003248:	4603      	mov	r3, r0
 800324a:	2b00      	cmp	r3, #0
 800324c:	d0f1      	beq.n	8003232 <HAL_RCC_OscConfig+0x30a>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	699b      	ldr	r3, [r3, #24]
 8003252:	4618      	mov	r0, r3
 8003254:	f7ff fc6b 	bl	8002b2e <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8003258:	f7ff fc12 	bl	8002a80 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800325c:	f7fe fbe0 	bl	8001a20 <HAL_GetTick>
 8003260:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8003262:	e008      	b.n	8003276 <HAL_RCC_OscConfig+0x34e>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8003264:	f7fe fbdc 	bl	8001a20 <HAL_GetTick>
 8003268:	4602      	mov	r2, r0
 800326a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800326c:	1ad3      	subs	r3, r2, r3
 800326e:	2b02      	cmp	r3, #2
 8003270:	d901      	bls.n	8003276 <HAL_RCC_OscConfig+0x34e>
          {
            return HAL_TIMEOUT;
 8003272:	2303      	movs	r3, #3
 8003274:	e1e0      	b.n	8003638 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8003276:	f7ff fc14 	bl	8002aa2 <LL_RCC_LSI1_IsReady>
 800327a:	4603      	mov	r3, r0
 800327c:	2b00      	cmp	r3, #0
 800327e:	d1f1      	bne.n	8003264 <HAL_RCC_OscConfig+0x33c>
 8003280:	e051      	b.n	8003326 <HAL_RCC_OscConfig+0x3fe>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8003282:	f7ff fbec 	bl	8002a5e <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003286:	f7fe fbcb 	bl	8001a20 <HAL_GetTick>
 800328a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 800328c:	e008      	b.n	80032a0 <HAL_RCC_OscConfig+0x378>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800328e:	f7fe fbc7 	bl	8001a20 <HAL_GetTick>
 8003292:	4602      	mov	r2, r0
 8003294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003296:	1ad3      	subs	r3, r2, r3
 8003298:	2b02      	cmp	r3, #2
 800329a:	d901      	bls.n	80032a0 <HAL_RCC_OscConfig+0x378>
          {
            return HAL_TIMEOUT;
 800329c:	2303      	movs	r3, #3
 800329e:	e1cb      	b.n	8003638 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI1_IsReady() == 0U)
 80032a0:	f7ff fbff 	bl	8002aa2 <LL_RCC_LSI1_IsReady>
 80032a4:	4603      	mov	r3, r0
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d0f1      	beq.n	800328e <HAL_RCC_OscConfig+0x366>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 80032aa:	f7ff fc1d 	bl	8002ae8 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 80032ae:	e00c      	b.n	80032ca <HAL_RCC_OscConfig+0x3a2>
 80032b0:	20000004 	.word	0x20000004
 80032b4:	20000008 	.word	0x20000008
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80032b8:	f7fe fbb2 	bl	8001a20 <HAL_GetTick>
 80032bc:	4602      	mov	r2, r0
 80032be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032c0:	1ad3      	subs	r3, r2, r3
 80032c2:	2b03      	cmp	r3, #3
 80032c4:	d901      	bls.n	80032ca <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80032c6:	2303      	movs	r3, #3
 80032c8:	e1b6      	b.n	8003638 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI2_IsReady() != 0U)
 80032ca:	f7ff fc1e 	bl	8002b0a <LL_RCC_LSI2_IsReady>
 80032ce:	4603      	mov	r3, r0
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d1f1      	bne.n	80032b8 <HAL_RCC_OscConfig+0x390>
 80032d4:	e027      	b.n	8003326 <HAL_RCC_OscConfig+0x3fe>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 80032d6:	f7ff fc07 	bl	8002ae8 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032da:	f7fe fba1 	bl	8001a20 <HAL_GetTick>
 80032de:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 80032e0:	e008      	b.n	80032f4 <HAL_RCC_OscConfig+0x3cc>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80032e2:	f7fe fb9d 	bl	8001a20 <HAL_GetTick>
 80032e6:	4602      	mov	r2, r0
 80032e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ea:	1ad3      	subs	r3, r2, r3
 80032ec:	2b03      	cmp	r3, #3
 80032ee:	d901      	bls.n	80032f4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80032f0:	2303      	movs	r3, #3
 80032f2:	e1a1      	b.n	8003638 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSI2_IsReady() != 0U)
 80032f4:	f7ff fc09 	bl	8002b0a <LL_RCC_LSI2_IsReady>
 80032f8:	4603      	mov	r3, r0
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d1f1      	bne.n	80032e2 <HAL_RCC_OscConfig+0x3ba>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 80032fe:	f7ff fbbf 	bl	8002a80 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003302:	f7fe fb8d 	bl	8001a20 <HAL_GetTick>
 8003306:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8003308:	e008      	b.n	800331c <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800330a:	f7fe fb89 	bl	8001a20 <HAL_GetTick>
 800330e:	4602      	mov	r2, r0
 8003310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003312:	1ad3      	subs	r3, r2, r3
 8003314:	2b02      	cmp	r3, #2
 8003316:	d901      	bls.n	800331c <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8003318:	2303      	movs	r3, #3
 800331a:	e18d      	b.n	8003638 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSI1_IsReady() != 0U)
 800331c:	f7ff fbc1 	bl	8002aa2 <LL_RCC_LSI1_IsReady>
 8003320:	4603      	mov	r3, r0
 8003322:	2b00      	cmp	r3, #0
 8003324:	d1f1      	bne.n	800330a <HAL_RCC_OscConfig+0x3e2>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f003 0304 	and.w	r3, r3, #4
 800332e:	2b00      	cmp	r3, #0
 8003330:	d05b      	beq.n	80033ea <HAL_RCC_OscConfig+0x4c2>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003332:	4bb5      	ldr	r3, [pc, #724]	; (8003608 <HAL_RCC_OscConfig+0x6e0>)
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800333a:	2b00      	cmp	r3, #0
 800333c:	d114      	bne.n	8003368 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800333e:	f7ff fa5f 	bl	8002800 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003342:	f7fe fb6d 	bl	8001a20 <HAL_GetTick>
 8003346:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003348:	e008      	b.n	800335c <HAL_RCC_OscConfig+0x434>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800334a:	f7fe fb69 	bl	8001a20 <HAL_GetTick>
 800334e:	4602      	mov	r2, r0
 8003350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003352:	1ad3      	subs	r3, r2, r3
 8003354:	2b02      	cmp	r3, #2
 8003356:	d901      	bls.n	800335c <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 8003358:	2303      	movs	r3, #3
 800335a:	e16d      	b.n	8003638 <HAL_RCC_OscConfig+0x710>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800335c:	4baa      	ldr	r3, [pc, #680]	; (8003608 <HAL_RCC_OscConfig+0x6e0>)
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003364:	2b00      	cmp	r3, #0
 8003366:	d0f0      	beq.n	800334a <HAL_RCC_OscConfig+0x422>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	689b      	ldr	r3, [r3, #8]
 800336c:	2b01      	cmp	r3, #1
 800336e:	d102      	bne.n	8003376 <HAL_RCC_OscConfig+0x44e>
 8003370:	f7ff fb1f 	bl	80029b2 <LL_RCC_LSE_Enable>
 8003374:	e00c      	b.n	8003390 <HAL_RCC_OscConfig+0x468>
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	689b      	ldr	r3, [r3, #8]
 800337a:	2b05      	cmp	r3, #5
 800337c:	d104      	bne.n	8003388 <HAL_RCC_OscConfig+0x460>
 800337e:	f7ff fb3a 	bl	80029f6 <LL_RCC_LSE_EnableBypass>
 8003382:	f7ff fb16 	bl	80029b2 <LL_RCC_LSE_Enable>
 8003386:	e003      	b.n	8003390 <HAL_RCC_OscConfig+0x468>
 8003388:	f7ff fb24 	bl	80029d4 <LL_RCC_LSE_Disable>
 800338c:	f7ff fb44 	bl	8002a18 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	689b      	ldr	r3, [r3, #8]
 8003394:	2b00      	cmp	r3, #0
 8003396:	d014      	beq.n	80033c2 <HAL_RCC_OscConfig+0x49a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003398:	f7fe fb42 	bl	8001a20 <HAL_GetTick>
 800339c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 800339e:	e00a      	b.n	80033b6 <HAL_RCC_OscConfig+0x48e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033a0:	f7fe fb3e 	bl	8001a20 <HAL_GetTick>
 80033a4:	4602      	mov	r2, r0
 80033a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033a8:	1ad3      	subs	r3, r2, r3
 80033aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d901      	bls.n	80033b6 <HAL_RCC_OscConfig+0x48e>
        {
          return HAL_TIMEOUT;
 80033b2:	2303      	movs	r3, #3
 80033b4:	e140      	b.n	8003638 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSE_IsReady() == 0U)
 80033b6:	f7ff fb40 	bl	8002a3a <LL_RCC_LSE_IsReady>
 80033ba:	4603      	mov	r3, r0
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d0ef      	beq.n	80033a0 <HAL_RCC_OscConfig+0x478>
 80033c0:	e013      	b.n	80033ea <HAL_RCC_OscConfig+0x4c2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033c2:	f7fe fb2d 	bl	8001a20 <HAL_GetTick>
 80033c6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 80033c8:	e00a      	b.n	80033e0 <HAL_RCC_OscConfig+0x4b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033ca:	f7fe fb29 	bl	8001a20 <HAL_GetTick>
 80033ce:	4602      	mov	r2, r0
 80033d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033d2:	1ad3      	subs	r3, r2, r3
 80033d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80033d8:	4293      	cmp	r3, r2
 80033da:	d901      	bls.n	80033e0 <HAL_RCC_OscConfig+0x4b8>
        {
          return HAL_TIMEOUT;
 80033dc:	2303      	movs	r3, #3
 80033de:	e12b      	b.n	8003638 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSE_IsReady() != 0U)
 80033e0:	f7ff fb2b 	bl	8002a3a <LL_RCC_LSE_IsReady>
 80033e4:	4603      	mov	r3, r0
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d1ef      	bne.n	80033ca <HAL_RCC_OscConfig+0x4a2>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d02c      	beq.n	8003450 <HAL_RCC_OscConfig+0x528>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d014      	beq.n	8003428 <HAL_RCC_OscConfig+0x500>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80033fe:	f7ff faa4 	bl	800294a <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003402:	f7fe fb0d 	bl	8001a20 <HAL_GetTick>
 8003406:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8003408:	e008      	b.n	800341c <HAL_RCC_OscConfig+0x4f4>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800340a:	f7fe fb09 	bl	8001a20 <HAL_GetTick>
 800340e:	4602      	mov	r2, r0
 8003410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003412:	1ad3      	subs	r3, r2, r3
 8003414:	2b02      	cmp	r3, #2
 8003416:	d901      	bls.n	800341c <HAL_RCC_OscConfig+0x4f4>
        {
          return HAL_TIMEOUT;
 8003418:	2303      	movs	r3, #3
 800341a:	e10d      	b.n	8003638 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_HSI48_IsReady() == 0U)
 800341c:	f7ff fab7 	bl	800298e <LL_RCC_HSI48_IsReady>
 8003420:	4603      	mov	r3, r0
 8003422:	2b00      	cmp	r3, #0
 8003424:	d0f1      	beq.n	800340a <HAL_RCC_OscConfig+0x4e2>
 8003426:	e013      	b.n	8003450 <HAL_RCC_OscConfig+0x528>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003428:	f7ff faa0 	bl	800296c <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800342c:	f7fe faf8 	bl	8001a20 <HAL_GetTick>
 8003430:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8003432:	e008      	b.n	8003446 <HAL_RCC_OscConfig+0x51e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003434:	f7fe faf4 	bl	8001a20 <HAL_GetTick>
 8003438:	4602      	mov	r2, r0
 800343a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800343c:	1ad3      	subs	r3, r2, r3
 800343e:	2b02      	cmp	r3, #2
 8003440:	d901      	bls.n	8003446 <HAL_RCC_OscConfig+0x51e>
        {
          return HAL_TIMEOUT;
 8003442:	2303      	movs	r3, #3
 8003444:	e0f8      	b.n	8003638 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8003446:	f7ff faa2 	bl	800298e <LL_RCC_HSI48_IsReady>
 800344a:	4603      	mov	r3, r0
 800344c:	2b00      	cmp	r3, #0
 800344e:	d1f1      	bne.n	8003434 <HAL_RCC_OscConfig+0x50c>
#endif
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003454:	2b00      	cmp	r3, #0
 8003456:	f000 80ee 	beq.w	8003636 <HAL_RCC_OscConfig+0x70e>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800345a:	f7ff fc00 	bl	8002c5e <LL_RCC_GetSysClkSource>
 800345e:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8003460:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003464:	68db      	ldr	r3, [r3, #12]
 8003466:	60fb      	str	r3, [r7, #12]
    
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800346c:	2b02      	cmp	r3, #2
 800346e:	f040 80af 	bne.w	80035d0 <HAL_RCC_OscConfig+0x6a8>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
      
      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	f003 0203 	and.w	r2, r3, #3
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800347c:	429a      	cmp	r2, r3
 800347e:	d123      	bne.n	80034c8 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800348a:	429a      	cmp	r2, r3
 800348c:	d11c      	bne.n	80034c8 <HAL_RCC_OscConfig+0x5a0>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	0a1b      	lsrs	r3, r3, #8
 8003492:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800349a:	429a      	cmp	r2, r3
 800349c:	d114      	bne.n	80034c8 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80034a8:	429a      	cmp	r2, r3
 80034aa:	d10d      	bne.n	80034c8 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80034b6:	429a      	cmp	r2, r3
 80034b8:	d106      	bne.n	80034c8 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80034c4:	429a      	cmp	r2, r3
 80034c6:	d05d      	beq.n	8003584 <HAL_RCC_OscConfig+0x65c>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80034c8:	693b      	ldr	r3, [r7, #16]
 80034ca:	2b0c      	cmp	r3, #12
 80034cc:	d058      	beq.n	8003580 <HAL_RCC_OscConfig+0x658>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80034ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d001      	beq.n	80034e0 <HAL_RCC_OscConfig+0x5b8>

          {
            return HAL_ERROR;
 80034dc:	2301      	movs	r3, #1
 80034de:	e0ab      	b.n	8003638 <HAL_RCC_OscConfig+0x710>
          }
          else
#endif
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80034e0:	f7ff fc73 	bl	8002dca <LL_RCC_PLL_Disable>
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80034e4:	f7fe fa9c 	bl	8001a20 <HAL_GetTick>
 80034e8:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80034ea:	e008      	b.n	80034fe <HAL_RCC_OscConfig+0x5d6>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034ec:	f7fe fa98 	bl	8001a20 <HAL_GetTick>
 80034f0:	4602      	mov	r2, r0
 80034f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034f4:	1ad3      	subs	r3, r2, r3
 80034f6:	2b02      	cmp	r3, #2
 80034f8:	d901      	bls.n	80034fe <HAL_RCC_OscConfig+0x5d6>
              {
                return HAL_TIMEOUT;
 80034fa:	2303      	movs	r3, #3
 80034fc:	e09c      	b.n	8003638 <HAL_RCC_OscConfig+0x710>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80034fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003508:	2b00      	cmp	r3, #0
 800350a:	d1ef      	bne.n	80034ec <HAL_RCC_OscConfig+0x5c4>
              }
            }
            
            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800350c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003510:	68da      	ldr	r2, [r3, #12]
 8003512:	4b3e      	ldr	r3, [pc, #248]	; (800360c <HAL_RCC_OscConfig+0x6e4>)
 8003514:	4013      	ands	r3, r2
 8003516:	687a      	ldr	r2, [r7, #4]
 8003518:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800351a:	687a      	ldr	r2, [r7, #4]
 800351c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800351e:	4311      	orrs	r1, r2
 8003520:	687a      	ldr	r2, [r7, #4]
 8003522:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003524:	0212      	lsls	r2, r2, #8
 8003526:	4311      	orrs	r1, r2
 8003528:	687a      	ldr	r2, [r7, #4]
 800352a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800352c:	4311      	orrs	r1, r2
 800352e:	687a      	ldr	r2, [r7, #4]
 8003530:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003532:	4311      	orrs	r1, r2
 8003534:	687a      	ldr	r2, [r7, #4]
 8003536:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003538:	430a      	orrs	r2, r1
 800353a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800353e:	4313      	orrs	r3, r2
 8003540:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
            
            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003542:	f7ff fc33 	bl	8002dac <LL_RCC_PLL_Enable>
            
            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003546:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800354a:	68db      	ldr	r3, [r3, #12]
 800354c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003550:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003554:	60d3      	str	r3, [r2, #12]
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003556:	f7fe fa63 	bl	8001a20 <HAL_GetTick>
 800355a:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800355c:	e008      	b.n	8003570 <HAL_RCC_OscConfig+0x648>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800355e:	f7fe fa5f 	bl	8001a20 <HAL_GetTick>
 8003562:	4602      	mov	r2, r0
 8003564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003566:	1ad3      	subs	r3, r2, r3
 8003568:	2b02      	cmp	r3, #2
 800356a:	d901      	bls.n	8003570 <HAL_RCC_OscConfig+0x648>
              {
                return HAL_TIMEOUT;
 800356c:	2303      	movs	r3, #3
 800356e:	e063      	b.n	8003638 <HAL_RCC_OscConfig+0x710>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003570:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800357a:	2b00      	cmp	r3, #0
 800357c:	d0ef      	beq.n	800355e <HAL_RCC_OscConfig+0x636>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800357e:	e05a      	b.n	8003636 <HAL_RCC_OscConfig+0x70e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003580:	2301      	movs	r3, #1
 8003582:	e059      	b.n	8003638 <HAL_RCC_OscConfig+0x710>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003584:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800358e:	2b00      	cmp	r3, #0
 8003590:	d151      	bne.n	8003636 <HAL_RCC_OscConfig+0x70e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003592:	f7ff fc0b 	bl	8002dac <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003596:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800359a:	68db      	ldr	r3, [r3, #12]
 800359c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80035a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035a4:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80035a6:	f7fe fa3b 	bl	8001a20 <HAL_GetTick>
 80035aa:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80035ac:	e008      	b.n	80035c0 <HAL_RCC_OscConfig+0x698>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035ae:	f7fe fa37 	bl	8001a20 <HAL_GetTick>
 80035b2:	4602      	mov	r2, r0
 80035b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035b6:	1ad3      	subs	r3, r2, r3
 80035b8:	2b02      	cmp	r3, #2
 80035ba:	d901      	bls.n	80035c0 <HAL_RCC_OscConfig+0x698>
            {
              return HAL_TIMEOUT;
 80035bc:	2303      	movs	r3, #3
 80035be:	e03b      	b.n	8003638 <HAL_RCC_OscConfig+0x710>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80035c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d0ef      	beq.n	80035ae <HAL_RCC_OscConfig+0x686>
 80035ce:	e032      	b.n	8003636 <HAL_RCC_OscConfig+0x70e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80035d0:	693b      	ldr	r3, [r7, #16]
 80035d2:	2b0c      	cmp	r3, #12
 80035d4:	d02d      	beq.n	8003632 <HAL_RCC_OscConfig+0x70a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035d6:	f7ff fbf8 	bl	8002dca <LL_RCC_PLL_Disable>
        

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 80035da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80035de:	68db      	ldr	r3, [r3, #12]
 80035e0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80035e4:	f023 0303 	bic.w	r3, r3, #3
 80035e8:	60d3      	str	r3, [r2, #12]

#if defined(SAI1) && defined(USB)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_USBCLK | RCC_PLL_SAI1CLK);
 80035ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80035ee:	68db      	ldr	r3, [r3, #12]
 80035f0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80035f4:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 80035f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035fc:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK);
#endif

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035fe:	f7fe fa0f 	bl	8001a20 <HAL_GetTick>
 8003602:	6278      	str	r0, [r7, #36]	; 0x24
        
        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003604:	e00d      	b.n	8003622 <HAL_RCC_OscConfig+0x6fa>
 8003606:	bf00      	nop
 8003608:	58000400 	.word	0x58000400
 800360c:	11c1808c 	.word	0x11c1808c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003610:	f7fe fa06 	bl	8001a20 <HAL_GetTick>
 8003614:	4602      	mov	r2, r0
 8003616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003618:	1ad3      	subs	r3, r2, r3
 800361a:	2b02      	cmp	r3, #2
 800361c:	d901      	bls.n	8003622 <HAL_RCC_OscConfig+0x6fa>
          {
            return HAL_TIMEOUT;
 800361e:	2303      	movs	r3, #3
 8003620:	e00a      	b.n	8003638 <HAL_RCC_OscConfig+0x710>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003622:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800362c:	2b00      	cmp	r3, #0
 800362e:	d1ef      	bne.n	8003610 <HAL_RCC_OscConfig+0x6e8>
 8003630:	e001      	b.n	8003636 <HAL_RCC_OscConfig+0x70e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003632:	2301      	movs	r3, #1
 8003634:	e000      	b.n	8003638 <HAL_RCC_OscConfig+0x710>
      }
    }
  }
  return HAL_OK;
 8003636:	2300      	movs	r3, #0
}
 8003638:	4618      	mov	r0, r3
 800363a:	3734      	adds	r7, #52	; 0x34
 800363c:	46bd      	mov	sp, r7
 800363e:	bd90      	pop	{r4, r7, pc}

08003640 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003640:	b580      	push	{r7, lr}
 8003642:	b084      	sub	sp, #16
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
 8003648:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	2b00      	cmp	r3, #0
 800364e:	d101      	bne.n	8003654 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003650:	2301      	movs	r3, #1
 8003652:	e12d      	b.n	80038b0 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003654:	4b98      	ldr	r3, [pc, #608]	; (80038b8 <HAL_RCC_ClockConfig+0x278>)
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f003 0307 	and.w	r3, r3, #7
 800365c:	683a      	ldr	r2, [r7, #0]
 800365e:	429a      	cmp	r2, r3
 8003660:	d91b      	bls.n	800369a <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003662:	4b95      	ldr	r3, [pc, #596]	; (80038b8 <HAL_RCC_ClockConfig+0x278>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f023 0207 	bic.w	r2, r3, #7
 800366a:	4993      	ldr	r1, [pc, #588]	; (80038b8 <HAL_RCC_ClockConfig+0x278>)
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	4313      	orrs	r3, r2
 8003670:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003672:	f7fe f9d5 	bl	8001a20 <HAL_GetTick>
 8003676:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003678:	e008      	b.n	800368c <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800367a:	f7fe f9d1 	bl	8001a20 <HAL_GetTick>
 800367e:	4602      	mov	r2, r0
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	1ad3      	subs	r3, r2, r3
 8003684:	2b02      	cmp	r3, #2
 8003686:	d901      	bls.n	800368c <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8003688:	2303      	movs	r3, #3
 800368a:	e111      	b.n	80038b0 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800368c:	4b8a      	ldr	r3, [pc, #552]	; (80038b8 <HAL_RCC_ClockConfig+0x278>)
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f003 0307 	and.w	r3, r3, #7
 8003694:	683a      	ldr	r2, [r7, #0]
 8003696:	429a      	cmp	r2, r3
 8003698:	d1ef      	bne.n	800367a <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f003 0302 	and.w	r3, r3, #2
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d016      	beq.n	80036d4 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	689b      	ldr	r3, [r3, #8]
 80036aa:	4618      	mov	r0, r3
 80036ac:	f7ff fae3 	bl	8002c76 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80036b0:	f7fe f9b6 	bl	8001a20 <HAL_GetTick>
 80036b4:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80036b6:	e008      	b.n	80036ca <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80036b8:	f7fe f9b2 	bl	8001a20 <HAL_GetTick>
 80036bc:	4602      	mov	r2, r0
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	1ad3      	subs	r3, r2, r3
 80036c2:	2b02      	cmp	r3, #2
 80036c4:	d901      	bls.n	80036ca <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 80036c6:	2303      	movs	r3, #3
 80036c8:	e0f2      	b.n	80038b0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80036ca:	f7ff fbd0 	bl	8002e6e <LL_RCC_IsActiveFlag_HPRE>
 80036ce:	4603      	mov	r3, r0
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d0f1      	beq.n	80036b8 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f003 0320 	and.w	r3, r3, #32
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d016      	beq.n	800370e <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	695b      	ldr	r3, [r3, #20]
 80036e4:	4618      	mov	r0, r3
 80036e6:	f7ff fada 	bl	8002c9e <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80036ea:	f7fe f999 	bl	8001a20 <HAL_GetTick>
 80036ee:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80036f0:	e008      	b.n	8003704 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80036f2:	f7fe f995 	bl	8001a20 <HAL_GetTick>
 80036f6:	4602      	mov	r2, r0
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	1ad3      	subs	r3, r2, r3
 80036fc:	2b02      	cmp	r3, #2
 80036fe:	d901      	bls.n	8003704 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8003700:	2303      	movs	r3, #3
 8003702:	e0d5      	b.n	80038b0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8003704:	f7ff fbc5 	bl	8002e92 <LL_RCC_IsActiveFlag_C2HPRE>
 8003708:	4603      	mov	r3, r0
 800370a:	2b00      	cmp	r3, #0
 800370c:	d0f1      	beq.n	80036f2 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003716:	2b00      	cmp	r3, #0
 8003718:	d016      	beq.n	8003748 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	699b      	ldr	r3, [r3, #24]
 800371e:	4618      	mov	r0, r3
 8003720:	f7ff fad3 	bl	8002cca <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003724:	f7fe f97c 	bl	8001a20 <HAL_GetTick>
 8003728:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800372a:	e008      	b.n	800373e <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800372c:	f7fe f978 	bl	8001a20 <HAL_GetTick>
 8003730:	4602      	mov	r2, r0
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	1ad3      	subs	r3, r2, r3
 8003736:	2b02      	cmp	r3, #2
 8003738:	d901      	bls.n	800373e <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 800373a:	2303      	movs	r3, #3
 800373c:	e0b8      	b.n	80038b0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800373e:	f7ff fbbb 	bl	8002eb8 <LL_RCC_IsActiveFlag_SHDHPRE>
 8003742:	4603      	mov	r3, r0
 8003744:	2b00      	cmp	r3, #0
 8003746:	d0f1      	beq.n	800372c <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f003 0304 	and.w	r3, r3, #4
 8003750:	2b00      	cmp	r3, #0
 8003752:	d016      	beq.n	8003782 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	68db      	ldr	r3, [r3, #12]
 8003758:	4618      	mov	r0, r3
 800375a:	f7ff facd 	bl	8002cf8 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800375e:	f7fe f95f 	bl	8001a20 <HAL_GetTick>
 8003762:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8003764:	e008      	b.n	8003778 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003766:	f7fe f95b 	bl	8001a20 <HAL_GetTick>
 800376a:	4602      	mov	r2, r0
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	1ad3      	subs	r3, r2, r3
 8003770:	2b02      	cmp	r3, #2
 8003772:	d901      	bls.n	8003778 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8003774:	2303      	movs	r3, #3
 8003776:	e09b      	b.n	80038b0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8003778:	f7ff fbb1 	bl	8002ede <LL_RCC_IsActiveFlag_PPRE1>
 800377c:	4603      	mov	r3, r0
 800377e:	2b00      	cmp	r3, #0
 8003780:	d0f1      	beq.n	8003766 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f003 0308 	and.w	r3, r3, #8
 800378a:	2b00      	cmp	r3, #0
 800378c:	d017      	beq.n	80037be <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	691b      	ldr	r3, [r3, #16]
 8003792:	00db      	lsls	r3, r3, #3
 8003794:	4618      	mov	r0, r3
 8003796:	f7ff fac3 	bl	8002d20 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800379a:	f7fe f941 	bl	8001a20 <HAL_GetTick>
 800379e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80037a0:	e008      	b.n	80037b4 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80037a2:	f7fe f93d 	bl	8001a20 <HAL_GetTick>
 80037a6:	4602      	mov	r2, r0
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	1ad3      	subs	r3, r2, r3
 80037ac:	2b02      	cmp	r3, #2
 80037ae:	d901      	bls.n	80037b4 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 80037b0:	2303      	movs	r3, #3
 80037b2:	e07d      	b.n	80038b0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80037b4:	f7ff fba5 	bl	8002f02 <LL_RCC_IsActiveFlag_PPRE2>
 80037b8:	4603      	mov	r3, r0
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d0f1      	beq.n	80037a2 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f003 0301 	and.w	r3, r3, #1
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d043      	beq.n	8003852 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	685b      	ldr	r3, [r3, #4]
 80037ce:	2b02      	cmp	r3, #2
 80037d0:	d106      	bne.n	80037e0 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 80037d2:	f7ff f863 	bl	800289c <LL_RCC_HSE_IsReady>
 80037d6:	4603      	mov	r3, r0
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d11e      	bne.n	800381a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80037dc:	2301      	movs	r3, #1
 80037de:	e067      	b.n	80038b0 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	685b      	ldr	r3, [r3, #4]
 80037e4:	2b03      	cmp	r3, #3
 80037e6:	d106      	bne.n	80037f6 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 80037e8:	f7ff fafe 	bl	8002de8 <LL_RCC_PLL_IsReady>
 80037ec:	4603      	mov	r3, r0
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d113      	bne.n	800381a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80037f2:	2301      	movs	r3, #1
 80037f4:	e05c      	b.n	80038b0 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	685b      	ldr	r3, [r3, #4]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d106      	bne.n	800380c <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 80037fe:	f7ff f9cb 	bl	8002b98 <LL_RCC_MSI_IsReady>
 8003802:	4603      	mov	r3, r0
 8003804:	2b00      	cmp	r3, #0
 8003806:	d108      	bne.n	800381a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003808:	2301      	movs	r3, #1
 800380a:	e051      	b.n	80038b0 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 800380c:	f7ff f876 	bl	80028fc <LL_RCC_HSI_IsReady>
 8003810:	4603      	mov	r3, r0
 8003812:	2b00      	cmp	r3, #0
 8003814:	d101      	bne.n	800381a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003816:	2301      	movs	r3, #1
 8003818:	e04a      	b.n	80038b0 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	685b      	ldr	r3, [r3, #4]
 800381e:	4618      	mov	r0, r3
 8003820:	f7ff fa09 	bl	8002c36 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003824:	f7fe f8fc 	bl	8001a20 <HAL_GetTick>
 8003828:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800382a:	e00a      	b.n	8003842 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800382c:	f7fe f8f8 	bl	8001a20 <HAL_GetTick>
 8003830:	4602      	mov	r2, r0
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	1ad3      	subs	r3, r2, r3
 8003836:	f241 3288 	movw	r2, #5000	; 0x1388
 800383a:	4293      	cmp	r3, r2
 800383c:	d901      	bls.n	8003842 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 800383e:	2303      	movs	r3, #3
 8003840:	e036      	b.n	80038b0 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003842:	f7ff fa0c 	bl	8002c5e <LL_RCC_GetSysClkSource>
 8003846:	4602      	mov	r2, r0
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	685b      	ldr	r3, [r3, #4]
 800384c:	009b      	lsls	r3, r3, #2
 800384e:	429a      	cmp	r2, r3
 8003850:	d1ec      	bne.n	800382c <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003852:	4b19      	ldr	r3, [pc, #100]	; (80038b8 <HAL_RCC_ClockConfig+0x278>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f003 0307 	and.w	r3, r3, #7
 800385a:	683a      	ldr	r2, [r7, #0]
 800385c:	429a      	cmp	r2, r3
 800385e:	d21b      	bcs.n	8003898 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003860:	4b15      	ldr	r3, [pc, #84]	; (80038b8 <HAL_RCC_ClockConfig+0x278>)
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f023 0207 	bic.w	r2, r3, #7
 8003868:	4913      	ldr	r1, [pc, #76]	; (80038b8 <HAL_RCC_ClockConfig+0x278>)
 800386a:	683b      	ldr	r3, [r7, #0]
 800386c:	4313      	orrs	r3, r2
 800386e:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003870:	f7fe f8d6 	bl	8001a20 <HAL_GetTick>
 8003874:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003876:	e008      	b.n	800388a <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003878:	f7fe f8d2 	bl	8001a20 <HAL_GetTick>
 800387c:	4602      	mov	r2, r0
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	1ad3      	subs	r3, r2, r3
 8003882:	2b02      	cmp	r3, #2
 8003884:	d901      	bls.n	800388a <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8003886:	2303      	movs	r3, #3
 8003888:	e012      	b.n	80038b0 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800388a:	4b0b      	ldr	r3, [pc, #44]	; (80038b8 <HAL_RCC_ClockConfig+0x278>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f003 0307 	and.w	r3, r3, #7
 8003892:	683a      	ldr	r2, [r7, #0]
 8003894:	429a      	cmp	r2, r3
 8003896:	d1ef      	bne.n	8003878 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8003898:	f000 f87e 	bl	8003998 <HAL_RCC_GetHCLKFreq>
 800389c:	4603      	mov	r3, r0
 800389e:	4a07      	ldr	r2, [pc, #28]	; (80038bc <HAL_RCC_ClockConfig+0x27c>)
 80038a0:	6013      	str	r3, [r2, #0]
  
  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 80038a2:	f7fe f8c9 	bl	8001a38 <HAL_GetTickPrio>
 80038a6:	4603      	mov	r3, r0
 80038a8:	4618      	mov	r0, r3
 80038aa:	f7fe f86b 	bl	8001984 <HAL_InitTick>
 80038ae:	4603      	mov	r3, r0
}
 80038b0:	4618      	mov	r0, r3
 80038b2:	3710      	adds	r7, #16
 80038b4:	46bd      	mov	sp, r7
 80038b6:	bd80      	pop	{r7, pc}
 80038b8:	58004000 	.word	0x58004000
 80038bc:	20000004 	.word	0x20000004

080038c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80038c0:	b590      	push	{r4, r7, lr}
 80038c2:	b085      	sub	sp, #20
 80038c4:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq, pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80038c6:	f7ff f9ca 	bl	8002c5e <LL_RCC_GetSysClkSource>
 80038ca:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d10a      	bne.n	80038e8 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80038d2:	f7ff f986 	bl	8002be2 <LL_RCC_MSI_GetRange>
 80038d6:	4603      	mov	r3, r0
 80038d8:	091b      	lsrs	r3, r3, #4
 80038da:	f003 030f 	and.w	r3, r3, #15
 80038de:	4a2b      	ldr	r2, [pc, #172]	; (800398c <HAL_RCC_GetSysClockFreq+0xcc>)
 80038e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80038e4:	60fb      	str	r3, [r7, #12]
 80038e6:	e04b      	b.n	8003980 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2b04      	cmp	r3, #4
 80038ec:	d102      	bne.n	80038f4 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80038ee:	4b28      	ldr	r3, [pc, #160]	; (8003990 <HAL_RCC_GetSysClockFreq+0xd0>)
 80038f0:	60fb      	str	r3, [r7, #12]
 80038f2:	e045      	b.n	8003980 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2b08      	cmp	r3, #8
 80038f8:	d10a      	bne.n	8003910 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80038fa:	f7fe ff9f 	bl	800283c <LL_RCC_HSE_IsEnabledDiv2>
 80038fe:	4603      	mov	r3, r0
 8003900:	2b01      	cmp	r3, #1
 8003902:	d102      	bne.n	800390a <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8003904:	4b22      	ldr	r3, [pc, #136]	; (8003990 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003906:	60fb      	str	r3, [r7, #12]
 8003908:	e03a      	b.n	8003980 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 800390a:	4b22      	ldr	r3, [pc, #136]	; (8003994 <HAL_RCC_GetSysClockFreq+0xd4>)
 800390c:	60fb      	str	r3, [r7, #12]
 800390e:	e037      	b.n	8003980 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8003910:	f7ff faa1 	bl	8002e56 <LL_RCC_PLL_GetMainSource>
 8003914:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8003916:	683b      	ldr	r3, [r7, #0]
 8003918:	2b02      	cmp	r3, #2
 800391a:	d003      	beq.n	8003924 <HAL_RCC_GetSysClockFreq+0x64>
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	2b03      	cmp	r3, #3
 8003920:	d003      	beq.n	800392a <HAL_RCC_GetSysClockFreq+0x6a>
 8003922:	e00d      	b.n	8003940 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8003924:	4b1a      	ldr	r3, [pc, #104]	; (8003990 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003926:	60bb      	str	r3, [r7, #8]
        break;
 8003928:	e015      	b.n	8003956 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800392a:	f7fe ff87 	bl	800283c <LL_RCC_HSE_IsEnabledDiv2>
 800392e:	4603      	mov	r3, r0
 8003930:	2b01      	cmp	r3, #1
 8003932:	d102      	bne.n	800393a <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8003934:	4b16      	ldr	r3, [pc, #88]	; (8003990 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003936:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8003938:	e00d      	b.n	8003956 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 800393a:	4b16      	ldr	r3, [pc, #88]	; (8003994 <HAL_RCC_GetSysClockFreq+0xd4>)
 800393c:	60bb      	str	r3, [r7, #8]
        break;
 800393e:	e00a      	b.n	8003956 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8003940:	f7ff f94f 	bl	8002be2 <LL_RCC_MSI_GetRange>
 8003944:	4603      	mov	r3, r0
 8003946:	091b      	lsrs	r3, r3, #4
 8003948:	f003 030f 	and.w	r3, r3, #15
 800394c:	4a0f      	ldr	r2, [pc, #60]	; (800398c <HAL_RCC_GetSysClockFreq+0xcc>)
 800394e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003952:	60bb      	str	r3, [r7, #8]
        break;
 8003954:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
 8003956:	f7ff fa59 	bl	8002e0c <LL_RCC_PLL_GetN>
 800395a:	4602      	mov	r2, r0
 800395c:	68bb      	ldr	r3, [r7, #8]
 800395e:	fb03 f402 	mul.w	r4, r3, r2
 8003962:	f7ff fa6c 	bl	8002e3e <LL_RCC_PLL_GetDivider>
 8003966:	4603      	mov	r3, r0
 8003968:	091b      	lsrs	r3, r3, #4
 800396a:	3301      	adds	r3, #1
 800396c:	fbb4 f4f3 	udiv	r4, r4, r3
 8003970:	f7ff fa59 	bl	8002e26 <LL_RCC_PLL_GetR>
 8003974:	4603      	mov	r3, r0
 8003976:	0f5b      	lsrs	r3, r3, #29
 8003978:	3301      	adds	r3, #1
 800397a:	fbb4 f3f3 	udiv	r3, r4, r3
 800397e:	60fb      	str	r3, [r7, #12]
  }

  return sysclockfreq;
 8003980:	68fb      	ldr	r3, [r7, #12]
}
 8003982:	4618      	mov	r0, r3
 8003984:	3714      	adds	r7, #20
 8003986:	46bd      	mov	sp, r7
 8003988:	bd90      	pop	{r4, r7, pc}
 800398a:	bf00      	nop
 800398c:	0800abb0 	.word	0x0800abb0
 8003990:	00f42400 	.word	0x00f42400
 8003994:	01e84800 	.word	0x01e84800

08003998 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003998:	b598      	push	{r3, r4, r7, lr}
 800399a:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 800399c:	f7ff ff90 	bl	80038c0 <HAL_RCC_GetSysClockFreq>
 80039a0:	4604      	mov	r4, r0
 80039a2:	f7ff f9d1 	bl	8002d48 <LL_RCC_GetAHBPrescaler>
 80039a6:	4603      	mov	r3, r0
 80039a8:	091b      	lsrs	r3, r3, #4
 80039aa:	f003 030f 	and.w	r3, r3, #15
 80039ae:	4a03      	ldr	r2, [pc, #12]	; (80039bc <HAL_RCC_GetHCLKFreq+0x24>)
 80039b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039b4:	fbb4 f3f3 	udiv	r3, r4, r3
}
 80039b8:	4618      	mov	r0, r3
 80039ba:	bd98      	pop	{r3, r4, r7, pc}
 80039bc:	0800ab50 	.word	0x0800ab50

080039c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80039c0:	b598      	push	{r3, r4, r7, lr}
 80039c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80039c4:	f7ff ffe8 	bl	8003998 <HAL_RCC_GetHCLKFreq>
 80039c8:	4604      	mov	r4, r0
 80039ca:	f7ff f9d7 	bl	8002d7c <LL_RCC_GetAPB1Prescaler>
 80039ce:	4603      	mov	r3, r0
 80039d0:	0a1b      	lsrs	r3, r3, #8
 80039d2:	f003 0307 	and.w	r3, r3, #7
 80039d6:	4a04      	ldr	r2, [pc, #16]	; (80039e8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80039d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039dc:	f003 031f 	and.w	r3, r3, #31
 80039e0:	fa24 f303 	lsr.w	r3, r4, r3
}
 80039e4:	4618      	mov	r0, r3
 80039e6:	bd98      	pop	{r3, r4, r7, pc}
 80039e8:	0800ab90 	.word	0x0800ab90

080039ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80039ec:	b598      	push	{r3, r4, r7, lr}
 80039ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 80039f0:	f7ff ffd2 	bl	8003998 <HAL_RCC_GetHCLKFreq>
 80039f4:	4604      	mov	r4, r0
 80039f6:	f7ff f9cd 	bl	8002d94 <LL_RCC_GetAPB2Prescaler>
 80039fa:	4603      	mov	r3, r0
 80039fc:	0adb      	lsrs	r3, r3, #11
 80039fe:	f003 0307 	and.w	r3, r3, #7
 8003a02:	4a04      	ldr	r2, [pc, #16]	; (8003a14 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003a04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a08:	f003 031f 	and.w	r3, r3, #31
 8003a0c:	fa24 f303 	lsr.w	r3, r4, r3
}
 8003a10:	4618      	mov	r0, r3
 8003a12:	bd98      	pop	{r3, r4, r7, pc}
 8003a14:	0800ab90 	.word	0x0800ab90

08003a18 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8003a18:	b590      	push	{r4, r7, lr}
 8003a1a:	b085      	sub	sp, #20
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2bb0      	cmp	r3, #176	; 0xb0
 8003a24:	d903      	bls.n	8003a2e <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8003a26:	4b15      	ldr	r3, [pc, #84]	; (8003a7c <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8003a28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a2a:	60fb      	str	r3, [r7, #12]
 8003a2c:	e007      	b.n	8003a3e <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	091b      	lsrs	r3, r3, #4
 8003a32:	f003 030f 	and.w	r3, r3, #15
 8003a36:	4a11      	ldr	r2, [pc, #68]	; (8003a7c <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8003a38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a3c:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8003a3e:	f7ff f98f 	bl	8002d60 <LL_RCC_GetAHB4Prescaler>
 8003a42:	4603      	mov	r3, r0
 8003a44:	091b      	lsrs	r3, r3, #4
 8003a46:	f003 030f 	and.w	r3, r3, #15
 8003a4a:	4a0d      	ldr	r2, [pc, #52]	; (8003a80 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8003a4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a50:	68fa      	ldr	r2, [r7, #12]
 8003a52:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a56:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8003a58:	68bb      	ldr	r3, [r7, #8]
 8003a5a:	4a0a      	ldr	r2, [pc, #40]	; (8003a84 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8003a5c:	fba2 2303 	umull	r2, r3, r2, r3
 8003a60:	0c9c      	lsrs	r4, r3, #18
 8003a62:	f7fe fedd 	bl	8002820 <HAL_PWREx_GetVoltageRange>
 8003a66:	4603      	mov	r3, r0
 8003a68:	4619      	mov	r1, r3
 8003a6a:	4620      	mov	r0, r4
 8003a6c:	f000 f80c 	bl	8003a88 <RCC_SetFlashLatency>
 8003a70:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif
}
 8003a72:	4618      	mov	r0, r3
 8003a74:	3714      	adds	r7, #20
 8003a76:	46bd      	mov	sp, r7
 8003a78:	bd90      	pop	{r4, r7, pc}
 8003a7a:	bf00      	nop
 8003a7c:	0800abb0 	.word	0x0800abb0
 8003a80:	0800ab50 	.word	0x0800ab50
 8003a84:	431bde83 	.word	0x431bde83

08003a88 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8003a88:	b590      	push	{r4, r7, lr}
 8003a8a:	b093      	sub	sp, #76	; 0x4c
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
 8003a90:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8003a92:	4b39      	ldr	r3, [pc, #228]	; (8003b78 <RCC_SetFlashLatency+0xf0>)
 8003a94:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8003a98:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003a9a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8003a9e:	4a37      	ldr	r2, [pc, #220]	; (8003b7c <RCC_SetFlashLatency+0xf4>)
 8003aa0:	f107 031c 	add.w	r3, r7, #28
 8003aa4:	ca07      	ldmia	r2, {r0, r1, r2}
 8003aa6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8003aaa:	4b35      	ldr	r3, [pc, #212]	; (8003b80 <RCC_SetFlashLatency+0xf8>)
 8003aac:	f107 040c 	add.w	r4, r7, #12
 8003ab0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003ab2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8003ab6:	2300      	movs	r3, #0
 8003ab8:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003aba:	683b      	ldr	r3, [r7, #0]
 8003abc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ac0:	d11c      	bne.n	8003afc <RCC_SetFlashLatency+0x74>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	643b      	str	r3, [r7, #64]	; 0x40
 8003ac6:	e015      	b.n	8003af4 <RCC_SetFlashLatency+0x6c>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8003ac8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003aca:	009b      	lsls	r3, r3, #2
 8003acc:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003ad0:	4413      	add	r3, r2
 8003ad2:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8003ad6:	687a      	ldr	r2, [r7, #4]
 8003ad8:	429a      	cmp	r2, r3
 8003ada:	d808      	bhi.n	8003aee <RCC_SetFlashLatency+0x66>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8003adc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ade:	009b      	lsls	r3, r3, #2
 8003ae0:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003ae4:	4413      	add	r3, r2
 8003ae6:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8003aea:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8003aec:	e022      	b.n	8003b34 <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8003aee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003af0:	3301      	adds	r3, #1
 8003af2:	643b      	str	r3, [r7, #64]	; 0x40
 8003af4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003af6:	2b03      	cmp	r3, #3
 8003af8:	d9e6      	bls.n	8003ac8 <RCC_SetFlashLatency+0x40>
 8003afa:	e01b      	b.n	8003b34 <RCC_SetFlashLatency+0xac>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8003afc:	2300      	movs	r3, #0
 8003afe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003b00:	e015      	b.n	8003b2e <RCC_SetFlashLatency+0xa6>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8003b02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b04:	009b      	lsls	r3, r3, #2
 8003b06:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003b0a:	4413      	add	r3, r2
 8003b0c:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8003b10:	687a      	ldr	r2, [r7, #4]
 8003b12:	429a      	cmp	r2, r3
 8003b14:	d808      	bhi.n	8003b28 <RCC_SetFlashLatency+0xa0>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8003b16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b18:	009b      	lsls	r3, r3, #2
 8003b1a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003b1e:	4413      	add	r3, r2
 8003b20:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8003b24:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8003b26:	e005      	b.n	8003b34 <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8003b28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b2a:	3301      	adds	r3, #1
 8003b2c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003b2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b30:	2b02      	cmp	r3, #2
 8003b32:	d9e6      	bls.n	8003b02 <RCC_SetFlashLatency+0x7a>
      break;
    }
  }
#endif

  __HAL_FLASH_SET_LATENCY(latency);
 8003b34:	4b13      	ldr	r3, [pc, #76]	; (8003b84 <RCC_SetFlashLatency+0xfc>)
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f023 0207 	bic.w	r2, r3, #7
 8003b3c:	4911      	ldr	r1, [pc, #68]	; (8003b84 <RCC_SetFlashLatency+0xfc>)
 8003b3e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003b40:	4313      	orrs	r3, r2
 8003b42:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003b44:	f7fd ff6c 	bl	8001a20 <HAL_GetTick>
 8003b48:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8003b4a:	e008      	b.n	8003b5e <RCC_SetFlashLatency+0xd6>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003b4c:	f7fd ff68 	bl	8001a20 <HAL_GetTick>
 8003b50:	4602      	mov	r2, r0
 8003b52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b54:	1ad3      	subs	r3, r2, r3
 8003b56:	2b02      	cmp	r3, #2
 8003b58:	d901      	bls.n	8003b5e <RCC_SetFlashLatency+0xd6>
    {
      return HAL_TIMEOUT;
 8003b5a:	2303      	movs	r3, #3
 8003b5c:	e007      	b.n	8003b6e <RCC_SetFlashLatency+0xe6>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8003b5e:	4b09      	ldr	r3, [pc, #36]	; (8003b84 <RCC_SetFlashLatency+0xfc>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f003 0307 	and.w	r3, r3, #7
 8003b66:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003b68:	429a      	cmp	r2, r3
 8003b6a:	d1ef      	bne.n	8003b4c <RCC_SetFlashLatency+0xc4>
    }
  }
  return HAL_OK;
 8003b6c:	2300      	movs	r3, #0
}
 8003b6e:	4618      	mov	r0, r3
 8003b70:	374c      	adds	r7, #76	; 0x4c
 8003b72:	46bd      	mov	sp, r7
 8003b74:	bd90      	pop	{r4, r7, pc}
 8003b76:	bf00      	nop
 8003b78:	0800a7a0 	.word	0x0800a7a0
 8003b7c:	0800a7b0 	.word	0x0800a7b0
 8003b80:	0800a7bc 	.word	0x0800a7bc
 8003b84:	58004000 	.word	0x58004000

08003b88 <LL_RCC_LSE_IsEnabled>:
{
 8003b88:	b480      	push	{r7}
 8003b8a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8003b8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b94:	f003 0301 	and.w	r3, r3, #1
 8003b98:	2b01      	cmp	r3, #1
 8003b9a:	d101      	bne.n	8003ba0 <LL_RCC_LSE_IsEnabled+0x18>
 8003b9c:	2301      	movs	r3, #1
 8003b9e:	e000      	b.n	8003ba2 <LL_RCC_LSE_IsEnabled+0x1a>
 8003ba0:	2300      	movs	r3, #0
}
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003baa:	4770      	bx	lr

08003bac <LL_RCC_LSE_IsReady>:
{
 8003bac:	b480      	push	{r7}
 8003bae:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8003bb0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003bb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bb8:	f003 0302 	and.w	r3, r3, #2
 8003bbc:	2b02      	cmp	r3, #2
 8003bbe:	d101      	bne.n	8003bc4 <LL_RCC_LSE_IsReady+0x18>
 8003bc0:	2301      	movs	r3, #1
 8003bc2:	e000      	b.n	8003bc6 <LL_RCC_LSE_IsReady+0x1a>
 8003bc4:	2300      	movs	r3, #0
}
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bce:	4770      	bx	lr

08003bd0 <LL_RCC_SetRFWKPClockSource>:
{
 8003bd0:	b480      	push	{r7}
 8003bd2:	b083      	sub	sp, #12
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8003bd8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003bdc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003be0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003be4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	4313      	orrs	r3, r2
 8003bec:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8003bf0:	bf00      	nop
 8003bf2:	370c      	adds	r7, #12
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfa:	4770      	bx	lr

08003bfc <LL_RCC_SetSMPSClockSource>:
{
 8003bfc:	b480      	push	{r7}
 8003bfe:	b083      	sub	sp, #12
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8003c04:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c0a:	f023 0203 	bic.w	r2, r3, #3
 8003c0e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	4313      	orrs	r3, r2
 8003c16:	624b      	str	r3, [r1, #36]	; 0x24
}
 8003c18:	bf00      	nop
 8003c1a:	370c      	adds	r7, #12
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c22:	4770      	bx	lr

08003c24 <LL_RCC_SetSMPSPrescaler>:
{
 8003c24:	b480      	push	{r7}
 8003c26:	b083      	sub	sp, #12
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8003c2c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c32:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003c36:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	4313      	orrs	r3, r2
 8003c3e:	624b      	str	r3, [r1, #36]	; 0x24
}
 8003c40:	bf00      	nop
 8003c42:	370c      	adds	r7, #12
 8003c44:	46bd      	mov	sp, r7
 8003c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4a:	4770      	bx	lr

08003c4c <LL_RCC_SetUSARTClockSource>:
{
 8003c4c:	b480      	push	{r7}
 8003c4e:	b083      	sub	sp, #12
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8003c54:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c5c:	f023 0203 	bic.w	r2, r3, #3
 8003c60:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	4313      	orrs	r3, r2
 8003c68:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003c6c:	bf00      	nop
 8003c6e:	370c      	adds	r7, #12
 8003c70:	46bd      	mov	sp, r7
 8003c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c76:	4770      	bx	lr

08003c78 <LL_RCC_SetLPUARTClockSource>:
{
 8003c78:	b480      	push	{r7}
 8003c7a:	b083      	sub	sp, #12
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8003c80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c88:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003c8c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	4313      	orrs	r3, r2
 8003c94:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003c98:	bf00      	nop
 8003c9a:	370c      	adds	r7, #12
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca2:	4770      	bx	lr

08003ca4 <LL_RCC_SetI2CClockSource>:
{
 8003ca4:	b480      	push	{r7}
 8003ca6:	b083      	sub	sp, #12
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8003cac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003cb0:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	091b      	lsrs	r3, r3, #4
 8003cb8:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8003cbc:	43db      	mvns	r3, r3
 8003cbe:	401a      	ands	r2, r3
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	011b      	lsls	r3, r3, #4
 8003cc4:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8003cc8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003ccc:	4313      	orrs	r3, r2
 8003cce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003cd2:	bf00      	nop
 8003cd4:	370c      	adds	r7, #12
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cdc:	4770      	bx	lr

08003cde <LL_RCC_SetLPTIMClockSource>:
{
 8003cde:	b480      	push	{r7}
 8003ce0:	b083      	sub	sp, #12
 8003ce2:	af00      	add	r7, sp, #0
 8003ce4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8003ce6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003cea:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	0c1b      	lsrs	r3, r3, #16
 8003cf2:	041b      	lsls	r3, r3, #16
 8003cf4:	43db      	mvns	r3, r3
 8003cf6:	401a      	ands	r2, r3
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	041b      	lsls	r3, r3, #16
 8003cfc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003d00:	4313      	orrs	r3, r2
 8003d02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003d06:	bf00      	nop
 8003d08:	370c      	adds	r7, #12
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d10:	4770      	bx	lr

08003d12 <LL_RCC_SetSAIClockSource>:
{
 8003d12:	b480      	push	{r7}
 8003d14:	b083      	sub	sp, #12
 8003d16:	af00      	add	r7, sp, #0
 8003d18:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8003d1a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d22:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003d26:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	4313      	orrs	r3, r2
 8003d2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003d32:	bf00      	nop
 8003d34:	370c      	adds	r7, #12
 8003d36:	46bd      	mov	sp, r7
 8003d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3c:	4770      	bx	lr

08003d3e <LL_RCC_SetRNGClockSource>:
{
 8003d3e:	b480      	push	{r7}
 8003d40:	b083      	sub	sp, #12
 8003d42:	af00      	add	r7, sp, #0
 8003d44:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8003d46:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d4e:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8003d52:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	4313      	orrs	r3, r2
 8003d5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003d5e:	bf00      	nop
 8003d60:	370c      	adds	r7, #12
 8003d62:	46bd      	mov	sp, r7
 8003d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d68:	4770      	bx	lr

08003d6a <LL_RCC_SetCLK48ClockSource>:
{
 8003d6a:	b480      	push	{r7}
 8003d6c:	b083      	sub	sp, #12
 8003d6e:	af00      	add	r7, sp, #0
 8003d70:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8003d72:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d7a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003d7e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	4313      	orrs	r3, r2
 8003d86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003d8a:	bf00      	nop
 8003d8c:	370c      	adds	r7, #12
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d94:	4770      	bx	lr

08003d96 <LL_RCC_SetUSBClockSource>:
{
 8003d96:	b580      	push	{r7, lr}
 8003d98:	b082      	sub	sp, #8
 8003d9a:	af00      	add	r7, sp, #0
 8003d9c:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8003d9e:	6878      	ldr	r0, [r7, #4]
 8003da0:	f7ff ffe3 	bl	8003d6a <LL_RCC_SetCLK48ClockSource>
}
 8003da4:	bf00      	nop
 8003da6:	3708      	adds	r7, #8
 8003da8:	46bd      	mov	sp, r7
 8003daa:	bd80      	pop	{r7, pc}

08003dac <LL_RCC_SetADCClockSource>:
{
 8003dac:	b480      	push	{r7}
 8003dae:	b083      	sub	sp, #12
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8003db4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003db8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dbc:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003dc0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	4313      	orrs	r3, r2
 8003dc8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003dcc:	bf00      	nop
 8003dce:	370c      	adds	r7, #12
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd6:	4770      	bx	lr

08003dd8 <LL_RCC_SetRTCClockSource>:
{
 8003dd8:	b480      	push	{r7}
 8003dda:	b083      	sub	sp, #12
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8003de0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003de4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003de8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003dec:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	4313      	orrs	r3, r2
 8003df4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8003df8:	bf00      	nop
 8003dfa:	370c      	adds	r7, #12
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e02:	4770      	bx	lr

08003e04 <LL_RCC_GetRTCClockSource>:
{
 8003e04:	b480      	push	{r7}
 8003e06:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8003e08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e10:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8003e14:	4618      	mov	r0, r3
 8003e16:	46bd      	mov	sp, r7
 8003e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1c:	4770      	bx	lr

08003e1e <LL_RCC_ForceBackupDomainReset>:
{
 8003e1e:	b480      	push	{r7}
 8003e20:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8003e22:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e2a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003e2e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e32:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003e36:	bf00      	nop
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3e:	4770      	bx	lr

08003e40 <LL_RCC_ReleaseBackupDomainReset>:
{
 8003e40:	b480      	push	{r7}
 8003e42:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8003e44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e4c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003e50:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e54:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003e58:	bf00      	nop
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e60:	4770      	bx	lr

08003e62 <LL_RCC_PLLSAI1_Enable>:
{
 8003e62:	b480      	push	{r7}
 8003e64:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8003e66:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003e70:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003e74:	6013      	str	r3, [r2, #0]
}
 8003e76:	bf00      	nop
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7e:	4770      	bx	lr

08003e80 <LL_RCC_PLLSAI1_Disable>:
{
 8003e80:	b480      	push	{r7}
 8003e82:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8003e84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003e8e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003e92:	6013      	str	r3, [r2, #0]
}
 8003e94:	bf00      	nop
 8003e96:	46bd      	mov	sp, r7
 8003e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9c:	4770      	bx	lr

08003e9e <LL_RCC_PLLSAI1_IsReady>:
{
 8003e9e:	b480      	push	{r7}
 8003ea0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8003ea2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003eac:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003eb0:	d101      	bne.n	8003eb6 <LL_RCC_PLLSAI1_IsReady+0x18>
 8003eb2:	2301      	movs	r3, #1
 8003eb4:	e000      	b.n	8003eb8 <LL_RCC_PLLSAI1_IsReady+0x1a>
 8003eb6:	2300      	movs	r3, #0
}
 8003eb8:	4618      	mov	r0, r3
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec0:	4770      	bx	lr

08003ec2 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003ec2:	b580      	push	{r7, lr}
 8003ec4:	b088      	sub	sp, #32
 8003ec6:	af00      	add	r7, sp, #0
 8003ec8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8003eca:	2300      	movs	r3, #0
 8003ecc:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8003ece:	2300      	movs	r3, #0
 8003ed0:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d034      	beq.n	8003f48 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ee2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003ee6:	d021      	beq.n	8003f2c <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8003ee8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003eec:	d81b      	bhi.n	8003f26 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003eee:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003ef2:	d01d      	beq.n	8003f30 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8003ef4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003ef8:	d815      	bhi.n	8003f26 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d00b      	beq.n	8003f16 <HAL_RCCEx_PeriphCLKConfig+0x54>
 8003efe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003f02:	d110      	bne.n	8003f26 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8003f04:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f08:	68db      	ldr	r3, [r3, #12]
 8003f0a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003f0e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f12:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8003f14:	e00d      	b.n	8003f32 <HAL_RCCEx_PeriphCLKConfig+0x70>

#if defined(SAI1)
      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	3304      	adds	r3, #4
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	f000 f947 	bl	80041ae <RCCEx_PLLSAI1_ConfigNP>
 8003f20:	4603      	mov	r3, r0
 8003f22:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8003f24:	e005      	b.n	8003f32 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8003f26:	2301      	movs	r3, #1
 8003f28:	77fb      	strb	r3, [r7, #31]
        break;
 8003f2a:	e002      	b.n	8003f32 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8003f2c:	bf00      	nop
 8003f2e:	e000      	b.n	8003f32 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8003f30:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f32:	7ffb      	ldrb	r3, [r7, #31]
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d105      	bne.n	8003f44 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	f7ff fee8 	bl	8003d12 <LL_RCC_SetSAIClockSource>
 8003f42:	e001      	b.n	8003f48 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f44:	7ffb      	ldrb	r3, [r7, #31]
 8003f46:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d046      	beq.n	8003fe2 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8003f54:	f7ff ff56 	bl	8003e04 <LL_RCC_GetRTCClockSource>
 8003f58:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f5e:	69ba      	ldr	r2, [r7, #24]
 8003f60:	429a      	cmp	r2, r3
 8003f62:	d03c      	beq.n	8003fde <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8003f64:	f7fe fc4c 	bl	8002800 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8003f68:	69bb      	ldr	r3, [r7, #24]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d105      	bne.n	8003f7a <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f72:	4618      	mov	r0, r3
 8003f74:	f7ff ff30 	bl	8003dd8 <LL_RCC_SetRTCClockSource>
 8003f78:	e02e      	b.n	8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8003f7a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f82:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8003f84:	f7ff ff4b 	bl	8003e1e <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8003f88:	f7ff ff5a 	bl	8003e40 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8003f8c:	697b      	ldr	r3, [r7, #20]
 8003f8e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f96:	4313      	orrs	r3, r2
 8003f98:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8003f9a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003f9e:	697b      	ldr	r3, [r7, #20]
 8003fa0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8003fa4:	f7ff fdf0 	bl	8003b88 <LL_RCC_LSE_IsEnabled>
 8003fa8:	4603      	mov	r3, r0
 8003faa:	2b01      	cmp	r3, #1
 8003fac:	d114      	bne.n	8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003fae:	f7fd fd37 	bl	8001a20 <HAL_GetTick>
 8003fb2:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8003fb4:	e00b      	b.n	8003fce <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003fb6:	f7fd fd33 	bl	8001a20 <HAL_GetTick>
 8003fba:	4602      	mov	r2, r0
 8003fbc:	693b      	ldr	r3, [r7, #16]
 8003fbe:	1ad3      	subs	r3, r2, r3
 8003fc0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fc4:	4293      	cmp	r3, r2
 8003fc6:	d902      	bls.n	8003fce <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 8003fc8:	2303      	movs	r3, #3
 8003fca:	77fb      	strb	r3, [r7, #31]
              break;
 8003fcc:	e004      	b.n	8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 8003fce:	f7ff fded 	bl	8003bac <LL_RCC_LSE_IsReady>
 8003fd2:	4603      	mov	r3, r0
 8003fd4:	2b01      	cmp	r3, #1
 8003fd6:	d1ee      	bne.n	8003fb6 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8003fd8:	7ffb      	ldrb	r3, [r7, #31]
 8003fda:	77bb      	strb	r3, [r7, #30]
 8003fdc:	e001      	b.n	8003fe2 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fde:	7ffb      	ldrb	r3, [r7, #31]
 8003fe0:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f003 0301 	and.w	r3, r3, #1
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d004      	beq.n	8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	699b      	ldr	r3, [r3, #24]
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	f7ff fe2a 	bl	8003c4c <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f003 0302 	and.w	r3, r3, #2
 8004000:	2b00      	cmp	r3, #0
 8004002:	d004      	beq.n	800400e <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	69db      	ldr	r3, [r3, #28]
 8004008:	4618      	mov	r0, r3
 800400a:	f7ff fe35 	bl	8003c78 <LL_RCC_SetLPUARTClockSource>
  }
#endif

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f003 0310 	and.w	r3, r3, #16
 8004016:	2b00      	cmp	r3, #0
 8004018:	d004      	beq.n	8004024 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800401e:	4618      	mov	r0, r3
 8004020:	f7ff fe5d 	bl	8003cde <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f003 0320 	and.w	r3, r3, #32
 800402c:	2b00      	cmp	r3, #0
 800402e:	d004      	beq.n	800403a <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004034:	4618      	mov	r0, r3
 8004036:	f7ff fe52 	bl	8003cde <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f003 0304 	and.w	r3, r3, #4
 8004042:	2b00      	cmp	r3, #0
 8004044:	d004      	beq.n	8004050 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6a1b      	ldr	r3, [r3, #32]
 800404a:	4618      	mov	r0, r3
 800404c:	f7ff fe2a 	bl	8003ca4 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f003 0308 	and.w	r3, r3, #8
 8004058:	2b00      	cmp	r3, #0
 800405a:	d004      	beq.n	8004066 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004060:	4618      	mov	r0, r3
 8004062:	f7ff fe1f 	bl	8003ca4 <LL_RCC_SetI2CClockSource>
  }
#endif

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800406e:	2b00      	cmp	r3, #0
 8004070:	d022      	beq.n	80040b8 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004076:	4618      	mov	r0, r3
 8004078:	f7ff fe8d 	bl	8003d96 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004080:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004084:	d107      	bne.n	8004096 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8004086:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800408a:	68db      	ldr	r3, [r3, #12]
 800408c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004090:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004094:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
  if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800409a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800409e:	d10b      	bne.n	80040b8 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	3304      	adds	r3, #4
 80040a4:	4618      	mov	r0, r3
 80040a6:	f000 f8dd 	bl	8004264 <RCCEx_PLLSAI1_ConfigNQ>
 80040aa:	4603      	mov	r3, r0
 80040ac:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 80040ae:	7ffb      	ldrb	r3, [r7, #31]
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d001      	beq.n	80040b8 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* set overall return value */
      status = ret;
 80040b4:	7ffb      	ldrb	r3, [r7, #31]
 80040b6:	77bb      	strb	r3, [r7, #30]
#endif
  }
#endif

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d02b      	beq.n	800411c <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040cc:	d008      	beq.n	80040e0 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040d2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80040d6:	d003      	beq.n	80040e0 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d105      	bne.n	80040ec <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040e4:	4618      	mov	r0, r3
 80040e6:	f7ff fe2a 	bl	8003d3e <LL_RCC_SetRNGClockSource>
 80040ea:	e00a      	b.n	8004102 <HAL_RCCEx_PeriphCLKConfig+0x240>
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80040f4:	60fb      	str	r3, [r7, #12]
 80040f6:	2000      	movs	r0, #0
 80040f8:	f7ff fe21 	bl	8003d3e <LL_RCC_SetRNGClockSource>
 80040fc:	68f8      	ldr	r0, [r7, #12]
 80040fe:	f7ff fe34 	bl	8003d6a <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004106:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 800410a:	d107      	bne.n	800411c <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 800410c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004110:	68db      	ldr	r3, [r3, #12]
 8004112:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004116:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800411a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004124:	2b00      	cmp	r3, #0
 8004126:	d022      	beq.n	800416e <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800412c:	4618      	mov	r0, r3
 800412e:	f7ff fe3d 	bl	8003dac <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004136:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800413a:	d107      	bne.n	800414c <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800413c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004140:	68db      	ldr	r3, [r3, #12]
 8004142:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004146:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800414a:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
  if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004150:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004154:	d10b      	bne.n	800416e <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	3304      	adds	r3, #4
 800415a:	4618      	mov	r0, r3
 800415c:	f000 f8dd 	bl	800431a <RCCEx_PLLSAI1_ConfigNR>
 8004160:	4603      	mov	r3, r0
 8004162:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 8004164:	7ffb      	ldrb	r3, [r7, #31]
 8004166:	2b00      	cmp	r3, #0
 8004168:	d001      	beq.n	800416e <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* set overall return value */
      status = ret;
 800416a:	7ffb      	ldrb	r3, [r7, #31]
 800416c:	77bb      	strb	r3, [r7, #30]
  }
#endif
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004176:	2b00      	cmp	r3, #0
 8004178:	d004      	beq.n	8004184 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800417e:	4618      	mov	r0, r3
 8004180:	f7ff fd26 	bl	8003bd0 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800418c:	2b00      	cmp	r3, #0
 800418e:	d009      	beq.n	80041a4 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004194:	4618      	mov	r0, r3
 8004196:	f7ff fd45 	bl	8003c24 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800419e:	4618      	mov	r0, r3
 80041a0:	f7ff fd2c 	bl	8003bfc <LL_RCC_SetSMPSClockSource>
  }
#endif


  return status;
 80041a4:	7fbb      	ldrb	r3, [r7, #30]
}
 80041a6:	4618      	mov	r0, r3
 80041a8:	3720      	adds	r7, #32
 80041aa:	46bd      	mov	sp, r7
 80041ac:	bd80      	pop	{r7, pc}

080041ae <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80041ae:	b580      	push	{r7, lr}
 80041b0:	b084      	sub	sp, #16
 80041b2:	af00      	add	r7, sp, #0
 80041b4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80041b6:	2300      	movs	r3, #0
 80041b8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80041ba:	f7ff fe61 	bl	8003e80 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80041be:	f7fd fc2f 	bl	8001a20 <HAL_GetTick>
 80041c2:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80041c4:	e009      	b.n	80041da <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80041c6:	f7fd fc2b 	bl	8001a20 <HAL_GetTick>
 80041ca:	4602      	mov	r2, r0
 80041cc:	68bb      	ldr	r3, [r7, #8]
 80041ce:	1ad3      	subs	r3, r2, r3
 80041d0:	2b02      	cmp	r3, #2
 80041d2:	d902      	bls.n	80041da <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 80041d4:	2303      	movs	r3, #3
 80041d6:	73fb      	strb	r3, [r7, #15]
      break;
 80041d8:	e004      	b.n	80041e4 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80041da:	f7ff fe60 	bl	8003e9e <LL_RCC_PLLSAI1_IsReady>
 80041de:	4603      	mov	r3, r0
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d1f0      	bne.n	80041c6 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 80041e4:	7bfb      	ldrb	r3, [r7, #15]
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d137      	bne.n	800425a <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80041ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041ee:	691b      	ldr	r3, [r3, #16]
 80041f0:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	021b      	lsls	r3, r3, #8
 80041fa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80041fe:	4313      	orrs	r3, r2
 8004200:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8004202:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004206:	691b      	ldr	r3, [r3, #16]
 8004208:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	685b      	ldr	r3, [r3, #4]
 8004210:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004214:	4313      	orrs	r3, r2
 8004216:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8004218:	f7ff fe23 	bl	8003e62 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800421c:	f7fd fc00 	bl	8001a20 <HAL_GetTick>
 8004220:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8004222:	e009      	b.n	8004238 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004224:	f7fd fbfc 	bl	8001a20 <HAL_GetTick>
 8004228:	4602      	mov	r2, r0
 800422a:	68bb      	ldr	r3, [r7, #8]
 800422c:	1ad3      	subs	r3, r2, r3
 800422e:	2b02      	cmp	r3, #2
 8004230:	d902      	bls.n	8004238 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 8004232:	2303      	movs	r3, #3
 8004234:	73fb      	strb	r3, [r7, #15]
        break;
 8004236:	e004      	b.n	8004242 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8004238:	f7ff fe31 	bl	8003e9e <LL_RCC_PLLSAI1_IsReady>
 800423c:	4603      	mov	r3, r0
 800423e:	2b01      	cmp	r3, #1
 8004240:	d1f0      	bne.n	8004224 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 8004242:	7bfb      	ldrb	r3, [r7, #15]
 8004244:	2b00      	cmp	r3, #0
 8004246:	d108      	bne.n	800425a <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8004248:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800424c:	691a      	ldr	r2, [r3, #16]
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	691b      	ldr	r3, [r3, #16]
 8004252:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004256:	4313      	orrs	r3, r2
 8004258:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800425a:	7bfb      	ldrb	r3, [r7, #15]
}
 800425c:	4618      	mov	r0, r3
 800425e:	3710      	adds	r7, #16
 8004260:	46bd      	mov	sp, r7
 8004262:	bd80      	pop	{r7, pc}

08004264 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8004264:	b580      	push	{r7, lr}
 8004266:	b084      	sub	sp, #16
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800426c:	2300      	movs	r3, #0
 800426e:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8004270:	f7ff fe06 	bl	8003e80 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004274:	f7fd fbd4 	bl	8001a20 <HAL_GetTick>
 8004278:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800427a:	e009      	b.n	8004290 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800427c:	f7fd fbd0 	bl	8001a20 <HAL_GetTick>
 8004280:	4602      	mov	r2, r0
 8004282:	68bb      	ldr	r3, [r7, #8]
 8004284:	1ad3      	subs	r3, r2, r3
 8004286:	2b02      	cmp	r3, #2
 8004288:	d902      	bls.n	8004290 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 800428a:	2303      	movs	r3, #3
 800428c:	73fb      	strb	r3, [r7, #15]
      break;
 800428e:	e004      	b.n	800429a <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8004290:	f7ff fe05 	bl	8003e9e <LL_RCC_PLLSAI1_IsReady>
 8004294:	4603      	mov	r3, r0
 8004296:	2b00      	cmp	r3, #0
 8004298:	d1f0      	bne.n	800427c <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 800429a:	7bfb      	ldrb	r3, [r7, #15]
 800429c:	2b00      	cmp	r3, #0
 800429e:	d137      	bne.n	8004310 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80042a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042a4:	691b      	ldr	r3, [r3, #16]
 80042a6:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	021b      	lsls	r3, r3, #8
 80042b0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80042b4:	4313      	orrs	r3, r2
 80042b6:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 80042b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042bc:	691b      	ldr	r3, [r3, #16]
 80042be:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	689b      	ldr	r3, [r3, #8]
 80042c6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80042ca:	4313      	orrs	r3, r2
 80042cc:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80042ce:	f7ff fdc8 	bl	8003e62 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80042d2:	f7fd fba5 	bl	8001a20 <HAL_GetTick>
 80042d6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80042d8:	e009      	b.n	80042ee <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80042da:	f7fd fba1 	bl	8001a20 <HAL_GetTick>
 80042de:	4602      	mov	r2, r0
 80042e0:	68bb      	ldr	r3, [r7, #8]
 80042e2:	1ad3      	subs	r3, r2, r3
 80042e4:	2b02      	cmp	r3, #2
 80042e6:	d902      	bls.n	80042ee <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 80042e8:	2303      	movs	r3, #3
 80042ea:	73fb      	strb	r3, [r7, #15]
        break;
 80042ec:	e004      	b.n	80042f8 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80042ee:	f7ff fdd6 	bl	8003e9e <LL_RCC_PLLSAI1_IsReady>
 80042f2:	4603      	mov	r3, r0
 80042f4:	2b01      	cmp	r3, #1
 80042f6:	d1f0      	bne.n	80042da <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 80042f8:	7bfb      	ldrb	r3, [r7, #15]
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d108      	bne.n	8004310 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80042fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004302:	691a      	ldr	r2, [r3, #16]
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	691b      	ldr	r3, [r3, #16]
 8004308:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800430c:	4313      	orrs	r3, r2
 800430e:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8004310:	7bfb      	ldrb	r3, [r7, #15]
}
 8004312:	4618      	mov	r0, r3
 8004314:	3710      	adds	r7, #16
 8004316:	46bd      	mov	sp, r7
 8004318:	bd80      	pop	{r7, pc}

0800431a <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800431a:	b580      	push	{r7, lr}
 800431c:	b084      	sub	sp, #16
 800431e:	af00      	add	r7, sp, #0
 8004320:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004322:	2300      	movs	r3, #0
 8004324:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8004326:	f7ff fdab 	bl	8003e80 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800432a:	f7fd fb79 	bl	8001a20 <HAL_GetTick>
 800432e:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8004330:	e009      	b.n	8004346 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004332:	f7fd fb75 	bl	8001a20 <HAL_GetTick>
 8004336:	4602      	mov	r2, r0
 8004338:	68bb      	ldr	r3, [r7, #8]
 800433a:	1ad3      	subs	r3, r2, r3
 800433c:	2b02      	cmp	r3, #2
 800433e:	d902      	bls.n	8004346 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8004340:	2303      	movs	r3, #3
 8004342:	73fb      	strb	r3, [r7, #15]
      break;
 8004344:	e004      	b.n	8004350 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8004346:	f7ff fdaa 	bl	8003e9e <LL_RCC_PLLSAI1_IsReady>
 800434a:	4603      	mov	r3, r0
 800434c:	2b00      	cmp	r3, #0
 800434e:	d1f0      	bne.n	8004332 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8004350:	7bfb      	ldrb	r3, [r7, #15]
 8004352:	2b00      	cmp	r3, #0
 8004354:	d137      	bne.n	80043c6 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8004356:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800435a:	691b      	ldr	r3, [r3, #16]
 800435c:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	021b      	lsls	r3, r3, #8
 8004366:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800436a:	4313      	orrs	r3, r2
 800436c:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 800436e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004372:	691b      	ldr	r3, [r3, #16]
 8004374:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	68db      	ldr	r3, [r3, #12]
 800437c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004380:	4313      	orrs	r3, r2
 8004382:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8004384:	f7ff fd6d 	bl	8003e62 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004388:	f7fd fb4a 	bl	8001a20 <HAL_GetTick>
 800438c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800438e:	e009      	b.n	80043a4 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004390:	f7fd fb46 	bl	8001a20 <HAL_GetTick>
 8004394:	4602      	mov	r2, r0
 8004396:	68bb      	ldr	r3, [r7, #8]
 8004398:	1ad3      	subs	r3, r2, r3
 800439a:	2b02      	cmp	r3, #2
 800439c:	d902      	bls.n	80043a4 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 800439e:	2303      	movs	r3, #3
 80043a0:	73fb      	strb	r3, [r7, #15]
        break;
 80043a2:	e004      	b.n	80043ae <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80043a4:	f7ff fd7b 	bl	8003e9e <LL_RCC_PLLSAI1_IsReady>
 80043a8:	4603      	mov	r3, r0
 80043aa:	2b01      	cmp	r3, #1
 80043ac:	d1f0      	bne.n	8004390 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 80043ae:	7bfb      	ldrb	r3, [r7, #15]
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d108      	bne.n	80043c6 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80043b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043b8:	691a      	ldr	r2, [r3, #16]
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	691b      	ldr	r3, [r3, #16]
 80043be:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80043c2:	4313      	orrs	r3, r2
 80043c4:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80043c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80043c8:	4618      	mov	r0, r3
 80043ca:	3710      	adds	r7, #16
 80043cc:	46bd      	mov	sp, r7
 80043ce:	bd80      	pop	{r7, pc}

080043d0 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80043d0:	b580      	push	{r7, lr}
 80043d2:	b082      	sub	sp, #8
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d101      	bne.n	80043e2 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 80043de:	2301      	movs	r3, #1
 80043e0:	e090      	b.n	8004504 <HAL_RTC_Init+0x134>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80043e8:	b2db      	uxtb	r3, r3
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d106      	bne.n	80043fc <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	2200      	movs	r2, #0
 80043f2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80043f6:	6878      	ldr	r0, [r7, #4]
 80043f8:	f7fc fffe 	bl	80013f8 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2202      	movs	r2, #2
 8004400:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	22ca      	movs	r2, #202	; 0xca
 800440a:	625a      	str	r2, [r3, #36]	; 0x24
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	2253      	movs	r2, #83	; 0x53
 8004412:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8004414:	6878      	ldr	r0, [r7, #4]
 8004416:	f000 f89f 	bl	8004558 <RTC_EnterInitMode>
 800441a:	4603      	mov	r3, r0
 800441c:	2b00      	cmp	r3, #0
 800441e:	d009      	beq.n	8004434 <HAL_RTC_Init+0x64>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	22ff      	movs	r2, #255	; 0xff
 8004426:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2204      	movs	r2, #4
 800442c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    return HAL_ERROR;
 8004430:	2301      	movs	r3, #1
 8004432:	e067      	b.n	8004504 <HAL_RTC_Init+0x134>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	689b      	ldr	r3, [r3, #8]
 800443a:	687a      	ldr	r2, [r7, #4]
 800443c:	6812      	ldr	r2, [r2, #0]
 800443e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004442:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004446:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	6899      	ldr	r1, [r3, #8]
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	685a      	ldr	r2, [r3, #4]
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	691b      	ldr	r3, [r3, #16]
 8004456:	431a      	orrs	r2, r3
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	699b      	ldr	r3, [r3, #24]
 800445c:	431a      	orrs	r2, r3
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	430a      	orrs	r2, r1
 8004464:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	687a      	ldr	r2, [r7, #4]
 800446c:	68d2      	ldr	r2, [r2, #12]
 800446e:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	6919      	ldr	r1, [r3, #16]
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	689b      	ldr	r3, [r3, #8]
 800447a:	041a      	lsls	r2, r3, #16
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	430a      	orrs	r2, r1
 8004482:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	68da      	ldr	r2, [r3, #12]
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004492:	60da      	str	r2, [r3, #12]

#if defined(RTC_OR_ALARMOUTTYPE)
    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f022 0203 	bic.w	r2, r2, #3
 80044a2:	64da      	str	r2, [r3, #76]	; 0x4c
#else
    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_OUT_RMP);
#endif
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	69da      	ldr	r2, [r3, #28]
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	695b      	ldr	r3, [r3, #20]
 80044b2:	431a      	orrs	r2, r3
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	430a      	orrs	r2, r1
 80044ba:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	689b      	ldr	r3, [r3, #8]
 80044c2:	f003 0320 	and.w	r3, r3, #32
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d113      	bne.n	80044f2 <HAL_RTC_Init+0x122>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80044ca:	6878      	ldr	r0, [r7, #4]
 80044cc:	f000 f81e 	bl	800450c <HAL_RTC_WaitForSynchro>
 80044d0:	4603      	mov	r3, r0
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d00d      	beq.n	80044f2 <HAL_RTC_Init+0x122>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	22ff      	movs	r2, #255	; 0xff
 80044dc:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	2204      	movs	r2, #4
 80044e2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	2200      	movs	r2, #0
 80044ea:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80044ee:	2301      	movs	r3, #1
 80044f0:	e008      	b.n	8004504 <HAL_RTC_Init+0x134>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	22ff      	movs	r2, #255	; 0xff
 80044f8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	2201      	movs	r2, #1
 80044fe:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    return HAL_OK;
 8004502:	2300      	movs	r3, #0
  }
}
 8004504:	4618      	mov	r0, r3
 8004506:	3708      	adds	r7, #8
 8004508:	46bd      	mov	sp, r7
 800450a:	bd80      	pop	{r7, pc}

0800450c <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800450c:	b580      	push	{r7, lr}
 800450e:	b084      	sub	sp, #16
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	68da      	ldr	r2, [r3, #12]
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004522:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8004524:	f7fd fa7c 	bl	8001a20 <HAL_GetTick>
 8004528:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800452a:	e009      	b.n	8004540 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800452c:	f7fd fa78 	bl	8001a20 <HAL_GetTick>
 8004530:	4602      	mov	r2, r0
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	1ad3      	subs	r3, r2, r3
 8004536:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800453a:	d901      	bls.n	8004540 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 800453c:	2303      	movs	r3, #3
 800453e:	e007      	b.n	8004550 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	68db      	ldr	r3, [r3, #12]
 8004546:	f003 0320 	and.w	r3, r3, #32
 800454a:	2b00      	cmp	r3, #0
 800454c:	d0ee      	beq.n	800452c <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 800454e:	2300      	movs	r3, #0
}
 8004550:	4618      	mov	r0, r3
 8004552:	3710      	adds	r7, #16
 8004554:	46bd      	mov	sp, r7
 8004556:	bd80      	pop	{r7, pc}

08004558 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8004558:	b580      	push	{r7, lr}
 800455a:	b084      	sub	sp, #16
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	68db      	ldr	r3, [r3, #12]
 8004566:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800456a:	2b00      	cmp	r3, #0
 800456c:	d119      	bne.n	80045a2 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f04f 32ff 	mov.w	r2, #4294967295
 8004576:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8004578:	f7fd fa52 	bl	8001a20 <HAL_GetTick>
 800457c:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800457e:	e009      	b.n	8004594 <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8004580:	f7fd fa4e 	bl	8001a20 <HAL_GetTick>
 8004584:	4602      	mov	r2, r0
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	1ad3      	subs	r3, r2, r3
 800458a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800458e:	d901      	bls.n	8004594 <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 8004590:	2303      	movs	r3, #3
 8004592:	e007      	b.n	80045a4 <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	68db      	ldr	r3, [r3, #12]
 800459a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d0ee      	beq.n	8004580 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 80045a2:	2300      	movs	r3, #0
}
 80045a4:	4618      	mov	r0, r3
 80045a6:	3710      	adds	r7, #16
 80045a8:	46bd      	mov	sp, r7
 80045aa:	bd80      	pop	{r7, pc}

080045ac <HAL_RTCEx_SetWakeUpTimer>:
  * @param WakeUpCounter Wake up counter
  * @param WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 80045ac:	b580      	push	{r7, lr}
 80045ae:	b086      	sub	sp, #24
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	60f8      	str	r0, [r7, #12]
 80045b4:	60b9      	str	r1, [r7, #8]
 80045b6:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	f893 3020 	ldrb.w	r3, [r3, #32]
 80045be:	2b01      	cmp	r3, #1
 80045c0:	d101      	bne.n	80045c6 <HAL_RTCEx_SetWakeUpTimer+0x1a>
 80045c2:	2302      	movs	r3, #2
 80045c4:	e089      	b.n	80046da <HAL_RTCEx_SetWakeUpTimer+0x12e>
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	2201      	movs	r2, #1
 80045ca:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	2202      	movs	r2, #2
 80045d2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	22ca      	movs	r2, #202	; 0xca
 80045dc:	625a      	str	r2, [r3, #36]	; 0x24
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	2253      	movs	r2, #83	; 0x53
 80045e4:	625a      	str	r2, [r3, #36]	; 0x24

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	689b      	ldr	r3, [r3, #8]
 80045ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d020      	beq.n	8004636 <HAL_RTCEx_SetWakeUpTimer+0x8a>
  {
    tickstart = HAL_GetTick();
 80045f4:	f7fd fa14 	bl	8001a20 <HAL_GetTick>
 80045f8:	6178      	str	r0, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 80045fa:	e015      	b.n	8004628 <HAL_RTCEx_SetWakeUpTimer+0x7c>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80045fc:	f7fd fa10 	bl	8001a20 <HAL_GetTick>
 8004600:	4602      	mov	r2, r0
 8004602:	697b      	ldr	r3, [r7, #20]
 8004604:	1ad3      	subs	r3, r2, r3
 8004606:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800460a:	d90d      	bls.n	8004628 <HAL_RTCEx_SetWakeUpTimer+0x7c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	22ff      	movs	r2, #255	; 0xff
 8004612:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	2203      	movs	r2, #3
 8004618:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	2200      	movs	r2, #0
 8004620:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8004624:	2303      	movs	r3, #3
 8004626:	e058      	b.n	80046da <HAL_RTCEx_SetWakeUpTimer+0x12e>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	68db      	ldr	r3, [r3, #12]
 800462e:	f003 0304 	and.w	r3, r3, #4
 8004632:	2b00      	cmp	r3, #0
 8004634:	d1e2      	bne.n	80045fc <HAL_RTCEx_SetWakeUpTimer+0x50>
      }
    }
  }

  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	689a      	ldr	r2, [r3, #8]
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004644:	609a      	str	r2, [r3, #8]

  tickstart = HAL_GetTick();
 8004646:	f7fd f9eb 	bl	8001a20 <HAL_GetTick>
 800464a:	6178      	str	r0, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 800464c:	e015      	b.n	800467a <HAL_RTCEx_SetWakeUpTimer+0xce>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800464e:	f7fd f9e7 	bl	8001a20 <HAL_GetTick>
 8004652:	4602      	mov	r2, r0
 8004654:	697b      	ldr	r3, [r7, #20]
 8004656:	1ad3      	subs	r3, r2, r3
 8004658:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800465c:	d90d      	bls.n	800467a <HAL_RTCEx_SetWakeUpTimer+0xce>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	22ff      	movs	r2, #255	; 0xff
 8004664:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	2203      	movs	r2, #3
 800466a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	2200      	movs	r2, #0
 8004672:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 8004676:	2303      	movs	r3, #3
 8004678:	e02f      	b.n	80046da <HAL_RTCEx_SetWakeUpTimer+0x12e>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	68db      	ldr	r3, [r3, #12]
 8004680:	f003 0304 	and.w	r3, r3, #4
 8004684:	2b00      	cmp	r3, #0
 8004686:	d0e2      	beq.n	800464e <HAL_RTCEx_SetWakeUpTimer+0xa2>
    }
  }

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	689a      	ldr	r2, [r3, #8]
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f022 0207 	bic.w	r2, r2, #7
 8004696:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	6899      	ldr	r1, [r3, #8]
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	687a      	ldr	r2, [r7, #4]
 80046a4:	430a      	orrs	r2, r1
 80046a6:	609a      	str	r2, [r3, #8]

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	68ba      	ldr	r2, [r7, #8]
 80046ae:	615a      	str	r2, [r3, #20]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	689a      	ldr	r2, [r3, #8]
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80046be:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	22ff      	movs	r2, #255	; 0xff
 80046c6:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	2201      	movs	r2, #1
 80046cc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	2200      	movs	r2, #0
 80046d4:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80046d8:	2300      	movs	r3, #0
}
 80046da:	4618      	mov	r0, r3
 80046dc:	3718      	adds	r7, #24
 80046de:	46bd      	mov	sp, r7
 80046e0:	bd80      	pop	{r7, pc}

080046e2 <LL_RCC_GetUSARTClockSource>:
{
 80046e2:	b480      	push	{r7}
 80046e4:	b083      	sub	sp, #12
 80046e6:	af00      	add	r7, sp, #0
 80046e8:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 80046ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80046ee:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	4013      	ands	r3, r2
}
 80046f6:	4618      	mov	r0, r3
 80046f8:	370c      	adds	r7, #12
 80046fa:	46bd      	mov	sp, r7
 80046fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004700:	4770      	bx	lr

08004702 <LL_RCC_GetLPUARTClockSource>:
{
 8004702:	b480      	push	{r7}
 8004704:	b083      	sub	sp, #12
 8004706:	af00      	add	r7, sp, #0
 8004708:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 800470a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800470e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	4013      	ands	r3, r2
}
 8004716:	4618      	mov	r0, r3
 8004718:	370c      	adds	r7, #12
 800471a:	46bd      	mov	sp, r7
 800471c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004720:	4770      	bx	lr

08004722 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004722:	b580      	push	{r7, lr}
 8004724:	b082      	sub	sp, #8
 8004726:	af00      	add	r7, sp, #0
 8004728:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	2b00      	cmp	r3, #0
 800472e:	d101      	bne.n	8004734 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004730:	2301      	movs	r3, #1
 8004732:	e042      	b.n	80047ba <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800473a:	2b00      	cmp	r3, #0
 800473c:	d106      	bne.n	800474c <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	2200      	movs	r2, #0
 8004742:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004746:	6878      	ldr	r0, [r7, #4]
 8004748:	f7fd f83e 	bl	80017c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2224      	movs	r2, #36	; 0x24
 8004750:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	681a      	ldr	r2, [r3, #0]
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f022 0201 	bic.w	r2, r2, #1
 8004762:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004764:	6878      	ldr	r0, [r7, #4]
 8004766:	f000 fbf7 	bl	8004f58 <UART_SetConfig>
 800476a:	4603      	mov	r3, r0
 800476c:	2b01      	cmp	r3, #1
 800476e:	d101      	bne.n	8004774 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004770:	2301      	movs	r3, #1
 8004772:	e022      	b.n	80047ba <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004778:	2b00      	cmp	r3, #0
 800477a:	d002      	beq.n	8004782 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800477c:	6878      	ldr	r0, [r7, #4]
 800477e:	f000 fdf1 	bl	8005364 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	685a      	ldr	r2, [r3, #4]
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004790:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	689a      	ldr	r2, [r3, #8]
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80047a0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	681a      	ldr	r2, [r3, #0]
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f042 0201 	orr.w	r2, r2, #1
 80047b0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80047b2:	6878      	ldr	r0, [r7, #4]
 80047b4:	f000 fe78 	bl	80054a8 <UART_CheckIdleState>
 80047b8:	4603      	mov	r3, r0
}
 80047ba:	4618      	mov	r0, r3
 80047bc:	3708      	adds	r7, #8
 80047be:	46bd      	mov	sp, r7
 80047c0:	bd80      	pop	{r7, pc}
	...

080047c4 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80047c4:	b580      	push	{r7, lr}
 80047c6:	b08a      	sub	sp, #40	; 0x28
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	60f8      	str	r0, [r7, #12]
 80047cc:	60b9      	str	r1, [r7, #8]
 80047ce:	4613      	mov	r3, r2
 80047d0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80047d8:	2b20      	cmp	r3, #32
 80047da:	d17a      	bne.n	80048d2 <HAL_UART_Transmit_DMA+0x10e>
  {
    if ((pData == NULL) || (Size == 0U))
 80047dc:	68bb      	ldr	r3, [r7, #8]
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d002      	beq.n	80047e8 <HAL_UART_Transmit_DMA+0x24>
 80047e2:	88fb      	ldrh	r3, [r7, #6]
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d101      	bne.n	80047ec <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 80047e8:	2301      	movs	r3, #1
 80047ea:	e073      	b.n	80048d4 <HAL_UART_Transmit_DMA+0x110>
    }

    __HAL_LOCK(huart);
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80047f2:	2b01      	cmp	r3, #1
 80047f4:	d101      	bne.n	80047fa <HAL_UART_Transmit_DMA+0x36>
 80047f6:	2302      	movs	r3, #2
 80047f8:	e06c      	b.n	80048d4 <HAL_UART_Transmit_DMA+0x110>
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	2201      	movs	r2, #1
 80047fe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	68ba      	ldr	r2, [r7, #8]
 8004806:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	88fa      	ldrh	r2, [r7, #6]
 800480c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	88fa      	ldrh	r2, [r7, #6]
 8004814:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	2200      	movs	r2, #0
 800481c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	2221      	movs	r2, #33	; 0x21
 8004824:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmatx != NULL)
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800482c:	2b00      	cmp	r3, #0
 800482e:	d02c      	beq.n	800488a <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004834:	4a29      	ldr	r2, [pc, #164]	; (80048dc <HAL_UART_Transmit_DMA+0x118>)
 8004836:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800483c:	4a28      	ldr	r2, [pc, #160]	; (80048e0 <HAL_UART_Transmit_DMA+0x11c>)
 800483e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004844:	4a27      	ldr	r2, [pc, #156]	; (80048e4 <HAL_UART_Transmit_DMA+0x120>)
 8004846:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800484c:	2200      	movs	r2, #0
 800484e:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	6f98      	ldr	r0, [r3, #120]	; 0x78
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004858:	4619      	mov	r1, r3
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	3328      	adds	r3, #40	; 0x28
 8004860:	461a      	mov	r2, r3
 8004862:	88fb      	ldrh	r3, [r7, #6]
 8004864:	f7fd fb10 	bl	8001e88 <HAL_DMA_Start_IT>
 8004868:	4603      	mov	r3, r0
 800486a:	2b00      	cmp	r3, #0
 800486c:	d00d      	beq.n	800488a <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	2210      	movs	r2, #16
 8004872:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	2200      	movs	r2, #0
 800487a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	2220      	movs	r2, #32
 8004882:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        return HAL_ERROR;
 8004886:	2301      	movs	r3, #1
 8004888:	e024      	b.n	80048d4 <HAL_UART_Transmit_DMA+0x110>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	2240      	movs	r2, #64	; 0x40
 8004890:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	2200      	movs	r2, #0
 8004896:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	3308      	adds	r3, #8
 80048a0:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048a2:	697b      	ldr	r3, [r7, #20]
 80048a4:	e853 3f00 	ldrex	r3, [r3]
 80048a8:	613b      	str	r3, [r7, #16]
   return(result);
 80048aa:	693b      	ldr	r3, [r7, #16]
 80048ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80048b0:	627b      	str	r3, [r7, #36]	; 0x24
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	3308      	adds	r3, #8
 80048b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048ba:	623a      	str	r2, [r7, #32]
 80048bc:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048be:	69f9      	ldr	r1, [r7, #28]
 80048c0:	6a3a      	ldr	r2, [r7, #32]
 80048c2:	e841 2300 	strex	r3, r2, [r1]
 80048c6:	61bb      	str	r3, [r7, #24]
   return(result);
 80048c8:	69bb      	ldr	r3, [r7, #24]
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d1e5      	bne.n	800489a <HAL_UART_Transmit_DMA+0xd6>

    return HAL_OK;
 80048ce:	2300      	movs	r3, #0
 80048d0:	e000      	b.n	80048d4 <HAL_UART_Transmit_DMA+0x110>
  }
  else
  {
    return HAL_BUSY;
 80048d2:	2302      	movs	r3, #2
  }
}
 80048d4:	4618      	mov	r0, r3
 80048d6:	3728      	adds	r7, #40	; 0x28
 80048d8:	46bd      	mov	sp, r7
 80048da:	bd80      	pop	{r7, pc}
 80048dc:	0800581d 	.word	0x0800581d
 80048e0:	080058b7 	.word	0x080058b7
 80048e4:	080058d3 	.word	0x080058d3

080048e8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80048e8:	b580      	push	{r7, lr}
 80048ea:	b0ba      	sub	sp, #232	; 0xe8
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	69db      	ldr	r3, [r3, #28]
 80048f6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	689b      	ldr	r3, [r3, #8]
 800490a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800490e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8004912:	f640 030f 	movw	r3, #2063	; 0x80f
 8004916:	4013      	ands	r3, r2
 8004918:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800491c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004920:	2b00      	cmp	r3, #0
 8004922:	d11b      	bne.n	800495c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004924:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004928:	f003 0320 	and.w	r3, r3, #32
 800492c:	2b00      	cmp	r3, #0
 800492e:	d015      	beq.n	800495c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004930:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004934:	f003 0320 	and.w	r3, r3, #32
 8004938:	2b00      	cmp	r3, #0
 800493a:	d105      	bne.n	8004948 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800493c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004940:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004944:	2b00      	cmp	r3, #0
 8004946:	d009      	beq.n	800495c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800494c:	2b00      	cmp	r3, #0
 800494e:	f000 82d6 	beq.w	8004efe <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004956:	6878      	ldr	r0, [r7, #4]
 8004958:	4798      	blx	r3
      }
      return;
 800495a:	e2d0      	b.n	8004efe <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800495c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004960:	2b00      	cmp	r3, #0
 8004962:	f000 811f 	beq.w	8004ba4 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8004966:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800496a:	4b8b      	ldr	r3, [pc, #556]	; (8004b98 <HAL_UART_IRQHandler+0x2b0>)
 800496c:	4013      	ands	r3, r2
 800496e:	2b00      	cmp	r3, #0
 8004970:	d106      	bne.n	8004980 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8004972:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8004976:	4b89      	ldr	r3, [pc, #548]	; (8004b9c <HAL_UART_IRQHandler+0x2b4>)
 8004978:	4013      	ands	r3, r2
 800497a:	2b00      	cmp	r3, #0
 800497c:	f000 8112 	beq.w	8004ba4 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004980:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004984:	f003 0301 	and.w	r3, r3, #1
 8004988:	2b00      	cmp	r3, #0
 800498a:	d011      	beq.n	80049b0 <HAL_UART_IRQHandler+0xc8>
 800498c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004990:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004994:	2b00      	cmp	r3, #0
 8004996:	d00b      	beq.n	80049b0 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	2201      	movs	r2, #1
 800499e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80049a6:	f043 0201 	orr.w	r2, r3, #1
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80049b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80049b4:	f003 0302 	and.w	r3, r3, #2
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d011      	beq.n	80049e0 <HAL_UART_IRQHandler+0xf8>
 80049bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80049c0:	f003 0301 	and.w	r3, r3, #1
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d00b      	beq.n	80049e0 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	2202      	movs	r2, #2
 80049ce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80049d6:	f043 0204 	orr.w	r2, r3, #4
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80049e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80049e4:	f003 0304 	and.w	r3, r3, #4
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d011      	beq.n	8004a10 <HAL_UART_IRQHandler+0x128>
 80049ec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80049f0:	f003 0301 	and.w	r3, r3, #1
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d00b      	beq.n	8004a10 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	2204      	movs	r2, #4
 80049fe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004a06:	f043 0202 	orr.w	r2, r3, #2
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004a10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a14:	f003 0308 	and.w	r3, r3, #8
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d017      	beq.n	8004a4c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004a1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a20:	f003 0320 	and.w	r3, r3, #32
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d105      	bne.n	8004a34 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8004a28:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8004a2c:	4b5a      	ldr	r3, [pc, #360]	; (8004b98 <HAL_UART_IRQHandler+0x2b0>)
 8004a2e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d00b      	beq.n	8004a4c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	2208      	movs	r2, #8
 8004a3a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004a42:	f043 0208 	orr.w	r2, r3, #8
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004a4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a50:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d012      	beq.n	8004a7e <HAL_UART_IRQHandler+0x196>
 8004a58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a5c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d00c      	beq.n	8004a7e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004a6c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004a74:	f043 0220 	orr.w	r2, r3, #32
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	f000 823c 	beq.w	8004f02 <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004a8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a8e:	f003 0320 	and.w	r3, r3, #32
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d013      	beq.n	8004abe <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004a96:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a9a:	f003 0320 	and.w	r3, r3, #32
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d105      	bne.n	8004aae <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004aa2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004aa6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d007      	beq.n	8004abe <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d003      	beq.n	8004abe <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004aba:	6878      	ldr	r0, [r7, #4]
 8004abc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004ac4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	689b      	ldr	r3, [r3, #8]
 8004ace:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ad2:	2b40      	cmp	r3, #64	; 0x40
 8004ad4:	d005      	beq.n	8004ae2 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004ad6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004ada:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d04f      	beq.n	8004b82 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004ae2:	6878      	ldr	r0, [r7, #4]
 8004ae4:	f000 fe34 	bl	8005750 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	689b      	ldr	r3, [r3, #8]
 8004aee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004af2:	2b40      	cmp	r3, #64	; 0x40
 8004af4:	d141      	bne.n	8004b7a <HAL_UART_IRQHandler+0x292>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	3308      	adds	r3, #8
 8004afc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b00:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004b04:	e853 3f00 	ldrex	r3, [r3]
 8004b08:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004b0c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004b10:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b14:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	3308      	adds	r3, #8
 8004b1e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004b22:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004b26:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b2a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004b2e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004b32:	e841 2300 	strex	r3, r2, [r1]
 8004b36:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004b3a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d1d9      	bne.n	8004af6 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d013      	beq.n	8004b72 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004b4e:	4a14      	ldr	r2, [pc, #80]	; (8004ba0 <HAL_UART_IRQHandler+0x2b8>)
 8004b50:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004b56:	4618      	mov	r0, r3
 8004b58:	f7fd fa70 	bl	800203c <HAL_DMA_Abort_IT>
 8004b5c:	4603      	mov	r3, r0
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d017      	beq.n	8004b92 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004b66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b68:	687a      	ldr	r2, [r7, #4]
 8004b6a:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8004b6c:	4610      	mov	r0, r2
 8004b6e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b70:	e00f      	b.n	8004b92 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004b72:	6878      	ldr	r0, [r7, #4]
 8004b74:	f000 f9da 	bl	8004f2c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b78:	e00b      	b.n	8004b92 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004b7a:	6878      	ldr	r0, [r7, #4]
 8004b7c:	f000 f9d6 	bl	8004f2c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b80:	e007      	b.n	8004b92 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004b82:	6878      	ldr	r0, [r7, #4]
 8004b84:	f000 f9d2 	bl	8004f2c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8004b90:	e1b7      	b.n	8004f02 <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b92:	bf00      	nop
    return;
 8004b94:	e1b5      	b.n	8004f02 <HAL_UART_IRQHandler+0x61a>
 8004b96:	bf00      	nop
 8004b98:	10000001 	.word	0x10000001
 8004b9c:	04000120 	.word	0x04000120
 8004ba0:	08005953 	.word	0x08005953

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004ba8:	2b01      	cmp	r3, #1
 8004baa:	f040 814a 	bne.w	8004e42 <HAL_UART_IRQHandler+0x55a>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 8004bae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004bb2:	f003 0310 	and.w	r3, r3, #16
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	f000 8143 	beq.w	8004e42 <HAL_UART_IRQHandler+0x55a>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 8004bbc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004bc0:	f003 0310 	and.w	r3, r3, #16
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	f000 813c 	beq.w	8004e42 <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	2210      	movs	r2, #16
 8004bd0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	689b      	ldr	r3, [r3, #8]
 8004bd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bdc:	2b40      	cmp	r3, #64	; 0x40
 8004bde:	f040 80b5 	bne.w	8004d4c <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	685b      	ldr	r3, [r3, #4]
 8004bea:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if (  (nb_remaining_rx_data > 0U)
 8004bee:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	f000 8187 	beq.w	8004f06 <HAL_UART_IRQHandler+0x61e>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004bfe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004c02:	429a      	cmp	r2, r3
 8004c04:	f080 817f 	bcs.w	8004f06 <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004c0e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f003 0320 	and.w	r3, r3, #32
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	f040 8086 	bne.w	8004d30 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c2c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004c30:	e853 3f00 	ldrex	r3, [r3]
 8004c34:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004c38:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004c3c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004c40:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	461a      	mov	r2, r3
 8004c4a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004c4e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004c52:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c56:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004c5a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004c5e:	e841 2300 	strex	r3, r2, [r1]
 8004c62:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004c66:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d1da      	bne.n	8004c24 <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	3308      	adds	r3, #8
 8004c74:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c76:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004c78:	e853 3f00 	ldrex	r3, [r3]
 8004c7c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004c7e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004c80:	f023 0301 	bic.w	r3, r3, #1
 8004c84:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	3308      	adds	r3, #8
 8004c8e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004c92:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004c96:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c98:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004c9a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004c9e:	e841 2300 	strex	r3, r2, [r1]
 8004ca2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004ca4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d1e1      	bne.n	8004c6e <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	3308      	adds	r3, #8
 8004cb0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cb2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004cb4:	e853 3f00 	ldrex	r3, [r3]
 8004cb8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004cba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004cbc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004cc0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	3308      	adds	r3, #8
 8004cca:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004cce:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004cd0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cd2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004cd4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004cd6:	e841 2300 	strex	r3, r2, [r1]
 8004cda:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004cdc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d1e3      	bne.n	8004caa <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	2220      	movs	r2, #32
 8004ce6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	2200      	movs	r2, #0
 8004cee:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cf6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004cf8:	e853 3f00 	ldrex	r3, [r3]
 8004cfc:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004cfe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004d00:	f023 0310 	bic.w	r3, r3, #16
 8004d04:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	461a      	mov	r2, r3
 8004d0e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004d12:	65bb      	str	r3, [r7, #88]	; 0x58
 8004d14:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d16:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004d18:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004d1a:	e841 2300 	strex	r3, r2, [r1]
 8004d1e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004d20:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d1e4      	bne.n	8004cf0 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004d2a:	4618      	mov	r0, r3
 8004d2c:	f7fd f927 	bl	8001f7e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004d3c:	b29b      	uxth	r3, r3
 8004d3e:	1ad3      	subs	r3, r2, r3
 8004d40:	b29b      	uxth	r3, r3
 8004d42:	4619      	mov	r1, r3
 8004d44:	6878      	ldr	r0, [r7, #4]
 8004d46:	f000 f8fb 	bl	8004f40 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8004d4a:	e0dc      	b.n	8004f06 <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004d58:	b29b      	uxth	r3, r3
 8004d5a:	1ad3      	subs	r3, r2, r3
 8004d5c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if (  (huart->RxXferCount > 0U)
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004d66:	b29b      	uxth	r3, r3
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	f000 80ce 	beq.w	8004f0a <HAL_UART_IRQHandler+0x622>
          &&(nb_rx_data > 0U) )
 8004d6e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	f000 80c9 	beq.w	8004f0a <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d80:	e853 3f00 	ldrex	r3, [r3]
 8004d84:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004d86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d88:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004d8c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	461a      	mov	r2, r3
 8004d96:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004d9a:	647b      	str	r3, [r7, #68]	; 0x44
 8004d9c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d9e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004da0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004da2:	e841 2300 	strex	r3, r2, [r1]
 8004da6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004da8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d1e4      	bne.n	8004d78 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	3308      	adds	r3, #8
 8004db4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004db8:	e853 3f00 	ldrex	r3, [r3]
 8004dbc:	623b      	str	r3, [r7, #32]
   return(result);
 8004dbe:	6a3b      	ldr	r3, [r7, #32]
 8004dc0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004dc4:	f023 0301 	bic.w	r3, r3, #1
 8004dc8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	3308      	adds	r3, #8
 8004dd2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004dd6:	633a      	str	r2, [r7, #48]	; 0x30
 8004dd8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dda:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004ddc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004dde:	e841 2300 	strex	r3, r2, [r1]
 8004de2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004de4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d1e1      	bne.n	8004dae <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	2220      	movs	r2, #32
 8004dee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	2200      	movs	r2, #0
 8004df6:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e04:	693b      	ldr	r3, [r7, #16]
 8004e06:	e853 3f00 	ldrex	r3, [r3]
 8004e0a:	60fb      	str	r3, [r7, #12]
   return(result);
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	f023 0310 	bic.w	r3, r3, #16
 8004e12:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	461a      	mov	r2, r3
 8004e1c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004e20:	61fb      	str	r3, [r7, #28]
 8004e22:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e24:	69b9      	ldr	r1, [r7, #24]
 8004e26:	69fa      	ldr	r2, [r7, #28]
 8004e28:	e841 2300 	strex	r3, r2, [r1]
 8004e2c:	617b      	str	r3, [r7, #20]
   return(result);
 8004e2e:	697b      	ldr	r3, [r7, #20]
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d1e4      	bne.n	8004dfe <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004e34:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004e38:	4619      	mov	r1, r3
 8004e3a:	6878      	ldr	r0, [r7, #4]
 8004e3c:	f000 f880 	bl	8004f40 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8004e40:	e063      	b.n	8004f0a <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004e42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e46:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d00e      	beq.n	8004e6c <HAL_UART_IRQHandler+0x584>
 8004e4e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004e52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d008      	beq.n	8004e6c <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004e62:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004e64:	6878      	ldr	r0, [r7, #4]
 8004e66:	f000 fdb5 	bl	80059d4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004e6a:	e051      	b.n	8004f10 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8004e6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d014      	beq.n	8004ea2 <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8004e78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004e7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d105      	bne.n	8004e90 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8004e84:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004e88:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d008      	beq.n	8004ea2 <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d03a      	beq.n	8004f0e <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e9c:	6878      	ldr	r0, [r7, #4]
 8004e9e:	4798      	blx	r3
    }
    return;
 8004ea0:	e035      	b.n	8004f0e <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004ea2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ea6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d009      	beq.n	8004ec2 <HAL_UART_IRQHandler+0x5da>
 8004eae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004eb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d003      	beq.n	8004ec2 <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 8004eba:	6878      	ldr	r0, [r7, #4]
 8004ebc:	f000 fd5f 	bl	800597e <UART_EndTransmit_IT>
    return;
 8004ec0:	e026      	b.n	8004f10 <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8004ec2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ec6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d009      	beq.n	8004ee2 <HAL_UART_IRQHandler+0x5fa>
 8004ece:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ed2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d003      	beq.n	8004ee2 <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8004eda:	6878      	ldr	r0, [r7, #4]
 8004edc:	f000 fd8e 	bl	80059fc <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004ee0:	e016      	b.n	8004f10 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8004ee2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ee6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d010      	beq.n	8004f10 <HAL_UART_IRQHandler+0x628>
 8004eee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	da0c      	bge.n	8004f10 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8004ef6:	6878      	ldr	r0, [r7, #4]
 8004ef8:	f000 fd76 	bl	80059e8 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004efc:	e008      	b.n	8004f10 <HAL_UART_IRQHandler+0x628>
      return;
 8004efe:	bf00      	nop
 8004f00:	e006      	b.n	8004f10 <HAL_UART_IRQHandler+0x628>
    return;
 8004f02:	bf00      	nop
 8004f04:	e004      	b.n	8004f10 <HAL_UART_IRQHandler+0x628>
      return;
 8004f06:	bf00      	nop
 8004f08:	e002      	b.n	8004f10 <HAL_UART_IRQHandler+0x628>
      return;
 8004f0a:	bf00      	nop
 8004f0c:	e000      	b.n	8004f10 <HAL_UART_IRQHandler+0x628>
    return;
 8004f0e:	bf00      	nop
  }
}
 8004f10:	37e8      	adds	r7, #232	; 0xe8
 8004f12:	46bd      	mov	sp, r7
 8004f14:	bd80      	pop	{r7, pc}
 8004f16:	bf00      	nop

08004f18 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004f18:	b480      	push	{r7}
 8004f1a:	b083      	sub	sp, #12
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8004f20:	bf00      	nop
 8004f22:	370c      	adds	r7, #12
 8004f24:	46bd      	mov	sp, r7
 8004f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2a:	4770      	bx	lr

08004f2c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004f2c:	b480      	push	{r7}
 8004f2e:	b083      	sub	sp, #12
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004f34:	bf00      	nop
 8004f36:	370c      	adds	r7, #12
 8004f38:	46bd      	mov	sp, r7
 8004f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3e:	4770      	bx	lr

08004f40 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004f40:	b480      	push	{r7}
 8004f42:	b083      	sub	sp, #12
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
 8004f48:	460b      	mov	r3, r1
 8004f4a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004f4c:	bf00      	nop
 8004f4e:	370c      	adds	r7, #12
 8004f50:	46bd      	mov	sp, r7
 8004f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f56:	4770      	bx	lr

08004f58 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004f58:	b5b0      	push	{r4, r5, r7, lr}
 8004f5a:	b088      	sub	sp, #32
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004f60:	2300      	movs	r3, #0
 8004f62:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	689a      	ldr	r2, [r3, #8]
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	691b      	ldr	r3, [r3, #16]
 8004f6c:	431a      	orrs	r2, r3
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	695b      	ldr	r3, [r3, #20]
 8004f72:	431a      	orrs	r2, r3
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	69db      	ldr	r3, [r3, #28]
 8004f78:	4313      	orrs	r3, r2
 8004f7a:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	681a      	ldr	r2, [r3, #0]
 8004f82:	4ba3      	ldr	r3, [pc, #652]	; (8005210 <UART_SetConfig+0x2b8>)
 8004f84:	4013      	ands	r3, r2
 8004f86:	687a      	ldr	r2, [r7, #4]
 8004f88:	6812      	ldr	r2, [r2, #0]
 8004f8a:	69f9      	ldr	r1, [r7, #28]
 8004f8c:	430b      	orrs	r3, r1
 8004f8e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	685b      	ldr	r3, [r3, #4]
 8004f96:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	68da      	ldr	r2, [r3, #12]
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	430a      	orrs	r2, r1
 8004fa4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	699b      	ldr	r3, [r3, #24]
 8004faa:	61fb      	str	r3, [r7, #28]

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	4a98      	ldr	r2, [pc, #608]	; (8005214 <UART_SetConfig+0x2bc>)
 8004fb2:	4293      	cmp	r3, r2
 8004fb4:	d004      	beq.n	8004fc0 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	6a1b      	ldr	r3, [r3, #32]
 8004fba:	69fa      	ldr	r2, [r7, #28]
 8004fbc:	4313      	orrs	r3, r2
 8004fbe:	61fb      	str	r3, [r7, #28]
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	689b      	ldr	r3, [r3, #8]
 8004fc6:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8004fca:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8004fce:	687a      	ldr	r2, [r7, #4]
 8004fd0:	6812      	ldr	r2, [r2, #0]
 8004fd2:	69f9      	ldr	r1, [r7, #28]
 8004fd4:	430b      	orrs	r3, r1
 8004fd6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fde:	f023 010f 	bic.w	r1, r3, #15
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	430a      	orrs	r2, r1
 8004fec:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	4a89      	ldr	r2, [pc, #548]	; (8005218 <UART_SetConfig+0x2c0>)
 8004ff4:	4293      	cmp	r3, r2
 8004ff6:	d120      	bne.n	800503a <UART_SetConfig+0xe2>
 8004ff8:	2003      	movs	r0, #3
 8004ffa:	f7ff fb72 	bl	80046e2 <LL_RCC_GetUSARTClockSource>
 8004ffe:	4603      	mov	r3, r0
 8005000:	2b03      	cmp	r3, #3
 8005002:	d817      	bhi.n	8005034 <UART_SetConfig+0xdc>
 8005004:	a201      	add	r2, pc, #4	; (adr r2, 800500c <UART_SetConfig+0xb4>)
 8005006:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800500a:	bf00      	nop
 800500c:	0800501d 	.word	0x0800501d
 8005010:	08005029 	.word	0x08005029
 8005014:	08005023 	.word	0x08005023
 8005018:	0800502f 	.word	0x0800502f
 800501c:	2301      	movs	r3, #1
 800501e:	76fb      	strb	r3, [r7, #27]
 8005020:	e038      	b.n	8005094 <UART_SetConfig+0x13c>
 8005022:	2302      	movs	r3, #2
 8005024:	76fb      	strb	r3, [r7, #27]
 8005026:	e035      	b.n	8005094 <UART_SetConfig+0x13c>
 8005028:	2304      	movs	r3, #4
 800502a:	76fb      	strb	r3, [r7, #27]
 800502c:	e032      	b.n	8005094 <UART_SetConfig+0x13c>
 800502e:	2308      	movs	r3, #8
 8005030:	76fb      	strb	r3, [r7, #27]
 8005032:	e02f      	b.n	8005094 <UART_SetConfig+0x13c>
 8005034:	2310      	movs	r3, #16
 8005036:	76fb      	strb	r3, [r7, #27]
 8005038:	e02c      	b.n	8005094 <UART_SetConfig+0x13c>
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	4a75      	ldr	r2, [pc, #468]	; (8005214 <UART_SetConfig+0x2bc>)
 8005040:	4293      	cmp	r3, r2
 8005042:	d125      	bne.n	8005090 <UART_SetConfig+0x138>
 8005044:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8005048:	f7ff fb5b 	bl	8004702 <LL_RCC_GetLPUARTClockSource>
 800504c:	4603      	mov	r3, r0
 800504e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005052:	d017      	beq.n	8005084 <UART_SetConfig+0x12c>
 8005054:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005058:	d817      	bhi.n	800508a <UART_SetConfig+0x132>
 800505a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800505e:	d00b      	beq.n	8005078 <UART_SetConfig+0x120>
 8005060:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005064:	d811      	bhi.n	800508a <UART_SetConfig+0x132>
 8005066:	2b00      	cmp	r3, #0
 8005068:	d003      	beq.n	8005072 <UART_SetConfig+0x11a>
 800506a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800506e:	d006      	beq.n	800507e <UART_SetConfig+0x126>
 8005070:	e00b      	b.n	800508a <UART_SetConfig+0x132>
 8005072:	2300      	movs	r3, #0
 8005074:	76fb      	strb	r3, [r7, #27]
 8005076:	e00d      	b.n	8005094 <UART_SetConfig+0x13c>
 8005078:	2302      	movs	r3, #2
 800507a:	76fb      	strb	r3, [r7, #27]
 800507c:	e00a      	b.n	8005094 <UART_SetConfig+0x13c>
 800507e:	2304      	movs	r3, #4
 8005080:	76fb      	strb	r3, [r7, #27]
 8005082:	e007      	b.n	8005094 <UART_SetConfig+0x13c>
 8005084:	2308      	movs	r3, #8
 8005086:	76fb      	strb	r3, [r7, #27]
 8005088:	e004      	b.n	8005094 <UART_SetConfig+0x13c>
 800508a:	2310      	movs	r3, #16
 800508c:	76fb      	strb	r3, [r7, #27]
 800508e:	e001      	b.n	8005094 <UART_SetConfig+0x13c>
 8005090:	2310      	movs	r3, #16
 8005092:	76fb      	strb	r3, [r7, #27]

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	4a5e      	ldr	r2, [pc, #376]	; (8005214 <UART_SetConfig+0x2bc>)
 800509a:	4293      	cmp	r3, r2
 800509c:	f040 808b 	bne.w	80051b6 <UART_SetConfig+0x25e>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80050a0:	7efb      	ldrb	r3, [r7, #27]
 80050a2:	2b08      	cmp	r3, #8
 80050a4:	d823      	bhi.n	80050ee <UART_SetConfig+0x196>
 80050a6:	a201      	add	r2, pc, #4	; (adr r2, 80050ac <UART_SetConfig+0x154>)
 80050a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050ac:	080050d1 	.word	0x080050d1
 80050b0:	080050ef 	.word	0x080050ef
 80050b4:	080050d9 	.word	0x080050d9
 80050b8:	080050ef 	.word	0x080050ef
 80050bc:	080050df 	.word	0x080050df
 80050c0:	080050ef 	.word	0x080050ef
 80050c4:	080050ef 	.word	0x080050ef
 80050c8:	080050ef 	.word	0x080050ef
 80050cc:	080050e7 	.word	0x080050e7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80050d0:	f7fe fc76 	bl	80039c0 <HAL_RCC_GetPCLK1Freq>
 80050d4:	6178      	str	r0, [r7, #20]
        break;
 80050d6:	e00f      	b.n	80050f8 <UART_SetConfig+0x1a0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80050d8:	4b50      	ldr	r3, [pc, #320]	; (800521c <UART_SetConfig+0x2c4>)
 80050da:	617b      	str	r3, [r7, #20]
        break;
 80050dc:	e00c      	b.n	80050f8 <UART_SetConfig+0x1a0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80050de:	f7fe fbef 	bl	80038c0 <HAL_RCC_GetSysClockFreq>
 80050e2:	6178      	str	r0, [r7, #20]
        break;
 80050e4:	e008      	b.n	80050f8 <UART_SetConfig+0x1a0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80050e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80050ea:	617b      	str	r3, [r7, #20]
        break;
 80050ec:	e004      	b.n	80050f8 <UART_SetConfig+0x1a0>
      default:
        pclk = 0U;
 80050ee:	2300      	movs	r3, #0
 80050f0:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80050f2:	2301      	movs	r3, #1
 80050f4:	76bb      	strb	r3, [r7, #26]
        break;
 80050f6:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80050f8:	697b      	ldr	r3, [r7, #20]
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	f000 811a 	beq.w	8005334 <UART_SetConfig+0x3dc>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005104:	4a46      	ldr	r2, [pc, #280]	; (8005220 <UART_SetConfig+0x2c8>)
 8005106:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800510a:	461a      	mov	r2, r3
 800510c:	697b      	ldr	r3, [r7, #20]
 800510e:	fbb3 f3f2 	udiv	r3, r3, r2
 8005112:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	685a      	ldr	r2, [r3, #4]
 8005118:	4613      	mov	r3, r2
 800511a:	005b      	lsls	r3, r3, #1
 800511c:	4413      	add	r3, r2
 800511e:	68ba      	ldr	r2, [r7, #8]
 8005120:	429a      	cmp	r2, r3
 8005122:	d305      	bcc.n	8005130 <UART_SetConfig+0x1d8>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	685b      	ldr	r3, [r3, #4]
 8005128:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800512a:	68ba      	ldr	r2, [r7, #8]
 800512c:	429a      	cmp	r2, r3
 800512e:	d902      	bls.n	8005136 <UART_SetConfig+0x1de>
      {
        ret = HAL_ERROR;
 8005130:	2301      	movs	r3, #1
 8005132:	76bb      	strb	r3, [r7, #26]
 8005134:	e0fe      	b.n	8005334 <UART_SetConfig+0x3dc>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005136:	697b      	ldr	r3, [r7, #20]
 8005138:	4618      	mov	r0, r3
 800513a:	f04f 0100 	mov.w	r1, #0
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005142:	4a37      	ldr	r2, [pc, #220]	; (8005220 <UART_SetConfig+0x2c8>)
 8005144:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005148:	b29a      	uxth	r2, r3
 800514a:	f04f 0300 	mov.w	r3, #0
 800514e:	f7fb f86f 	bl	8000230 <__aeabi_uldivmod>
 8005152:	4602      	mov	r2, r0
 8005154:	460b      	mov	r3, r1
 8005156:	4610      	mov	r0, r2
 8005158:	4619      	mov	r1, r3
 800515a:	f04f 0200 	mov.w	r2, #0
 800515e:	f04f 0300 	mov.w	r3, #0
 8005162:	020b      	lsls	r3, r1, #8
 8005164:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005168:	0202      	lsls	r2, r0, #8
 800516a:	6879      	ldr	r1, [r7, #4]
 800516c:	6849      	ldr	r1, [r1, #4]
 800516e:	0849      	lsrs	r1, r1, #1
 8005170:	4608      	mov	r0, r1
 8005172:	f04f 0100 	mov.w	r1, #0
 8005176:	1814      	adds	r4, r2, r0
 8005178:	eb43 0501 	adc.w	r5, r3, r1
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	685b      	ldr	r3, [r3, #4]
 8005180:	461a      	mov	r2, r3
 8005182:	f04f 0300 	mov.w	r3, #0
 8005186:	4620      	mov	r0, r4
 8005188:	4629      	mov	r1, r5
 800518a:	f7fb f851 	bl	8000230 <__aeabi_uldivmod>
 800518e:	4602      	mov	r2, r0
 8005190:	460b      	mov	r3, r1
 8005192:	4613      	mov	r3, r2
 8005194:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005196:	693b      	ldr	r3, [r7, #16]
 8005198:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800519c:	d308      	bcc.n	80051b0 <UART_SetConfig+0x258>
 800519e:	693b      	ldr	r3, [r7, #16]
 80051a0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80051a4:	d204      	bcs.n	80051b0 <UART_SetConfig+0x258>
        {
          huart->Instance->BRR = usartdiv;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	693a      	ldr	r2, [r7, #16]
 80051ac:	60da      	str	r2, [r3, #12]
 80051ae:	e0c1      	b.n	8005334 <UART_SetConfig+0x3dc>
        }
        else
        {
          ret = HAL_ERROR;
 80051b0:	2301      	movs	r3, #1
 80051b2:	76bb      	strb	r3, [r7, #26]
 80051b4:	e0be      	b.n	8005334 <UART_SetConfig+0x3dc>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	69db      	ldr	r3, [r3, #28]
 80051ba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80051be:	d16a      	bne.n	8005296 <UART_SetConfig+0x33e>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 80051c0:	7efb      	ldrb	r3, [r7, #27]
 80051c2:	3b01      	subs	r3, #1
 80051c4:	2b07      	cmp	r3, #7
 80051c6:	d82d      	bhi.n	8005224 <UART_SetConfig+0x2cc>
 80051c8:	a201      	add	r2, pc, #4	; (adr r2, 80051d0 <UART_SetConfig+0x278>)
 80051ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051ce:	bf00      	nop
 80051d0:	080051f1 	.word	0x080051f1
 80051d4:	080051f9 	.word	0x080051f9
 80051d8:	08005225 	.word	0x08005225
 80051dc:	080051ff 	.word	0x080051ff
 80051e0:	08005225 	.word	0x08005225
 80051e4:	08005225 	.word	0x08005225
 80051e8:	08005225 	.word	0x08005225
 80051ec:	08005207 	.word	0x08005207
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80051f0:	f7fe fbfc 	bl	80039ec <HAL_RCC_GetPCLK2Freq>
 80051f4:	6178      	str	r0, [r7, #20]
        break;
 80051f6:	e01a      	b.n	800522e <UART_SetConfig+0x2d6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80051f8:	4b08      	ldr	r3, [pc, #32]	; (800521c <UART_SetConfig+0x2c4>)
 80051fa:	617b      	str	r3, [r7, #20]
        break;
 80051fc:	e017      	b.n	800522e <UART_SetConfig+0x2d6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80051fe:	f7fe fb5f 	bl	80038c0 <HAL_RCC_GetSysClockFreq>
 8005202:	6178      	str	r0, [r7, #20]
        break;
 8005204:	e013      	b.n	800522e <UART_SetConfig+0x2d6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005206:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800520a:	617b      	str	r3, [r7, #20]
        break;
 800520c:	e00f      	b.n	800522e <UART_SetConfig+0x2d6>
 800520e:	bf00      	nop
 8005210:	cfff69f3 	.word	0xcfff69f3
 8005214:	40008000 	.word	0x40008000
 8005218:	40013800 	.word	0x40013800
 800521c:	00f42400 	.word	0x00f42400
 8005220:	0800abf0 	.word	0x0800abf0
      default:
        pclk = 0U;
 8005224:	2300      	movs	r3, #0
 8005226:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005228:	2301      	movs	r3, #1
 800522a:	76bb      	strb	r3, [r7, #26]
        break;
 800522c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800522e:	697b      	ldr	r3, [r7, #20]
 8005230:	2b00      	cmp	r3, #0
 8005232:	d07f      	beq.n	8005334 <UART_SetConfig+0x3dc>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005238:	4a48      	ldr	r2, [pc, #288]	; (800535c <UART_SetConfig+0x404>)
 800523a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800523e:	461a      	mov	r2, r3
 8005240:	697b      	ldr	r3, [r7, #20]
 8005242:	fbb3 f3f2 	udiv	r3, r3, r2
 8005246:	005a      	lsls	r2, r3, #1
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	685b      	ldr	r3, [r3, #4]
 800524c:	085b      	lsrs	r3, r3, #1
 800524e:	441a      	add	r2, r3
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	685b      	ldr	r3, [r3, #4]
 8005254:	fbb2 f3f3 	udiv	r3, r2, r3
 8005258:	b29b      	uxth	r3, r3
 800525a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800525c:	693b      	ldr	r3, [r7, #16]
 800525e:	2b0f      	cmp	r3, #15
 8005260:	d916      	bls.n	8005290 <UART_SetConfig+0x338>
 8005262:	693b      	ldr	r3, [r7, #16]
 8005264:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005268:	d212      	bcs.n	8005290 <UART_SetConfig+0x338>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800526a:	693b      	ldr	r3, [r7, #16]
 800526c:	b29b      	uxth	r3, r3
 800526e:	f023 030f 	bic.w	r3, r3, #15
 8005272:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005274:	693b      	ldr	r3, [r7, #16]
 8005276:	085b      	lsrs	r3, r3, #1
 8005278:	b29b      	uxth	r3, r3
 800527a:	f003 0307 	and.w	r3, r3, #7
 800527e:	b29a      	uxth	r2, r3
 8005280:	89fb      	ldrh	r3, [r7, #14]
 8005282:	4313      	orrs	r3, r2
 8005284:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	89fa      	ldrh	r2, [r7, #14]
 800528c:	60da      	str	r2, [r3, #12]
 800528e:	e051      	b.n	8005334 <UART_SetConfig+0x3dc>
      }
      else
      {
        ret = HAL_ERROR;
 8005290:	2301      	movs	r3, #1
 8005292:	76bb      	strb	r3, [r7, #26]
 8005294:	e04e      	b.n	8005334 <UART_SetConfig+0x3dc>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005296:	7efb      	ldrb	r3, [r7, #27]
 8005298:	3b01      	subs	r3, #1
 800529a:	2b07      	cmp	r3, #7
 800529c:	d821      	bhi.n	80052e2 <UART_SetConfig+0x38a>
 800529e:	a201      	add	r2, pc, #4	; (adr r2, 80052a4 <UART_SetConfig+0x34c>)
 80052a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052a4:	080052c5 	.word	0x080052c5
 80052a8:	080052cd 	.word	0x080052cd
 80052ac:	080052e3 	.word	0x080052e3
 80052b0:	080052d3 	.word	0x080052d3
 80052b4:	080052e3 	.word	0x080052e3
 80052b8:	080052e3 	.word	0x080052e3
 80052bc:	080052e3 	.word	0x080052e3
 80052c0:	080052db 	.word	0x080052db
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80052c4:	f7fe fb92 	bl	80039ec <HAL_RCC_GetPCLK2Freq>
 80052c8:	6178      	str	r0, [r7, #20]
        break;
 80052ca:	e00f      	b.n	80052ec <UART_SetConfig+0x394>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80052cc:	4b24      	ldr	r3, [pc, #144]	; (8005360 <UART_SetConfig+0x408>)
 80052ce:	617b      	str	r3, [r7, #20]
        break;
 80052d0:	e00c      	b.n	80052ec <UART_SetConfig+0x394>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80052d2:	f7fe faf5 	bl	80038c0 <HAL_RCC_GetSysClockFreq>
 80052d6:	6178      	str	r0, [r7, #20]
        break;
 80052d8:	e008      	b.n	80052ec <UART_SetConfig+0x394>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80052da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80052de:	617b      	str	r3, [r7, #20]
        break;
 80052e0:	e004      	b.n	80052ec <UART_SetConfig+0x394>
      default:
        pclk = 0U;
 80052e2:	2300      	movs	r3, #0
 80052e4:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80052e6:	2301      	movs	r3, #1
 80052e8:	76bb      	strb	r3, [r7, #26]
        break;
 80052ea:	bf00      	nop
    }

    if (pclk != 0U)
 80052ec:	697b      	ldr	r3, [r7, #20]
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d020      	beq.n	8005334 <UART_SetConfig+0x3dc>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052f6:	4a19      	ldr	r2, [pc, #100]	; (800535c <UART_SetConfig+0x404>)
 80052f8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80052fc:	461a      	mov	r2, r3
 80052fe:	697b      	ldr	r3, [r7, #20]
 8005300:	fbb3 f2f2 	udiv	r2, r3, r2
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	685b      	ldr	r3, [r3, #4]
 8005308:	085b      	lsrs	r3, r3, #1
 800530a:	441a      	add	r2, r3
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	685b      	ldr	r3, [r3, #4]
 8005310:	fbb2 f3f3 	udiv	r3, r2, r3
 8005314:	b29b      	uxth	r3, r3
 8005316:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005318:	693b      	ldr	r3, [r7, #16]
 800531a:	2b0f      	cmp	r3, #15
 800531c:	d908      	bls.n	8005330 <UART_SetConfig+0x3d8>
 800531e:	693b      	ldr	r3, [r7, #16]
 8005320:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005324:	d204      	bcs.n	8005330 <UART_SetConfig+0x3d8>
      {
        huart->Instance->BRR = usartdiv;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	693a      	ldr	r2, [r7, #16]
 800532c:	60da      	str	r2, [r3, #12]
 800532e:	e001      	b.n	8005334 <UART_SetConfig+0x3dc>
      }
      else
      {
        ret = HAL_ERROR;
 8005330:	2301      	movs	r3, #1
 8005332:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2201      	movs	r2, #1
 8005338:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	2201      	movs	r2, #1
 8005340:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	2200      	movs	r2, #0
 8005348:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	2200      	movs	r2, #0
 800534e:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8005350:	7ebb      	ldrb	r3, [r7, #26]
}
 8005352:	4618      	mov	r0, r3
 8005354:	3720      	adds	r7, #32
 8005356:	46bd      	mov	sp, r7
 8005358:	bdb0      	pop	{r4, r5, r7, pc}
 800535a:	bf00      	nop
 800535c:	0800abf0 	.word	0x0800abf0
 8005360:	00f42400 	.word	0x00f42400

08005364 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005364:	b480      	push	{r7}
 8005366:	b083      	sub	sp, #12
 8005368:	af00      	add	r7, sp, #0
 800536a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005370:	f003 0301 	and.w	r3, r3, #1
 8005374:	2b00      	cmp	r3, #0
 8005376:	d00a      	beq.n	800538e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	685b      	ldr	r3, [r3, #4]
 800537e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	430a      	orrs	r2, r1
 800538c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005392:	f003 0302 	and.w	r3, r3, #2
 8005396:	2b00      	cmp	r3, #0
 8005398:	d00a      	beq.n	80053b0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	685b      	ldr	r3, [r3, #4]
 80053a0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	430a      	orrs	r2, r1
 80053ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053b4:	f003 0304 	and.w	r3, r3, #4
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d00a      	beq.n	80053d2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	685b      	ldr	r3, [r3, #4]
 80053c2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	430a      	orrs	r2, r1
 80053d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053d6:	f003 0308 	and.w	r3, r3, #8
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d00a      	beq.n	80053f4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	685b      	ldr	r3, [r3, #4]
 80053e4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	430a      	orrs	r2, r1
 80053f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053f8:	f003 0310 	and.w	r3, r3, #16
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d00a      	beq.n	8005416 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	689b      	ldr	r3, [r3, #8]
 8005406:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	430a      	orrs	r2, r1
 8005414:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800541a:	f003 0320 	and.w	r3, r3, #32
 800541e:	2b00      	cmp	r3, #0
 8005420:	d00a      	beq.n	8005438 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	689b      	ldr	r3, [r3, #8]
 8005428:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	430a      	orrs	r2, r1
 8005436:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800543c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005440:	2b00      	cmp	r3, #0
 8005442:	d01a      	beq.n	800547a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	685b      	ldr	r3, [r3, #4]
 800544a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	430a      	orrs	r2, r1
 8005458:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800545e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005462:	d10a      	bne.n	800547a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	685b      	ldr	r3, [r3, #4]
 800546a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	430a      	orrs	r2, r1
 8005478:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800547e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005482:	2b00      	cmp	r3, #0
 8005484:	d00a      	beq.n	800549c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	685b      	ldr	r3, [r3, #4]
 800548c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	430a      	orrs	r2, r1
 800549a:	605a      	str	r2, [r3, #4]
  }
}
 800549c:	bf00      	nop
 800549e:	370c      	adds	r7, #12
 80054a0:	46bd      	mov	sp, r7
 80054a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a6:	4770      	bx	lr

080054a8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80054a8:	b580      	push	{r7, lr}
 80054aa:	b086      	sub	sp, #24
 80054ac:	af02      	add	r7, sp, #8
 80054ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	2200      	movs	r2, #0
 80054b4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80054b8:	f7fc fab2 	bl	8001a20 <HAL_GetTick>
 80054bc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f003 0308 	and.w	r3, r3, #8
 80054c8:	2b08      	cmp	r3, #8
 80054ca:	d10e      	bne.n	80054ea <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80054cc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80054d0:	9300      	str	r3, [sp, #0]
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	2200      	movs	r2, #0
 80054d6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80054da:	6878      	ldr	r0, [r7, #4]
 80054dc:	f000 f82f 	bl	800553e <UART_WaitOnFlagUntilTimeout>
 80054e0:	4603      	mov	r3, r0
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d001      	beq.n	80054ea <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80054e6:	2303      	movs	r3, #3
 80054e8:	e025      	b.n	8005536 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	f003 0304 	and.w	r3, r3, #4
 80054f4:	2b04      	cmp	r3, #4
 80054f6:	d10e      	bne.n	8005516 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80054f8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80054fc:	9300      	str	r3, [sp, #0]
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	2200      	movs	r2, #0
 8005502:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005506:	6878      	ldr	r0, [r7, #4]
 8005508:	f000 f819 	bl	800553e <UART_WaitOnFlagUntilTimeout>
 800550c:	4603      	mov	r3, r0
 800550e:	2b00      	cmp	r3, #0
 8005510:	d001      	beq.n	8005516 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005512:	2303      	movs	r3, #3
 8005514:	e00f      	b.n	8005536 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	2220      	movs	r2, #32
 800551a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	2220      	movs	r2, #32
 8005522:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	2200      	movs	r2, #0
 800552a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2200      	movs	r2, #0
 8005530:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005534:	2300      	movs	r3, #0
}
 8005536:	4618      	mov	r0, r3
 8005538:	3710      	adds	r7, #16
 800553a:	46bd      	mov	sp, r7
 800553c:	bd80      	pop	{r7, pc}

0800553e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800553e:	b580      	push	{r7, lr}
 8005540:	b09c      	sub	sp, #112	; 0x70
 8005542:	af00      	add	r7, sp, #0
 8005544:	60f8      	str	r0, [r7, #12]
 8005546:	60b9      	str	r1, [r7, #8]
 8005548:	603b      	str	r3, [r7, #0]
 800554a:	4613      	mov	r3, r2
 800554c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800554e:	e0a9      	b.n	80056a4 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005550:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005552:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005556:	f000 80a5 	beq.w	80056a4 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800555a:	f7fc fa61 	bl	8001a20 <HAL_GetTick>
 800555e:	4602      	mov	r2, r0
 8005560:	683b      	ldr	r3, [r7, #0]
 8005562:	1ad3      	subs	r3, r2, r3
 8005564:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005566:	429a      	cmp	r2, r3
 8005568:	d302      	bcc.n	8005570 <UART_WaitOnFlagUntilTimeout+0x32>
 800556a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800556c:	2b00      	cmp	r3, #0
 800556e:	d140      	bne.n	80055f2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005576:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005578:	e853 3f00 	ldrex	r3, [r3]
 800557c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800557e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005580:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005584:	667b      	str	r3, [r7, #100]	; 0x64
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	461a      	mov	r2, r3
 800558c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800558e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005590:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005592:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005594:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005596:	e841 2300 	strex	r3, r2, [r1]
 800559a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800559c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d1e6      	bne.n	8005570 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	3308      	adds	r3, #8
 80055a8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80055ac:	e853 3f00 	ldrex	r3, [r3]
 80055b0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80055b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055b4:	f023 0301 	bic.w	r3, r3, #1
 80055b8:	663b      	str	r3, [r7, #96]	; 0x60
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	3308      	adds	r3, #8
 80055c0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80055c2:	64ba      	str	r2, [r7, #72]	; 0x48
 80055c4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055c6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80055c8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80055ca:	e841 2300 	strex	r3, r2, [r1]
 80055ce:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80055d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d1e5      	bne.n	80055a2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	2220      	movs	r2, #32
 80055da:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	2220      	movs	r2, #32
 80055e2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	2200      	movs	r2, #0
 80055ea:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80055ee:	2303      	movs	r3, #3
 80055f0:	e069      	b.n	80056c6 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	f003 0304 	and.w	r3, r3, #4
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d051      	beq.n	80056a4 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	69db      	ldr	r3, [r3, #28]
 8005606:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800560a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800560e:	d149      	bne.n	80056a4 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005618:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005620:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005622:	e853 3f00 	ldrex	r3, [r3]
 8005626:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800562a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800562e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	461a      	mov	r2, r3
 8005636:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005638:	637b      	str	r3, [r7, #52]	; 0x34
 800563a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800563c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800563e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005640:	e841 2300 	strex	r3, r2, [r1]
 8005644:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005646:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005648:	2b00      	cmp	r3, #0
 800564a:	d1e6      	bne.n	800561a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	3308      	adds	r3, #8
 8005652:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005654:	697b      	ldr	r3, [r7, #20]
 8005656:	e853 3f00 	ldrex	r3, [r3]
 800565a:	613b      	str	r3, [r7, #16]
   return(result);
 800565c:	693b      	ldr	r3, [r7, #16]
 800565e:	f023 0301 	bic.w	r3, r3, #1
 8005662:	66bb      	str	r3, [r7, #104]	; 0x68
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	3308      	adds	r3, #8
 800566a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800566c:	623a      	str	r2, [r7, #32]
 800566e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005670:	69f9      	ldr	r1, [r7, #28]
 8005672:	6a3a      	ldr	r2, [r7, #32]
 8005674:	e841 2300 	strex	r3, r2, [r1]
 8005678:	61bb      	str	r3, [r7, #24]
   return(result);
 800567a:	69bb      	ldr	r3, [r7, #24]
 800567c:	2b00      	cmp	r3, #0
 800567e:	d1e5      	bne.n	800564c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	2220      	movs	r2, #32
 8005684:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	2220      	movs	r2, #32
 800568c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	2220      	movs	r2, #32
 8005694:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	2200      	movs	r2, #0
 800569c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80056a0:	2303      	movs	r3, #3
 80056a2:	e010      	b.n	80056c6 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	69da      	ldr	r2, [r3, #28]
 80056aa:	68bb      	ldr	r3, [r7, #8]
 80056ac:	4013      	ands	r3, r2
 80056ae:	68ba      	ldr	r2, [r7, #8]
 80056b0:	429a      	cmp	r2, r3
 80056b2:	bf0c      	ite	eq
 80056b4:	2301      	moveq	r3, #1
 80056b6:	2300      	movne	r3, #0
 80056b8:	b2db      	uxtb	r3, r3
 80056ba:	461a      	mov	r2, r3
 80056bc:	79fb      	ldrb	r3, [r7, #7]
 80056be:	429a      	cmp	r2, r3
 80056c0:	f43f af46 	beq.w	8005550 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80056c4:	2300      	movs	r3, #0
}
 80056c6:	4618      	mov	r0, r3
 80056c8:	3770      	adds	r7, #112	; 0x70
 80056ca:	46bd      	mov	sp, r7
 80056cc:	bd80      	pop	{r7, pc}

080056ce <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80056ce:	b480      	push	{r7}
 80056d0:	b08f      	sub	sp, #60	; 0x3c
 80056d2:	af00      	add	r7, sp, #0
 80056d4:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056dc:	6a3b      	ldr	r3, [r7, #32]
 80056de:	e853 3f00 	ldrex	r3, [r3]
 80056e2:	61fb      	str	r3, [r7, #28]
   return(result);
 80056e4:	69fb      	ldr	r3, [r7, #28]
 80056e6:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80056ea:	637b      	str	r3, [r7, #52]	; 0x34
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	461a      	mov	r2, r3
 80056f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80056f6:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056f8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80056fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80056fc:	e841 2300 	strex	r3, r2, [r1]
 8005700:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005704:	2b00      	cmp	r3, #0
 8005706:	d1e6      	bne.n	80056d6 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	3308      	adds	r3, #8
 800570e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	e853 3f00 	ldrex	r3, [r3]
 8005716:	60bb      	str	r3, [r7, #8]
   return(result);
 8005718:	68bb      	ldr	r3, [r7, #8]
 800571a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800571e:	633b      	str	r3, [r7, #48]	; 0x30
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	3308      	adds	r3, #8
 8005726:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005728:	61ba      	str	r2, [r7, #24]
 800572a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800572c:	6979      	ldr	r1, [r7, #20]
 800572e:	69ba      	ldr	r2, [r7, #24]
 8005730:	e841 2300 	strex	r3, r2, [r1]
 8005734:	613b      	str	r3, [r7, #16]
   return(result);
 8005736:	693b      	ldr	r3, [r7, #16]
 8005738:	2b00      	cmp	r3, #0
 800573a:	d1e5      	bne.n	8005708 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	2220      	movs	r2, #32
 8005740:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 8005744:	bf00      	nop
 8005746:	373c      	adds	r7, #60	; 0x3c
 8005748:	46bd      	mov	sp, r7
 800574a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574e:	4770      	bx	lr

08005750 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005750:	b480      	push	{r7}
 8005752:	b095      	sub	sp, #84	; 0x54
 8005754:	af00      	add	r7, sp, #0
 8005756:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800575e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005760:	e853 3f00 	ldrex	r3, [r3]
 8005764:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005766:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005768:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800576c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	461a      	mov	r2, r3
 8005774:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005776:	643b      	str	r3, [r7, #64]	; 0x40
 8005778:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800577a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800577c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800577e:	e841 2300 	strex	r3, r2, [r1]
 8005782:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005784:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005786:	2b00      	cmp	r3, #0
 8005788:	d1e6      	bne.n	8005758 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	3308      	adds	r3, #8
 8005790:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005792:	6a3b      	ldr	r3, [r7, #32]
 8005794:	e853 3f00 	ldrex	r3, [r3]
 8005798:	61fb      	str	r3, [r7, #28]
   return(result);
 800579a:	69fb      	ldr	r3, [r7, #28]
 800579c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80057a0:	f023 0301 	bic.w	r3, r3, #1
 80057a4:	64bb      	str	r3, [r7, #72]	; 0x48
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	3308      	adds	r3, #8
 80057ac:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80057ae:	62fa      	str	r2, [r7, #44]	; 0x2c
 80057b0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057b2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80057b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80057b6:	e841 2300 	strex	r3, r2, [r1]
 80057ba:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80057bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d1e3      	bne.n	800578a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80057c6:	2b01      	cmp	r3, #1
 80057c8:	d118      	bne.n	80057fc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	e853 3f00 	ldrex	r3, [r3]
 80057d6:	60bb      	str	r3, [r7, #8]
   return(result);
 80057d8:	68bb      	ldr	r3, [r7, #8]
 80057da:	f023 0310 	bic.w	r3, r3, #16
 80057de:	647b      	str	r3, [r7, #68]	; 0x44
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	461a      	mov	r2, r3
 80057e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80057e8:	61bb      	str	r3, [r7, #24]
 80057ea:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057ec:	6979      	ldr	r1, [r7, #20]
 80057ee:	69ba      	ldr	r2, [r7, #24]
 80057f0:	e841 2300 	strex	r3, r2, [r1]
 80057f4:	613b      	str	r3, [r7, #16]
   return(result);
 80057f6:	693b      	ldr	r3, [r7, #16]
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d1e6      	bne.n	80057ca <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	2220      	movs	r2, #32
 8005800:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	2200      	movs	r2, #0
 8005808:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	2200      	movs	r2, #0
 800580e:	671a      	str	r2, [r3, #112]	; 0x70
}
 8005810:	bf00      	nop
 8005812:	3754      	adds	r7, #84	; 0x54
 8005814:	46bd      	mov	sp, r7
 8005816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581a:	4770      	bx	lr

0800581c <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800581c:	b580      	push	{r7, lr}
 800581e:	b090      	sub	sp, #64	; 0x40
 8005820:	af00      	add	r7, sp, #0
 8005822:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005828:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	f003 0320 	and.w	r3, r3, #32
 8005834:	2b00      	cmp	r3, #0
 8005836:	d137      	bne.n	80058a8 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 8005838:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800583a:	2200      	movs	r2, #0
 800583c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005840:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	3308      	adds	r3, #8
 8005846:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800584a:	e853 3f00 	ldrex	r3, [r3]
 800584e:	623b      	str	r3, [r7, #32]
   return(result);
 8005850:	6a3b      	ldr	r3, [r7, #32]
 8005852:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005856:	63bb      	str	r3, [r7, #56]	; 0x38
 8005858:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	3308      	adds	r3, #8
 800585e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005860:	633a      	str	r2, [r7, #48]	; 0x30
 8005862:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005864:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005866:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005868:	e841 2300 	strex	r3, r2, [r1]
 800586c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800586e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005870:	2b00      	cmp	r3, #0
 8005872:	d1e5      	bne.n	8005840 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005874:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800587a:	693b      	ldr	r3, [r7, #16]
 800587c:	e853 3f00 	ldrex	r3, [r3]
 8005880:	60fb      	str	r3, [r7, #12]
   return(result);
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005888:	637b      	str	r3, [r7, #52]	; 0x34
 800588a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	461a      	mov	r2, r3
 8005890:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005892:	61fb      	str	r3, [r7, #28]
 8005894:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005896:	69b9      	ldr	r1, [r7, #24]
 8005898:	69fa      	ldr	r2, [r7, #28]
 800589a:	e841 2300 	strex	r3, r2, [r1]
 800589e:	617b      	str	r3, [r7, #20]
   return(result);
 80058a0:	697b      	ldr	r3, [r7, #20]
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d1e6      	bne.n	8005874 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80058a6:	e002      	b.n	80058ae <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 80058a8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80058aa:	f7fb fc1f 	bl	80010ec <HAL_UART_TxCpltCallback>
}
 80058ae:	bf00      	nop
 80058b0:	3740      	adds	r7, #64	; 0x40
 80058b2:	46bd      	mov	sp, r7
 80058b4:	bd80      	pop	{r7, pc}

080058b6 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80058b6:	b580      	push	{r7, lr}
 80058b8:	b084      	sub	sp, #16
 80058ba:	af00      	add	r7, sp, #0
 80058bc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058c2:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80058c4:	68f8      	ldr	r0, [r7, #12]
 80058c6:	f7ff fb27 	bl	8004f18 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80058ca:	bf00      	nop
 80058cc:	3710      	adds	r7, #16
 80058ce:	46bd      	mov	sp, r7
 80058d0:	bd80      	pop	{r7, pc}

080058d2 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80058d2:	b580      	push	{r7, lr}
 80058d4:	b086      	sub	sp, #24
 80058d6:	af00      	add	r7, sp, #0
 80058d8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058de:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80058e0:	697b      	ldr	r3, [r7, #20]
 80058e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80058e6:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80058e8:	697b      	ldr	r3, [r7, #20]
 80058ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058ee:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80058f0:	697b      	ldr	r3, [r7, #20]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	689b      	ldr	r3, [r3, #8]
 80058f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058fa:	2b80      	cmp	r3, #128	; 0x80
 80058fc:	d109      	bne.n	8005912 <UART_DMAError+0x40>
 80058fe:	693b      	ldr	r3, [r7, #16]
 8005900:	2b21      	cmp	r3, #33	; 0x21
 8005902:	d106      	bne.n	8005912 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8005904:	697b      	ldr	r3, [r7, #20]
 8005906:	2200      	movs	r2, #0
 8005908:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800590c:	6978      	ldr	r0, [r7, #20]
 800590e:	f7ff fede 	bl	80056ce <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8005912:	697b      	ldr	r3, [r7, #20]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	689b      	ldr	r3, [r3, #8]
 8005918:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800591c:	2b40      	cmp	r3, #64	; 0x40
 800591e:	d109      	bne.n	8005934 <UART_DMAError+0x62>
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	2b22      	cmp	r3, #34	; 0x22
 8005924:	d106      	bne.n	8005934 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8005926:	697b      	ldr	r3, [r7, #20]
 8005928:	2200      	movs	r2, #0
 800592a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800592e:	6978      	ldr	r0, [r7, #20]
 8005930:	f7ff ff0e 	bl	8005750 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005934:	697b      	ldr	r3, [r7, #20]
 8005936:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800593a:	f043 0210 	orr.w	r2, r3, #16
 800593e:	697b      	ldr	r3, [r7, #20]
 8005940:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005944:	6978      	ldr	r0, [r7, #20]
 8005946:	f7ff faf1 	bl	8004f2c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800594a:	bf00      	nop
 800594c:	3718      	adds	r7, #24
 800594e:	46bd      	mov	sp, r7
 8005950:	bd80      	pop	{r7, pc}

08005952 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005952:	b580      	push	{r7, lr}
 8005954:	b084      	sub	sp, #16
 8005956:	af00      	add	r7, sp, #0
 8005958:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800595e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	2200      	movs	r2, #0
 8005964:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	2200      	movs	r2, #0
 800596c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005970:	68f8      	ldr	r0, [r7, #12]
 8005972:	f7ff fadb 	bl	8004f2c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005976:	bf00      	nop
 8005978:	3710      	adds	r7, #16
 800597a:	46bd      	mov	sp, r7
 800597c:	bd80      	pop	{r7, pc}

0800597e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800597e:	b580      	push	{r7, lr}
 8005980:	b088      	sub	sp, #32
 8005982:	af00      	add	r7, sp, #0
 8005984:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	e853 3f00 	ldrex	r3, [r3]
 8005992:	60bb      	str	r3, [r7, #8]
   return(result);
 8005994:	68bb      	ldr	r3, [r7, #8]
 8005996:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800599a:	61fb      	str	r3, [r7, #28]
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	461a      	mov	r2, r3
 80059a2:	69fb      	ldr	r3, [r7, #28]
 80059a4:	61bb      	str	r3, [r7, #24]
 80059a6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059a8:	6979      	ldr	r1, [r7, #20]
 80059aa:	69ba      	ldr	r2, [r7, #24]
 80059ac:	e841 2300 	strex	r3, r2, [r1]
 80059b0:	613b      	str	r3, [r7, #16]
   return(result);
 80059b2:	693b      	ldr	r3, [r7, #16]
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d1e6      	bne.n	8005986 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	2220      	movs	r2, #32
 80059bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	2200      	movs	r2, #0
 80059c4:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80059c6:	6878      	ldr	r0, [r7, #4]
 80059c8:	f7fb fb90 	bl	80010ec <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80059cc:	bf00      	nop
 80059ce:	3720      	adds	r7, #32
 80059d0:	46bd      	mov	sp, r7
 80059d2:	bd80      	pop	{r7, pc}

080059d4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80059d4:	b480      	push	{r7}
 80059d6:	b083      	sub	sp, #12
 80059d8:	af00      	add	r7, sp, #0
 80059da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80059dc:	bf00      	nop
 80059de:	370c      	adds	r7, #12
 80059e0:	46bd      	mov	sp, r7
 80059e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e6:	4770      	bx	lr

080059e8 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80059e8:	b480      	push	{r7}
 80059ea:	b083      	sub	sp, #12
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80059f0:	bf00      	nop
 80059f2:	370c      	adds	r7, #12
 80059f4:	46bd      	mov	sp, r7
 80059f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fa:	4770      	bx	lr

080059fc <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80059fc:	b480      	push	{r7}
 80059fe:	b083      	sub	sp, #12
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8005a04:	bf00      	nop
 8005a06:	370c      	adds	r7, #12
 8005a08:	46bd      	mov	sp, r7
 8005a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0e:	4770      	bx	lr

08005a10 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005a10:	b480      	push	{r7}
 8005a12:	b085      	sub	sp, #20
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005a1e:	2b01      	cmp	r3, #1
 8005a20:	d101      	bne.n	8005a26 <HAL_UARTEx_DisableFifoMode+0x16>
 8005a22:	2302      	movs	r3, #2
 8005a24:	e027      	b.n	8005a76 <HAL_UARTEx_DisableFifoMode+0x66>
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	2201      	movs	r2, #1
 8005a2a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	2224      	movs	r2, #36	; 0x24
 8005a32:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	681a      	ldr	r2, [r3, #0]
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	f022 0201 	bic.w	r2, r2, #1
 8005a4c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005a54:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	2200      	movs	r2, #0
 8005a5a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	68fa      	ldr	r2, [r7, #12]
 8005a62:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	2220      	movs	r2, #32
 8005a68:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	2200      	movs	r2, #0
 8005a70:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005a74:	2300      	movs	r3, #0
}
 8005a76:	4618      	mov	r0, r3
 8005a78:	3714      	adds	r7, #20
 8005a7a:	46bd      	mov	sp, r7
 8005a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a80:	4770      	bx	lr

08005a82 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005a82:	b580      	push	{r7, lr}
 8005a84:	b084      	sub	sp, #16
 8005a86:	af00      	add	r7, sp, #0
 8005a88:	6078      	str	r0, [r7, #4]
 8005a8a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005a92:	2b01      	cmp	r3, #1
 8005a94:	d101      	bne.n	8005a9a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005a96:	2302      	movs	r3, #2
 8005a98:	e02d      	b.n	8005af6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	2201      	movs	r2, #1
 8005a9e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	2224      	movs	r2, #36	; 0x24
 8005aa6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	681a      	ldr	r2, [r3, #0]
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	f022 0201 	bic.w	r2, r2, #1
 8005ac0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	689b      	ldr	r3, [r3, #8]
 8005ac8:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	683a      	ldr	r2, [r7, #0]
 8005ad2:	430a      	orrs	r2, r1
 8005ad4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005ad6:	6878      	ldr	r0, [r7, #4]
 8005ad8:	f000 f850 	bl	8005b7c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	68fa      	ldr	r2, [r7, #12]
 8005ae2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	2220      	movs	r2, #32
 8005ae8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	2200      	movs	r2, #0
 8005af0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005af4:	2300      	movs	r3, #0
}
 8005af6:	4618      	mov	r0, r3
 8005af8:	3710      	adds	r7, #16
 8005afa:	46bd      	mov	sp, r7
 8005afc:	bd80      	pop	{r7, pc}

08005afe <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005afe:	b580      	push	{r7, lr}
 8005b00:	b084      	sub	sp, #16
 8005b02:	af00      	add	r7, sp, #0
 8005b04:	6078      	str	r0, [r7, #4]
 8005b06:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005b0e:	2b01      	cmp	r3, #1
 8005b10:	d101      	bne.n	8005b16 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005b12:	2302      	movs	r3, #2
 8005b14:	e02d      	b.n	8005b72 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	2201      	movs	r2, #1
 8005b1a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	2224      	movs	r2, #36	; 0x24
 8005b22:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	681a      	ldr	r2, [r3, #0]
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f022 0201 	bic.w	r2, r2, #1
 8005b3c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	689b      	ldr	r3, [r3, #8]
 8005b44:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	683a      	ldr	r2, [r7, #0]
 8005b4e:	430a      	orrs	r2, r1
 8005b50:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005b52:	6878      	ldr	r0, [r7, #4]
 8005b54:	f000 f812 	bl	8005b7c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	68fa      	ldr	r2, [r7, #12]
 8005b5e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	2220      	movs	r2, #32
 8005b64:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	2200      	movs	r2, #0
 8005b6c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005b70:	2300      	movs	r3, #0
}
 8005b72:	4618      	mov	r0, r3
 8005b74:	3710      	adds	r7, #16
 8005b76:	46bd      	mov	sp, r7
 8005b78:	bd80      	pop	{r7, pc}
	...

08005b7c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005b7c:	b480      	push	{r7}
 8005b7e:	b085      	sub	sp, #20
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d108      	bne.n	8005b9e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	2201      	movs	r2, #1
 8005b90:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	2201      	movs	r2, #1
 8005b98:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005b9c:	e031      	b.n	8005c02 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005b9e:	2308      	movs	r3, #8
 8005ba0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005ba2:	2308      	movs	r3, #8
 8005ba4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	689b      	ldr	r3, [r3, #8]
 8005bac:	0e5b      	lsrs	r3, r3, #25
 8005bae:	b2db      	uxtb	r3, r3
 8005bb0:	f003 0307 	and.w	r3, r3, #7
 8005bb4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	689b      	ldr	r3, [r3, #8]
 8005bbc:	0f5b      	lsrs	r3, r3, #29
 8005bbe:	b2db      	uxtb	r3, r3
 8005bc0:	f003 0307 	and.w	r3, r3, #7
 8005bc4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005bc6:	7bbb      	ldrb	r3, [r7, #14]
 8005bc8:	7b3a      	ldrb	r2, [r7, #12]
 8005bca:	4911      	ldr	r1, [pc, #68]	; (8005c10 <UARTEx_SetNbDataToProcess+0x94>)
 8005bcc:	5c8a      	ldrb	r2, [r1, r2]
 8005bce:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005bd2:	7b3a      	ldrb	r2, [r7, #12]
 8005bd4:	490f      	ldr	r1, [pc, #60]	; (8005c14 <UARTEx_SetNbDataToProcess+0x98>)
 8005bd6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005bd8:	fb93 f3f2 	sdiv	r3, r3, r2
 8005bdc:	b29a      	uxth	r2, r3
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005be4:	7bfb      	ldrb	r3, [r7, #15]
 8005be6:	7b7a      	ldrb	r2, [r7, #13]
 8005be8:	4909      	ldr	r1, [pc, #36]	; (8005c10 <UARTEx_SetNbDataToProcess+0x94>)
 8005bea:	5c8a      	ldrb	r2, [r1, r2]
 8005bec:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005bf0:	7b7a      	ldrb	r2, [r7, #13]
 8005bf2:	4908      	ldr	r1, [pc, #32]	; (8005c14 <UARTEx_SetNbDataToProcess+0x98>)
 8005bf4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005bf6:	fb93 f3f2 	sdiv	r3, r3, r2
 8005bfa:	b29a      	uxth	r2, r3
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8005c02:	bf00      	nop
 8005c04:	3714      	adds	r7, #20
 8005c06:	46bd      	mov	sp, r7
 8005c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0c:	4770      	bx	lr
 8005c0e:	bf00      	nop
 8005c10:	0800ac08 	.word	0x0800ac08
 8005c14:	0800ac10 	.word	0x0800ac10

08005c18 <aci_gap_set_non_discoverable>:
 */

#include "ble_gap_aci.h"

tBleStatus aci_gap_set_non_discoverable( void )
{
 8005c18:	b580      	push	{r7, lr}
 8005c1a:	b088      	sub	sp, #32
 8005c1c:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8005c1e:	2300      	movs	r3, #0
 8005c20:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8005c22:	f107 0308 	add.w	r3, r7, #8
 8005c26:	2218      	movs	r2, #24
 8005c28:	2100      	movs	r1, #0
 8005c2a:	4618      	mov	r0, r3
 8005c2c:	f000 ff8b 	bl	8006b46 <Osal_MemSet>
  rq.ogf = 0x3f;
 8005c30:	233f      	movs	r3, #63	; 0x3f
 8005c32:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x081;
 8005c34:	2381      	movs	r3, #129	; 0x81
 8005c36:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8005c38:	1dfb      	adds	r3, r7, #7
 8005c3a:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8005c3c:	2301      	movs	r3, #1
 8005c3e:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8005c40:	f107 0308 	add.w	r3, r7, #8
 8005c44:	2100      	movs	r1, #0
 8005c46:	4618      	mov	r0, r3
 8005c48:	f001 f942 	bl	8006ed0 <hci_send_req>
 8005c4c:	4603      	mov	r3, r0
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	da01      	bge.n	8005c56 <aci_gap_set_non_discoverable+0x3e>
    return BLE_STATUS_TIMEOUT;
 8005c52:	23ff      	movs	r3, #255	; 0xff
 8005c54:	e000      	b.n	8005c58 <aci_gap_set_non_discoverable+0x40>
  return status;
 8005c56:	79fb      	ldrb	r3, [r7, #7]
}
 8005c58:	4618      	mov	r0, r3
 8005c5a:	3720      	adds	r7, #32
 8005c5c:	46bd      	mov	sp, r7
 8005c5e:	bd80      	pop	{r7, pc}

08005c60 <aci_gap_set_discoverable>:
                                     const uint8_t* Local_Name,
                                     uint8_t Service_Uuid_length,
                                     const uint8_t* Service_Uuid_List,
                                     uint16_t Slave_Conn_Interval_Min,
                                     uint16_t Slave_Conn_Interval_Max )
{
 8005c60:	b5b0      	push	{r4, r5, r7, lr}
 8005c62:	b0ce      	sub	sp, #312	; 0x138
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	4605      	mov	r5, r0
 8005c68:	460c      	mov	r4, r1
 8005c6a:	4610      	mov	r0, r2
 8005c6c:	4619      	mov	r1, r3
 8005c6e:	1dfb      	adds	r3, r7, #7
 8005c70:	462a      	mov	r2, r5
 8005c72:	701a      	strb	r2, [r3, #0]
 8005c74:	1d3b      	adds	r3, r7, #4
 8005c76:	4622      	mov	r2, r4
 8005c78:	801a      	strh	r2, [r3, #0]
 8005c7a:	1cbb      	adds	r3, r7, #2
 8005c7c:	4602      	mov	r2, r0
 8005c7e:	801a      	strh	r2, [r3, #0]
 8005c80:	1dbb      	adds	r3, r7, #6
 8005c82:	460a      	mov	r2, r1
 8005c84:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_discoverable_cp0 *cp0 = (aci_gap_set_discoverable_cp0*)(cmd_buffer);
 8005c86:	f107 0310 	add.w	r3, r7, #16
 8005c8a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 8005c8e:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 8005c92:	3308      	adds	r3, #8
 8005c94:	f107 0210 	add.w	r2, r7, #16
 8005c98:	4413      	add	r3, r2
 8005c9a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 8005c9e:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 8005ca2:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 8005ca6:	4413      	add	r3, r2
 8005ca8:	3309      	adds	r3, #9
 8005caa:	f107 0210 	add.w	r2, r7, #16
 8005cae:	4413      	add	r3, r2
 8005cb0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8005cb4:	f107 030f 	add.w	r3, r7, #15
 8005cb8:	2200      	movs	r2, #0
 8005cba:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8005cbc:	2300      	movs	r3, #0
 8005cbe:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Type = Advertising_Type;
 8005cc2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005cc6:	1dfa      	adds	r2, r7, #7
 8005cc8:	7812      	ldrb	r2, [r2, #0]
 8005cca:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8005ccc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005cd0:	3301      	adds	r3, #1
 8005cd2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Min = Advertising_Interval_Min;
 8005cd6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005cda:	1d3a      	adds	r2, r7, #4
 8005cdc:	8812      	ldrh	r2, [r2, #0]
 8005cde:	f8a3 2001 	strh.w	r2, [r3, #1]
  index_input += 2;
 8005ce2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005ce6:	3302      	adds	r3, #2
 8005ce8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Max = Advertising_Interval_Max;
 8005cec:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005cf0:	1cba      	adds	r2, r7, #2
 8005cf2:	8812      	ldrh	r2, [r2, #0]
 8005cf4:	f8a3 2003 	strh.w	r2, [r3, #3]
  index_input += 2;
 8005cf8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005cfc:	3302      	adds	r3, #2
 8005cfe:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Own_Address_Type = Own_Address_Type;
 8005d02:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005d06:	1dba      	adds	r2, r7, #6
 8005d08:	7812      	ldrb	r2, [r2, #0]
 8005d0a:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8005d0c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005d10:	3301      	adds	r3, #1
 8005d12:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Filter_Policy = Advertising_Filter_Policy;
 8005d16:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005d1a:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 8005d1e:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 8005d20:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005d24:	3301      	adds	r3, #1
 8005d26:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Local_Name_Length = Local_Name_Length;
 8005d2a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005d2e:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 8005d32:	71da      	strb	r2, [r3, #7]
  index_input += 1;
 8005d34:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005d38:	3301      	adds	r3, #1
 8005d3a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    Osal_MemCpy( (void*)&cp0->Local_Name, (const void*)Local_Name, Local_Name_Length );
 8005d3e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005d42:	3308      	adds	r3, #8
 8005d44:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 8005d48:	f8d7 1150 	ldr.w	r1, [r7, #336]	; 0x150
 8005d4c:	4618      	mov	r0, r3
 8005d4e:	f000 feea 	bl	8006b26 <Osal_MemCpy>
    index_input += Local_Name_Length;
 8005d52:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 8005d56:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8005d5a:	4413      	add	r3, r2
 8005d5c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Uuid_length = Service_Uuid_length;
 8005d60:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8005d64:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 8005d68:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 8005d6a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005d6e:	3301      	adds	r3, #1
 8005d70:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    Osal_MemCpy( (void*)&cp1->Service_Uuid_List, (const void*)Service_Uuid_List, Service_Uuid_length );
 8005d74:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8005d78:	3301      	adds	r3, #1
 8005d7a:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 8005d7e:	f8d7 1158 	ldr.w	r1, [r7, #344]	; 0x158
 8005d82:	4618      	mov	r0, r3
 8005d84:	f000 fecf 	bl	8006b26 <Osal_MemCpy>
    index_input += Service_Uuid_length;
 8005d88:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 8005d8c:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8005d90:	4413      	add	r3, r2
 8005d92:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Slave_Conn_Interval_Min = Slave_Conn_Interval_Min;
 8005d96:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d9a:	f8b7 215c 	ldrh.w	r2, [r7, #348]	; 0x15c
 8005d9e:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 8005da0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005da4:	3302      	adds	r3, #2
 8005da6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Slave_Conn_Interval_Max = Slave_Conn_Interval_Max;
 8005daa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005dae:	f8b7 2160 	ldrh.w	r2, [r7, #352]	; 0x160
 8005db2:	805a      	strh	r2, [r3, #2]
    }
    index_input += 2;
 8005db4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005db8:	3302      	adds	r3, #2
 8005dba:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8005dbe:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005dc2:	2218      	movs	r2, #24
 8005dc4:	2100      	movs	r1, #0
 8005dc6:	4618      	mov	r0, r3
 8005dc8:	f000 febd 	bl	8006b46 <Osal_MemSet>
  rq.ogf = 0x3f;
 8005dcc:	233f      	movs	r3, #63	; 0x3f
 8005dce:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x083;
 8005dd2:	2383      	movs	r3, #131	; 0x83
 8005dd4:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8005dd8:	f107 0310 	add.w	r3, r7, #16
 8005ddc:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8005de0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005de4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8005de8:	f107 030f 	add.w	r3, r7, #15
 8005dec:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8005df0:	2301      	movs	r3, #1
 8005df2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8005df6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005dfa:	2100      	movs	r1, #0
 8005dfc:	4618      	mov	r0, r3
 8005dfe:	f001 f867 	bl	8006ed0 <hci_send_req>
 8005e02:	4603      	mov	r3, r0
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	da01      	bge.n	8005e0c <aci_gap_set_discoverable+0x1ac>
    return BLE_STATUS_TIMEOUT;
 8005e08:	23ff      	movs	r3, #255	; 0xff
 8005e0a:	e002      	b.n	8005e12 <aci_gap_set_discoverable+0x1b2>
  return status;
 8005e0c:	f107 030f 	add.w	r3, r7, #15
 8005e10:	781b      	ldrb	r3, [r3, #0]
}
 8005e12:	4618      	mov	r0, r3
 8005e14:	f507 779c 	add.w	r7, r7, #312	; 0x138
 8005e18:	46bd      	mov	sp, r7
 8005e1a:	bdb0      	pop	{r4, r5, r7, pc}

08005e1c <aci_gap_set_io_capability>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_set_io_capability( uint8_t IO_Capability )
{
 8005e1c:	b580      	push	{r7, lr}
 8005e1e:	b0cc      	sub	sp, #304	; 0x130
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	4602      	mov	r2, r0
 8005e24:	1dfb      	adds	r3, r7, #7
 8005e26:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_io_capability_cp0 *cp0 = (aci_gap_set_io_capability_cp0*)(cmd_buffer);
 8005e28:	f107 0310 	add.w	r3, r7, #16
 8005e2c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8005e30:	f107 030f 	add.w	r3, r7, #15
 8005e34:	2200      	movs	r2, #0
 8005e36:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8005e38:	2300      	movs	r3, #0
 8005e3a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->IO_Capability = IO_Capability;
 8005e3e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e42:	1dfa      	adds	r2, r7, #7
 8005e44:	7812      	ldrb	r2, [r2, #0]
 8005e46:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8005e48:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005e4c:	3301      	adds	r3, #1
 8005e4e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8005e52:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005e56:	2218      	movs	r2, #24
 8005e58:	2100      	movs	r1, #0
 8005e5a:	4618      	mov	r0, r3
 8005e5c:	f000 fe73 	bl	8006b46 <Osal_MemSet>
  rq.ogf = 0x3f;
 8005e60:	233f      	movs	r3, #63	; 0x3f
 8005e62:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x085;
 8005e66:	2385      	movs	r3, #133	; 0x85
 8005e68:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8005e6c:	f107 0310 	add.w	r3, r7, #16
 8005e70:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8005e74:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005e78:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8005e7c:	f107 030f 	add.w	r3, r7, #15
 8005e80:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8005e84:	2301      	movs	r3, #1
 8005e86:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8005e8a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005e8e:	2100      	movs	r1, #0
 8005e90:	4618      	mov	r0, r3
 8005e92:	f001 f81d 	bl	8006ed0 <hci_send_req>
 8005e96:	4603      	mov	r3, r0
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	da01      	bge.n	8005ea0 <aci_gap_set_io_capability+0x84>
    return BLE_STATUS_TIMEOUT;
 8005e9c:	23ff      	movs	r3, #255	; 0xff
 8005e9e:	e002      	b.n	8005ea6 <aci_gap_set_io_capability+0x8a>
  return status;
 8005ea0:	f107 030f 	add.w	r3, r7, #15
 8005ea4:	781b      	ldrb	r3, [r3, #0]
}
 8005ea6:	4618      	mov	r0, r3
 8005ea8:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8005eac:	46bd      	mov	sp, r7
 8005eae:	bd80      	pop	{r7, pc}

08005eb0 <aci_gap_set_authentication_requirement>:
                                                   uint8_t Min_Encryption_Key_Size,
                                                   uint8_t Max_Encryption_Key_Size,
                                                   uint8_t Use_Fixed_Pin,
                                                   uint32_t Fixed_Pin,
                                                   uint8_t Identity_Address_Type )
{
 8005eb0:	b5b0      	push	{r4, r5, r7, lr}
 8005eb2:	b0cc      	sub	sp, #304	; 0x130
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	4605      	mov	r5, r0
 8005eb8:	460c      	mov	r4, r1
 8005eba:	4610      	mov	r0, r2
 8005ebc:	4619      	mov	r1, r3
 8005ebe:	1dfb      	adds	r3, r7, #7
 8005ec0:	462a      	mov	r2, r5
 8005ec2:	701a      	strb	r2, [r3, #0]
 8005ec4:	1dbb      	adds	r3, r7, #6
 8005ec6:	4622      	mov	r2, r4
 8005ec8:	701a      	strb	r2, [r3, #0]
 8005eca:	1d7b      	adds	r3, r7, #5
 8005ecc:	4602      	mov	r2, r0
 8005ece:	701a      	strb	r2, [r3, #0]
 8005ed0:	1d3b      	adds	r3, r7, #4
 8005ed2:	460a      	mov	r2, r1
 8005ed4:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_authentication_requirement_cp0 *cp0 = (aci_gap_set_authentication_requirement_cp0*)(cmd_buffer);
 8005ed6:	f107 0310 	add.w	r3, r7, #16
 8005eda:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8005ede:	f107 030f 	add.w	r3, r7, #15
 8005ee2:	2200      	movs	r2, #0
 8005ee4:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8005ee6:	2300      	movs	r3, #0
 8005ee8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Bonding_Mode = Bonding_Mode;
 8005eec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ef0:	1dfa      	adds	r2, r7, #7
 8005ef2:	7812      	ldrb	r2, [r2, #0]
 8005ef4:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8005ef6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005efa:	3301      	adds	r3, #1
 8005efc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->MITM_Mode = MITM_Mode;
 8005f00:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f04:	1dba      	adds	r2, r7, #6
 8005f06:	7812      	ldrb	r2, [r2, #0]
 8005f08:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8005f0a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005f0e:	3301      	adds	r3, #1
 8005f10:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->SC_Support = SC_Support;
 8005f14:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f18:	1d7a      	adds	r2, r7, #5
 8005f1a:	7812      	ldrb	r2, [r2, #0]
 8005f1c:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8005f1e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005f22:	3301      	adds	r3, #1
 8005f24:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->KeyPress_Notification_Support = KeyPress_Notification_Support;
 8005f28:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f2c:	1d3a      	adds	r2, r7, #4
 8005f2e:	7812      	ldrb	r2, [r2, #0]
 8005f30:	70da      	strb	r2, [r3, #3]
  index_input += 1;
 8005f32:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005f36:	3301      	adds	r3, #1
 8005f38:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Min_Encryption_Key_Size = Min_Encryption_Key_Size;
 8005f3c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f40:	f897 2140 	ldrb.w	r2, [r7, #320]	; 0x140
 8005f44:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8005f46:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005f4a:	3301      	adds	r3, #1
 8005f4c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Max_Encryption_Key_Size = Max_Encryption_Key_Size;
 8005f50:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f54:	f897 2144 	ldrb.w	r2, [r7, #324]	; 0x144
 8005f58:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8005f5a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005f5e:	3301      	adds	r3, #1
 8005f60:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Use_Fixed_Pin = Use_Fixed_Pin;
 8005f64:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f68:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 8005f6c:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 8005f6e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005f72:	3301      	adds	r3, #1
 8005f74:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Fixed_Pin = Fixed_Pin;
 8005f78:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f7c:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8005f80:	f8c3 2007 	str.w	r2, [r3, #7]
  index_input += 4;
 8005f84:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005f88:	3304      	adds	r3, #4
 8005f8a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Identity_Address_Type = Identity_Address_Type;
 8005f8e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f92:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 8005f96:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 8005f98:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005f9c:	3301      	adds	r3, #1
 8005f9e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8005fa2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005fa6:	2218      	movs	r2, #24
 8005fa8:	2100      	movs	r1, #0
 8005faa:	4618      	mov	r0, r3
 8005fac:	f000 fdcb 	bl	8006b46 <Osal_MemSet>
  rq.ogf = 0x3f;
 8005fb0:	233f      	movs	r3, #63	; 0x3f
 8005fb2:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x086;
 8005fb6:	2386      	movs	r3, #134	; 0x86
 8005fb8:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8005fbc:	f107 0310 	add.w	r3, r7, #16
 8005fc0:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8005fc4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005fc8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8005fcc:	f107 030f 	add.w	r3, r7, #15
 8005fd0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8005fd4:	2301      	movs	r3, #1
 8005fd6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8005fda:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005fde:	2100      	movs	r1, #0
 8005fe0:	4618      	mov	r0, r3
 8005fe2:	f000 ff75 	bl	8006ed0 <hci_send_req>
 8005fe6:	4603      	mov	r3, r0
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	da01      	bge.n	8005ff0 <aci_gap_set_authentication_requirement+0x140>
    return BLE_STATUS_TIMEOUT;
 8005fec:	23ff      	movs	r3, #255	; 0xff
 8005fee:	e002      	b.n	8005ff6 <aci_gap_set_authentication_requirement+0x146>
  return status;
 8005ff0:	f107 030f 	add.w	r3, r7, #15
 8005ff4:	781b      	ldrb	r3, [r3, #0]
}
 8005ff6:	4618      	mov	r0, r3
 8005ff8:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8005ffc:	46bd      	mov	sp, r7
 8005ffe:	bdb0      	pop	{r4, r5, r7, pc}

08006000 <aci_gap_pass_key_resp>:
  return status;
}

tBleStatus aci_gap_pass_key_resp( uint16_t Connection_Handle,
                                  uint32_t Pass_Key )
{
 8006000:	b580      	push	{r7, lr}
 8006002:	b0cc      	sub	sp, #304	; 0x130
 8006004:	af00      	add	r7, sp, #0
 8006006:	4602      	mov	r2, r0
 8006008:	463b      	mov	r3, r7
 800600a:	6019      	str	r1, [r3, #0]
 800600c:	1dbb      	adds	r3, r7, #6
 800600e:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_pass_key_resp_cp0 *cp0 = (aci_gap_pass_key_resp_cp0*)(cmd_buffer);
 8006010:	f107 0310 	add.w	r3, r7, #16
 8006014:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8006018:	f107 030f 	add.w	r3, r7, #15
 800601c:	2200      	movs	r2, #0
 800601e:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8006020:	2300      	movs	r3, #0
 8006022:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 8006026:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800602a:	1dba      	adds	r2, r7, #6
 800602c:	8812      	ldrh	r2, [r2, #0]
 800602e:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8006030:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006034:	3302      	adds	r3, #2
 8006036:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Pass_Key = Pass_Key;
 800603a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800603e:	463a      	mov	r2, r7
 8006040:	6812      	ldr	r2, [r2, #0]
 8006042:	f8c3 2002 	str.w	r2, [r3, #2]
  index_input += 4;
 8006046:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800604a:	3304      	adds	r3, #4
 800604c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8006050:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006054:	2218      	movs	r2, #24
 8006056:	2100      	movs	r1, #0
 8006058:	4618      	mov	r0, r3
 800605a:	f000 fd74 	bl	8006b46 <Osal_MemSet>
  rq.ogf = 0x3f;
 800605e:	233f      	movs	r3, #63	; 0x3f
 8006060:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x088;
 8006064:	2388      	movs	r3, #136	; 0x88
 8006066:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800606a:	f107 0310 	add.w	r3, r7, #16
 800606e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8006072:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006076:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800607a:	f107 030f 	add.w	r3, r7, #15
 800607e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8006082:	2301      	movs	r3, #1
 8006084:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8006088:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800608c:	2100      	movs	r1, #0
 800608e:	4618      	mov	r0, r3
 8006090:	f000 ff1e 	bl	8006ed0 <hci_send_req>
 8006094:	4603      	mov	r3, r0
 8006096:	2b00      	cmp	r3, #0
 8006098:	da01      	bge.n	800609e <aci_gap_pass_key_resp+0x9e>
    return BLE_STATUS_TIMEOUT;
 800609a:	23ff      	movs	r3, #255	; 0xff
 800609c:	e002      	b.n	80060a4 <aci_gap_pass_key_resp+0xa4>
  return status;
 800609e:	f107 030f 	add.w	r3, r7, #15
 80060a2:	781b      	ldrb	r3, [r3, #0]
}
 80060a4:	4618      	mov	r0, r3
 80060a6:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80060aa:	46bd      	mov	sp, r7
 80060ac:	bd80      	pop	{r7, pc}

080060ae <aci_gap_init>:
                         uint8_t privacy_enabled,
                         uint8_t device_name_char_len,
                         uint16_t* Service_Handle,
                         uint16_t* Dev_Name_Char_Handle,
                         uint16_t* Appearance_Char_Handle )
{
 80060ae:	b590      	push	{r4, r7, lr}
 80060b0:	b0cd      	sub	sp, #308	; 0x134
 80060b2:	af00      	add	r7, sp, #0
 80060b4:	4604      	mov	r4, r0
 80060b6:	4608      	mov	r0, r1
 80060b8:	4611      	mov	r1, r2
 80060ba:	463a      	mov	r2, r7
 80060bc:	6013      	str	r3, [r2, #0]
 80060be:	1dfb      	adds	r3, r7, #7
 80060c0:	4622      	mov	r2, r4
 80060c2:	701a      	strb	r2, [r3, #0]
 80060c4:	1dbb      	adds	r3, r7, #6
 80060c6:	4602      	mov	r2, r0
 80060c8:	701a      	strb	r2, [r3, #0]
 80060ca:	1d7b      	adds	r3, r7, #5
 80060cc:	460a      	mov	r2, r1
 80060ce:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 80060d0:	f107 0310 	add.w	r3, r7, #16
 80060d4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gap_init_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 80060d8:	f107 0308 	add.w	r3, r7, #8
 80060dc:	2207      	movs	r2, #7
 80060de:	2100      	movs	r1, #0
 80060e0:	4618      	mov	r0, r3
 80060e2:	f000 fd30 	bl	8006b46 <Osal_MemSet>
  int index_input = 0;
 80060e6:	2300      	movs	r3, #0
 80060e8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Role = Role;
 80060ec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80060f0:	1dfa      	adds	r2, r7, #7
 80060f2:	7812      	ldrb	r2, [r2, #0]
 80060f4:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80060f6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80060fa:	3301      	adds	r3, #1
 80060fc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->privacy_enabled = privacy_enabled;
 8006100:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006104:	1dba      	adds	r2, r7, #6
 8006106:	7812      	ldrb	r2, [r2, #0]
 8006108:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800610a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800610e:	3301      	adds	r3, #1
 8006110:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->device_name_char_len = device_name_char_len;
 8006114:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006118:	1d7a      	adds	r2, r7, #5
 800611a:	7812      	ldrb	r2, [r2, #0]
 800611c:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800611e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006122:	3301      	adds	r3, #1
 8006124:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8006128:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800612c:	2218      	movs	r2, #24
 800612e:	2100      	movs	r1, #0
 8006130:	4618      	mov	r0, r3
 8006132:	f000 fd08 	bl	8006b46 <Osal_MemSet>
  rq.ogf = 0x3f;
 8006136:	233f      	movs	r3, #63	; 0x3f
 8006138:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08a;
 800613c:	238a      	movs	r3, #138	; 0x8a
 800613e:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8006142:	f107 0310 	add.w	r3, r7, #16
 8006146:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800614a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800614e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 8006152:	f107 0308 	add.w	r3, r7, #8
 8006156:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 800615a:	2307      	movs	r3, #7
 800615c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8006160:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006164:	2100      	movs	r1, #0
 8006166:	4618      	mov	r0, r3
 8006168:	f000 feb2 	bl	8006ed0 <hci_send_req>
 800616c:	4603      	mov	r3, r0
 800616e:	2b00      	cmp	r3, #0
 8006170:	da01      	bge.n	8006176 <aci_gap_init+0xc8>
    return BLE_STATUS_TIMEOUT;
 8006172:	23ff      	movs	r3, #255	; 0xff
 8006174:	e021      	b.n	80061ba <aci_gap_init+0x10c>
  if ( resp.Status )
 8006176:	f107 0308 	add.w	r3, r7, #8
 800617a:	781b      	ldrb	r3, [r3, #0]
 800617c:	2b00      	cmp	r3, #0
 800617e:	d003      	beq.n	8006188 <aci_gap_init+0xda>
    return resp.Status;
 8006180:	f107 0308 	add.w	r3, r7, #8
 8006184:	781b      	ldrb	r3, [r3, #0]
 8006186:	e018      	b.n	80061ba <aci_gap_init+0x10c>
  *Service_Handle = resp.Service_Handle;
 8006188:	f107 0308 	add.w	r3, r7, #8
 800618c:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8006190:	b29a      	uxth	r2, r3
 8006192:	463b      	mov	r3, r7
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = resp.Dev_Name_Char_Handle;
 8006198:	f107 0308 	add.w	r3, r7, #8
 800619c:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 80061a0:	b29a      	uxth	r2, r3
 80061a2:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 80061a6:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = resp.Appearance_Char_Handle;
 80061a8:	f107 0308 	add.w	r3, r7, #8
 80061ac:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 80061b0:	b29a      	uxth	r2, r3
 80061b2:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80061b6:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 80061b8:	2300      	movs	r3, #0
}
 80061ba:	4618      	mov	r0, r3
 80061bc:	f507 779a 	add.w	r7, r7, #308	; 0x134
 80061c0:	46bd      	mov	sp, r7
 80061c2:	bd90      	pop	{r4, r7, pc}

080061c4 <aci_gap_update_adv_data>:
  return status;
}

tBleStatus aci_gap_update_adv_data( uint8_t AdvDataLen,
                                    const uint8_t* AdvData )
{
 80061c4:	b580      	push	{r7, lr}
 80061c6:	b0cc      	sub	sp, #304	; 0x130
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	4602      	mov	r2, r0
 80061cc:	463b      	mov	r3, r7
 80061ce:	6019      	str	r1, [r3, #0]
 80061d0:	1dfb      	adds	r3, r7, #7
 80061d2:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_update_adv_data_cp0 *cp0 = (aci_gap_update_adv_data_cp0*)(cmd_buffer);
 80061d4:	f107 0310 	add.w	r3, r7, #16
 80061d8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80061dc:	f107 030f 	add.w	r3, r7, #15
 80061e0:	2200      	movs	r2, #0
 80061e2:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80061e4:	2300      	movs	r3, #0
 80061e6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->AdvDataLen = AdvDataLen;
 80061ea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80061ee:	1dfa      	adds	r2, r7, #7
 80061f0:	7812      	ldrb	r2, [r2, #0]
 80061f2:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80061f4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80061f8:	3301      	adds	r3, #1
 80061fa:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->AdvData, (const void*)AdvData, AdvDataLen );
 80061fe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006202:	1c58      	adds	r0, r3, #1
 8006204:	1dfb      	adds	r3, r7, #7
 8006206:	781a      	ldrb	r2, [r3, #0]
 8006208:	463b      	mov	r3, r7
 800620a:	6819      	ldr	r1, [r3, #0]
 800620c:	f000 fc8b 	bl	8006b26 <Osal_MemCpy>
  index_input += AdvDataLen;
 8006210:	1dfb      	adds	r3, r7, #7
 8006212:	781b      	ldrb	r3, [r3, #0]
 8006214:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8006218:	4413      	add	r3, r2
 800621a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800621e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006222:	2218      	movs	r2, #24
 8006224:	2100      	movs	r1, #0
 8006226:	4618      	mov	r0, r3
 8006228:	f000 fc8d 	bl	8006b46 <Osal_MemSet>
  rq.ogf = 0x3f;
 800622c:	233f      	movs	r3, #63	; 0x3f
 800622e:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08e;
 8006232:	238e      	movs	r3, #142	; 0x8e
 8006234:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8006238:	f107 0310 	add.w	r3, r7, #16
 800623c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8006240:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006244:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8006248:	f107 030f 	add.w	r3, r7, #15
 800624c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8006250:	2301      	movs	r3, #1
 8006252:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8006256:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800625a:	2100      	movs	r1, #0
 800625c:	4618      	mov	r0, r3
 800625e:	f000 fe37 	bl	8006ed0 <hci_send_req>
 8006262:	4603      	mov	r3, r0
 8006264:	2b00      	cmp	r3, #0
 8006266:	da01      	bge.n	800626c <aci_gap_update_adv_data+0xa8>
    return BLE_STATUS_TIMEOUT;
 8006268:	23ff      	movs	r3, #255	; 0xff
 800626a:	e002      	b.n	8006272 <aci_gap_update_adv_data+0xae>
  return status;
 800626c:	f107 030f 	add.w	r3, r7, #15
 8006270:	781b      	ldrb	r3, [r3, #0]
}
 8006272:	4618      	mov	r0, r3
 8006274:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8006278:	46bd      	mov	sp, r7
 800627a:	bd80      	pop	{r7, pc}

0800627c <aci_gap_configure_whitelist>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_configure_whitelist( void )
{
 800627c:	b580      	push	{r7, lr}
 800627e:	b088      	sub	sp, #32
 8006280:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8006282:	2300      	movs	r3, #0
 8006284:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8006286:	f107 0308 	add.w	r3, r7, #8
 800628a:	2218      	movs	r2, #24
 800628c:	2100      	movs	r1, #0
 800628e:	4618      	mov	r0, r3
 8006290:	f000 fc59 	bl	8006b46 <Osal_MemSet>
  rq.ogf = 0x3f;
 8006294:	233f      	movs	r3, #63	; 0x3f
 8006296:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x092;
 8006298:	2392      	movs	r3, #146	; 0x92
 800629a:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800629c:	1dfb      	adds	r3, r7, #7
 800629e:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 80062a0:	2301      	movs	r3, #1
 80062a2:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 80062a4:	f107 0308 	add.w	r3, r7, #8
 80062a8:	2100      	movs	r1, #0
 80062aa:	4618      	mov	r0, r3
 80062ac:	f000 fe10 	bl	8006ed0 <hci_send_req>
 80062b0:	4603      	mov	r3, r0
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	da01      	bge.n	80062ba <aci_gap_configure_whitelist+0x3e>
    return BLE_STATUS_TIMEOUT;
 80062b6:	23ff      	movs	r3, #255	; 0xff
 80062b8:	e000      	b.n	80062bc <aci_gap_configure_whitelist+0x40>
  return status;
 80062ba:	79fb      	ldrb	r3, [r7, #7]
}
 80062bc:	4618      	mov	r0, r3
 80062be:	3720      	adds	r7, #32
 80062c0:	46bd      	mov	sp, r7
 80062c2:	bd80      	pop	{r7, pc}

080062c4 <aci_gap_numeric_comparison_value_confirm_yesno>:
  return status;
}

tBleStatus aci_gap_numeric_comparison_value_confirm_yesno( uint16_t Connection_Handle,
                                                           uint8_t Confirm_Yes_No )
{
 80062c4:	b580      	push	{r7, lr}
 80062c6:	b0cc      	sub	sp, #304	; 0x130
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	4602      	mov	r2, r0
 80062cc:	1dbb      	adds	r3, r7, #6
 80062ce:	801a      	strh	r2, [r3, #0]
 80062d0:	1d7b      	adds	r3, r7, #5
 80062d2:	460a      	mov	r2, r1
 80062d4:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_numeric_comparison_value_confirm_yesno_cp0 *cp0 = (aci_gap_numeric_comparison_value_confirm_yesno_cp0*)(cmd_buffer);
 80062d6:	f107 0310 	add.w	r3, r7, #16
 80062da:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80062de:	f107 030f 	add.w	r3, r7, #15
 80062e2:	2200      	movs	r2, #0
 80062e4:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80062e6:	2300      	movs	r3, #0
 80062e8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 80062ec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80062f0:	1dba      	adds	r2, r7, #6
 80062f2:	8812      	ldrh	r2, [r2, #0]
 80062f4:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 80062f6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80062fa:	3302      	adds	r3, #2
 80062fc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Confirm_Yes_No = Confirm_Yes_No;
 8006300:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006304:	1d7a      	adds	r2, r7, #5
 8006306:	7812      	ldrb	r2, [r2, #0]
 8006308:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800630a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800630e:	3301      	adds	r3, #1
 8006310:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8006314:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006318:	2218      	movs	r2, #24
 800631a:	2100      	movs	r1, #0
 800631c:	4618      	mov	r0, r3
 800631e:	f000 fc12 	bl	8006b46 <Osal_MemSet>
  rq.ogf = 0x3f;
 8006322:	233f      	movs	r3, #63	; 0x3f
 8006324:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x0a5;
 8006328:	23a5      	movs	r3, #165	; 0xa5
 800632a:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800632e:	f107 0310 	add.w	r3, r7, #16
 8006332:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8006336:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800633a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800633e:	f107 030f 	add.w	r3, r7, #15
 8006342:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8006346:	2301      	movs	r3, #1
 8006348:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800634c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006350:	2100      	movs	r1, #0
 8006352:	4618      	mov	r0, r3
 8006354:	f000 fdbc 	bl	8006ed0 <hci_send_req>
 8006358:	4603      	mov	r3, r0
 800635a:	2b00      	cmp	r3, #0
 800635c:	da01      	bge.n	8006362 <aci_gap_numeric_comparison_value_confirm_yesno+0x9e>
    return BLE_STATUS_TIMEOUT;
 800635e:	23ff      	movs	r3, #255	; 0xff
 8006360:	e002      	b.n	8006368 <aci_gap_numeric_comparison_value_confirm_yesno+0xa4>
  return status;
 8006362:	f107 030f 	add.w	r3, r7, #15
 8006366:	781b      	ldrb	r3, [r3, #0]
}
 8006368:	4618      	mov	r0, r3
 800636a:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800636e:	46bd      	mov	sp, r7
 8006370:	bd80      	pop	{r7, pc}

08006372 <aci_gatt_init>:
 */

#include "ble_gatt_aci.h"

tBleStatus aci_gatt_init( void )
{
 8006372:	b580      	push	{r7, lr}
 8006374:	b088      	sub	sp, #32
 8006376:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8006378:	2300      	movs	r3, #0
 800637a:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800637c:	f107 0308 	add.w	r3, r7, #8
 8006380:	2218      	movs	r2, #24
 8006382:	2100      	movs	r1, #0
 8006384:	4618      	mov	r0, r3
 8006386:	f000 fbde 	bl	8006b46 <Osal_MemSet>
  rq.ogf = 0x3f;
 800638a:	233f      	movs	r3, #63	; 0x3f
 800638c:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x101;
 800638e:	f240 1301 	movw	r3, #257	; 0x101
 8006392:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8006394:	1dfb      	adds	r3, r7, #7
 8006396:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8006398:	2301      	movs	r3, #1
 800639a:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800639c:	f107 0308 	add.w	r3, r7, #8
 80063a0:	2100      	movs	r1, #0
 80063a2:	4618      	mov	r0, r3
 80063a4:	f000 fd94 	bl	8006ed0 <hci_send_req>
 80063a8:	4603      	mov	r3, r0
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	da01      	bge.n	80063b2 <aci_gatt_init+0x40>
    return BLE_STATUS_TIMEOUT;
 80063ae:	23ff      	movs	r3, #255	; 0xff
 80063b0:	e000      	b.n	80063b4 <aci_gatt_init+0x42>
  return status;
 80063b2:	79fb      	ldrb	r3, [r7, #7]
}
 80063b4:	4618      	mov	r0, r3
 80063b6:	3720      	adds	r7, #32
 80063b8:	46bd      	mov	sp, r7
 80063ba:	bd80      	pop	{r7, pc}

080063bc <aci_gatt_add_service>:
tBleStatus aci_gatt_add_service( uint8_t Service_UUID_Type,
                                 const Service_UUID_t* Service_UUID,
                                 uint8_t Service_Type,
                                 uint8_t Max_Attribute_Records,
                                 uint16_t* Service_Handle )
{
 80063bc:	b590      	push	{r4, r7, lr}
 80063be:	b0cf      	sub	sp, #316	; 0x13c
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	4604      	mov	r4, r0
 80063c4:	4638      	mov	r0, r7
 80063c6:	6001      	str	r1, [r0, #0]
 80063c8:	4610      	mov	r0, r2
 80063ca:	4619      	mov	r1, r3
 80063cc:	1dfb      	adds	r3, r7, #7
 80063ce:	4622      	mov	r2, r4
 80063d0:	701a      	strb	r2, [r3, #0]
 80063d2:	1dbb      	adds	r3, r7, #6
 80063d4:	4602      	mov	r2, r0
 80063d6:	701a      	strb	r2, [r3, #0]
 80063d8:	1d7b      	adds	r3, r7, #5
 80063da:	460a      	mov	r2, r1
 80063dc:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_service_cp0 *cp0 = (aci_gatt_add_service_cp0*)(cmd_buffer);
 80063de:	f107 0310 	add.w	r3, r7, #16
 80063e2:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 80063e6:	1dfb      	adds	r3, r7, #7
 80063e8:	781b      	ldrb	r3, [r3, #0]
 80063ea:	2b01      	cmp	r3, #1
 80063ec:	d007      	beq.n	80063fe <aci_gatt_add_service+0x42>
 80063ee:	1dfb      	adds	r3, r7, #7
 80063f0:	781b      	ldrb	r3, [r3, #0]
 80063f2:	2b02      	cmp	r3, #2
 80063f4:	d101      	bne.n	80063fa <aci_gatt_add_service+0x3e>
 80063f6:	2311      	movs	r3, #17
 80063f8:	e002      	b.n	8006400 <aci_gatt_add_service+0x44>
 80063fa:	2301      	movs	r3, #1
 80063fc:	e000      	b.n	8006400 <aci_gatt_add_service+0x44>
 80063fe:	2303      	movs	r3, #3
 8006400:	f107 0210 	add.w	r2, r7, #16
 8006404:	4413      	add	r3, r2
 8006406:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gatt_add_service_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 800640a:	f107 030c 	add.w	r3, r7, #12
 800640e:	2203      	movs	r2, #3
 8006410:	2100      	movs	r1, #0
 8006412:	4618      	mov	r0, r3
 8006414:	f000 fb97 	bl	8006b46 <Osal_MemSet>
  int index_input = 0;
 8006418:	2300      	movs	r3, #0
 800641a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_UUID_Type = Service_UUID_Type;
 800641e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8006422:	1dfa      	adds	r2, r7, #7
 8006424:	7812      	ldrb	r2, [r2, #0]
 8006426:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8006428:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800642c:	3301      	adds	r3, #1
 800642e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Service_UUID_Type )
 8006432:	1dfb      	adds	r3, r7, #7
 8006434:	781b      	ldrb	r3, [r3, #0]
 8006436:	2b01      	cmp	r3, #1
 8006438:	d002      	beq.n	8006440 <aci_gatt_add_service+0x84>
 800643a:	2b02      	cmp	r3, #2
 800643c:	d004      	beq.n	8006448 <aci_gatt_add_service+0x8c>
 800643e:	e007      	b.n	8006450 <aci_gatt_add_service+0x94>
    {
      case 1: size = 2; break;
 8006440:	2302      	movs	r3, #2
 8006442:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 8006446:	e005      	b.n	8006454 <aci_gatt_add_service+0x98>
      case 2: size = 16; break;
 8006448:	2310      	movs	r3, #16
 800644a:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 800644e:	e001      	b.n	8006454 <aci_gatt_add_service+0x98>
      default: return BLE_STATUS_ERROR;
 8006450:	2347      	movs	r3, #71	; 0x47
 8006452:	e05d      	b.n	8006510 <aci_gatt_add_service+0x154>
    }
    Osal_MemCpy( (void*)&cp0->Service_UUID, (const void*)Service_UUID, size );
 8006454:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8006458:	1c58      	adds	r0, r3, #1
 800645a:	f897 2137 	ldrb.w	r2, [r7, #311]	; 0x137
 800645e:	463b      	mov	r3, r7
 8006460:	6819      	ldr	r1, [r3, #0]
 8006462:	f000 fb60 	bl	8006b26 <Osal_MemCpy>
    index_input += size;
 8006466:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 800646a:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800646e:	4413      	add	r3, r2
 8006470:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Type = Service_Type;
 8006474:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006478:	1dba      	adds	r2, r7, #6
 800647a:	7812      	ldrb	r2, [r2, #0]
 800647c:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 800647e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006482:	3301      	adds	r3, #1
 8006484:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Max_Attribute_Records = Max_Attribute_Records;
 8006488:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800648c:	1d7a      	adds	r2, r7, #5
 800648e:	7812      	ldrb	r2, [r2, #0]
 8006490:	705a      	strb	r2, [r3, #1]
    }
    index_input += 1;
 8006492:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006496:	3301      	adds	r3, #1
 8006498:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800649c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80064a0:	2218      	movs	r2, #24
 80064a2:	2100      	movs	r1, #0
 80064a4:	4618      	mov	r0, r3
 80064a6:	f000 fb4e 	bl	8006b46 <Osal_MemSet>
  rq.ogf = 0x3f;
 80064aa:	233f      	movs	r3, #63	; 0x3f
 80064ac:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x102;
 80064b0:	f44f 7381 	mov.w	r3, #258	; 0x102
 80064b4:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80064b8:	f107 0310 	add.w	r3, r7, #16
 80064bc:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80064c0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80064c4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 80064c8:	f107 030c 	add.w	r3, r7, #12
 80064cc:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 80064d0:	2303      	movs	r3, #3
 80064d2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80064d6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80064da:	2100      	movs	r1, #0
 80064dc:	4618      	mov	r0, r3
 80064de:	f000 fcf7 	bl	8006ed0 <hci_send_req>
 80064e2:	4603      	mov	r3, r0
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	da01      	bge.n	80064ec <aci_gatt_add_service+0x130>
    return BLE_STATUS_TIMEOUT;
 80064e8:	23ff      	movs	r3, #255	; 0xff
 80064ea:	e011      	b.n	8006510 <aci_gatt_add_service+0x154>
  if ( resp.Status )
 80064ec:	f107 030c 	add.w	r3, r7, #12
 80064f0:	781b      	ldrb	r3, [r3, #0]
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d003      	beq.n	80064fe <aci_gatt_add_service+0x142>
    return resp.Status;
 80064f6:	f107 030c 	add.w	r3, r7, #12
 80064fa:	781b      	ldrb	r3, [r3, #0]
 80064fc:	e008      	b.n	8006510 <aci_gatt_add_service+0x154>
  *Service_Handle = resp.Service_Handle;
 80064fe:	f107 030c 	add.w	r3, r7, #12
 8006502:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8006506:	b29a      	uxth	r2, r3
 8006508:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800650c:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800650e:	2300      	movs	r3, #0
}
 8006510:	4618      	mov	r0, r3
 8006512:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 8006516:	46bd      	mov	sp, r7
 8006518:	bd90      	pop	{r4, r7, pc}

0800651a <aci_gatt_add_char>:
                              uint8_t Security_Permissions,
                              uint8_t GATT_Evt_Mask,
                              uint8_t Enc_Key_Size,
                              uint8_t Is_Variable,
                              uint16_t* Char_Handle )
{
 800651a:	b590      	push	{r4, r7, lr}
 800651c:	b0d1      	sub	sp, #324	; 0x144
 800651e:	af00      	add	r7, sp, #0
 8006520:	4604      	mov	r4, r0
 8006522:	4608      	mov	r0, r1
 8006524:	f107 0108 	add.w	r1, r7, #8
 8006528:	600a      	str	r2, [r1, #0]
 800652a:	4619      	mov	r1, r3
 800652c:	f107 030e 	add.w	r3, r7, #14
 8006530:	4622      	mov	r2, r4
 8006532:	801a      	strh	r2, [r3, #0]
 8006534:	f107 030d 	add.w	r3, r7, #13
 8006538:	4602      	mov	r2, r0
 800653a:	701a      	strb	r2, [r3, #0]
 800653c:	1dbb      	adds	r3, r7, #6
 800653e:	460a      	mov	r2, r1
 8006540:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_char_cp0 *cp0 = (aci_gatt_add_char_cp0*)(cmd_buffer);
 8006542:	f107 0318 	add.w	r3, r7, #24
 8006546:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 800654a:	f107 030d 	add.w	r3, r7, #13
 800654e:	781b      	ldrb	r3, [r3, #0]
 8006550:	2b01      	cmp	r3, #1
 8006552:	d008      	beq.n	8006566 <aci_gatt_add_char+0x4c>
 8006554:	f107 030d 	add.w	r3, r7, #13
 8006558:	781b      	ldrb	r3, [r3, #0]
 800655a:	2b02      	cmp	r3, #2
 800655c:	d101      	bne.n	8006562 <aci_gatt_add_char+0x48>
 800655e:	2313      	movs	r3, #19
 8006560:	e002      	b.n	8006568 <aci_gatt_add_char+0x4e>
 8006562:	2303      	movs	r3, #3
 8006564:	e000      	b.n	8006568 <aci_gatt_add_char+0x4e>
 8006566:	2305      	movs	r3, #5
 8006568:	f107 0218 	add.w	r2, r7, #24
 800656c:	4413      	add	r3, r2
 800656e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gatt_add_char_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8006572:	f107 0314 	add.w	r3, r7, #20
 8006576:	2203      	movs	r2, #3
 8006578:	2100      	movs	r1, #0
 800657a:	4618      	mov	r0, r3
 800657c:	f000 fae3 	bl	8006b46 <Osal_MemSet>
  int index_input = 0;
 8006580:	2300      	movs	r3, #0
 8006582:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Service_Handle = Service_Handle;
 8006586:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800658a:	f107 020e 	add.w	r2, r7, #14
 800658e:	8812      	ldrh	r2, [r2, #0]
 8006590:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8006592:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8006596:	3302      	adds	r3, #2
 8006598:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Char_UUID_Type = Char_UUID_Type;
 800659c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80065a0:	f107 020d 	add.w	r2, r7, #13
 80065a4:	7812      	ldrb	r2, [r2, #0]
 80065a6:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 80065a8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80065ac:	3301      	adds	r3, #1
 80065ae:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Char_UUID_Type )
 80065b2:	f107 030d 	add.w	r3, r7, #13
 80065b6:	781b      	ldrb	r3, [r3, #0]
 80065b8:	2b01      	cmp	r3, #1
 80065ba:	d002      	beq.n	80065c2 <aci_gatt_add_char+0xa8>
 80065bc:	2b02      	cmp	r3, #2
 80065be:	d004      	beq.n	80065ca <aci_gatt_add_char+0xb0>
 80065c0:	e007      	b.n	80065d2 <aci_gatt_add_char+0xb8>
    {
      case 1: size = 2; break;
 80065c2:	2302      	movs	r3, #2
 80065c4:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 80065c8:	e005      	b.n	80065d6 <aci_gatt_add_char+0xbc>
      case 2: size = 16; break;
 80065ca:	2310      	movs	r3, #16
 80065cc:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 80065d0:	e001      	b.n	80065d6 <aci_gatt_add_char+0xbc>
      default: return BLE_STATUS_ERROR;
 80065d2:	2347      	movs	r3, #71	; 0x47
 80065d4:	e086      	b.n	80066e4 <aci_gatt_add_char+0x1ca>
    }
    Osal_MemCpy( (void*)&cp0->Char_UUID, (const void*)Char_UUID, size );
 80065d6:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80065da:	1cd8      	adds	r0, r3, #3
 80065dc:	f897 213f 	ldrb.w	r2, [r7, #319]	; 0x13f
 80065e0:	f107 0308 	add.w	r3, r7, #8
 80065e4:	6819      	ldr	r1, [r3, #0]
 80065e6:	f000 fa9e 	bl	8006b26 <Osal_MemCpy>
    index_input += size;
 80065ea:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 80065ee:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 80065f2:	4413      	add	r3, r2
 80065f4:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Char_Value_Length = Char_Value_Length;
 80065f8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80065fc:	1dba      	adds	r2, r7, #6
 80065fe:	8812      	ldrh	r2, [r2, #0]
 8006600:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 8006602:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8006606:	3302      	adds	r3, #2
 8006608:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Char_Properties = Char_Properties;
 800660c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006610:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 8006614:	709a      	strb	r2, [r3, #2]
    }
    index_input += 1;
 8006616:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800661a:	3301      	adds	r3, #1
 800661c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Security_Permissions = Security_Permissions;
 8006620:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006624:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 8006628:	70da      	strb	r2, [r3, #3]
    }
    index_input += 1;
 800662a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800662e:	3301      	adds	r3, #1
 8006630:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->GATT_Evt_Mask = GATT_Evt_Mask;
 8006634:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006638:	f897 2158 	ldrb.w	r2, [r7, #344]	; 0x158
 800663c:	711a      	strb	r2, [r3, #4]
    }
    index_input += 1;
 800663e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8006642:	3301      	adds	r3, #1
 8006644:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Enc_Key_Size = Enc_Key_Size;
 8006648:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800664c:	f897 215c 	ldrb.w	r2, [r7, #348]	; 0x15c
 8006650:	715a      	strb	r2, [r3, #5]
    }
    index_input += 1;
 8006652:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8006656:	3301      	adds	r3, #1
 8006658:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Is_Variable = Is_Variable;
 800665c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006660:	f897 2160 	ldrb.w	r2, [r7, #352]	; 0x160
 8006664:	719a      	strb	r2, [r3, #6]
    }
    index_input += 1;
 8006666:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800666a:	3301      	adds	r3, #1
 800666c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8006670:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8006674:	2218      	movs	r2, #24
 8006676:	2100      	movs	r1, #0
 8006678:	4618      	mov	r0, r3
 800667a:	f000 fa64 	bl	8006b46 <Osal_MemSet>
  rq.ogf = 0x3f;
 800667e:	233f      	movs	r3, #63	; 0x3f
 8006680:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x104;
 8006684:	f44f 7382 	mov.w	r3, #260	; 0x104
 8006688:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.cparam = cmd_buffer;
 800668c:	f107 0318 	add.w	r3, r7, #24
 8006690:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 8006694:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8006698:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &resp;
 800669c:	f107 0314 	add.w	r3, r7, #20
 80066a0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = sizeof(resp);
 80066a4:	2303      	movs	r3, #3
 80066a6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 80066aa:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80066ae:	2100      	movs	r1, #0
 80066b0:	4618      	mov	r0, r3
 80066b2:	f000 fc0d 	bl	8006ed0 <hci_send_req>
 80066b6:	4603      	mov	r3, r0
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	da01      	bge.n	80066c0 <aci_gatt_add_char+0x1a6>
    return BLE_STATUS_TIMEOUT;
 80066bc:	23ff      	movs	r3, #255	; 0xff
 80066be:	e011      	b.n	80066e4 <aci_gatt_add_char+0x1ca>
  if ( resp.Status )
 80066c0:	f107 0314 	add.w	r3, r7, #20
 80066c4:	781b      	ldrb	r3, [r3, #0]
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d003      	beq.n	80066d2 <aci_gatt_add_char+0x1b8>
    return resp.Status;
 80066ca:	f107 0314 	add.w	r3, r7, #20
 80066ce:	781b      	ldrb	r3, [r3, #0]
 80066d0:	e008      	b.n	80066e4 <aci_gatt_add_char+0x1ca>
  *Char_Handle = resp.Char_Handle;
 80066d2:	f107 0314 	add.w	r3, r7, #20
 80066d6:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80066da:	b29a      	uxth	r2, r3
 80066dc:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 80066e0:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 80066e2:	2300      	movs	r3, #0
}
 80066e4:	4618      	mov	r0, r3
 80066e6:	f507 77a2 	add.w	r7, r7, #324	; 0x144
 80066ea:	46bd      	mov	sp, r7
 80066ec:	bd90      	pop	{r4, r7, pc}

080066ee <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value( uint16_t Service_Handle,
                                       uint16_t Char_Handle,
                                       uint8_t Val_Offset,
                                       uint8_t Char_Value_Length,
                                       const uint8_t* Char_Value )
{
 80066ee:	b5b0      	push	{r4, r5, r7, lr}
 80066f0:	b0cc      	sub	sp, #304	; 0x130
 80066f2:	af00      	add	r7, sp, #0
 80066f4:	4605      	mov	r5, r0
 80066f6:	460c      	mov	r4, r1
 80066f8:	4610      	mov	r0, r2
 80066fa:	4619      	mov	r1, r3
 80066fc:	1dbb      	adds	r3, r7, #6
 80066fe:	462a      	mov	r2, r5
 8006700:	801a      	strh	r2, [r3, #0]
 8006702:	1d3b      	adds	r3, r7, #4
 8006704:	4622      	mov	r2, r4
 8006706:	801a      	strh	r2, [r3, #0]
 8006708:	1cfb      	adds	r3, r7, #3
 800670a:	4602      	mov	r2, r0
 800670c:	701a      	strb	r2, [r3, #0]
 800670e:	1cbb      	adds	r3, r7, #2
 8006710:	460a      	mov	r2, r1
 8006712:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
 8006714:	f107 0310 	add.w	r3, r7, #16
 8006718:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800671c:	f107 030f 	add.w	r3, r7, #15
 8006720:	2200      	movs	r2, #0
 8006722:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8006724:	2300      	movs	r3, #0
 8006726:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_Handle = Service_Handle;
 800672a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800672e:	1dba      	adds	r2, r7, #6
 8006730:	8812      	ldrh	r2, [r2, #0]
 8006732:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8006734:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006738:	3302      	adds	r3, #2
 800673a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Handle = Char_Handle;
 800673e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006742:	1d3a      	adds	r2, r7, #4
 8006744:	8812      	ldrh	r2, [r2, #0]
 8006746:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 8006748:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800674c:	3302      	adds	r3, #2
 800674e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Val_Offset = Val_Offset;
 8006752:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006756:	1cfa      	adds	r2, r7, #3
 8006758:	7812      	ldrb	r2, [r2, #0]
 800675a:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 800675c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006760:	3301      	adds	r3, #1
 8006762:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Value_Length = Char_Value_Length;
 8006766:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800676a:	1cba      	adds	r2, r7, #2
 800676c:	7812      	ldrb	r2, [r2, #0]
 800676e:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8006770:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006774:	3301      	adds	r3, #1
 8006776:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Char_Value, (const void*)Char_Value, Char_Value_Length );
 800677a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800677e:	1d98      	adds	r0, r3, #6
 8006780:	1cbb      	adds	r3, r7, #2
 8006782:	781b      	ldrb	r3, [r3, #0]
 8006784:	461a      	mov	r2, r3
 8006786:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800678a:	f000 f9cc 	bl	8006b26 <Osal_MemCpy>
  index_input += Char_Value_Length;
 800678e:	1cbb      	adds	r3, r7, #2
 8006790:	781b      	ldrb	r3, [r3, #0]
 8006792:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8006796:	4413      	add	r3, r2
 8006798:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800679c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80067a0:	2218      	movs	r2, #24
 80067a2:	2100      	movs	r1, #0
 80067a4:	4618      	mov	r0, r3
 80067a6:	f000 f9ce 	bl	8006b46 <Osal_MemSet>
  rq.ogf = 0x3f;
 80067aa:	233f      	movs	r3, #63	; 0x3f
 80067ac:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x106;
 80067b0:	f44f 7383 	mov.w	r3, #262	; 0x106
 80067b4:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80067b8:	f107 0310 	add.w	r3, r7, #16
 80067bc:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80067c0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80067c4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80067c8:	f107 030f 	add.w	r3, r7, #15
 80067cc:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80067d0:	2301      	movs	r3, #1
 80067d2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80067d6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80067da:	2100      	movs	r1, #0
 80067dc:	4618      	mov	r0, r3
 80067de:	f000 fb77 	bl	8006ed0 <hci_send_req>
 80067e2:	4603      	mov	r3, r0
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	da01      	bge.n	80067ec <aci_gatt_update_char_value+0xfe>
    return BLE_STATUS_TIMEOUT;
 80067e8:	23ff      	movs	r3, #255	; 0xff
 80067ea:	e002      	b.n	80067f2 <aci_gatt_update_char_value+0x104>
  return status;
 80067ec:	f107 030f 	add.w	r3, r7, #15
 80067f0:	781b      	ldrb	r3, [r3, #0]
}
 80067f2:	4618      	mov	r0, r3
 80067f4:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80067f8:	46bd      	mov	sp, r7
 80067fa:	bdb0      	pop	{r4, r5, r7, pc}

080067fc <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data( uint8_t Offset,
                                      uint8_t Length,
                                      const uint8_t* Value )
{
 80067fc:	b580      	push	{r7, lr}
 80067fe:	b0cc      	sub	sp, #304	; 0x130
 8006800:	af00      	add	r7, sp, #0
 8006802:	463b      	mov	r3, r7
 8006804:	601a      	str	r2, [r3, #0]
 8006806:	1dfb      	adds	r3, r7, #7
 8006808:	4602      	mov	r2, r0
 800680a:	701a      	strb	r2, [r3, #0]
 800680c:	1dbb      	adds	r3, r7, #6
 800680e:	460a      	mov	r2, r1
 8006810:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
 8006812:	f107 0310 	add.w	r3, r7, #16
 8006816:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800681a:	f107 030f 	add.w	r3, r7, #15
 800681e:	2200      	movs	r2, #0
 8006820:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8006822:	2300      	movs	r3, #0
 8006824:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Offset = Offset;
 8006828:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800682c:	1dfa      	adds	r2, r7, #7
 800682e:	7812      	ldrb	r2, [r2, #0]
 8006830:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8006832:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006836:	3301      	adds	r3, #1
 8006838:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Length = Length;
 800683c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006840:	1dba      	adds	r2, r7, #6
 8006842:	7812      	ldrb	r2, [r2, #0]
 8006844:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8006846:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800684a:	3301      	adds	r3, #1
 800684c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Value, (const void*)Value, Length );
 8006850:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006854:	1c98      	adds	r0, r3, #2
 8006856:	1dbb      	adds	r3, r7, #6
 8006858:	781a      	ldrb	r2, [r3, #0]
 800685a:	463b      	mov	r3, r7
 800685c:	6819      	ldr	r1, [r3, #0]
 800685e:	f000 f962 	bl	8006b26 <Osal_MemCpy>
  index_input += Length;
 8006862:	1dbb      	adds	r3, r7, #6
 8006864:	781b      	ldrb	r3, [r3, #0]
 8006866:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800686a:	4413      	add	r3, r2
 800686c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8006870:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006874:	2218      	movs	r2, #24
 8006876:	2100      	movs	r1, #0
 8006878:	4618      	mov	r0, r3
 800687a:	f000 f964 	bl	8006b46 <Osal_MemSet>
  rq.ogf = 0x3f;
 800687e:	233f      	movs	r3, #63	; 0x3f
 8006880:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00c;
 8006884:	230c      	movs	r3, #12
 8006886:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800688a:	f107 0310 	add.w	r3, r7, #16
 800688e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8006892:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006896:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800689a:	f107 030f 	add.w	r3, r7, #15
 800689e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80068a2:	2301      	movs	r3, #1
 80068a4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80068a8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80068ac:	2100      	movs	r1, #0
 80068ae:	4618      	mov	r0, r3
 80068b0:	f000 fb0e 	bl	8006ed0 <hci_send_req>
 80068b4:	4603      	mov	r3, r0
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	da01      	bge.n	80068be <aci_hal_write_config_data+0xc2>
    return BLE_STATUS_TIMEOUT;
 80068ba:	23ff      	movs	r3, #255	; 0xff
 80068bc:	e002      	b.n	80068c4 <aci_hal_write_config_data+0xc8>
  return status;
 80068be:	f107 030f 	add.w	r3, r7, #15
 80068c2:	781b      	ldrb	r3, [r3, #0]
}
 80068c4:	4618      	mov	r0, r3
 80068c6:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80068ca:	46bd      	mov	sp, r7
 80068cc:	bd80      	pop	{r7, pc}

080068ce <aci_hal_set_tx_power_level>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_tx_power_level( uint8_t En_High_Power,
                                       uint8_t PA_Level )
{
 80068ce:	b580      	push	{r7, lr}
 80068d0:	b0cc      	sub	sp, #304	; 0x130
 80068d2:	af00      	add	r7, sp, #0
 80068d4:	4602      	mov	r2, r0
 80068d6:	1dfb      	adds	r3, r7, #7
 80068d8:	701a      	strb	r2, [r3, #0]
 80068da:	1dbb      	adds	r3, r7, #6
 80068dc:	460a      	mov	r2, r1
 80068de:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
 80068e0:	f107 0310 	add.w	r3, r7, #16
 80068e4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80068e8:	f107 030f 	add.w	r3, r7, #15
 80068ec:	2200      	movs	r2, #0
 80068ee:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80068f0:	2300      	movs	r3, #0
 80068f2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->En_High_Power = En_High_Power;
 80068f6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80068fa:	1dfa      	adds	r2, r7, #7
 80068fc:	7812      	ldrb	r2, [r2, #0]
 80068fe:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8006900:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006904:	3301      	adds	r3, #1
 8006906:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->PA_Level = PA_Level;
 800690a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800690e:	1dba      	adds	r2, r7, #6
 8006910:	7812      	ldrb	r2, [r2, #0]
 8006912:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8006914:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006918:	3301      	adds	r3, #1
 800691a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800691e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006922:	2218      	movs	r2, #24
 8006924:	2100      	movs	r1, #0
 8006926:	4618      	mov	r0, r3
 8006928:	f000 f90d 	bl	8006b46 <Osal_MemSet>
  rq.ogf = 0x3f;
 800692c:	233f      	movs	r3, #63	; 0x3f
 800692e:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00f;
 8006932:	230f      	movs	r3, #15
 8006934:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8006938:	f107 0310 	add.w	r3, r7, #16
 800693c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8006940:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006944:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8006948:	f107 030f 	add.w	r3, r7, #15
 800694c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8006950:	2301      	movs	r3, #1
 8006952:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8006956:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800695a:	2100      	movs	r1, #0
 800695c:	4618      	mov	r0, r3
 800695e:	f000 fab7 	bl	8006ed0 <hci_send_req>
 8006962:	4603      	mov	r3, r0
 8006964:	2b00      	cmp	r3, #0
 8006966:	da01      	bge.n	800696c <aci_hal_set_tx_power_level+0x9e>
    return BLE_STATUS_TIMEOUT;
 8006968:	23ff      	movs	r3, #255	; 0xff
 800696a:	e002      	b.n	8006972 <aci_hal_set_tx_power_level+0xa4>
  return status;
 800696c:	f107 030f 	add.w	r3, r7, #15
 8006970:	781b      	ldrb	r3, [r3, #0]
}
 8006972:	4618      	mov	r0, r3
 8006974:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8006978:	46bd      	mov	sp, r7
 800697a:	bd80      	pop	{r7, pc}

0800697c <aci_hal_set_radio_activity_mask>:
  Osal_MemCpy( (void*)Link_Connection_Handle, (const void*)resp.Link_Connection_Handle, 16 );
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_radio_activity_mask( uint16_t Radio_Activity_Mask )
{
 800697c:	b580      	push	{r7, lr}
 800697e:	b0cc      	sub	sp, #304	; 0x130
 8006980:	af00      	add	r7, sp, #0
 8006982:	4602      	mov	r2, r0
 8006984:	1dbb      	adds	r3, r7, #6
 8006986:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_radio_activity_mask_cp0 *cp0 = (aci_hal_set_radio_activity_mask_cp0*)(cmd_buffer);
 8006988:	f107 0310 	add.w	r3, r7, #16
 800698c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8006990:	f107 030f 	add.w	r3, r7, #15
 8006994:	2200      	movs	r2, #0
 8006996:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8006998:	2300      	movs	r3, #0
 800699a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Radio_Activity_Mask = Radio_Activity_Mask;
 800699e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80069a2:	1dba      	adds	r2, r7, #6
 80069a4:	8812      	ldrh	r2, [r2, #0]
 80069a6:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 80069a8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80069ac:	3302      	adds	r3, #2
 80069ae:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80069b2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80069b6:	2218      	movs	r2, #24
 80069b8:	2100      	movs	r1, #0
 80069ba:	4618      	mov	r0, r3
 80069bc:	f000 f8c3 	bl	8006b46 <Osal_MemSet>
  rq.ogf = 0x3f;
 80069c0:	233f      	movs	r3, #63	; 0x3f
 80069c2:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x018;
 80069c6:	2318      	movs	r3, #24
 80069c8:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80069cc:	f107 0310 	add.w	r3, r7, #16
 80069d0:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80069d4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80069d8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80069dc:	f107 030f 	add.w	r3, r7, #15
 80069e0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80069e4:	2301      	movs	r3, #1
 80069e6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80069ea:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80069ee:	2100      	movs	r1, #0
 80069f0:	4618      	mov	r0, r3
 80069f2:	f000 fa6d 	bl	8006ed0 <hci_send_req>
 80069f6:	4603      	mov	r3, r0
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	da01      	bge.n	8006a00 <aci_hal_set_radio_activity_mask+0x84>
    return BLE_STATUS_TIMEOUT;
 80069fc:	23ff      	movs	r3, #255	; 0xff
 80069fe:	e002      	b.n	8006a06 <aci_hal_set_radio_activity_mask+0x8a>
  return status;
 8006a00:	f107 030f 	add.w	r3, r7, #15
 8006a04:	781b      	ldrb	r3, [r3, #0]
}
 8006a06:	4618      	mov	r0, r3
 8006a08:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8006a0c:	46bd      	mov	sp, r7
 8006a0e:	bd80      	pop	{r7, pc}

08006a10 <hci_reset>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus hci_reset( void )
{
 8006a10:	b580      	push	{r7, lr}
 8006a12:	b088      	sub	sp, #32
 8006a14:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8006a16:	2300      	movs	r3, #0
 8006a18:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8006a1a:	f107 0308 	add.w	r3, r7, #8
 8006a1e:	2218      	movs	r2, #24
 8006a20:	2100      	movs	r1, #0
 8006a22:	4618      	mov	r0, r3
 8006a24:	f000 f88f 	bl	8006b46 <Osal_MemSet>
  rq.ogf = 0x03;
 8006a28:	2303      	movs	r3, #3
 8006a2a:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x003;
 8006a2c:	2303      	movs	r3, #3
 8006a2e:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8006a30:	1dfb      	adds	r3, r7, #7
 8006a32:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8006a34:	2301      	movs	r3, #1
 8006a36:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8006a38:	f107 0308 	add.w	r3, r7, #8
 8006a3c:	2100      	movs	r1, #0
 8006a3e:	4618      	mov	r0, r3
 8006a40:	f000 fa46 	bl	8006ed0 <hci_send_req>
 8006a44:	4603      	mov	r3, r0
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	da01      	bge.n	8006a4e <hci_reset+0x3e>
    return BLE_STATUS_TIMEOUT;
 8006a4a:	23ff      	movs	r3, #255	; 0xff
 8006a4c:	e000      	b.n	8006a50 <hci_reset+0x40>
  return status;
 8006a4e:	79fb      	ldrb	r3, [r7, #7]
}
 8006a50:	4618      	mov	r0, r3
 8006a52:	3720      	adds	r7, #32
 8006a54:	46bd      	mov	sp, r7
 8006a56:	bd80      	pop	{r7, pc}

08006a58 <hci_le_set_default_phy>:
}

tBleStatus hci_le_set_default_phy( uint8_t ALL_PHYS,
                                   uint8_t TX_PHYS,
                                   uint8_t RX_PHYS )
{
 8006a58:	b590      	push	{r4, r7, lr}
 8006a5a:	b0cd      	sub	sp, #308	; 0x134
 8006a5c:	af00      	add	r7, sp, #0
 8006a5e:	4604      	mov	r4, r0
 8006a60:	4608      	mov	r0, r1
 8006a62:	4611      	mov	r1, r2
 8006a64:	1dfb      	adds	r3, r7, #7
 8006a66:	4622      	mov	r2, r4
 8006a68:	701a      	strb	r2, [r3, #0]
 8006a6a:	1dbb      	adds	r3, r7, #6
 8006a6c:	4602      	mov	r2, r0
 8006a6e:	701a      	strb	r2, [r3, #0]
 8006a70:	1d7b      	adds	r3, r7, #5
 8006a72:	460a      	mov	r2, r1
 8006a74:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_set_default_phy_cp0 *cp0 = (hci_le_set_default_phy_cp0*)(cmd_buffer);
 8006a76:	f107 0310 	add.w	r3, r7, #16
 8006a7a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8006a7e:	f107 030f 	add.w	r3, r7, #15
 8006a82:	2200      	movs	r2, #0
 8006a84:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8006a86:	2300      	movs	r3, #0
 8006a88:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->ALL_PHYS = ALL_PHYS;
 8006a8c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006a90:	1dfa      	adds	r2, r7, #7
 8006a92:	7812      	ldrb	r2, [r2, #0]
 8006a94:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8006a96:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006a9a:	3301      	adds	r3, #1
 8006a9c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->TX_PHYS = TX_PHYS;
 8006aa0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006aa4:	1dba      	adds	r2, r7, #6
 8006aa6:	7812      	ldrb	r2, [r2, #0]
 8006aa8:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8006aaa:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006aae:	3301      	adds	r3, #1
 8006ab0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->RX_PHYS = RX_PHYS;
 8006ab4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006ab8:	1d7a      	adds	r2, r7, #5
 8006aba:	7812      	ldrb	r2, [r2, #0]
 8006abc:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8006abe:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006ac2:	3301      	adds	r3, #1
 8006ac4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8006ac8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006acc:	2218      	movs	r2, #24
 8006ace:	2100      	movs	r1, #0
 8006ad0:	4618      	mov	r0, r3
 8006ad2:	f000 f838 	bl	8006b46 <Osal_MemSet>
  rq.ogf = 0x08;
 8006ad6:	2308      	movs	r3, #8
 8006ad8:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x031;
 8006adc:	2331      	movs	r3, #49	; 0x31
 8006ade:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8006ae2:	f107 0310 	add.w	r3, r7, #16
 8006ae6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8006aea:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006aee:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8006af2:	f107 030f 	add.w	r3, r7, #15
 8006af6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8006afa:	2301      	movs	r3, #1
 8006afc:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8006b00:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006b04:	2100      	movs	r1, #0
 8006b06:	4618      	mov	r0, r3
 8006b08:	f000 f9e2 	bl	8006ed0 <hci_send_req>
 8006b0c:	4603      	mov	r3, r0
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	da01      	bge.n	8006b16 <hci_le_set_default_phy+0xbe>
    return BLE_STATUS_TIMEOUT;
 8006b12:	23ff      	movs	r3, #255	; 0xff
 8006b14:	e002      	b.n	8006b1c <hci_le_set_default_phy+0xc4>
  return status;
 8006b16:	f107 030f 	add.w	r3, r7, #15
 8006b1a:	781b      	ldrb	r3, [r3, #0]
}
 8006b1c:	4618      	mov	r0, r3
 8006b1e:	f507 779a 	add.w	r7, r7, #308	; 0x134
 8006b22:	46bd      	mov	sp, r7
 8006b24:	bd90      	pop	{r4, r7, pc}

08006b26 <Osal_MemCpy>:
 * Osal_MemCpy
 * 
 */
 
void* Osal_MemCpy( void *dest, const void *src, unsigned int size )
{
 8006b26:	b580      	push	{r7, lr}
 8006b28:	b084      	sub	sp, #16
 8006b2a:	af00      	add	r7, sp, #0
 8006b2c:	60f8      	str	r0, [r7, #12]
 8006b2e:	60b9      	str	r1, [r7, #8]
 8006b30:	607a      	str	r2, [r7, #4]
  return memcpy( dest, src, size ); 
 8006b32:	687a      	ldr	r2, [r7, #4]
 8006b34:	68b9      	ldr	r1, [r7, #8]
 8006b36:	68f8      	ldr	r0, [r7, #12]
 8006b38:	f002 fe16 	bl	8009768 <memcpy>
 8006b3c:	4603      	mov	r3, r0
}
 8006b3e:	4618      	mov	r0, r3
 8006b40:	3710      	adds	r7, #16
 8006b42:	46bd      	mov	sp, r7
 8006b44:	bd80      	pop	{r7, pc}

08006b46 <Osal_MemSet>:
 * Osal_MemSet
 * 
 */
 
void* Osal_MemSet( void *ptr, int value, unsigned int size )
{
 8006b46:	b580      	push	{r7, lr}
 8006b48:	b084      	sub	sp, #16
 8006b4a:	af00      	add	r7, sp, #0
 8006b4c:	60f8      	str	r0, [r7, #12]
 8006b4e:	60b9      	str	r1, [r7, #8]
 8006b50:	607a      	str	r2, [r7, #4]
  return memset( ptr, value, size );
 8006b52:	687a      	ldr	r2, [r7, #4]
 8006b54:	68b9      	ldr	r1, [r7, #8]
 8006b56:	68f8      	ldr	r0, [r7, #12]
 8006b58:	f002 fe14 	bl	8009784 <memset>
 8006b5c:	4603      	mov	r3, r0
}
 8006b5e:	4618      	mov	r0, r3
 8006b60:	3710      	adds	r7, #16
 8006b62:	46bd      	mov	sp, r7
 8006b64:	bd80      	pop	{r7, pc}

08006b66 <BAS_Init>:
/* Private functions ----------------------------------------------------------*/
/* Weak functions ----------------------------------------------------------*/
void BVOPUS_STM_Init(void);

__weak void BAS_Init( void )
{
 8006b66:	b480      	push	{r7}
 8006b68:	af00      	add	r7, sp, #0
  return;
 8006b6a:	bf00      	nop
}
 8006b6c:	46bd      	mov	sp, r7
 8006b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b72:	4770      	bx	lr

08006b74 <BLS_Init>:

__weak void BLS_Init( void )
{
 8006b74:	b480      	push	{r7}
 8006b76:	af00      	add	r7, sp, #0
  return;
 8006b78:	bf00      	nop
}
 8006b7a:	46bd      	mov	sp, r7
 8006b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b80:	4770      	bx	lr

08006b82 <CRS_STM_Init>:
__weak void CRS_STM_Init( void )
{
 8006b82:	b480      	push	{r7}
 8006b84:	af00      	add	r7, sp, #0
  return;
 8006b86:	bf00      	nop
}
 8006b88:	46bd      	mov	sp, r7
 8006b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b8e:	4770      	bx	lr

08006b90 <DIS_Init>:
__weak void DIS_Init( void )
{
 8006b90:	b480      	push	{r7}
 8006b92:	af00      	add	r7, sp, #0
  return;
 8006b94:	bf00      	nop
}
 8006b96:	46bd      	mov	sp, r7
 8006b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b9c:	4770      	bx	lr

08006b9e <EDS_STM_Init>:
__weak void EDS_STM_Init( void )
{
 8006b9e:	b480      	push	{r7}
 8006ba0:	af00      	add	r7, sp, #0
  return;
 8006ba2:	bf00      	nop
}
 8006ba4:	46bd      	mov	sp, r7
 8006ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006baa:	4770      	bx	lr

08006bac <HIDS_Init>:
__weak void HIDS_Init( void )
{
 8006bac:	b480      	push	{r7}
 8006bae:	af00      	add	r7, sp, #0
  return;
 8006bb0:	bf00      	nop
}
 8006bb2:	46bd      	mov	sp, r7
 8006bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb8:	4770      	bx	lr

08006bba <HRS_Init>:
__weak void HRS_Init( void )
{
 8006bba:	b480      	push	{r7}
 8006bbc:	af00      	add	r7, sp, #0
  return;
 8006bbe:	bf00      	nop
}
 8006bc0:	46bd      	mov	sp, r7
 8006bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc6:	4770      	bx	lr

08006bc8 <HTS_Init>:
__weak void HTS_Init( void )
{
 8006bc8:	b480      	push	{r7}
 8006bca:	af00      	add	r7, sp, #0
  return;
 8006bcc:	bf00      	nop
}
 8006bce:	46bd      	mov	sp, r7
 8006bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd4:	4770      	bx	lr

08006bd6 <IAS_Init>:
__weak void IAS_Init( void )
{
 8006bd6:	b480      	push	{r7}
 8006bd8:	af00      	add	r7, sp, #0
  return;
 8006bda:	bf00      	nop
}
 8006bdc:	46bd      	mov	sp, r7
 8006bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be2:	4770      	bx	lr

08006be4 <LLS_Init>:
__weak void LLS_Init( void )
{
 8006be4:	b480      	push	{r7}
 8006be6:	af00      	add	r7, sp, #0
  return;
 8006be8:	bf00      	nop
}
 8006bea:	46bd      	mov	sp, r7
 8006bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf0:	4770      	bx	lr

08006bf2 <TPS_Init>:
__weak void TPS_Init( void )
{
 8006bf2:	b480      	push	{r7}
 8006bf4:	af00      	add	r7, sp, #0
  return;
 8006bf6:	bf00      	nop
}
 8006bf8:	46bd      	mov	sp, r7
 8006bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bfe:	4770      	bx	lr

08006c00 <MOTENV_STM_Init>:
__weak void MOTENV_STM_Init( void )
{
 8006c00:	b480      	push	{r7}
 8006c02:	af00      	add	r7, sp, #0
  return;
 8006c04:	bf00      	nop
}
 8006c06:	46bd      	mov	sp, r7
 8006c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c0c:	4770      	bx	lr

08006c0e <P2PS_STM_Init>:
__weak void P2PS_STM_Init( void )
{
 8006c0e:	b480      	push	{r7}
 8006c10:	af00      	add	r7, sp, #0
  return;
 8006c12:	bf00      	nop
}
 8006c14:	46bd      	mov	sp, r7
 8006c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c1a:	4770      	bx	lr

08006c1c <ZDD_STM_Init>:
__weak void ZDD_STM_Init( void )
{
 8006c1c:	b480      	push	{r7}
 8006c1e:	af00      	add	r7, sp, #0
  return;
 8006c20:	bf00      	nop
}
 8006c22:	46bd      	mov	sp, r7
 8006c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c28:	4770      	bx	lr

08006c2a <OTAS_STM_Init>:
__weak void OTAS_STM_Init( void )
{
 8006c2a:	b480      	push	{r7}
 8006c2c:	af00      	add	r7, sp, #0
  return;
 8006c2e:	bf00      	nop
}
 8006c30:	46bd      	mov	sp, r7
 8006c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c36:	4770      	bx	lr

08006c38 <MESH_Init>:
__weak void MESH_Init( void )
{
 8006c38:	b480      	push	{r7}
 8006c3a:	af00      	add	r7, sp, #0
  return;
 8006c3c:	bf00      	nop
}
 8006c3e:	46bd      	mov	sp, r7
 8006c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c44:	4770      	bx	lr

08006c46 <BVOPUS_STM_Init>:
__weak void BVOPUS_STM_Init( void )
{
 8006c46:	b480      	push	{r7}
 8006c48:	af00      	add	r7, sp, #0
  return;
 8006c4a:	bf00      	nop
}
 8006c4c:	46bd      	mov	sp, r7
 8006c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c52:	4770      	bx	lr

08006c54 <SVCCTL_Init>:
}

/* Functions Definition ------------------------------------------------------*/

void SVCCTL_Init( void )
{
 8006c54:	b580      	push	{r7, lr}
 8006c56:	af00      	add	r7, sp, #0
 
  /**
   * Initialize the number of registered Handler
   */
  SVCCTL_EvtHandler.NbreOfRegisteredHandler = 0;
 8006c58:	4b04      	ldr	r3, [pc, #16]	; (8006c6c <SVCCTL_Init+0x18>)
 8006c5a:	2200      	movs	r2, #0
 8006c5c:	771a      	strb	r2, [r3, #28]
  SVCCTL_CltHandler.NbreOfRegisteredHandler = 0;
 8006c5e:	4b04      	ldr	r3, [pc, #16]	; (8006c70 <SVCCTL_Init+0x1c>)
 8006c60:	2200      	movs	r2, #0
 8006c62:	701a      	strb	r2, [r3, #0]

  /**
   * Add and Initialize requested services
   */
  SVCCTL_SvcInit();
 8006c64:	f000 f806 	bl	8006c74 <SVCCTL_SvcInit>

  return;
 8006c68:	bf00      	nop
}
 8006c6a:	bd80      	pop	{r7, pc}
 8006c6c:	20000128 	.word	0x20000128
 8006c70:	20000148 	.word	0x20000148

08006c74 <SVCCTL_SvcInit>:

__weak void SVCCTL_SvcInit(void)
{
 8006c74:	b580      	push	{r7, lr}
 8006c76:	af00      	add	r7, sp, #0
  BAS_Init();
 8006c78:	f7ff ff75 	bl	8006b66 <BAS_Init>

  BLS_Init();
 8006c7c:	f7ff ff7a 	bl	8006b74 <BLS_Init>

  CRS_STM_Init();
 8006c80:	f7ff ff7f 	bl	8006b82 <CRS_STM_Init>

  DIS_Init();
 8006c84:	f7ff ff84 	bl	8006b90 <DIS_Init>

  EDS_STM_Init();
 8006c88:	f7ff ff89 	bl	8006b9e <EDS_STM_Init>

  HIDS_Init();
 8006c8c:	f7ff ff8e 	bl	8006bac <HIDS_Init>

  HRS_Init();
 8006c90:	f7ff ff93 	bl	8006bba <HRS_Init>

  HTS_Init();
 8006c94:	f7ff ff98 	bl	8006bc8 <HTS_Init>

  IAS_Init();
 8006c98:	f7ff ff9d 	bl	8006bd6 <IAS_Init>

  LLS_Init();
 8006c9c:	f7ff ffa2 	bl	8006be4 <LLS_Init>

  TPS_Init();
 8006ca0:	f7ff ffa7 	bl	8006bf2 <TPS_Init>

  MOTENV_STM_Init();
 8006ca4:	f7ff ffac 	bl	8006c00 <MOTENV_STM_Init>

  P2PS_STM_Init();
 8006ca8:	f7ff ffb1 	bl	8006c0e <P2PS_STM_Init>

  ZDD_STM_Init();
 8006cac:	f7ff ffb6 	bl	8006c1c <ZDD_STM_Init>

  OTAS_STM_Init();
 8006cb0:	f7ff ffbb 	bl	8006c2a <OTAS_STM_Init>
  
  BVOPUS_STM_Init();
 8006cb4:	f7ff ffc7 	bl	8006c46 <BVOPUS_STM_Init>

  MESH_Init();
 8006cb8:	f7ff ffbe 	bl	8006c38 <MESH_Init>

  SVCCTL_InitCustomSvc();
 8006cbc:	f001 ffba 	bl	8008c34 <SVCCTL_InitCustomSvc>
  
  return;
 8006cc0:	bf00      	nop
}
 8006cc2:	bd80      	pop	{r7, pc}

08006cc4 <SVCCTL_RegisterSvcHandler>:
 * @brief  BLE Controller initialization
 * @param  None
 * @retval None
 */
void SVCCTL_RegisterSvcHandler( SVC_CTL_p_EvtHandler_t pfBLE_SVC_Service_Event_Handler )
{
 8006cc4:	b480      	push	{r7}
 8006cc6:	b083      	sub	sp, #12
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	6078      	str	r0, [r7, #4]
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
  SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[SVCCTL_EvtHandler.NbreOfRegisteredHandler] = pfBLE_SVC_Service_Event_Handler;
 8006ccc:	4b09      	ldr	r3, [pc, #36]	; (8006cf4 <SVCCTL_RegisterSvcHandler+0x30>)
 8006cce:	7f1b      	ldrb	r3, [r3, #28]
 8006cd0:	4619      	mov	r1, r3
 8006cd2:	4a08      	ldr	r2, [pc, #32]	; (8006cf4 <SVCCTL_RegisterSvcHandler+0x30>)
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  SVCCTL_EvtHandler.NbreOfRegisteredHandler++;
 8006cda:	4b06      	ldr	r3, [pc, #24]	; (8006cf4 <SVCCTL_RegisterSvcHandler+0x30>)
 8006cdc:	7f1b      	ldrb	r3, [r3, #28]
 8006cde:	3301      	adds	r3, #1
 8006ce0:	b2da      	uxtb	r2, r3
 8006ce2:	4b04      	ldr	r3, [pc, #16]	; (8006cf4 <SVCCTL_RegisterSvcHandler+0x30>)
 8006ce4:	771a      	strb	r2, [r3, #28]
#else
  (void)(pfBLE_SVC_Service_Event_Handler);
#endif

  return;
 8006ce6:	bf00      	nop
}
 8006ce8:	370c      	adds	r7, #12
 8006cea:	46bd      	mov	sp, r7
 8006cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf0:	4770      	bx	lr
 8006cf2:	bf00      	nop
 8006cf4:	20000128 	.word	0x20000128

08006cf8 <SVCCTL_UserEvtRx>:

  return;
}

SVCCTL_UserEvtFlowStatus_t SVCCTL_UserEvtRx( void *pckt )
{
 8006cf8:	b580      	push	{r7, lr}
 8006cfa:	b086      	sub	sp, #24
 8006cfc:	af00      	add	r7, sp, #0
 8006cfe:	6078      	str	r0, [r7, #4]
  evt_blecore_aci *blecore_evt;
  SVCCTL_EvtAckStatus_t event_notification_status;
  SVCCTL_UserEvtFlowStatus_t return_status;
  uint8_t index;

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	3301      	adds	r3, #1
 8006d04:	613b      	str	r3, [r7, #16]
  event_notification_status = SVCCTL_EvtNotAck;
 8006d06:	2300      	movs	r3, #0
 8006d08:	75fb      	strb	r3, [r7, #23]

  switch (event_pckt->evt)
 8006d0a:	693b      	ldr	r3, [r7, #16]
 8006d0c:	781b      	ldrb	r3, [r3, #0]
 8006d0e:	2bff      	cmp	r3, #255	; 0xff
 8006d10:	d125      	bne.n	8006d5e <SVCCTL_UserEvtRx+0x66>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
    {
      blecore_evt = (evt_blecore_aci*) event_pckt->data;
 8006d12:	693b      	ldr	r3, [r7, #16]
 8006d14:	3302      	adds	r3, #2
 8006d16:	60fb      	str	r3, [r7, #12]

      switch ((blecore_evt->ecode) & SVCCTL_EGID_EVT_MASK)
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	881b      	ldrh	r3, [r3, #0]
 8006d1c:	b29b      	uxth	r3, r3
 8006d1e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8006d22:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006d26:	d118      	bne.n	8006d5a <SVCCTL_UserEvtRx+0x62>
      {
        case SVCCTL_GATT_EVT_TYPE:
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
          /* For Service event handler */
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 8006d28:	2300      	movs	r3, #0
 8006d2a:	757b      	strb	r3, [r7, #21]
 8006d2c:	e00d      	b.n	8006d4a <SVCCTL_UserEvtRx+0x52>
          {
            event_notification_status = SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[index](pckt);
 8006d2e:	7d7b      	ldrb	r3, [r7, #21]
 8006d30:	4a1a      	ldr	r2, [pc, #104]	; (8006d9c <SVCCTL_UserEvtRx+0xa4>)
 8006d32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006d36:	6878      	ldr	r0, [r7, #4]
 8006d38:	4798      	blx	r3
 8006d3a:	4603      	mov	r3, r0
 8006d3c:	75fb      	strb	r3, [r7, #23]
            /**
             * When a GATT event has been acknowledged by a Service, there is no need to call the other registered handlers
             * a GATT event is relevant for only one Service
             */
            if (event_notification_status != SVCCTL_EvtNotAck)
 8006d3e:	7dfb      	ldrb	r3, [r7, #23]
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d108      	bne.n	8006d56 <SVCCTL_UserEvtRx+0x5e>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 8006d44:	7d7b      	ldrb	r3, [r7, #21]
 8006d46:	3301      	adds	r3, #1
 8006d48:	757b      	strb	r3, [r7, #21]
 8006d4a:	4b14      	ldr	r3, [pc, #80]	; (8006d9c <SVCCTL_UserEvtRx+0xa4>)
 8006d4c:	7f1b      	ldrb	r3, [r3, #28]
 8006d4e:	7d7a      	ldrb	r2, [r7, #21]
 8006d50:	429a      	cmp	r2, r3
 8006d52:	d3ec      	bcc.n	8006d2e <SVCCTL_UserEvtRx+0x36>
               */
              break;
            }
          }
#endif
          break;
 8006d54:	e002      	b.n	8006d5c <SVCCTL_UserEvtRx+0x64>
              break;
 8006d56:	bf00      	nop
          break;
 8006d58:	e000      	b.n	8006d5c <SVCCTL_UserEvtRx+0x64>

        default:
          break;
 8006d5a:	bf00      	nop
      }
    }
      break; /* HCI_HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE_SPECIFIC */
 8006d5c:	e000      	b.n	8006d60 <SVCCTL_UserEvtRx+0x68>

    default:
      break;
 8006d5e:	bf00      	nop

  /**
   * When no registered handlers (either Service or Client) has acknowledged the GATT event, it is reported to the application
   * a GAP event is always reported to the applicaiton.
   */
  switch (event_notification_status)
 8006d60:	7dfb      	ldrb	r3, [r7, #23]
 8006d62:	2b02      	cmp	r3, #2
 8006d64:	d00f      	beq.n	8006d86 <SVCCTL_UserEvtRx+0x8e>
 8006d66:	2b02      	cmp	r3, #2
 8006d68:	dc10      	bgt.n	8006d8c <SVCCTL_UserEvtRx+0x94>
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d002      	beq.n	8006d74 <SVCCTL_UserEvtRx+0x7c>
 8006d6e:	2b01      	cmp	r3, #1
 8006d70:	d006      	beq.n	8006d80 <SVCCTL_UserEvtRx+0x88>
 8006d72:	e00b      	b.n	8006d8c <SVCCTL_UserEvtRx+0x94>
    case SVCCTL_EvtNotAck:
      /**
       *  The event has NOT been managed.
       *  It shall be passed to the application for processing
       */
      return_status = SVCCTL_App_Notification(pckt);
 8006d74:	6878      	ldr	r0, [r7, #4]
 8006d76:	f001 fb8b 	bl	8008490 <SVCCTL_App_Notification>
 8006d7a:	4603      	mov	r3, r0
 8006d7c:	75bb      	strb	r3, [r7, #22]
      break;
 8006d7e:	e008      	b.n	8006d92 <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowEnable:
      return_status = SVCCTL_UserEvtFlowEnable;
 8006d80:	2301      	movs	r3, #1
 8006d82:	75bb      	strb	r3, [r7, #22]
      break;
 8006d84:	e005      	b.n	8006d92 <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowDisable:
      return_status = SVCCTL_UserEvtFlowDisable;
 8006d86:	2300      	movs	r3, #0
 8006d88:	75bb      	strb	r3, [r7, #22]
      break;
 8006d8a:	e002      	b.n	8006d92 <SVCCTL_UserEvtRx+0x9a>

    default:
      return_status = SVCCTL_UserEvtFlowEnable;
 8006d8c:	2301      	movs	r3, #1
 8006d8e:	75bb      	strb	r3, [r7, #22]
      break;
 8006d90:	bf00      	nop
  }

  return (return_status);
 8006d92:	7dbb      	ldrb	r3, [r7, #22]
}
 8006d94:	4618      	mov	r0, r3
 8006d96:	3718      	adds	r7, #24
 8006d98:	46bd      	mov	sp, r7
 8006d9a:	bd80      	pop	{r7, pc}
 8006d9c:	20000128 	.word	0x20000128

08006da0 <SHCI_C2_BLE_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_BLE_Init( SHCI_C2_Ble_Init_Cmd_Packet_t *pCmdPacket )
{
 8006da0:	b580      	push	{r7, lr}
 8006da2:	b088      	sub	sp, #32
 8006da4:	af00      	add	r7, sp, #0
 8006da6:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8006da8:	f107 030c 	add.w	r3, r7, #12
 8006dac:	61fb      	str	r3, [r7, #28]

 shci_send( SHCI_OPCODE_C2_BLE_INIT,
            sizeof( SHCI_C2_Ble_Init_Cmd_Param_t ),
            (uint8_t*)&pCmdPacket->Param,
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	f103 020c 	add.w	r2, r3, #12
 shci_send( SHCI_OPCODE_C2_BLE_INIT,
 8006db4:	69fb      	ldr	r3, [r7, #28]
 8006db6:	2124      	movs	r1, #36	; 0x24
 8006db8:	f64f 4066 	movw	r0, #64614	; 0xfc66
 8006dbc:	f000 fa1e 	bl	80071fc <shci_send>
            p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8006dc0:	69fb      	ldr	r3, [r7, #28]
 8006dc2:	330b      	adds	r3, #11
 8006dc4:	78db      	ldrb	r3, [r3, #3]
}
 8006dc6:	4618      	mov	r0, r3
 8006dc8:	3720      	adds	r7, #32
 8006dca:	46bd      	mov	sp, r7
 8006dcc:	bd80      	pop	{r7, pc}

08006dce <SHCI_C2_DEBUG_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_DEBUG_Init( SHCI_C2_DEBUG_Init_Cmd_Packet_t *pCmdPacket  )
{
 8006dce:	b580      	push	{r7, lr}
 8006dd0:	b088      	sub	sp, #32
 8006dd2:	af00      	add	r7, sp, #0
 8006dd4:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8006dd6:	f107 030c 	add.w	r3, r7, #12
 8006dda:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
             sizeof( SHCI_C2_DEBUG_init_Cmd_Param_t ),
             (uint8_t*)&pCmdPacket->Param,
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	f103 020c 	add.w	r2, r3, #12
  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
 8006de2:	69fb      	ldr	r3, [r7, #28]
 8006de4:	210f      	movs	r1, #15
 8006de6:	f64f 4068 	movw	r0, #64616	; 0xfc68
 8006dea:	f000 fa07 	bl	80071fc <shci_send>
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8006dee:	69fb      	ldr	r3, [r7, #28]
 8006df0:	330b      	adds	r3, #11
 8006df2:	78db      	ldrb	r3, [r3, #3]
}
 8006df4:	4618      	mov	r0, r3
 8006df6:	3720      	adds	r7, #32
 8006df8:	46bd      	mov	sp, r7
 8006dfa:	bd80      	pop	{r7, pc}

08006dfc <hci_init>:
static void TlEvtReceived(TL_EvtPacket_t *hcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8006dfc:	b580      	push	{r7, lr}
 8006dfe:	b082      	sub	sp, #8
 8006e00:	af00      	add	r7, sp, #0
 8006e02:	6078      	str	r0, [r7, #4]
 8006e04:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((HCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 8006e06:	683b      	ldr	r3, [r7, #0]
 8006e08:	685b      	ldr	r3, [r3, #4]
 8006e0a:	4a08      	ldr	r2, [pc, #32]	; (8006e2c <hci_init+0x30>)
 8006e0c:	6013      	str	r3, [r2, #0]
  hciContext.UserEvtRx = UserEvtRx;
 8006e0e:	4a08      	ldr	r2, [pc, #32]	; (8006e30 <hci_init+0x34>)
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	61d3      	str	r3, [r2, #28]

  hci_register_io_bus (&hciContext.io);
 8006e14:	4806      	ldr	r0, [pc, #24]	; (8006e30 <hci_init+0x34>)
 8006e16:	f000 f973 	bl	8007100 <hci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((HCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 8006e1a:	683b      	ldr	r3, [r7, #0]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	4618      	mov	r0, r3
 8006e20:	f000 f8d4 	bl	8006fcc <TlInit>

  return;
 8006e24:	bf00      	nop
}
 8006e26:	3708      	adds	r7, #8
 8006e28:	46bd      	mov	sp, r7
 8006e2a:	bd80      	pop	{r7, pc}
 8006e2c:	20000254 	.word	0x20000254
 8006e30:	2000022c 	.word	0x2000022c

08006e34 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 8006e34:	b580      	push	{r7, lr}
 8006e36:	b084      	sub	sp, #16
 8006e38:	af00      	add	r7, sp, #0
  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 8006e3a:	4822      	ldr	r0, [pc, #136]	; (8006ec4 <hci_user_evt_proc+0x90>)
 8006e3c:	f000 fe06 	bl	8007a4c <LST_is_empty>
 8006e40:	4603      	mov	r3, r0
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d12b      	bne.n	8006e9e <hci_user_evt_proc+0x6a>
 8006e46:	4b20      	ldr	r3, [pc, #128]	; (8006ec8 <hci_user_evt_proc+0x94>)
 8006e48:	781b      	ldrb	r3, [r3, #0]
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d027      	beq.n	8006e9e <hci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &HciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 8006e4e:	f107 030c 	add.w	r3, r7, #12
 8006e52:	4619      	mov	r1, r3
 8006e54:	481b      	ldr	r0, [pc, #108]	; (8006ec4 <hci_user_evt_proc+0x90>)
 8006e56:	f000 fe88 	bl	8007b6a <LST_remove_head>

    if (hciContext.UserEvtRx != NULL)
 8006e5a:	4b1c      	ldr	r3, [pc, #112]	; (8006ecc <hci_user_evt_proc+0x98>)
 8006e5c:	69db      	ldr	r3, [r3, #28]
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d00c      	beq.n	8006e7c <hci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = HCI_TL_UserEventFlow_Enable;
 8006e66:	2301      	movs	r3, #1
 8006e68:	713b      	strb	r3, [r7, #4]
      hciContext.UserEvtRx((void *)&UserEvtRxParam);
 8006e6a:	4b18      	ldr	r3, [pc, #96]	; (8006ecc <hci_user_evt_proc+0x98>)
 8006e6c:	69db      	ldr	r3, [r3, #28]
 8006e6e:	1d3a      	adds	r2, r7, #4
 8006e70:	4610      	mov	r0, r2
 8006e72:	4798      	blx	r3
      UserEventFlow = UserEvtRxParam.status;
 8006e74:	793a      	ldrb	r2, [r7, #4]
 8006e76:	4b14      	ldr	r3, [pc, #80]	; (8006ec8 <hci_user_evt_proc+0x94>)
 8006e78:	701a      	strb	r2, [r3, #0]
 8006e7a:	e002      	b.n	8006e82 <hci_user_evt_proc+0x4e>
    }
    else
    {
      UserEventFlow = HCI_TL_UserEventFlow_Enable;
 8006e7c:	4b12      	ldr	r3, [pc, #72]	; (8006ec8 <hci_user_evt_proc+0x94>)
 8006e7e:	2201      	movs	r2, #1
 8006e80:	701a      	strb	r2, [r3, #0]
    }

    if(UserEventFlow != HCI_TL_UserEventFlow_Disable)
 8006e82:	4b11      	ldr	r3, [pc, #68]	; (8006ec8 <hci_user_evt_proc+0x94>)
 8006e84:	781b      	ldrb	r3, [r3, #0]
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d004      	beq.n	8006e94 <hci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	4618      	mov	r0, r3
 8006e8e:	f000 fc03 	bl	8007698 <TL_MM_EvtDone>
 8006e92:	e004      	b.n	8006e9e <hci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &HciAsynchEventQueue, (tListNode *)phcievtbuffer );
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	4619      	mov	r1, r3
 8006e98:	480a      	ldr	r0, [pc, #40]	; (8006ec4 <hci_user_evt_proc+0x90>)
 8006e9a:	f000 fdf9 	bl	8007a90 <LST_insert_head>
    }
  }

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 8006e9e:	4809      	ldr	r0, [pc, #36]	; (8006ec4 <hci_user_evt_proc+0x90>)
 8006ea0:	f000 fdd4 	bl	8007a4c <LST_is_empty>
 8006ea4:	4603      	mov	r3, r0
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d107      	bne.n	8006eba <hci_user_evt_proc+0x86>
 8006eaa:	4b07      	ldr	r3, [pc, #28]	; (8006ec8 <hci_user_evt_proc+0x94>)
 8006eac:	781b      	ldrb	r3, [r3, #0]
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d003      	beq.n	8006eba <hci_user_evt_proc+0x86>
  {
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue);
 8006eb2:	4804      	ldr	r0, [pc, #16]	; (8006ec4 <hci_user_evt_proc+0x90>)
 8006eb4:	f001 fdc4 	bl	8008a40 <hci_notify_asynch_evt>
  }


  return;
 8006eb8:	bf00      	nop
 8006eba:	bf00      	nop
}
 8006ebc:	3710      	adds	r7, #16
 8006ebe:	46bd      	mov	sp, r7
 8006ec0:	bd80      	pop	{r7, pc}
 8006ec2:	bf00      	nop
 8006ec4:	20000150 	.word	0x20000150
 8006ec8:	2000015c 	.word	0x2000015c
 8006ecc:	2000022c 	.word	0x2000022c

08006ed0 <hci_send_req>:

  return;
}

int hci_send_req(struct hci_request *p_cmd, uint8_t async)
{
 8006ed0:	b580      	push	{r7, lr}
 8006ed2:	b088      	sub	sp, #32
 8006ed4:	af00      	add	r7, sp, #0
 8006ed6:	6078      	str	r0, [r7, #4]
 8006ed8:	460b      	mov	r3, r1
 8006eda:	70fb      	strb	r3, [r7, #3]
  TL_CsEvt_t    *pcommand_status_event;
  TL_EvtPacket_t *pevtpacket;
  uint8_t hci_cmd_complete_return_parameters_length;
  HCI_TL_CmdStatus_t local_cmd_status;

  NotifyCmdStatus(HCI_TL_CmdBusy);
 8006edc:	2000      	movs	r0, #0
 8006ede:	f000 f8cb 	bl	8007078 <NotifyCmdStatus>
  local_cmd_status = HCI_TL_CmdBusy;
 8006ee2:	2300      	movs	r3, #0
 8006ee4:	77fb      	strb	r3, [r7, #31]
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	885b      	ldrh	r3, [r3, #2]
 8006eea:	b21b      	sxth	r3, r3
 8006eec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006ef0:	b21a      	sxth	r2, r3
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	881b      	ldrh	r3, [r3, #0]
 8006ef6:	029b      	lsls	r3, r3, #10
 8006ef8:	b21b      	sxth	r3, r3
 8006efa:	4313      	orrs	r3, r2
 8006efc:	b21b      	sxth	r3, r3
 8006efe:	83bb      	strh	r3, [r7, #28]
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	68db      	ldr	r3, [r3, #12]
 8006f04:	b2d9      	uxtb	r1, r3
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	689a      	ldr	r2, [r3, #8]
 8006f0a:	8bbb      	ldrh	r3, [r7, #28]
 8006f0c:	4618      	mov	r0, r3
 8006f0e:	f000 f88d 	bl	800702c <SendCmd>

  while(local_cmd_status == HCI_TL_CmdBusy)
 8006f12:	e04e      	b.n	8006fb2 <hci_send_req+0xe2>
  {
    hci_cmd_resp_wait(HCI_TL_DEFAULT_TIMEOUT);
 8006f14:	f248 00e8 	movw	r0, #33000	; 0x80e8
 8006f18:	f001 fda9 	bl	8008a6e <hci_cmd_resp_wait>

    /**
     * Process Cmd Event
     */
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 8006f1c:	e043      	b.n	8006fa6 <hci_send_req+0xd6>
    {
      LST_remove_head (&HciCmdEventQueue, (tListNode **)&pevtpacket);
 8006f1e:	f107 030c 	add.w	r3, r7, #12
 8006f22:	4619      	mov	r1, r3
 8006f24:	4828      	ldr	r0, [pc, #160]	; (8006fc8 <hci_send_req+0xf8>)
 8006f26:	f000 fe20 	bl	8007b6a <LST_remove_head>

      if(pevtpacket->evtserial.evt.evtcode == TL_BLEEVT_CS_OPCODE)
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	7a5b      	ldrb	r3, [r3, #9]
 8006f2e:	2b0f      	cmp	r3, #15
 8006f30:	d114      	bne.n	8006f5c <hci_send_req+0x8c>
      {
        pcommand_status_event = (TL_CsEvt_t*)pevtpacket->evtserial.evt.payload;
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	330b      	adds	r3, #11
 8006f36:	613b      	str	r3, [r7, #16]
        if(pcommand_status_event->cmdcode == opcode)
 8006f38:	693b      	ldr	r3, [r7, #16]
 8006f3a:	885b      	ldrh	r3, [r3, #2]
 8006f3c:	b29b      	uxth	r3, r3
 8006f3e:	8bba      	ldrh	r2, [r7, #28]
 8006f40:	429a      	cmp	r2, r3
 8006f42:	d104      	bne.n	8006f4e <hci_send_req+0x7e>
        {
          *(uint8_t *)(p_cmd->rparam) = pcommand_status_event->status;
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	691b      	ldr	r3, [r3, #16]
 8006f48:	693a      	ldr	r2, [r7, #16]
 8006f4a:	7812      	ldrb	r2, [r2, #0]
 8006f4c:	701a      	strb	r2, [r3, #0]
        }

        if(pcommand_status_event->numcmd != 0)
 8006f4e:	693b      	ldr	r3, [r7, #16]
 8006f50:	785b      	ldrb	r3, [r3, #1]
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d027      	beq.n	8006fa6 <hci_send_req+0xd6>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 8006f56:	2301      	movs	r3, #1
 8006f58:	77fb      	strb	r3, [r7, #31]
 8006f5a:	e024      	b.n	8006fa6 <hci_send_req+0xd6>
        }
      }
      else
      {
        pcommand_complete_event = (TL_CcEvt_t*)pevtpacket->evtserial.evt.payload;
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	330b      	adds	r3, #11
 8006f60:	61bb      	str	r3, [r7, #24]

        if(pcommand_complete_event->cmdcode == opcode)
 8006f62:	69bb      	ldr	r3, [r7, #24]
 8006f64:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8006f68:	b29b      	uxth	r3, r3
 8006f6a:	8bba      	ldrh	r2, [r7, #28]
 8006f6c:	429a      	cmp	r2, r3
 8006f6e:	d114      	bne.n	8006f9a <hci_send_req+0xca>
        {
          hci_cmd_complete_return_parameters_length = pevtpacket->evtserial.evt.plen - TL_EVT_HDR_SIZE;
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	7a9b      	ldrb	r3, [r3, #10]
 8006f74:	3b03      	subs	r3, #3
 8006f76:	75fb      	strb	r3, [r7, #23]
          p_cmd->rlen = MIN(hci_cmd_complete_return_parameters_length, p_cmd->rlen);
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	695a      	ldr	r2, [r3, #20]
 8006f7c:	7dfb      	ldrb	r3, [r7, #23]
 8006f7e:	429a      	cmp	r2, r3
 8006f80:	bfa8      	it	ge
 8006f82:	461a      	movge	r2, r3
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	615a      	str	r2, [r3, #20]
          memcpy(p_cmd->rparam, pcommand_complete_event->payload, p_cmd->rlen);
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	6918      	ldr	r0, [r3, #16]
 8006f8c:	69bb      	ldr	r3, [r7, #24]
 8006f8e:	1cd9      	adds	r1, r3, #3
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	695b      	ldr	r3, [r3, #20]
 8006f94:	461a      	mov	r2, r3
 8006f96:	f002 fbe7 	bl	8009768 <memcpy>
        }

        if(pcommand_complete_event->numcmd != 0)
 8006f9a:	69bb      	ldr	r3, [r7, #24]
 8006f9c:	781b      	ldrb	r3, [r3, #0]
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d001      	beq.n	8006fa6 <hci_send_req+0xd6>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 8006fa2:	2301      	movs	r3, #1
 8006fa4:	77fb      	strb	r3, [r7, #31]
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 8006fa6:	4808      	ldr	r0, [pc, #32]	; (8006fc8 <hci_send_req+0xf8>)
 8006fa8:	f000 fd50 	bl	8007a4c <LST_is_empty>
 8006fac:	4603      	mov	r3, r0
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d0b5      	beq.n	8006f1e <hci_send_req+0x4e>
  while(local_cmd_status == HCI_TL_CmdBusy)
 8006fb2:	7ffb      	ldrb	r3, [r7, #31]
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d0ad      	beq.n	8006f14 <hci_send_req+0x44>
        }
      }
    }
  }

  NotifyCmdStatus(HCI_TL_CmdAvailable);
 8006fb8:	2001      	movs	r0, #1
 8006fba:	f000 f85d 	bl	8007078 <NotifyCmdStatus>

  return 0;
 8006fbe:	2300      	movs	r3, #0
}
 8006fc0:	4618      	mov	r0, r3
 8006fc2:	3720      	adds	r7, #32
 8006fc4:	46bd      	mov	sp, r7
 8006fc6:	bd80      	pop	{r7, pc}
 8006fc8:	2000024c 	.word	0x2000024c

08006fcc <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 8006fcc:	b580      	push	{r7, lr}
 8006fce:	b086      	sub	sp, #24
 8006fd0:	af00      	add	r7, sp, #0
 8006fd2:	6078      	str	r0, [r7, #4]
  TL_BLE_InitConf_t Conf;

  /**
   * Always initialize the command event queue
   */
  LST_init_head (&HciCmdEventQueue);
 8006fd4:	480f      	ldr	r0, [pc, #60]	; (8007014 <TlInit+0x48>)
 8006fd6:	f000 fd29 	bl	8007a2c <LST_init_head>

  pCmdBuffer = p_cmdbuffer;
 8006fda:	4a0f      	ldr	r2, [pc, #60]	; (8007018 <TlInit+0x4c>)
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	6013      	str	r3, [r2, #0]

  LST_init_head (&HciAsynchEventQueue);
 8006fe0:	480e      	ldr	r0, [pc, #56]	; (800701c <TlInit+0x50>)
 8006fe2:	f000 fd23 	bl	8007a2c <LST_init_head>

  UserEventFlow = HCI_TL_UserEventFlow_Enable;
 8006fe6:	4b0e      	ldr	r3, [pc, #56]	; (8007020 <TlInit+0x54>)
 8006fe8:	2201      	movs	r2, #1
 8006fea:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (hciContext.io.Init)
 8006fec:	4b0d      	ldr	r3, [pc, #52]	; (8007024 <TlInit+0x58>)
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d00a      	beq.n	800700a <TlInit+0x3e>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	613b      	str	r3, [r7, #16]
    Conf.IoBusEvtCallBack = TlEvtReceived;
 8006ff8:	4b0b      	ldr	r3, [pc, #44]	; (8007028 <TlInit+0x5c>)
 8006ffa:	60bb      	str	r3, [r7, #8]
    hciContext.io.Init(&Conf);
 8006ffc:	4b09      	ldr	r3, [pc, #36]	; (8007024 <TlInit+0x58>)
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	f107 0208 	add.w	r2, r7, #8
 8007004:	4610      	mov	r0, r2
 8007006:	4798      	blx	r3
  }

  return;
 8007008:	bf00      	nop
 800700a:	bf00      	nop
}
 800700c:	3718      	adds	r7, #24
 800700e:	46bd      	mov	sp, r7
 8007010:	bd80      	pop	{r7, pc}
 8007012:	bf00      	nop
 8007014:	2000024c 	.word	0x2000024c
 8007018:	20000158 	.word	0x20000158
 800701c:	20000150 	.word	0x20000150
 8007020:	2000015c 	.word	0x2000015c
 8007024:	2000022c 	.word	0x2000022c
 8007028:	080070b9 	.word	0x080070b9

0800702c <SendCmd>:

static void SendCmd(uint16_t opcode, uint8_t plen, void *param)
{
 800702c:	b580      	push	{r7, lr}
 800702e:	b082      	sub	sp, #8
 8007030:	af00      	add	r7, sp, #0
 8007032:	4603      	mov	r3, r0
 8007034:	603a      	str	r2, [r7, #0]
 8007036:	80fb      	strh	r3, [r7, #6]
 8007038:	460b      	mov	r3, r1
 800703a:	717b      	strb	r3, [r7, #5]
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 800703c:	4b0c      	ldr	r3, [pc, #48]	; (8007070 <SendCmd+0x44>)
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	88fa      	ldrh	r2, [r7, #6]
 8007042:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = plen;
 8007046:	4b0a      	ldr	r3, [pc, #40]	; (8007070 <SendCmd+0x44>)
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	797a      	ldrb	r2, [r7, #5]
 800704c:	72da      	strb	r2, [r3, #11]
  memcpy( pCmdBuffer->cmdserial.cmd.payload, param, plen );
 800704e:	4b08      	ldr	r3, [pc, #32]	; (8007070 <SendCmd+0x44>)
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	330c      	adds	r3, #12
 8007054:	797a      	ldrb	r2, [r7, #5]
 8007056:	6839      	ldr	r1, [r7, #0]
 8007058:	4618      	mov	r0, r3
 800705a:	f002 fb85 	bl	8009768 <memcpy>

  hciContext.io.Send(0,0);
 800705e:	4b05      	ldr	r3, [pc, #20]	; (8007074 <SendCmd+0x48>)
 8007060:	691b      	ldr	r3, [r3, #16]
 8007062:	2100      	movs	r1, #0
 8007064:	2000      	movs	r0, #0
 8007066:	4798      	blx	r3

  return;
 8007068:	bf00      	nop
}
 800706a:	3708      	adds	r7, #8
 800706c:	46bd      	mov	sp, r7
 800706e:	bd80      	pop	{r7, pc}
 8007070:	20000158 	.word	0x20000158
 8007074:	2000022c 	.word	0x2000022c

08007078 <NotifyCmdStatus>:

static void NotifyCmdStatus(HCI_TL_CmdStatus_t hcicmdstatus)
{
 8007078:	b580      	push	{r7, lr}
 800707a:	b082      	sub	sp, #8
 800707c:	af00      	add	r7, sp, #0
 800707e:	4603      	mov	r3, r0
 8007080:	71fb      	strb	r3, [r7, #7]
  if(hcicmdstatus == HCI_TL_CmdBusy)
 8007082:	79fb      	ldrb	r3, [r7, #7]
 8007084:	2b00      	cmp	r3, #0
 8007086:	d108      	bne.n	800709a <NotifyCmdStatus+0x22>
  {
    if(StatusNotCallBackFunction != 0)
 8007088:	4b0a      	ldr	r3, [pc, #40]	; (80070b4 <NotifyCmdStatus+0x3c>)
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	2b00      	cmp	r3, #0
 800708e:	d00d      	beq.n	80070ac <NotifyCmdStatus+0x34>
    {
      StatusNotCallBackFunction(HCI_TL_CmdBusy);
 8007090:	4b08      	ldr	r3, [pc, #32]	; (80070b4 <NotifyCmdStatus+0x3c>)
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	2000      	movs	r0, #0
 8007096:	4798      	blx	r3
    {
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
    }
  }

  return;
 8007098:	e008      	b.n	80070ac <NotifyCmdStatus+0x34>
    if(StatusNotCallBackFunction != 0)
 800709a:	4b06      	ldr	r3, [pc, #24]	; (80070b4 <NotifyCmdStatus+0x3c>)
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d004      	beq.n	80070ac <NotifyCmdStatus+0x34>
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
 80070a2:	4b04      	ldr	r3, [pc, #16]	; (80070b4 <NotifyCmdStatus+0x3c>)
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	2001      	movs	r0, #1
 80070a8:	4798      	blx	r3
  return;
 80070aa:	bf00      	nop
 80070ac:	bf00      	nop
}
 80070ae:	3708      	adds	r7, #8
 80070b0:	46bd      	mov	sp, r7
 80070b2:	bd80      	pop	{r7, pc}
 80070b4:	20000254 	.word	0x20000254

080070b8 <TlEvtReceived>:

static void TlEvtReceived(TL_EvtPacket_t *hcievt)
{
 80070b8:	b580      	push	{r7, lr}
 80070ba:	b082      	sub	sp, #8
 80070bc:	af00      	add	r7, sp, #0
 80070be:	6078      	str	r0, [r7, #4]
  if ( ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	7a5b      	ldrb	r3, [r3, #9]
 80070c4:	2b0f      	cmp	r3, #15
 80070c6:	d003      	beq.n	80070d0 <TlEvtReceived+0x18>
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	7a5b      	ldrb	r3, [r3, #9]
 80070cc:	2b0e      	cmp	r3, #14
 80070ce:	d107      	bne.n	80070e0 <TlEvtReceived+0x28>
  {
    LST_insert_tail(&HciCmdEventQueue, (tListNode *)hcievt);
 80070d0:	6879      	ldr	r1, [r7, #4]
 80070d2:	4809      	ldr	r0, [pc, #36]	; (80070f8 <TlEvtReceived+0x40>)
 80070d4:	f000 fd02 	bl	8007adc <LST_insert_tail>
    hci_cmd_resp_release(0); /**< Notify the application a full Cmd Event has been received */
 80070d8:	2000      	movs	r0, #0
 80070da:	f001 fcbd 	bl	8008a58 <hci_cmd_resp_release>
 80070de:	e006      	b.n	80070ee <TlEvtReceived+0x36>
  }
  else
  {
    LST_insert_tail(&HciAsynchEventQueue, (tListNode *)hcievt);
 80070e0:	6879      	ldr	r1, [r7, #4]
 80070e2:	4806      	ldr	r0, [pc, #24]	; (80070fc <TlEvtReceived+0x44>)
 80070e4:	f000 fcfa 	bl	8007adc <LST_insert_tail>
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 80070e8:	4804      	ldr	r0, [pc, #16]	; (80070fc <TlEvtReceived+0x44>)
 80070ea:	f001 fca9 	bl	8008a40 <hci_notify_asynch_evt>
  }

  return;
 80070ee:	bf00      	nop
}
 80070f0:	3708      	adds	r7, #8
 80070f2:	46bd      	mov	sp, r7
 80070f4:	bd80      	pop	{r7, pc}
 80070f6:	bf00      	nop
 80070f8:	2000024c 	.word	0x2000024c
 80070fc:	20000150 	.word	0x20000150

08007100 <hci_register_io_bus>:
#include "hci_tl.h"
#include "tl.h"


void hci_register_io_bus(tHciIO* fops)
{
 8007100:	b480      	push	{r7}
 8007102:	b083      	sub	sp, #12
 8007104:	af00      	add	r7, sp, #0
 8007106:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_BLE_Init;
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	4a05      	ldr	r2, [pc, #20]	; (8007120 <hci_register_io_bus+0x20>)
 800710c:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_BLE_SendCmd;
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	4a04      	ldr	r2, [pc, #16]	; (8007124 <hci_register_io_bus+0x24>)
 8007112:	611a      	str	r2, [r3, #16]

  return;
 8007114:	bf00      	nop
}
 8007116:	370c      	adds	r7, #12
 8007118:	46bd      	mov	sp, r7
 800711a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800711e:	4770      	bx	lr
 8007120:	08007411 	.word	0x08007411
 8007124:	08007479 	.word	0x08007479

08007128 <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8007128:	b580      	push	{r7, lr}
 800712a:	b082      	sub	sp, #8
 800712c:	af00      	add	r7, sp, #0
 800712e:	6078      	str	r0, [r7, #4]
 8007130:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 8007132:	683b      	ldr	r3, [r7, #0]
 8007134:	685b      	ldr	r3, [r3, #4]
 8007136:	4a08      	ldr	r2, [pc, #32]	; (8007158 <shci_init+0x30>)
 8007138:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 800713a:	4a08      	ldr	r2, [pc, #32]	; (800715c <shci_init+0x34>)
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 8007140:	4806      	ldr	r0, [pc, #24]	; (800715c <shci_init+0x34>)
 8007142:	f000 f911 	bl	8007368 <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 8007146:	683b      	ldr	r3, [r7, #0]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	4618      	mov	r0, r3
 800714c:	f000 f894 	bl	8007278 <TlInit>

  return;
 8007150:	bf00      	nop
}
 8007152:	3708      	adds	r7, #8
 8007154:	46bd      	mov	sp, r7
 8007156:	bd80      	pop	{r7, pc}
 8007158:	20000278 	.word	0x20000278
 800715c:	20000258 	.word	0x20000258

08007160 <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 8007160:	b580      	push	{r7, lr}
 8007162:	b084      	sub	sp, #16
 8007164:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 8007166:	4822      	ldr	r0, [pc, #136]	; (80071f0 <shci_user_evt_proc+0x90>)
 8007168:	f000 fc70 	bl	8007a4c <LST_is_empty>
 800716c:	4603      	mov	r3, r0
 800716e:	2b00      	cmp	r3, #0
 8007170:	d12b      	bne.n	80071ca <shci_user_evt_proc+0x6a>
 8007172:	4b20      	ldr	r3, [pc, #128]	; (80071f4 <shci_user_evt_proc+0x94>)
 8007174:	781b      	ldrb	r3, [r3, #0]
 8007176:	2b00      	cmp	r3, #0
 8007178:	d027      	beq.n	80071ca <shci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 800717a:	f107 030c 	add.w	r3, r7, #12
 800717e:	4619      	mov	r1, r3
 8007180:	481b      	ldr	r0, [pc, #108]	; (80071f0 <shci_user_evt_proc+0x90>)
 8007182:	f000 fcf2 	bl	8007b6a <LST_remove_head>

    if (shciContext.UserEvtRx != NULL)
 8007186:	4b1c      	ldr	r3, [pc, #112]	; (80071f8 <shci_user_evt_proc+0x98>)
 8007188:	69db      	ldr	r3, [r3, #28]
 800718a:	2b00      	cmp	r3, #0
 800718c:	d00c      	beq.n	80071a8 <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 8007192:	2301      	movs	r3, #1
 8007194:	713b      	strb	r3, [r7, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 8007196:	4b18      	ldr	r3, [pc, #96]	; (80071f8 <shci_user_evt_proc+0x98>)
 8007198:	69db      	ldr	r3, [r3, #28]
 800719a:	1d3a      	adds	r2, r7, #4
 800719c:	4610      	mov	r0, r2
 800719e:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 80071a0:	793a      	ldrb	r2, [r7, #4]
 80071a2:	4b14      	ldr	r3, [pc, #80]	; (80071f4 <shci_user_evt_proc+0x94>)
 80071a4:	701a      	strb	r2, [r3, #0]
 80071a6:	e002      	b.n	80071ae <shci_user_evt_proc+0x4e>
    }
    else
    {
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 80071a8:	4b12      	ldr	r3, [pc, #72]	; (80071f4 <shci_user_evt_proc+0x94>)
 80071aa:	2201      	movs	r2, #1
 80071ac:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 80071ae:	4b11      	ldr	r3, [pc, #68]	; (80071f4 <shci_user_evt_proc+0x94>)
 80071b0:	781b      	ldrb	r3, [r3, #0]
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d004      	beq.n	80071c0 <shci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	4618      	mov	r0, r3
 80071ba:	f000 fa6d 	bl	8007698 <TL_MM_EvtDone>
 80071be:	e004      	b.n	80071ca <shci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	4619      	mov	r1, r3
 80071c4:	480a      	ldr	r0, [pc, #40]	; (80071f0 <shci_user_evt_proc+0x90>)
 80071c6:	f000 fc63 	bl	8007a90 <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 80071ca:	4809      	ldr	r0, [pc, #36]	; (80071f0 <shci_user_evt_proc+0x90>)
 80071cc:	f000 fc3e 	bl	8007a4c <LST_is_empty>
 80071d0:	4603      	mov	r3, r0
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d107      	bne.n	80071e6 <shci_user_evt_proc+0x86>
 80071d6:	4b07      	ldr	r3, [pc, #28]	; (80071f4 <shci_user_evt_proc+0x94>)
 80071d8:	781b      	ldrb	r3, [r3, #0]
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d003      	beq.n	80071e6 <shci_user_evt_proc+0x86>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 80071de:	4804      	ldr	r0, [pc, #16]	; (80071f0 <shci_user_evt_proc+0x90>)
 80071e0:	f7f9 fdc5 	bl	8000d6e <shci_notify_asynch_evt>
  }


  return;
 80071e4:	bf00      	nop
 80071e6:	bf00      	nop
}
 80071e8:	3710      	adds	r7, #16
 80071ea:	46bd      	mov	sp, r7
 80071ec:	bd80      	pop	{r7, pc}
 80071ee:	bf00      	nop
 80071f0:	20000168 	.word	0x20000168
 80071f4:	20000178 	.word	0x20000178
 80071f8:	20000258 	.word	0x20000258

080071fc <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 80071fc:	b580      	push	{r7, lr}
 80071fe:	b084      	sub	sp, #16
 8007200:	af00      	add	r7, sp, #0
 8007202:	60ba      	str	r2, [r7, #8]
 8007204:	607b      	str	r3, [r7, #4]
 8007206:	4603      	mov	r3, r0
 8007208:	81fb      	strh	r3, [r7, #14]
 800720a:	460b      	mov	r3, r1
 800720c:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 800720e:	2000      	movs	r0, #0
 8007210:	f000 f864 	bl	80072dc <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 8007214:	4b16      	ldr	r3, [pc, #88]	; (8007270 <shci_send+0x74>)
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	89fa      	ldrh	r2, [r7, #14]
 800721a:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 800721e:	4b14      	ldr	r3, [pc, #80]	; (8007270 <shci_send+0x74>)
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	7b7a      	ldrb	r2, [r7, #13]
 8007224:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 8007226:	4b12      	ldr	r3, [pc, #72]	; (8007270 <shci_send+0x74>)
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	330c      	adds	r3, #12
 800722c:	7b7a      	ldrb	r2, [r7, #13]
 800722e:	68b9      	ldr	r1, [r7, #8]
 8007230:	4618      	mov	r0, r3
 8007232:	f002 fa99 	bl	8009768 <memcpy>

  shciContext.io.Send(0,0);
 8007236:	4b0f      	ldr	r3, [pc, #60]	; (8007274 <shci_send+0x78>)
 8007238:	691b      	ldr	r3, [r3, #16]
 800723a:	2100      	movs	r1, #0
 800723c:	2000      	movs	r0, #0
 800723e:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 8007240:	f248 00e8 	movw	r0, #33000	; 0x80e8
 8007244:	f7f9 fdaa 	bl	8000d9c <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	f103 0008 	add.w	r0, r3, #8
 800724e:	4b08      	ldr	r3, [pc, #32]	; (8007270 <shci_send+0x74>)
 8007250:	6819      	ldr	r1, [r3, #0]
 8007252:	4b07      	ldr	r3, [pc, #28]	; (8007270 <shci_send+0x74>)
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	789b      	ldrb	r3, [r3, #2]
 8007258:	3303      	adds	r3, #3
 800725a:	461a      	mov	r2, r3
 800725c:	f002 fa84 	bl	8009768 <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 8007260:	2001      	movs	r0, #1
 8007262:	f000 f83b 	bl	80072dc <Cmd_SetStatus>

  return;
 8007266:	bf00      	nop
}
 8007268:	3710      	adds	r7, #16
 800726a:	46bd      	mov	sp, r7
 800726c:	bd80      	pop	{r7, pc}
 800726e:	bf00      	nop
 8007270:	20000174 	.word	0x20000174
 8007274:	20000258 	.word	0x20000258

08007278 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 8007278:	b580      	push	{r7, lr}
 800727a:	b086      	sub	sp, #24
 800727c:	af00      	add	r7, sp, #0
 800727e:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 8007280:	4a10      	ldr	r2, [pc, #64]	; (80072c4 <TlInit+0x4c>)
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 8007286:	4810      	ldr	r0, [pc, #64]	; (80072c8 <TlInit+0x50>)
 8007288:	f000 fbd0 	bl	8007a2c <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 800728c:	2001      	movs	r0, #1
 800728e:	f000 f825 	bl	80072dc <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 8007292:	4b0e      	ldr	r3, [pc, #56]	; (80072cc <TlInit+0x54>)
 8007294:	2201      	movs	r2, #1
 8007296:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 8007298:	4b0d      	ldr	r3, [pc, #52]	; (80072d0 <TlInit+0x58>)
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	2b00      	cmp	r3, #0
 800729e:	d00c      	beq.n	80072ba <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 80072a4:	4b0b      	ldr	r3, [pc, #44]	; (80072d4 <TlInit+0x5c>)
 80072a6:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 80072a8:	4b0b      	ldr	r3, [pc, #44]	; (80072d8 <TlInit+0x60>)
 80072aa:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 80072ac:	4b08      	ldr	r3, [pc, #32]	; (80072d0 <TlInit+0x58>)
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	f107 020c 	add.w	r2, r7, #12
 80072b4:	4610      	mov	r0, r2
 80072b6:	4798      	blx	r3
  }

  return;
 80072b8:	bf00      	nop
 80072ba:	bf00      	nop
}
 80072bc:	3718      	adds	r7, #24
 80072be:	46bd      	mov	sp, r7
 80072c0:	bd80      	pop	{r7, pc}
 80072c2:	bf00      	nop
 80072c4:	20000174 	.word	0x20000174
 80072c8:	20000168 	.word	0x20000168
 80072cc:	20000178 	.word	0x20000178
 80072d0:	20000258 	.word	0x20000258
 80072d4:	0800732d 	.word	0x0800732d
 80072d8:	08007345 	.word	0x08007345

080072dc <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 80072dc:	b580      	push	{r7, lr}
 80072de:	b082      	sub	sp, #8
 80072e0:	af00      	add	r7, sp, #0
 80072e2:	4603      	mov	r3, r0
 80072e4:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 80072e6:	79fb      	ldrb	r3, [r7, #7]
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d10b      	bne.n	8007304 <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 80072ec:	4b0d      	ldr	r3, [pc, #52]	; (8007324 <Cmd_SetStatus+0x48>)
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d003      	beq.n	80072fc <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 80072f4:	4b0b      	ldr	r3, [pc, #44]	; (8007324 <Cmd_SetStatus+0x48>)
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	2000      	movs	r0, #0
 80072fa:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 80072fc:	4b0a      	ldr	r3, [pc, #40]	; (8007328 <Cmd_SetStatus+0x4c>)
 80072fe:	2200      	movs	r2, #0
 8007300:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 8007302:	e00b      	b.n	800731c <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 8007304:	4b08      	ldr	r3, [pc, #32]	; (8007328 <Cmd_SetStatus+0x4c>)
 8007306:	2201      	movs	r2, #1
 8007308:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 800730a:	4b06      	ldr	r3, [pc, #24]	; (8007324 <Cmd_SetStatus+0x48>)
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	2b00      	cmp	r3, #0
 8007310:	d004      	beq.n	800731c <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 8007312:	4b04      	ldr	r3, [pc, #16]	; (8007324 <Cmd_SetStatus+0x48>)
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	2001      	movs	r0, #1
 8007318:	4798      	blx	r3
  return;
 800731a:	bf00      	nop
 800731c:	bf00      	nop
}
 800731e:	3708      	adds	r7, #8
 8007320:	46bd      	mov	sp, r7
 8007322:	bd80      	pop	{r7, pc}
 8007324:	20000278 	.word	0x20000278
 8007328:	20000170 	.word	0x20000170

0800732c <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 800732c:	b580      	push	{r7, lr}
 800732e:	b082      	sub	sp, #8
 8007330:	af00      	add	r7, sp, #0
 8007332:	6078      	str	r0, [r7, #4]
  (void)(shcievt);
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 8007334:	2000      	movs	r0, #0
 8007336:	f7f9 fd26 	bl	8000d86 <shci_cmd_resp_release>

  return;
 800733a:	bf00      	nop
}
 800733c:	3708      	adds	r7, #8
 800733e:	46bd      	mov	sp, r7
 8007340:	bd80      	pop	{r7, pc}
	...

08007344 <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 8007344:	b580      	push	{r7, lr}
 8007346:	b082      	sub	sp, #8
 8007348:	af00      	add	r7, sp, #0
 800734a:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 800734c:	6879      	ldr	r1, [r7, #4]
 800734e:	4805      	ldr	r0, [pc, #20]	; (8007364 <TlUserEvtReceived+0x20>)
 8007350:	f000 fbc4 	bl	8007adc <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 8007354:	4803      	ldr	r0, [pc, #12]	; (8007364 <TlUserEvtReceived+0x20>)
 8007356:	f7f9 fd0a 	bl	8000d6e <shci_notify_asynch_evt>

  return;
 800735a:	bf00      	nop
}
 800735c:	3708      	adds	r7, #8
 800735e:	46bd      	mov	sp, r7
 8007360:	bd80      	pop	{r7, pc}
 8007362:	bf00      	nop
 8007364:	20000168 	.word	0x20000168

08007368 <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 8007368:	b480      	push	{r7}
 800736a:	b083      	sub	sp, #12
 800736c:	af00      	add	r7, sp, #0
 800736e:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	4a05      	ldr	r2, [pc, #20]	; (8007388 <shci_register_io_bus+0x20>)
 8007374:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	4a04      	ldr	r2, [pc, #16]	; (800738c <shci_register_io_bus+0x24>)
 800737a:	611a      	str	r2, [r3, #16]

  return;
 800737c:	bf00      	nop
}
 800737e:	370c      	adds	r7, #12
 8007380:	46bd      	mov	sp, r7
 8007382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007386:	4770      	bx	lr
 8007388:	08007525 	.word	0x08007525
 800738c:	08007579 	.word	0x08007579

08007390 <TL_Enable>:

/******************************************************************************
 * GENERAL
 ******************************************************************************/
void TL_Enable( void )
{
 8007390:	b580      	push	{r7, lr}
 8007392:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 8007394:	f001 fe7c 	bl	8009090 <HW_IPCC_Enable>

  return;
 8007398:	bf00      	nop
}
 800739a:	bd80      	pop	{r7, pc}

0800739c <TL_Init>:


void TL_Init( void )
{
 800739c:	b580      	push	{r7, lr}
 800739e:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 80073a0:	4b10      	ldr	r3, [pc, #64]	; (80073e4 <TL_Init+0x48>)
 80073a2:	4a11      	ldr	r2, [pc, #68]	; (80073e8 <TL_Init+0x4c>)
 80073a4:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 80073a6:	4b0f      	ldr	r3, [pc, #60]	; (80073e4 <TL_Init+0x48>)
 80073a8:	4a10      	ldr	r2, [pc, #64]	; (80073ec <TL_Init+0x50>)
 80073aa:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 80073ac:	4b0d      	ldr	r3, [pc, #52]	; (80073e4 <TL_Init+0x48>)
 80073ae:	4a10      	ldr	r2, [pc, #64]	; (80073f0 <TL_Init+0x54>)
 80073b0:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 80073b2:	4b0c      	ldr	r3, [pc, #48]	; (80073e4 <TL_Init+0x48>)
 80073b4:	4a0f      	ldr	r2, [pc, #60]	; (80073f4 <TL_Init+0x58>)
 80073b6:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_ble_lld_table = &TL_BleLldTable;
 80073b8:	4b0a      	ldr	r3, [pc, #40]	; (80073e4 <TL_Init+0x48>)
 80073ba:	4a0f      	ldr	r2, [pc, #60]	; (80073f8 <TL_Init+0x5c>)
 80073bc:	625a      	str	r2, [r3, #36]	; 0x24
  TL_RefTable.p_sys_table = &TL_SysTable;
 80073be:	4b09      	ldr	r3, [pc, #36]	; (80073e4 <TL_Init+0x48>)
 80073c0:	4a0e      	ldr	r2, [pc, #56]	; (80073fc <TL_Init+0x60>)
 80073c2:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 80073c4:	4b07      	ldr	r3, [pc, #28]	; (80073e4 <TL_Init+0x48>)
 80073c6:	4a0e      	ldr	r2, [pc, #56]	; (8007400 <TL_Init+0x64>)
 80073c8:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 80073ca:	4b06      	ldr	r3, [pc, #24]	; (80073e4 <TL_Init+0x48>)
 80073cc:	4a0d      	ldr	r2, [pc, #52]	; (8007404 <TL_Init+0x68>)
 80073ce:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 80073d0:	4b04      	ldr	r3, [pc, #16]	; (80073e4 <TL_Init+0x48>)
 80073d2:	4a0d      	ldr	r2, [pc, #52]	; (8007408 <TL_Init+0x6c>)
 80073d4:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 80073d6:	4b03      	ldr	r3, [pc, #12]	; (80073e4 <TL_Init+0x48>)
 80073d8:	4a0c      	ldr	r2, [pc, #48]	; (800740c <TL_Init+0x70>)
 80073da:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 80073dc:	f001 fe6c 	bl	80090b8 <HW_IPCC_Init>

  return;
 80073e0:	bf00      	nop
}
 80073e2:	bd80      	pop	{r7, pc}
 80073e4:	20030000 	.word	0x20030000
 80073e8:	20030028 	.word	0x20030028
 80073ec:	20030048 	.word	0x20030048
 80073f0:	20030058 	.word	0x20030058
 80073f4:	20030064 	.word	0x20030064
 80073f8:	2003006c 	.word	0x2003006c
 80073fc:	20030074 	.word	0x20030074
 8007400:	2003007c 	.word	0x2003007c
 8007404:	20030098 	.word	0x20030098
 8007408:	2003009c 	.word	0x2003009c
 800740c:	200300a8 	.word	0x200300a8

08007410 <TL_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
int32_t TL_BLE_Init( void* pConf )
{
 8007410:	b580      	push	{r7, lr}
 8007412:	b084      	sub	sp, #16
 8007414:	af00      	add	r7, sp, #0
 8007416:	6078      	str	r0, [r7, #4]
  MB_BleTable_t  * p_bletable;

  TL_BLE_InitConf_t *pInitHciConf = (TL_BLE_InitConf_t *) pConf;
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	60fb      	str	r3, [r7, #12]

  LST_init_head (&EvtQueue);
 800741c:	4811      	ldr	r0, [pc, #68]	; (8007464 <TL_BLE_Init+0x54>)
 800741e:	f000 fb05 	bl	8007a2c <LST_init_head>

  p_bletable = TL_RefTable.p_ble_table;
 8007422:	4b11      	ldr	r3, [pc, #68]	; (8007468 <TL_BLE_Init+0x58>)
 8007424:	685b      	ldr	r3, [r3, #4]
 8007426:	60bb      	str	r3, [r7, #8]

  p_bletable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	689a      	ldr	r2, [r3, #8]
 800742c:	68bb      	ldr	r3, [r7, #8]
 800742e:	601a      	str	r2, [r3, #0]
  p_bletable->phci_acl_data_buffer = pInitHciConf->p_AclDataBuffer;
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	68da      	ldr	r2, [r3, #12]
 8007434:	68bb      	ldr	r3, [r7, #8]
 8007436:	60da      	str	r2, [r3, #12]
  p_bletable->pcs_buffer  = (uint8_t*)CsBuffer;
 8007438:	68bb      	ldr	r3, [r7, #8]
 800743a:	4a0c      	ldr	r2, [pc, #48]	; (800746c <TL_BLE_Init+0x5c>)
 800743c:	605a      	str	r2, [r3, #4]
  p_bletable->pevt_queue  = (uint8_t*)&EvtQueue;
 800743e:	68bb      	ldr	r3, [r7, #8]
 8007440:	4a08      	ldr	r2, [pc, #32]	; (8007464 <TL_BLE_Init+0x54>)
 8007442:	609a      	str	r2, [r3, #8]

  HW_IPCC_BLE_Init();
 8007444:	f001 fe4e 	bl	80090e4 <HW_IPCC_BLE_Init>

  BLE_IoBusEvtCallBackFunction = pInitHciConf->IoBusEvtCallBack;
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	4a08      	ldr	r2, [pc, #32]	; (8007470 <TL_BLE_Init+0x60>)
 800744e:	6013      	str	r3, [r2, #0]
  BLE_IoBusAclDataTxAck = pInitHciConf->IoBusAclDataTxAck;
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	685b      	ldr	r3, [r3, #4]
 8007454:	4a07      	ldr	r2, [pc, #28]	; (8007474 <TL_BLE_Init+0x64>)
 8007456:	6013      	str	r3, [r2, #0]

  return 0;
 8007458:	2300      	movs	r3, #0
}
 800745a:	4618      	mov	r0, r3
 800745c:	3710      	adds	r7, #16
 800745e:	46bd      	mov	sp, r7
 8007460:	bd80      	pop	{r7, pc}
 8007462:	bf00      	nop
 8007464:	200300c4 	.word	0x200300c4
 8007468:	20030000 	.word	0x20030000
 800746c:	20030a48 	.word	0x20030a48
 8007470:	20000284 	.word	0x20000284
 8007474:	20000288 	.word	0x20000288

08007478 <TL_BLE_SendCmd>:

int32_t TL_BLE_SendCmd( uint8_t* buffer, uint16_t size )
{
 8007478:	b580      	push	{r7, lr}
 800747a:	b082      	sub	sp, #8
 800747c:	af00      	add	r7, sp, #0
 800747e:	6078      	str	r0, [r7, #4]
 8007480:	460b      	mov	r3, r1
 8007482:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t*)(TL_RefTable.p_ble_table->pcmd_buffer))->cmdserial.type = TL_BLECMD_PKT_TYPE;
 8007484:	4b09      	ldr	r3, [pc, #36]	; (80074ac <TL_BLE_SendCmd+0x34>)
 8007486:	685b      	ldr	r3, [r3, #4]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	2201      	movs	r2, #1
 800748c:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_BLE_CMD, TL_RefTable.p_ble_table->pcmd_buffer);
 800748e:	4b07      	ldr	r3, [pc, #28]	; (80074ac <TL_BLE_SendCmd+0x34>)
 8007490:	685b      	ldr	r3, [r3, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	4619      	mov	r1, r3
 8007496:	2001      	movs	r0, #1
 8007498:	f000 f96c 	bl	8007774 <OutputDbgTrace>

  HW_IPCC_BLE_SendCmd();
 800749c:	f001 fe2c 	bl	80090f8 <HW_IPCC_BLE_SendCmd>

  return 0;
 80074a0:	2300      	movs	r3, #0
}
 80074a2:	4618      	mov	r0, r3
 80074a4:	3708      	adds	r7, #8
 80074a6:	46bd      	mov	sp, r7
 80074a8:	bd80      	pop	{r7, pc}
 80074aa:	bf00      	nop
 80074ac:	20030000 	.word	0x20030000

080074b0 <HW_IPCC_BLE_RxEvtNot>:

void HW_IPCC_BLE_RxEvtNot(void)
{
 80074b0:	b580      	push	{r7, lr}
 80074b2:	b082      	sub	sp, #8
 80074b4:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 80074b6:	e01c      	b.n	80074f2 <HW_IPCC_BLE_RxEvtNot+0x42>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 80074b8:	1d3b      	adds	r3, r7, #4
 80074ba:	4619      	mov	r1, r3
 80074bc:	4812      	ldr	r0, [pc, #72]	; (8007508 <HW_IPCC_BLE_RxEvtNot+0x58>)
 80074be:	f000 fb54 	bl	8007b6a <LST_remove_head>

    if ( ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	7a5b      	ldrb	r3, [r3, #9]
 80074c6:	2b0f      	cmp	r3, #15
 80074c8:	d003      	beq.n	80074d2 <HW_IPCC_BLE_RxEvtNot+0x22>
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	7a5b      	ldrb	r3, [r3, #9]
 80074ce:	2b0e      	cmp	r3, #14
 80074d0:	d105      	bne.n	80074de <HW_IPCC_BLE_RxEvtNot+0x2e>
    {
      OutputDbgTrace(TL_MB_BLE_CMD_RSP, (uint8_t*)phcievt);
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	4619      	mov	r1, r3
 80074d6:	2002      	movs	r0, #2
 80074d8:	f000 f94c 	bl	8007774 <OutputDbgTrace>
 80074dc:	e004      	b.n	80074e8 <HW_IPCC_BLE_RxEvtNot+0x38>
    }
    else
    {
      OutputDbgTrace(TL_MB_BLE_ASYNCH_EVT, (uint8_t*)phcievt);
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	4619      	mov	r1, r3
 80074e2:	2003      	movs	r0, #3
 80074e4:	f000 f946 	bl	8007774 <OutputDbgTrace>
    }

    BLE_IoBusEvtCallBackFunction(phcievt);
 80074e8:	4b08      	ldr	r3, [pc, #32]	; (800750c <HW_IPCC_BLE_RxEvtNot+0x5c>)
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	687a      	ldr	r2, [r7, #4]
 80074ee:	4610      	mov	r0, r2
 80074f0:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 80074f2:	4805      	ldr	r0, [pc, #20]	; (8007508 <HW_IPCC_BLE_RxEvtNot+0x58>)
 80074f4:	f000 faaa 	bl	8007a4c <LST_is_empty>
 80074f8:	4603      	mov	r3, r0
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d0dc      	beq.n	80074b8 <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 80074fe:	bf00      	nop
}
 8007500:	3708      	adds	r7, #8
 8007502:	46bd      	mov	sp, r7
 8007504:	bd80      	pop	{r7, pc}
 8007506:	bf00      	nop
 8007508:	200300c4 	.word	0x200300c4
 800750c:	20000284 	.word	0x20000284

08007510 <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 8007510:	b580      	push	{r7, lr}
 8007512:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 8007514:	4b02      	ldr	r3, [pc, #8]	; (8007520 <HW_IPCC_BLE_AclDataAckNot+0x10>)
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	4798      	blx	r3

  return;
 800751a:	bf00      	nop
}
 800751c:	bd80      	pop	{r7, pc}
 800751e:	bf00      	nop
 8007520:	20000288 	.word	0x20000288

08007524 <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 8007524:	b580      	push	{r7, lr}
 8007526:	b084      	sub	sp, #16
 8007528:	af00      	add	r7, sp, #0
 800752a:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 8007530:	480d      	ldr	r0, [pc, #52]	; (8007568 <TL_SYS_Init+0x44>)
 8007532:	f000 fa7b 	bl	8007a2c <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 8007536:	4b0d      	ldr	r3, [pc, #52]	; (800756c <TL_SYS_Init+0x48>)
 8007538:	68db      	ldr	r3, [r3, #12]
 800753a:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	689a      	ldr	r2, [r3, #8]
 8007540:	68bb      	ldr	r3, [r7, #8]
 8007542:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 8007544:	68bb      	ldr	r3, [r7, #8]
 8007546:	4a08      	ldr	r2, [pc, #32]	; (8007568 <TL_SYS_Init+0x44>)
 8007548:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 800754a:	f001 fdf7 	bl	800913c <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	4a07      	ldr	r2, [pc, #28]	; (8007570 <TL_SYS_Init+0x4c>)
 8007554:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	685b      	ldr	r3, [r3, #4]
 800755a:	4a06      	ldr	r2, [pc, #24]	; (8007574 <TL_SYS_Init+0x50>)
 800755c:	6013      	str	r3, [r2, #0]

  return 0;
 800755e:	2300      	movs	r3, #0
}
 8007560:	4618      	mov	r0, r3
 8007562:	3710      	adds	r7, #16
 8007564:	46bd      	mov	sp, r7
 8007566:	bd80      	pop	{r7, pc}
 8007568:	200300cc 	.word	0x200300cc
 800756c:	20030000 	.word	0x20030000
 8007570:	2000028c 	.word	0x2000028c
 8007574:	20000290 	.word	0x20000290

08007578 <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 8007578:	b580      	push	{r7, lr}
 800757a:	b082      	sub	sp, #8
 800757c:	af00      	add	r7, sp, #0
 800757e:	6078      	str	r0, [r7, #4]
 8007580:	460b      	mov	r3, r1
 8007582:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 8007584:	4b09      	ldr	r3, [pc, #36]	; (80075ac <TL_SYS_SendCmd+0x34>)
 8007586:	68db      	ldr	r3, [r3, #12]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	2210      	movs	r2, #16
 800758c:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_SYS_CMD, TL_RefTable.p_sys_table->pcmd_buffer);
 800758e:	4b07      	ldr	r3, [pc, #28]	; (80075ac <TL_SYS_SendCmd+0x34>)
 8007590:	68db      	ldr	r3, [r3, #12]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	4619      	mov	r1, r3
 8007596:	2004      	movs	r0, #4
 8007598:	f000 f8ec 	bl	8007774 <OutputDbgTrace>

  HW_IPCC_SYS_SendCmd();
 800759c:	f001 fdd8 	bl	8009150 <HW_IPCC_SYS_SendCmd>

  return 0;
 80075a0:	2300      	movs	r3, #0
}
 80075a2:	4618      	mov	r0, r3
 80075a4:	3708      	adds	r7, #8
 80075a6:	46bd      	mov	sp, r7
 80075a8:	bd80      	pop	{r7, pc}
 80075aa:	bf00      	nop
 80075ac:	20030000 	.word	0x20030000

080075b0 <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 80075b0:	b580      	push	{r7, lr}
 80075b2:	af00      	add	r7, sp, #0
  OutputDbgTrace(TL_MB_SYS_CMD_RSP, (uint8_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 80075b4:	4b07      	ldr	r3, [pc, #28]	; (80075d4 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 80075b6:	68db      	ldr	r3, [r3, #12]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	4619      	mov	r1, r3
 80075bc:	2005      	movs	r0, #5
 80075be:	f000 f8d9 	bl	8007774 <OutputDbgTrace>

  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 80075c2:	4b05      	ldr	r3, [pc, #20]	; (80075d8 <HW_IPCC_SYS_CmdEvtNot+0x28>)
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	4a03      	ldr	r2, [pc, #12]	; (80075d4 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 80075c8:	68d2      	ldr	r2, [r2, #12]
 80075ca:	6812      	ldr	r2, [r2, #0]
 80075cc:	4610      	mov	r0, r2
 80075ce:	4798      	blx	r3

  return;
 80075d0:	bf00      	nop
}
 80075d2:	bd80      	pop	{r7, pc}
 80075d4:	20030000 	.word	0x20030000
 80075d8:	2000028c 	.word	0x2000028c

080075dc <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 80075dc:	b580      	push	{r7, lr}
 80075de:	b082      	sub	sp, #8
 80075e0:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 80075e2:	e00e      	b.n	8007602 <HW_IPCC_SYS_EvtNot+0x26>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 80075e4:	1d3b      	adds	r3, r7, #4
 80075e6:	4619      	mov	r1, r3
 80075e8:	480b      	ldr	r0, [pc, #44]	; (8007618 <HW_IPCC_SYS_EvtNot+0x3c>)
 80075ea:	f000 fabe 	bl	8007b6a <LST_remove_head>

    OutputDbgTrace(TL_MB_SYS_ASYNCH_EVT, (uint8_t*)p_evt );
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	4619      	mov	r1, r3
 80075f2:	2006      	movs	r0, #6
 80075f4:	f000 f8be 	bl	8007774 <OutputDbgTrace>

    SYS_EVT_IoBusCallBackFunction( p_evt );
 80075f8:	4b08      	ldr	r3, [pc, #32]	; (800761c <HW_IPCC_SYS_EvtNot+0x40>)
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	687a      	ldr	r2, [r7, #4]
 80075fe:	4610      	mov	r0, r2
 8007600:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 8007602:	4805      	ldr	r0, [pc, #20]	; (8007618 <HW_IPCC_SYS_EvtNot+0x3c>)
 8007604:	f000 fa22 	bl	8007a4c <LST_is_empty>
 8007608:	4603      	mov	r3, r0
 800760a:	2b00      	cmp	r3, #0
 800760c:	d0ea      	beq.n	80075e4 <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 800760e:	bf00      	nop
}
 8007610:	3708      	adds	r7, #8
 8007612:	46bd      	mov	sp, r7
 8007614:	bd80      	pop	{r7, pc}
 8007616:	bf00      	nop
 8007618:	200300cc 	.word	0x200300cc
 800761c:	20000290 	.word	0x20000290

08007620 <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 8007620:	b580      	push	{r7, lr}
 8007622:	b082      	sub	sp, #8
 8007624:	af00      	add	r7, sp, #0
 8007626:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 8007628:	4817      	ldr	r0, [pc, #92]	; (8007688 <TL_MM_Init+0x68>)
 800762a:	f000 f9ff 	bl	8007a2c <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 800762e:	4817      	ldr	r0, [pc, #92]	; (800768c <TL_MM_Init+0x6c>)
 8007630:	f000 f9fc 	bl	8007a2c <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 8007634:	4b16      	ldr	r3, [pc, #88]	; (8007690 <TL_MM_Init+0x70>)
 8007636:	691b      	ldr	r3, [r3, #16]
 8007638:	4a16      	ldr	r2, [pc, #88]	; (8007694 <TL_MM_Init+0x74>)
 800763a:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 800763c:	4b15      	ldr	r3, [pc, #84]	; (8007694 <TL_MM_Init+0x74>)
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	687a      	ldr	r2, [r7, #4]
 8007642:	6892      	ldr	r2, [r2, #8]
 8007644:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 8007646:	4b13      	ldr	r3, [pc, #76]	; (8007694 <TL_MM_Init+0x74>)
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	687a      	ldr	r2, [r7, #4]
 800764c:	68d2      	ldr	r2, [r2, #12]
 800764e:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 8007650:	4b10      	ldr	r3, [pc, #64]	; (8007694 <TL_MM_Init+0x74>)
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	4a0c      	ldr	r2, [pc, #48]	; (8007688 <TL_MM_Init+0x68>)
 8007656:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 8007658:	4b0e      	ldr	r3, [pc, #56]	; (8007694 <TL_MM_Init+0x74>)
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	687a      	ldr	r2, [r7, #4]
 800765e:	6812      	ldr	r2, [r2, #0]
 8007660:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 8007662:	4b0c      	ldr	r3, [pc, #48]	; (8007694 <TL_MM_Init+0x74>)
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	687a      	ldr	r2, [r7, #4]
 8007668:	6852      	ldr	r2, [r2, #4]
 800766a:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 800766c:	4b09      	ldr	r3, [pc, #36]	; (8007694 <TL_MM_Init+0x74>)
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	687a      	ldr	r2, [r7, #4]
 8007672:	6912      	ldr	r2, [r2, #16]
 8007674:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 8007676:	4b07      	ldr	r3, [pc, #28]	; (8007694 <TL_MM_Init+0x74>)
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	687a      	ldr	r2, [r7, #4]
 800767c:	6952      	ldr	r2, [r2, #20]
 800767e:	619a      	str	r2, [r3, #24]

  return;
 8007680:	bf00      	nop
}
 8007682:	3708      	adds	r7, #8
 8007684:	46bd      	mov	sp, r7
 8007686:	bd80      	pop	{r7, pc}
 8007688:	200300b4 	.word	0x200300b4
 800768c:	2000027c 	.word	0x2000027c
 8007690:	20030000 	.word	0x20030000
 8007694:	20000294 	.word	0x20000294

08007698 <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 8007698:	b580      	push	{r7, lr}
 800769a:	b082      	sub	sp, #8
 800769c:	af00      	add	r7, sp, #0
 800769e:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 80076a0:	6879      	ldr	r1, [r7, #4]
 80076a2:	4807      	ldr	r0, [pc, #28]	; (80076c0 <TL_MM_EvtDone+0x28>)
 80076a4:	f000 fa1a 	bl	8007adc <LST_insert_tail>

  OutputDbgTrace(TL_MB_MM_RELEASE_BUFFER, (uint8_t*)phcievt);
 80076a8:	6879      	ldr	r1, [r7, #4]
 80076aa:	2000      	movs	r0, #0
 80076ac:	f000 f862 	bl	8007774 <OutputDbgTrace>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 80076b0:	4804      	ldr	r0, [pc, #16]	; (80076c4 <TL_MM_EvtDone+0x2c>)
 80076b2:	f001 fd73 	bl	800919c <HW_IPCC_MM_SendFreeBuf>

  return;
 80076b6:	bf00      	nop
}
 80076b8:	3708      	adds	r7, #8
 80076ba:	46bd      	mov	sp, r7
 80076bc:	bd80      	pop	{r7, pc}
 80076be:	bf00      	nop
 80076c0:	2000027c 	.word	0x2000027c
 80076c4:	080076c9 	.word	0x080076c9

080076c8 <SendFreeBuf>:

static void SendFreeBuf( void )
{
 80076c8:	b580      	push	{r7, lr}
 80076ca:	b082      	sub	sp, #8
 80076cc:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 80076ce:	e00c      	b.n	80076ea <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 80076d0:	1d3b      	adds	r3, r7, #4
 80076d2:	4619      	mov	r1, r3
 80076d4:	480a      	ldr	r0, [pc, #40]	; (8007700 <SendFreeBuf+0x38>)
 80076d6:	f000 fa48 	bl	8007b6a <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 80076da:	4b0a      	ldr	r3, [pc, #40]	; (8007704 <SendFreeBuf+0x3c>)
 80076dc:	691b      	ldr	r3, [r3, #16]
 80076de:	691b      	ldr	r3, [r3, #16]
 80076e0:	687a      	ldr	r2, [r7, #4]
 80076e2:	4611      	mov	r1, r2
 80076e4:	4618      	mov	r0, r3
 80076e6:	f000 f9f9 	bl	8007adc <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 80076ea:	4805      	ldr	r0, [pc, #20]	; (8007700 <SendFreeBuf+0x38>)
 80076ec:	f000 f9ae 	bl	8007a4c <LST_is_empty>
 80076f0:	4603      	mov	r3, r0
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d0ec      	beq.n	80076d0 <SendFreeBuf+0x8>
  }

  return;
 80076f6:	bf00      	nop
}
 80076f8:	3708      	adds	r7, #8
 80076fa:	46bd      	mov	sp, r7
 80076fc:	bd80      	pop	{r7, pc}
 80076fe:	bf00      	nop
 8007700:	2000027c 	.word	0x2000027c
 8007704:	20030000 	.word	0x20030000

08007708 <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 8007708:	b580      	push	{r7, lr}
 800770a:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 800770c:	4805      	ldr	r0, [pc, #20]	; (8007724 <TL_TRACES_Init+0x1c>)
 800770e:	f000 f98d 	bl	8007a2c <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 8007712:	4b05      	ldr	r3, [pc, #20]	; (8007728 <TL_TRACES_Init+0x20>)
 8007714:	695b      	ldr	r3, [r3, #20]
 8007716:	4a03      	ldr	r2, [pc, #12]	; (8007724 <TL_TRACES_Init+0x1c>)
 8007718:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 800771a:	f001 fd75 	bl	8009208 <HW_IPCC_TRACES_Init>

  return;
 800771e:	bf00      	nop
}
 8007720:	bd80      	pop	{r7, pc}
 8007722:	bf00      	nop
 8007724:	200300bc 	.word	0x200300bc
 8007728:	20030000 	.word	0x20030000

0800772c <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 800772c:	b580      	push	{r7, lr}
 800772e:	b082      	sub	sp, #8
 8007730:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 8007732:	e008      	b.n	8007746 <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 8007734:	1d3b      	adds	r3, r7, #4
 8007736:	4619      	mov	r1, r3
 8007738:	4808      	ldr	r0, [pc, #32]	; (800775c <HW_IPCC_TRACES_EvtNot+0x30>)
 800773a:	f000 fa16 	bl	8007b6a <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	4618      	mov	r0, r3
 8007742:	f000 f80d 	bl	8007760 <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 8007746:	4805      	ldr	r0, [pc, #20]	; (800775c <HW_IPCC_TRACES_EvtNot+0x30>)
 8007748:	f000 f980 	bl	8007a4c <LST_is_empty>
 800774c:	4603      	mov	r3, r0
 800774e:	2b00      	cmp	r3, #0
 8007750:	d0f0      	beq.n	8007734 <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 8007752:	bf00      	nop
}
 8007754:	3708      	adds	r7, #8
 8007756:	46bd      	mov	sp, r7
 8007758:	bd80      	pop	{r7, pc}
 800775a:	bf00      	nop
 800775c:	200300bc 	.word	0x200300bc

08007760 <TL_TRACES_EvtReceived>:

__WEAK void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt )
{
 8007760:	b480      	push	{r7}
 8007762:	b083      	sub	sp, #12
 8007764:	af00      	add	r7, sp, #0
 8007766:	6078      	str	r0, [r7, #4]
  (void)(hcievt);
}
 8007768:	bf00      	nop
 800776a:	370c      	adds	r7, #12
 800776c:	46bd      	mov	sp, r7
 800776e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007772:	4770      	bx	lr

08007774 <OutputDbgTrace>:

/******************************************************************************
 * DEBUG INFORMATION
 ******************************************************************************/
static void OutputDbgTrace(TL_MB_PacketType_t packet_type, uint8_t* buffer)
{
 8007774:	b480      	push	{r7}
 8007776:	b085      	sub	sp, #20
 8007778:	af00      	add	r7, sp, #0
 800777a:	4603      	mov	r3, r0
 800777c:	6039      	str	r1, [r7, #0]
 800777e:	71fb      	strb	r3, [r7, #7]
  TL_EvtPacket_t *p_evt_packet;
  TL_CmdPacket_t *p_cmd_packet;

  switch(packet_type)
 8007780:	79fb      	ldrb	r3, [r7, #7]
 8007782:	2b06      	cmp	r3, #6
 8007784:	d845      	bhi.n	8007812 <OutputDbgTrace+0x9e>
 8007786:	a201      	add	r2, pc, #4	; (adr r2, 800778c <OutputDbgTrace+0x18>)
 8007788:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800778c:	080077a9 	.word	0x080077a9
 8007790:	080077cd 	.word	0x080077cd
 8007794:	080077d3 	.word	0x080077d3
 8007798:	080077e7 	.word	0x080077e7
 800779c:	080077f3 	.word	0x080077f3
 80077a0:	080077f9 	.word	0x080077f9
 80077a4:	08007807 	.word	0x08007807
  {
    case TL_MB_MM_RELEASE_BUFFER:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 80077a8:	683b      	ldr	r3, [r7, #0]
 80077aa:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	7a5b      	ldrb	r3, [r3, #9]
 80077b0:	2bff      	cmp	r3, #255	; 0xff
 80077b2:	d005      	beq.n	80077c0 <OutputDbgTrace+0x4c>
 80077b4:	2bff      	cmp	r3, #255	; 0xff
 80077b6:	dc05      	bgt.n	80077c4 <OutputDbgTrace+0x50>
 80077b8:	2b0e      	cmp	r3, #14
 80077ba:	d005      	beq.n	80077c8 <OutputDbgTrace+0x54>
 80077bc:	2b0f      	cmp	r3, #15
          break;

        default:
          TL_MM_DBG_MSG("mm evt released: 0x%02X", p_evt_packet->evtserial.evt.evtcode);
          TL_MM_DBG_MSG(" buffer addr: 0x%08X", p_evt_packet);
          break;
 80077be:	e001      	b.n	80077c4 <OutputDbgTrace+0x50>
          break;
 80077c0:	bf00      	nop
 80077c2:	e027      	b.n	8007814 <OutputDbgTrace+0xa0>
          break;
 80077c4:	bf00      	nop
 80077c6:	e025      	b.n	8007814 <OutputDbgTrace+0xa0>
          break;
 80077c8:	bf00      	nop
      }

      TL_MM_DBG_MSG("\r\n");
      break;
 80077ca:	e023      	b.n	8007814 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 80077cc:	683b      	ldr	r3, [r7, #0]
 80077ce:	60bb      	str	r3, [r7, #8]
        TL_HCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 80077d0:	e020      	b.n	8007814 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 80077d2:	683b      	ldr	r3, [r7, #0]
 80077d4:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	7a5b      	ldrb	r3, [r3, #9]
 80077da:	2b0e      	cmp	r3, #14
 80077dc:	d001      	beq.n	80077e2 <OutputDbgTrace+0x6e>
 80077de:	2b0f      	cmp	r3, #15
          }
          break;

        default:
          TL_HCI_CMD_DBG_MSG("unknown ble rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 80077e0:	e000      	b.n	80077e4 <OutputDbgTrace+0x70>
          break;
 80077e2:	bf00      	nop
      }

      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 80077e4:	e016      	b.n	8007814 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 80077e6:	683b      	ldr	r3, [r7, #0]
 80077e8:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	7a5b      	ldrb	r3, [r3, #9]
 80077ee:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_HCI_EVT_DBG_MSG("\r\n");

      TL_HCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 80077f0:	e010      	b.n	8007814 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 80077f2:	683b      	ldr	r3, [r7, #0]
 80077f4:	60bb      	str	r3, [r7, #8]
        TL_SHCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 80077f6:	e00d      	b.n	8007814 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 80077f8:	683b      	ldr	r3, [r7, #0]
 80077fa:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	7a5b      	ldrb	r3, [r3, #9]
 8007800:	2b0e      	cmp	r3, #14
          }
          break;

        default:
          TL_SHCI_CMD_DBG_MSG("unknown sys rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 8007802:	bf00      	nop
      }

      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8007804:	e006      	b.n	8007814 <OutputDbgTrace+0xa0>

    case  TL_MB_SYS_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8007806:	683b      	ldr	r3, [r7, #0]
 8007808:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	7a5b      	ldrb	r3, [r3, #9]
 800780e:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_SHCI_EVT_DBG_MSG("\r\n");

      TL_SHCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8007810:	e000      	b.n	8007814 <OutputDbgTrace+0xa0>

    default:
      break;
 8007812:	bf00      	nop
  }

  return;
 8007814:	bf00      	nop
}
 8007816:	3714      	adds	r7, #20
 8007818:	46bd      	mov	sp, r7
 800781a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800781e:	4770      	bx	lr

08007820 <DbgTraceGetFileName>:
 * @param  *fullPath Fullpath string (path + filename)
 * @retval char* Pointer on filename string
 */

const char *DbgTraceGetFileName(const char *fullpath)
{
 8007820:	b580      	push	{r7, lr}
 8007822:	b084      	sub	sp, #16
 8007824:	af00      	add	r7, sp, #0
 8007826:	6078      	str	r0, [r7, #4]
  const char *ret = fullpath;
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	60fb      	str	r3, [r7, #12]

  if (strrchr(fullpath, '\\') != NULL)
 800782c:	215c      	movs	r1, #92	; 0x5c
 800782e:	6878      	ldr	r0, [r7, #4]
 8007830:	f002 f83e 	bl	80098b0 <strrchr>
 8007834:	4603      	mov	r3, r0
 8007836:	2b00      	cmp	r3, #0
 8007838:	d007      	beq.n	800784a <DbgTraceGetFileName+0x2a>
  {
    ret = strrchr(fullpath, '\\') + 1;
 800783a:	215c      	movs	r1, #92	; 0x5c
 800783c:	6878      	ldr	r0, [r7, #4]
 800783e:	f002 f837 	bl	80098b0 <strrchr>
 8007842:	4603      	mov	r3, r0
 8007844:	3301      	adds	r3, #1
 8007846:	60fb      	str	r3, [r7, #12]
 8007848:	e00d      	b.n	8007866 <DbgTraceGetFileName+0x46>
  }
  else if (strrchr(fullpath, '/') != NULL)
 800784a:	212f      	movs	r1, #47	; 0x2f
 800784c:	6878      	ldr	r0, [r7, #4]
 800784e:	f002 f82f 	bl	80098b0 <strrchr>
 8007852:	4603      	mov	r3, r0
 8007854:	2b00      	cmp	r3, #0
 8007856:	d006      	beq.n	8007866 <DbgTraceGetFileName+0x46>
  {
    ret = strrchr(fullpath, '/') + 1;
 8007858:	212f      	movs	r1, #47	; 0x2f
 800785a:	6878      	ldr	r0, [r7, #4]
 800785c:	f002 f828 	bl	80098b0 <strrchr>
 8007860:	4603      	mov	r3, r0
 8007862:	3301      	adds	r3, #1
 8007864:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8007866:	68fb      	ldr	r3, [r7, #12]
}
 8007868:	4618      	mov	r0, r3
 800786a:	3710      	adds	r7, #16
 800786c:	46bd      	mov	sp, r7
 800786e:	bd80      	pop	{r7, pc}

08007870 <DbgTrace_TxCpltCallback>:
 * @note   Indicate the end of the transmission of a DBG_TRACE trace buffer to DBG_TRACE USART. If queue
 *         contains new trace data to transmit, start a new transmission.
 * @retval None
 */
static void DbgTrace_TxCpltCallback(void)
{
 8007870:	b580      	push	{r7, lr}
 8007872:	b086      	sub	sp, #24
 8007874:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007876:	f3ef 8310 	mrs	r3, PRIMASK
 800787a:	60fb      	str	r3, [r7, #12]
  return(result);
 800787c:	68fb      	ldr	r3, [r7, #12]
#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
  uint8_t* buf;
  uint16_t bufSize;

  BACKUP_PRIMASK();
 800787e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8007880:	b672      	cpsid	i
}
 8007882:	bf00      	nop

  DISABLE_IRQ();			/**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  /* Remove element just sent to UART */
  CircularQueue_Remove(&MsgDbgTraceQueue,&bufSize);
 8007884:	1cbb      	adds	r3, r7, #2
 8007886:	4619      	mov	r1, r3
 8007888:	4812      	ldr	r0, [pc, #72]	; (80078d4 <DbgTrace_TxCpltCallback+0x64>)
 800788a:	f000 fbe6 	bl	800805a <CircularQueue_Remove>

  /* Sense if new data to be sent */
  buf=CircularQueue_Sense(&MsgDbgTraceQueue,&bufSize);
 800788e:	1cbb      	adds	r3, r7, #2
 8007890:	4619      	mov	r1, r3
 8007892:	4810      	ldr	r0, [pc, #64]	; (80078d4 <DbgTrace_TxCpltCallback+0x64>)
 8007894:	f000 fcd2 	bl	800823c <CircularQueue_Sense>
 8007898:	6138      	str	r0, [r7, #16]


  if ( buf != NULL) 
 800789a:	693b      	ldr	r3, [r7, #16]
 800789c:	2b00      	cmp	r3, #0
 800789e:	d00c      	beq.n	80078ba <DbgTrace_TxCpltCallback+0x4a>
 80078a0:	697b      	ldr	r3, [r7, #20]
 80078a2:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80078a4:	68bb      	ldr	r3, [r7, #8]
 80078a6:	f383 8810 	msr	PRIMASK, r3
}
 80078aa:	bf00      	nop
  {
    RESTORE_PRIMASK();
    DbgOutputTraces((uint8_t*)buf, bufSize, DbgTrace_TxCpltCallback);
 80078ac:	887b      	ldrh	r3, [r7, #2]
 80078ae:	4a0a      	ldr	r2, [pc, #40]	; (80078d8 <DbgTrace_TxCpltCallback+0x68>)
 80078b0:	4619      	mov	r1, r3
 80078b2:	6938      	ldr	r0, [r7, #16]
 80078b4:	f7f8 ff61 	bl	800077a <DbgOutputTraces>

  DbgTracePeripheralReady = SET;

  RESTORE_PRIMASK();
#endif
}
 80078b8:	e008      	b.n	80078cc <DbgTrace_TxCpltCallback+0x5c>
    DbgTracePeripheralReady = SET;
 80078ba:	4b08      	ldr	r3, [pc, #32]	; (80078dc <DbgTrace_TxCpltCallback+0x6c>)
 80078bc:	2201      	movs	r2, #1
 80078be:	701a      	strb	r2, [r3, #0]
 80078c0:	697b      	ldr	r3, [r7, #20]
 80078c2:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	f383 8810 	msr	PRIMASK, r3
}
 80078ca:	bf00      	nop
}
 80078cc:	bf00      	nop
 80078ce:	3718      	adds	r7, #24
 80078d0:	46bd      	mov	sp, r7
 80078d2:	bd80      	pop	{r7, pc}
 80078d4:	20000298 	.word	0x20000298
 80078d8:	08007871 	.word	0x08007871
 80078dc:	2000000d 	.word	0x2000000d

080078e0 <DbgTraceInit>:
#endif

void DbgTraceInit( void )
{
 80078e0:	b580      	push	{r7, lr}
 80078e2:	b082      	sub	sp, #8
 80078e4:	af02      	add	r7, sp, #8
#if (( CFG_DEBUG_TRACE_FULL != 0 ) || ( CFG_DEBUG_TRACE_LIGHT != 0 ))
  DbgOutputInit();
 80078e6:	f7f8 ff42 	bl	800076e <DbgOutputInit>
#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
  CircularQueue_Init(&MsgDbgTraceQueue, MsgDbgTraceQueueBuff, DBG_TRACE_MSG_QUEUE_SIZE, 0, CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG);
 80078ea:	2302      	movs	r3, #2
 80078ec:	9300      	str	r3, [sp, #0]
 80078ee:	2300      	movs	r3, #0
 80078f0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80078f4:	4903      	ldr	r1, [pc, #12]	; (8007904 <DbgTraceInit+0x24>)
 80078f6:	4804      	ldr	r0, [pc, #16]	; (8007908 <DbgTraceInit+0x28>)
 80078f8:	f000 f956 	bl	8007ba8 <CircularQueue_Init>
#endif 
#endif
  return;
 80078fc:	bf00      	nop
}
 80078fe:	46bd      	mov	sp, r7
 8007900:	bd80      	pop	{r7, pc}
 8007902:	bf00      	nop
 8007904:	200002b8 	.word	0x200002b8
 8007908:	20000298 	.word	0x20000298

0800790c <_write>:
 * @param	bufsize buffer size
 * @param	...: arguments to be formatted in format string
 * @retval none
 */
size_t _write(int handle, const unsigned char * buf, size_t bufSize)
{
 800790c:	b580      	push	{r7, lr}
 800790e:	b084      	sub	sp, #16
 8007910:	af00      	add	r7, sp, #0
 8007912:	60f8      	str	r0, [r7, #12]
 8007914:	60b9      	str	r1, [r7, #8]
 8007916:	607a      	str	r2, [r7, #4]
  return ( DbgTraceWrite(handle, buf, bufSize) );
 8007918:	687a      	ldr	r2, [r7, #4]
 800791a:	68b9      	ldr	r1, [r7, #8]
 800791c:	68f8      	ldr	r0, [r7, #12]
 800791e:	f000 f805 	bl	800792c <DbgTraceWrite>
 8007922:	4603      	mov	r3, r0
}
 8007924:	4618      	mov	r0, r3
 8007926:	3710      	adds	r7, #16
 8007928:	46bd      	mov	sp, r7
 800792a:	bd80      	pop	{r7, pc}

0800792c <DbgTraceWrite>:
 * @param buf buffer to write
 * @param bufsize buffer size
 * @retval Number of elements written
 */
size_t DbgTraceWrite(int handle, const unsigned char * buf, size_t bufSize)
{
 800792c:	b580      	push	{r7, lr}
 800792e:	b08a      	sub	sp, #40	; 0x28
 8007930:	af00      	add	r7, sp, #0
 8007932:	60f8      	str	r0, [r7, #12]
 8007934:	60b9      	str	r1, [r7, #8]
 8007936:	607a      	str	r2, [r7, #4]
  size_t chars_written = 0;
 8007938:	2300      	movs	r3, #0
 800793a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800793c:	f3ef 8310 	mrs	r3, PRIMASK
 8007940:	61bb      	str	r3, [r7, #24]
  return(result);
 8007942:	69bb      	ldr	r3, [r7, #24]
  uint8_t* buffer;

  BACKUP_PRIMASK();
 8007944:	623b      	str	r3, [r7, #32]

  /* Ignore flushes */
  if ( handle == -1 )
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	f1b3 3fff 	cmp.w	r3, #4294967295
 800794c:	d102      	bne.n	8007954 <DbgTraceWrite+0x28>
  {
    chars_written = ( size_t ) 0;
 800794e:	2300      	movs	r3, #0
 8007950:	627b      	str	r3, [r7, #36]	; 0x24
 8007952:	e037      	b.n	80079c4 <DbgTraceWrite+0x98>
  }
  /* Only allow stdout/stderr output */
  else if ( ( handle != 1 ) && ( handle != 2 ) )
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	2b01      	cmp	r3, #1
 8007958:	d006      	beq.n	8007968 <DbgTraceWrite+0x3c>
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	2b02      	cmp	r3, #2
 800795e:	d003      	beq.n	8007968 <DbgTraceWrite+0x3c>
  {
    chars_written = ( size_t ) - 1;
 8007960:	f04f 33ff 	mov.w	r3, #4294967295
 8007964:	627b      	str	r3, [r7, #36]	; 0x24
 8007966:	e02d      	b.n	80079c4 <DbgTraceWrite+0x98>
  }
  /* Parameters OK, call the low-level character output routine */
  else if (bufSize != 0)
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	2b00      	cmp	r3, #0
 800796c:	d02a      	beq.n	80079c4 <DbgTraceWrite+0x98>
  {
    chars_written = bufSize;
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 8007972:	b672      	cpsid	i
}
 8007974:	bf00      	nop
    /* If queue emepty and TX free, send directly */
    /* CS Start */

#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
    DISABLE_IRQ();      /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
    buffer=CircularQueue_Add(&MsgDbgTraceQueue,(uint8_t*)buf, bufSize,1);
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	b29a      	uxth	r2, r3
 800797a:	2301      	movs	r3, #1
 800797c:	68b9      	ldr	r1, [r7, #8]
 800797e:	4814      	ldr	r0, [pc, #80]	; (80079d0 <DbgTraceWrite+0xa4>)
 8007980:	f000 f944 	bl	8007c0c <CircularQueue_Add>
 8007984:	61f8      	str	r0, [r7, #28]
    if (buffer && DbgTracePeripheralReady)
 8007986:	69fb      	ldr	r3, [r7, #28]
 8007988:	2b00      	cmp	r3, #0
 800798a:	d015      	beq.n	80079b8 <DbgTraceWrite+0x8c>
 800798c:	4b11      	ldr	r3, [pc, #68]	; (80079d4 <DbgTraceWrite+0xa8>)
 800798e:	781b      	ldrb	r3, [r3, #0]
 8007990:	b2db      	uxtb	r3, r3
 8007992:	2b00      	cmp	r3, #0
 8007994:	d010      	beq.n	80079b8 <DbgTraceWrite+0x8c>
    {
      DbgTracePeripheralReady = RESET;
 8007996:	4b0f      	ldr	r3, [pc, #60]	; (80079d4 <DbgTraceWrite+0xa8>)
 8007998:	2200      	movs	r2, #0
 800799a:	701a      	strb	r2, [r3, #0]
 800799c:	6a3b      	ldr	r3, [r7, #32]
 800799e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80079a0:	697b      	ldr	r3, [r7, #20]
 80079a2:	f383 8810 	msr	PRIMASK, r3
}
 80079a6:	bf00      	nop
      RESTORE_PRIMASK();
      DbgOutputTraces((uint8_t*)buffer, bufSize, DbgTrace_TxCpltCallback);
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	b29b      	uxth	r3, r3
 80079ac:	4a0a      	ldr	r2, [pc, #40]	; (80079d8 <DbgTraceWrite+0xac>)
 80079ae:	4619      	mov	r1, r3
 80079b0:	69f8      	ldr	r0, [r7, #28]
 80079b2:	f7f8 fee2 	bl	800077a <DbgOutputTraces>
 80079b6:	e005      	b.n	80079c4 <DbgTraceWrite+0x98>
 80079b8:	6a3b      	ldr	r3, [r7, #32]
 80079ba:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80079bc:	693b      	ldr	r3, [r7, #16]
 80079be:	f383 8810 	msr	PRIMASK, r3
}
 80079c2:	bf00      	nop
    DbgOutputTraces((uint8_t*)buf, bufSize, DbgTrace_TxCpltCallback);
    while (!DbgTracePeripheralReady);
#endif
    /* CS END */
  }
  return ( chars_written );
 80079c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80079c6:	4618      	mov	r0, r3
 80079c8:	3728      	adds	r7, #40	; 0x28
 80079ca:	46bd      	mov	sp, r7
 80079cc:	bd80      	pop	{r7, pc}
 80079ce:	bf00      	nop
 80079d0:	20000298 	.word	0x20000298
 80079d4:	2000000d 	.word	0x2000000d
 80079d8:	08007871 	.word	0x08007871

080079dc <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 80079dc:	b480      	push	{r7}
 80079de:	b085      	sub	sp, #20
 80079e0:	af00      	add	r7, sp, #0
 80079e2:	4603      	mov	r3, r0
 80079e4:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 80079e6:	4b0f      	ldr	r3, [pc, #60]	; (8007a24 <OTP_Read+0x48>)
 80079e8:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 80079ea:	e002      	b.n	80079f2 <OTP_Read+0x16>
  {
    p_id -= 8 ;
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	3b08      	subs	r3, #8
 80079f0:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	3307      	adds	r3, #7
 80079f6:	781b      	ldrb	r3, [r3, #0]
 80079f8:	79fa      	ldrb	r2, [r7, #7]
 80079fa:	429a      	cmp	r2, r3
 80079fc:	d003      	beq.n	8007a06 <OTP_Read+0x2a>
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	4a09      	ldr	r2, [pc, #36]	; (8007a28 <OTP_Read+0x4c>)
 8007a02:	4293      	cmp	r3, r2
 8007a04:	d1f2      	bne.n	80079ec <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	3307      	adds	r3, #7
 8007a0a:	781b      	ldrb	r3, [r3, #0]
 8007a0c:	79fa      	ldrb	r2, [r7, #7]
 8007a0e:	429a      	cmp	r2, r3
 8007a10:	d001      	beq.n	8007a16 <OTP_Read+0x3a>
  {
    p_id = 0 ;
 8007a12:	2300      	movs	r3, #0
 8007a14:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 8007a16:	68fb      	ldr	r3, [r7, #12]
}
 8007a18:	4618      	mov	r0, r3
 8007a1a:	3714      	adds	r7, #20
 8007a1c:	46bd      	mov	sp, r7
 8007a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a22:	4770      	bx	lr
 8007a24:	1fff73f8 	.word	0x1fff73f8
 8007a28:	1fff7000 	.word	0x1fff7000

08007a2c <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 8007a2c:	b480      	push	{r7}
 8007a2e:	b083      	sub	sp, #12
 8007a30:	af00      	add	r7, sp, #0
 8007a32:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	687a      	ldr	r2, [r7, #4]
 8007a38:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	687a      	ldr	r2, [r7, #4]
 8007a3e:	605a      	str	r2, [r3, #4]
}
 8007a40:	bf00      	nop
 8007a42:	370c      	adds	r7, #12
 8007a44:	46bd      	mov	sp, r7
 8007a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a4a:	4770      	bx	lr

08007a4c <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 8007a4c:	b480      	push	{r7}
 8007a4e:	b087      	sub	sp, #28
 8007a50:	af00      	add	r7, sp, #0
 8007a52:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007a54:	f3ef 8310 	mrs	r3, PRIMASK
 8007a58:	60fb      	str	r3, [r7, #12]
  return(result);
 8007a5a:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8007a5c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8007a5e:	b672      	cpsid	i
}
 8007a60:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	687a      	ldr	r2, [r7, #4]
 8007a68:	429a      	cmp	r2, r3
 8007a6a:	d102      	bne.n	8007a72 <LST_is_empty+0x26>
  {
    return_value = TRUE;
 8007a6c:	2301      	movs	r3, #1
 8007a6e:	75fb      	strb	r3, [r7, #23]
 8007a70:	e001      	b.n	8007a76 <LST_is_empty+0x2a>
  }
  else
  {
    return_value = FALSE;
 8007a72:	2300      	movs	r3, #0
 8007a74:	75fb      	strb	r3, [r7, #23]
 8007a76:	693b      	ldr	r3, [r7, #16]
 8007a78:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007a7a:	68bb      	ldr	r3, [r7, #8]
 8007a7c:	f383 8810 	msr	PRIMASK, r3
}
 8007a80:	bf00      	nop
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 8007a82:	7dfb      	ldrb	r3, [r7, #23]
}
 8007a84:	4618      	mov	r0, r3
 8007a86:	371c      	adds	r7, #28
 8007a88:	46bd      	mov	sp, r7
 8007a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a8e:	4770      	bx	lr

08007a90 <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 8007a90:	b480      	push	{r7}
 8007a92:	b087      	sub	sp, #28
 8007a94:	af00      	add	r7, sp, #0
 8007a96:	6078      	str	r0, [r7, #4]
 8007a98:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007a9a:	f3ef 8310 	mrs	r3, PRIMASK
 8007a9e:	60fb      	str	r3, [r7, #12]
  return(result);
 8007aa0:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8007aa2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8007aa4:	b672      	cpsid	i
}
 8007aa6:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681a      	ldr	r2, [r3, #0]
 8007aac:	683b      	ldr	r3, [r7, #0]
 8007aae:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 8007ab0:	683b      	ldr	r3, [r7, #0]
 8007ab2:	687a      	ldr	r2, [r7, #4]
 8007ab4:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	683a      	ldr	r2, [r7, #0]
 8007aba:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 8007abc:	683b      	ldr	r3, [r7, #0]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	683a      	ldr	r2, [r7, #0]
 8007ac2:	605a      	str	r2, [r3, #4]
 8007ac4:	697b      	ldr	r3, [r7, #20]
 8007ac6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007ac8:	693b      	ldr	r3, [r7, #16]
 8007aca:	f383 8810 	msr	PRIMASK, r3
}
 8007ace:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8007ad0:	bf00      	nop
 8007ad2:	371c      	adds	r7, #28
 8007ad4:	46bd      	mov	sp, r7
 8007ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ada:	4770      	bx	lr

08007adc <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 8007adc:	b480      	push	{r7}
 8007ade:	b087      	sub	sp, #28
 8007ae0:	af00      	add	r7, sp, #0
 8007ae2:	6078      	str	r0, [r7, #4]
 8007ae4:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007ae6:	f3ef 8310 	mrs	r3, PRIMASK
 8007aea:	60fb      	str	r3, [r7, #12]
  return(result);
 8007aec:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8007aee:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8007af0:	b672      	cpsid	i
}
 8007af2:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 8007af4:	683b      	ldr	r3, [r7, #0]
 8007af6:	687a      	ldr	r2, [r7, #4]
 8007af8:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	685a      	ldr	r2, [r3, #4]
 8007afe:	683b      	ldr	r3, [r7, #0]
 8007b00:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	683a      	ldr	r2, [r7, #0]
 8007b06:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 8007b08:	683b      	ldr	r3, [r7, #0]
 8007b0a:	685b      	ldr	r3, [r3, #4]
 8007b0c:	683a      	ldr	r2, [r7, #0]
 8007b0e:	601a      	str	r2, [r3, #0]
 8007b10:	697b      	ldr	r3, [r7, #20]
 8007b12:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007b14:	693b      	ldr	r3, [r7, #16]
 8007b16:	f383 8810 	msr	PRIMASK, r3
}
 8007b1a:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8007b1c:	bf00      	nop
 8007b1e:	371c      	adds	r7, #28
 8007b20:	46bd      	mov	sp, r7
 8007b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b26:	4770      	bx	lr

08007b28 <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 8007b28:	b480      	push	{r7}
 8007b2a:	b087      	sub	sp, #28
 8007b2c:	af00      	add	r7, sp, #0
 8007b2e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007b30:	f3ef 8310 	mrs	r3, PRIMASK
 8007b34:	60fb      	str	r3, [r7, #12]
  return(result);
 8007b36:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8007b38:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8007b3a:	b672      	cpsid	i
}
 8007b3c:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	685b      	ldr	r3, [r3, #4]
 8007b42:	687a      	ldr	r2, [r7, #4]
 8007b44:	6812      	ldr	r2, [r2, #0]
 8007b46:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	687a      	ldr	r2, [r7, #4]
 8007b4e:	6852      	ldr	r2, [r2, #4]
 8007b50:	605a      	str	r2, [r3, #4]
 8007b52:	697b      	ldr	r3, [r7, #20]
 8007b54:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007b56:	693b      	ldr	r3, [r7, #16]
 8007b58:	f383 8810 	msr	PRIMASK, r3
}
 8007b5c:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8007b5e:	bf00      	nop
 8007b60:	371c      	adds	r7, #28
 8007b62:	46bd      	mov	sp, r7
 8007b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b68:	4770      	bx	lr

08007b6a <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 8007b6a:	b580      	push	{r7, lr}
 8007b6c:	b086      	sub	sp, #24
 8007b6e:	af00      	add	r7, sp, #0
 8007b70:	6078      	str	r0, [r7, #4]
 8007b72:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007b74:	f3ef 8310 	mrs	r3, PRIMASK
 8007b78:	60fb      	str	r3, [r7, #12]
  return(result);
 8007b7a:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8007b7c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8007b7e:	b672      	cpsid	i
}
 8007b80:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	681a      	ldr	r2, [r3, #0]
 8007b86:	683b      	ldr	r3, [r7, #0]
 8007b88:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	4618      	mov	r0, r3
 8007b90:	f7ff ffca 	bl	8007b28 <LST_remove_node>
 8007b94:	697b      	ldr	r3, [r7, #20]
 8007b96:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007b98:	693b      	ldr	r3, [r7, #16]
 8007b9a:	f383 8810 	msr	PRIMASK, r3
}
 8007b9e:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8007ba0:	bf00      	nop
 8007ba2:	3718      	adds	r7, #24
 8007ba4:	46bd      	mov	sp, r7
 8007ba6:	bd80      	pop	{r7, pc}

08007ba8 <CircularQueue_Init>:
  * @param  queueSize:  Size of Queue Buffer
  * @param  elementSize: Size of an element in the queue. if =0, the queue will manage variable sizze elements
  * @retval   always 0
  */
int CircularQueue_Init(queue_t *q, uint8_t* queueBuffer, uint32_t queueSize, uint16_t elementSize, uint8_t optionFlags)
{
 8007ba8:	b480      	push	{r7}
 8007baa:	b085      	sub	sp, #20
 8007bac:	af00      	add	r7, sp, #0
 8007bae:	60f8      	str	r0, [r7, #12]
 8007bb0:	60b9      	str	r1, [r7, #8]
 8007bb2:	607a      	str	r2, [r7, #4]
 8007bb4:	807b      	strh	r3, [r7, #2]
  q->qBuff = queueBuffer;
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	68ba      	ldr	r2, [r7, #8]
 8007bba:	601a      	str	r2, [r3, #0]
  q->first = 0;
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	2200      	movs	r2, #0
 8007bc0:	60da      	str	r2, [r3, #12]
  q->last = 0; /* queueSize-1; */
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	2200      	movs	r2, #0
 8007bc6:	611a      	str	r2, [r3, #16]
  q->byteCount = 0;
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	2200      	movs	r2, #0
 8007bcc:	615a      	str	r2, [r3, #20]
  q->elementCount = 0;
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	2200      	movs	r2, #0
 8007bd2:	619a      	str	r2, [r3, #24]
  q->queueMaxSize = queueSize;
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	687a      	ldr	r2, [r7, #4]
 8007bd8:	605a      	str	r2, [r3, #4]
  q->elementSize = elementSize;
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	887a      	ldrh	r2, [r7, #2]
 8007bde:	811a      	strh	r2, [r3, #8]
  q->optionFlags = optionFlags;
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	7e3a      	ldrb	r2, [r7, #24]
 8007be4:	771a      	strb	r2, [r3, #28]

   if ((optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG) && q-> elementSize)
 8007be6:	7e3b      	ldrb	r3, [r7, #24]
 8007be8:	f003 0302 	and.w	r3, r3, #2
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d006      	beq.n	8007bfe <CircularQueue_Init+0x56>
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	891b      	ldrh	r3, [r3, #8]
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d002      	beq.n	8007bfe <CircularQueue_Init+0x56>
   {
    /* can not deal with splitting at the end of buffer with fixed size element */
    return -1;
 8007bf8:	f04f 33ff 	mov.w	r3, #4294967295
 8007bfc:	e000      	b.n	8007c00 <CircularQueue_Init+0x58>
  }
  return 0;
 8007bfe:	2300      	movs	r3, #0
}
 8007c00:	4618      	mov	r0, r3
 8007c02:	3714      	adds	r7, #20
 8007c04:	46bd      	mov	sp, r7
 8007c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c0a:	4770      	bx	lr

08007c0c <CircularQueue_Add>:
  * @param  elementSize:  Size of element to be added to the queue. Only used if the queue manage variable size elements
  * @param  nbElements:  number of elements in the in buffer pointed by x
  * @retval  pointer on last element just added to the queue, NULL if the element to be added do not fit in the queue (too big)
  */
uint8_t* CircularQueue_Add(queue_t *q, uint8_t* x, uint16_t elementSize, uint32_t nbElements)
{
 8007c0c:	b580      	push	{r7, lr}
 8007c0e:	b08e      	sub	sp, #56	; 0x38
 8007c10:	af00      	add	r7, sp, #0
 8007c12:	60f8      	str	r0, [r7, #12]
 8007c14:	60b9      	str	r1, [r7, #8]
 8007c16:	603b      	str	r3, [r7, #0]
 8007c18:	4613      	mov	r3, r2
 8007c1a:	80fb      	strh	r3, [r7, #6]

  uint8_t* ptr = NULL;                      /* fct return ptr to the element freshly added, if no room fct return NULL */
 8007c1c:	2300      	movs	r3, #0
 8007c1e:	623b      	str	r3, [r7, #32]
  uint16_t curElementSize = 0;              /* the size of the element currently  stored at q->last position */
 8007c20:	2300      	movs	r3, #0
 8007c22:	86fb      	strh	r3, [r7, #54]	; 0x36
  uint8_t  elemSizeStorageRoom  = 0 ;       /* Indicate the header (which contain only size) of element in case of varaibale size elemenet (q->elementsize == 0) */
 8007c24:	2300      	movs	r3, #0
 8007c26:	77fb      	strb	r3, [r7, #31]
  uint32_t curBuffPosition;                  /* the current position in the queue buffer */
  uint32_t i;                               /* loop counter */
  uint32_t NbBytesToCopy = 0, NbCopiedBytes = 0 ; /* Indicators for copying bytes in queue */
 8007c28:	2300      	movs	r3, #0
 8007c2a:	62bb      	str	r3, [r7, #40]	; 0x28
 8007c2c:	2300      	movs	r3, #0
 8007c2e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t eob_free_size;                         /* Eof End of Quque Buffer Free Size */
  uint8_t  wrap_will_occur = 0;                   /* indicate if a wrap around will occurs */
 8007c30:	2300      	movs	r3, #0
 8007c32:	77bb      	strb	r3, [r7, #30]
  uint8_t  wrapped_element_eob_size;              /* In case of Wrap around, indicat size of parta of elemenet that fit at thened of the queuue  buffer */
  uint16_t overhead = 0;                          /* In case of CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG or CIRCULAR_QUEUE_NO_WRAP_FLAG options, 
 8007c34:	2300      	movs	r3, #0
 8007c36:	83bb      	strh	r3, [r7, #28]
                                                     indcate the size overhead that will be generated by adding the element with wrap management (split or no wrap ) */ 
  
  
  elemSizeStorageRoom  = (q->elementSize == 0) ? 2 : 0;
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	891b      	ldrh	r3, [r3, #8]
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d101      	bne.n	8007c44 <CircularQueue_Add+0x38>
 8007c40:	2302      	movs	r3, #2
 8007c42:	e000      	b.n	8007c46 <CircularQueue_Add+0x3a>
 8007c44:	2300      	movs	r3, #0
 8007c46:	77fb      	strb	r3, [r7, #31]
  /* retrieve the size of last element sored: the value stored at the beginning of the queue element if element size is variable otherwise take it from fixed element Size member */
  if (q->byteCount)
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	695b      	ldr	r3, [r3, #20]
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d02a      	beq.n	8007ca6 <CircularQueue_Add+0x9a>
  {
    curElementSize = (q->elementSize == 0) ? q->qBuff[q->last] + ((q->qBuff[MOD((q->last+1), q->queueMaxSize)])<<8) + 2 : q->elementSize;
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	891b      	ldrh	r3, [r3, #8]
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d123      	bne.n	8007ca0 <CircularQueue_Add+0x94>
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	681a      	ldr	r2, [r3, #0]
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	691b      	ldr	r3, [r3, #16]
 8007c60:	4413      	add	r3, r2
 8007c62:	781b      	ldrb	r3, [r3, #0]
 8007c64:	b29a      	uxth	r2, r3
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	6819      	ldr	r1, [r3, #0]
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	691b      	ldr	r3, [r3, #16]
 8007c6e:	1c58      	adds	r0, r3, #1
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	685b      	ldr	r3, [r3, #4]
 8007c74:	4298      	cmp	r0, r3
 8007c76:	d306      	bcc.n	8007c86 <CircularQueue_Add+0x7a>
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	6918      	ldr	r0, [r3, #16]
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	685b      	ldr	r3, [r3, #4]
 8007c80:	1ac3      	subs	r3, r0, r3
 8007c82:	3301      	adds	r3, #1
 8007c84:	e002      	b.n	8007c8c <CircularQueue_Add+0x80>
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	691b      	ldr	r3, [r3, #16]
 8007c8a:	3301      	adds	r3, #1
 8007c8c:	440b      	add	r3, r1
 8007c8e:	781b      	ldrb	r3, [r3, #0]
 8007c90:	b29b      	uxth	r3, r3
 8007c92:	021b      	lsls	r3, r3, #8
 8007c94:	b29b      	uxth	r3, r3
 8007c96:	4413      	add	r3, r2
 8007c98:	b29b      	uxth	r3, r3
 8007c9a:	3302      	adds	r3, #2
 8007c9c:	b29b      	uxth	r3, r3
 8007c9e:	e001      	b.n	8007ca4 <CircularQueue_Add+0x98>
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	891b      	ldrh	r3, [r3, #8]
 8007ca4:	86fb      	strh	r3, [r7, #54]	; 0x36
  }
  /* if queue element have fixed size , reset the elementSize arg with fixed element size value */
  if (q->elementSize > 0)               
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	891b      	ldrh	r3, [r3, #8]
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d002      	beq.n	8007cb4 <CircularQueue_Add+0xa8>
  {
    elementSize = q->elementSize;
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	891b      	ldrh	r3, [r3, #8]
 8007cb2:	80fb      	strh	r3, [r7, #6]
  }

   eob_free_size = (q->last >= q->first) ? q->queueMaxSize - (q->last + curElementSize) : 0;
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	691a      	ldr	r2, [r3, #16]
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	68db      	ldr	r3, [r3, #12]
 8007cbc:	429a      	cmp	r2, r3
 8007cbe:	d307      	bcc.n	8007cd0 <CircularQueue_Add+0xc4>
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	685a      	ldr	r2, [r3, #4]
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	6919      	ldr	r1, [r3, #16]
 8007cc8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8007cca:	440b      	add	r3, r1
 8007ccc:	1ad3      	subs	r3, r2, r3
 8007cce:	e000      	b.n	8007cd2 <CircularQueue_Add+0xc6>
 8007cd0:	2300      	movs	r3, #0
 8007cd2:	61bb      	str	r3, [r7, #24]

   /* check how many bytes of wrapped element (if anay) are at end of buffer */
   wrapped_element_eob_size = (((elementSize + elemSizeStorageRoom )*nbElements) < eob_free_size) ? 0 : (eob_free_size % (elementSize + elemSizeStorageRoom));
 8007cd4:	88fa      	ldrh	r2, [r7, #6]
 8007cd6:	7ffb      	ldrb	r3, [r7, #31]
 8007cd8:	4413      	add	r3, r2
 8007cda:	461a      	mov	r2, r3
 8007cdc:	683b      	ldr	r3, [r7, #0]
 8007cde:	fb03 f302 	mul.w	r3, r3, r2
 8007ce2:	69ba      	ldr	r2, [r7, #24]
 8007ce4:	429a      	cmp	r2, r3
 8007ce6:	d80b      	bhi.n	8007d00 <CircularQueue_Add+0xf4>
 8007ce8:	88fa      	ldrh	r2, [r7, #6]
 8007cea:	7ffb      	ldrb	r3, [r7, #31]
 8007cec:	4413      	add	r3, r2
 8007cee:	461a      	mov	r2, r3
 8007cf0:	69bb      	ldr	r3, [r7, #24]
 8007cf2:	fbb3 f1f2 	udiv	r1, r3, r2
 8007cf6:	fb02 f201 	mul.w	r2, r2, r1
 8007cfa:	1a9b      	subs	r3, r3, r2
 8007cfc:	b2db      	uxtb	r3, r3
 8007cfe:	e000      	b.n	8007d02 <CircularQueue_Add+0xf6>
 8007d00:	2300      	movs	r3, #0
 8007d02:	75fb      	strb	r3, [r7, #23]
   wrap_will_occur  = wrapped_element_eob_size > elemSizeStorageRoom;
 8007d04:	7dfa      	ldrb	r2, [r7, #23]
 8007d06:	7ffb      	ldrb	r3, [r7, #31]
 8007d08:	429a      	cmp	r2, r3
 8007d0a:	bf8c      	ite	hi
 8007d0c:	2301      	movhi	r3, #1
 8007d0e:	2300      	movls	r3, #0
 8007d10:	b2db      	uxtb	r3, r3
 8007d12:	77bb      	strb	r3, [r7, #30]

   overhead = (wrap_will_occur && (q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG)) ? wrapped_element_eob_size : overhead;
 8007d14:	7fbb      	ldrb	r3, [r7, #30]
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d008      	beq.n	8007d2c <CircularQueue_Add+0x120>
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	7f1b      	ldrb	r3, [r3, #28]
 8007d1e:	f003 0301 	and.w	r3, r3, #1
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d002      	beq.n	8007d2c <CircularQueue_Add+0x120>
 8007d26:	7dfb      	ldrb	r3, [r7, #23]
 8007d28:	b29b      	uxth	r3, r3
 8007d2a:	e000      	b.n	8007d2e <CircularQueue_Add+0x122>
 8007d2c:	8bbb      	ldrh	r3, [r7, #28]
 8007d2e:	83bb      	strh	r3, [r7, #28]
   overhead = (wrap_will_occur && (q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG)) ? elemSizeStorageRoom  : overhead;
 8007d30:	7fbb      	ldrb	r3, [r7, #30]
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d008      	beq.n	8007d48 <CircularQueue_Add+0x13c>
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	7f1b      	ldrb	r3, [r3, #28]
 8007d3a:	f003 0302 	and.w	r3, r3, #2
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d002      	beq.n	8007d48 <CircularQueue_Add+0x13c>
 8007d42:	7ffb      	ldrb	r3, [r7, #31]
 8007d44:	b29b      	uxth	r3, r3
 8007d46:	e000      	b.n	8007d4a <CircularQueue_Add+0x13e>
 8007d48:	8bbb      	ldrh	r3, [r7, #28]
 8007d4a:	83bb      	strh	r3, [r7, #28]
   
   
  /* Store now the elements if ennough room for all elements */
  if (elementSize && ((q->byteCount + ((elementSize + elemSizeStorageRoom )*nbElements) + overhead) <= q->queueMaxSize)) 
 8007d4c:	88fb      	ldrh	r3, [r7, #6]
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	f000 817e 	beq.w	8008050 <CircularQueue_Add+0x444>
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	695a      	ldr	r2, [r3, #20]
 8007d58:	88f9      	ldrh	r1, [r7, #6]
 8007d5a:	7ffb      	ldrb	r3, [r7, #31]
 8007d5c:	440b      	add	r3, r1
 8007d5e:	4619      	mov	r1, r3
 8007d60:	683b      	ldr	r3, [r7, #0]
 8007d62:	fb03 f301 	mul.w	r3, r3, r1
 8007d66:	441a      	add	r2, r3
 8007d68:	8bbb      	ldrh	r3, [r7, #28]
 8007d6a:	441a      	add	r2, r3
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	685b      	ldr	r3, [r3, #4]
 8007d70:	429a      	cmp	r2, r3
 8007d72:	f200 816d 	bhi.w	8008050 <CircularQueue_Add+0x444>
  { 
    /* loop to add all elements  */
    for (i=0; i < nbElements; i++) 
 8007d76:	2300      	movs	r3, #0
 8007d78:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007d7a:	e14a      	b.n	8008012 <CircularQueue_Add+0x406>
    {
      q->last = MOD ((q->last + curElementSize),q->queueMaxSize);
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	691a      	ldr	r2, [r3, #16]
 8007d80:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8007d82:	441a      	add	r2, r3
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	685b      	ldr	r3, [r3, #4]
 8007d88:	429a      	cmp	r2, r3
 8007d8a:	d307      	bcc.n	8007d9c <CircularQueue_Add+0x190>
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	691a      	ldr	r2, [r3, #16]
 8007d90:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8007d92:	441a      	add	r2, r3
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	685b      	ldr	r3, [r3, #4]
 8007d98:	1ad3      	subs	r3, r2, r3
 8007d9a:	e003      	b.n	8007da4 <CircularQueue_Add+0x198>
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	691a      	ldr	r2, [r3, #16]
 8007da0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8007da2:	4413      	add	r3, r2
 8007da4:	68fa      	ldr	r2, [r7, #12]
 8007da6:	6113      	str	r3, [r2, #16]
      curBuffPosition = q->last;
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	691b      	ldr	r3, [r3, #16]
 8007dac:	633b      	str	r3, [r7, #48]	; 0x30
      
      /* store the element  */
      /* store fisrt the element size if element size is varaible */
      if (q->elementSize == 0) 
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	891b      	ldrh	r3, [r3, #8]
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d130      	bne.n	8007e18 <CircularQueue_Add+0x20c>
      {
        q->qBuff[curBuffPosition++]= elementSize & 0xFF;
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	681a      	ldr	r2, [r3, #0]
 8007dba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dbc:	1c59      	adds	r1, r3, #1
 8007dbe:	6339      	str	r1, [r7, #48]	; 0x30
 8007dc0:	4413      	add	r3, r2
 8007dc2:	88fa      	ldrh	r2, [r7, #6]
 8007dc4:	b2d2      	uxtb	r2, r2
 8007dc6:	701a      	strb	r2, [r3, #0]
        curBuffPosition = MOD(curBuffPosition, q->queueMaxSize);
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	685b      	ldr	r3, [r3, #4]
 8007dcc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007dce:	429a      	cmp	r2, r3
 8007dd0:	d304      	bcc.n	8007ddc <CircularQueue_Add+0x1d0>
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	685b      	ldr	r3, [r3, #4]
 8007dd6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007dd8:	1ad3      	subs	r3, r2, r3
 8007dda:	e000      	b.n	8007dde <CircularQueue_Add+0x1d2>
 8007ddc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dde:	633b      	str	r3, [r7, #48]	; 0x30
        q->qBuff[curBuffPosition++]= (elementSize & 0xFF00) >> 8 ;
 8007de0:	88fb      	ldrh	r3, [r7, #6]
 8007de2:	0a1b      	lsrs	r3, r3, #8
 8007de4:	b298      	uxth	r0, r3
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	681a      	ldr	r2, [r3, #0]
 8007dea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dec:	1c59      	adds	r1, r3, #1
 8007dee:	6339      	str	r1, [r7, #48]	; 0x30
 8007df0:	4413      	add	r3, r2
 8007df2:	b2c2      	uxtb	r2, r0
 8007df4:	701a      	strb	r2, [r3, #0]
        curBuffPosition = MOD(curBuffPosition, q->queueMaxSize);
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	685b      	ldr	r3, [r3, #4]
 8007dfa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007dfc:	429a      	cmp	r2, r3
 8007dfe:	d304      	bcc.n	8007e0a <CircularQueue_Add+0x1fe>
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	685b      	ldr	r3, [r3, #4]
 8007e04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007e06:	1ad3      	subs	r3, r2, r3
 8007e08:	e000      	b.n	8007e0c <CircularQueue_Add+0x200>
 8007e0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e0c:	633b      	str	r3, [r7, #48]	; 0x30
        q->byteCount += 2;
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	695b      	ldr	r3, [r3, #20]
 8007e12:	1c9a      	adds	r2, r3, #2
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	615a      	str	r2, [r3, #20]
      }
      
      /* Identify number of bytes of copy takeing account possible wrap, in this case NbBytesToCopy will contains size that fit at end of the queue buffer */
      NbBytesToCopy = MIN((q->queueMaxSize-curBuffPosition),elementSize);
 8007e18:	88fa      	ldrh	r2, [r7, #6]
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	6859      	ldr	r1, [r3, #4]
 8007e1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e20:	1acb      	subs	r3, r1, r3
 8007e22:	4293      	cmp	r3, r2
 8007e24:	bf28      	it	cs
 8007e26:	4613      	movcs	r3, r2
 8007e28:	62bb      	str	r3, [r7, #40]	; 0x28
      /* check if no wrap (NbBytesToCopy == elementSize) or if Wrap and no spsicf option; 
         In thi case part of data will copied at the end of the buffer and the rest a the beggining */
      if ((NbBytesToCopy == elementSize) || ((NbBytesToCopy < elementSize) && (q->optionFlags == CIRCULAR_QUEUE_NO_FLAG)))
 8007e2a:	88fb      	ldrh	r3, [r7, #6]
 8007e2c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007e2e:	429a      	cmp	r2, r3
 8007e30:	d007      	beq.n	8007e42 <CircularQueue_Add+0x236>
 8007e32:	88fb      	ldrh	r3, [r7, #6]
 8007e34:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007e36:	429a      	cmp	r2, r3
 8007e38:	d225      	bcs.n	8007e86 <CircularQueue_Add+0x27a>
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	7f1b      	ldrb	r3, [r3, #28]
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d121      	bne.n	8007e86 <CircularQueue_Add+0x27a>
      {
        /* Copy First part (or emtire buffer ) from current position up to the end of the buffer queue (or before if enough room)  */
        memcpy(&q->qBuff[curBuffPosition],&x[i*elementSize],NbBytesToCopy);
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	681a      	ldr	r2, [r3, #0]
 8007e46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e48:	18d0      	adds	r0, r2, r3
 8007e4a:	88fb      	ldrh	r3, [r7, #6]
 8007e4c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007e4e:	fb02 f303 	mul.w	r3, r2, r3
 8007e52:	68ba      	ldr	r2, [r7, #8]
 8007e54:	4413      	add	r3, r2
 8007e56:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007e58:	4619      	mov	r1, r3
 8007e5a:	f001 fc85 	bl	8009768 <memcpy>
        /* Adjust bytes count */
        q->byteCount += NbBytesToCopy;
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	695a      	ldr	r2, [r3, #20]
 8007e62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e64:	441a      	add	r2, r3
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	615a      	str	r2, [r3, #20]
        /* Wrap */
        curBuffPosition = 0; 
 8007e6a:	2300      	movs	r3, #0
 8007e6c:	633b      	str	r3, [r7, #48]	; 0x30
        /* set NbCopiedBytes bytes with  ampount copied */
        NbCopiedBytes = NbBytesToCopy;
 8007e6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e70:	627b      	str	r3, [r7, #36]	; 0x24
        /* set the rest to copy if wrao , if no wrap will be 0 */
        NbBytesToCopy = elementSize - NbBytesToCopy;
 8007e72:	88fa      	ldrh	r2, [r7, #6]
 8007e74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e76:	1ad3      	subs	r3, r2, r3
 8007e78:	62bb      	str	r3, [r7, #40]	; 0x28
        /* set the current element Size, will be used to calaculate next last position at beggining of loop */
        curElementSize = (elementSize) + elemSizeStorageRoom ;
 8007e7a:	7ffb      	ldrb	r3, [r7, #31]
 8007e7c:	b29a      	uxth	r2, r3
 8007e7e:	88fb      	ldrh	r3, [r7, #6]
 8007e80:	4413      	add	r3, r2
 8007e82:	86fb      	strh	r3, [r7, #54]	; 0x36
 8007e84:	e0a4      	b.n	8007fd0 <CircularQueue_Add+0x3c4>
      }
      else if (NbBytesToCopy)  /* We have a wrap  to manage */
 8007e86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	f000 80a1 	beq.w	8007fd0 <CircularQueue_Add+0x3c4>
      {
       /* case of CIRCULAR_QUEUE_NO_WRAP_FLAG option */
         if (q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG)
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	7f1b      	ldrb	r3, [r3, #28]
 8007e92:	f003 0301 	and.w	r3, r3, #1
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d03a      	beq.n	8007f10 <CircularQueue_Add+0x304>
        {
          /* if element size are variable and NO_WRAP option, Invalidate end of buffer setting 0xFFFF size*/
          if (q->elementSize == 0)
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	891b      	ldrh	r3, [r3, #8]
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d10d      	bne.n	8007ebe <CircularQueue_Add+0x2b2>
          {
             q->qBuff[curBuffPosition-2] = 0xFF;
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	681a      	ldr	r2, [r3, #0]
 8007ea6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ea8:	3b02      	subs	r3, #2
 8007eaa:	4413      	add	r3, r2
 8007eac:	22ff      	movs	r2, #255	; 0xff
 8007eae:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition-1] = 0xFF;
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	681a      	ldr	r2, [r3, #0]
 8007eb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007eb6:	3b01      	subs	r3, #1
 8007eb8:	4413      	add	r3, r2
 8007eba:	22ff      	movs	r2, #255	; 0xff
 8007ebc:	701a      	strb	r2, [r3, #0]
          }
          q->byteCount += NbBytesToCopy;  /* invalid data at the end of buffer are take into account in byteCount */
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	695a      	ldr	r2, [r3, #20]
 8007ec2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ec4:	441a      	add	r2, r3
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	615a      	str	r2, [r3, #20]
          /* No bytes coped a the end of buffer */
          NbCopiedBytes = 0;
 8007eca:	2300      	movs	r3, #0
 8007ecc:	627b      	str	r3, [r7, #36]	; 0x24
          /* all element to be copied at the begnning of buffer */
          NbBytesToCopy = elementSize; 
 8007ece:	88fb      	ldrh	r3, [r7, #6]
 8007ed0:	62bb      	str	r3, [r7, #40]	; 0x28
          /* Wrap */
          curBuffPosition = 0; 
 8007ed2:	2300      	movs	r3, #0
 8007ed4:	633b      	str	r3, [r7, #48]	; 0x30
          /* if variable size element, invalidate end of buffer setting OxFFFF in element header (size) */
          if (q->elementSize == 0)
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	891b      	ldrh	r3, [r3, #8]
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d16f      	bne.n	8007fbe <CircularQueue_Add+0x3b2>
          {
            q->qBuff[curBuffPosition++] = NbBytesToCopy & 0xFF;
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	681a      	ldr	r2, [r3, #0]
 8007ee2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ee4:	1c59      	adds	r1, r3, #1
 8007ee6:	6339      	str	r1, [r7, #48]	; 0x30
 8007ee8:	4413      	add	r3, r2
 8007eea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007eec:	b2d2      	uxtb	r2, r2
 8007eee:	701a      	strb	r2, [r3, #0]
            q->qBuff[curBuffPosition++] = (NbBytesToCopy & 0xFF00) >> 8 ;
 8007ef0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ef2:	0a18      	lsrs	r0, r3, #8
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	681a      	ldr	r2, [r3, #0]
 8007ef8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007efa:	1c59      	adds	r1, r3, #1
 8007efc:	6339      	str	r1, [r7, #48]	; 0x30
 8007efe:	4413      	add	r3, r2
 8007f00:	b2c2      	uxtb	r2, r0
 8007f02:	701a      	strb	r2, [r3, #0]
            q->byteCount += 2;   
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	695b      	ldr	r3, [r3, #20]
 8007f08:	1c9a      	adds	r2, r3, #2
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	615a      	str	r2, [r3, #20]
 8007f0e:	e056      	b.n	8007fbe <CircularQueue_Add+0x3b2>
          } 
           
        }
        /* case of CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG option */
        else if (q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG)
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	7f1b      	ldrb	r3, [r3, #28]
 8007f14:	f003 0302 	and.w	r3, r3, #2
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d050      	beq.n	8007fbe <CircularQueue_Add+0x3b2>
        {
          if (q->elementSize == 0)
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	891b      	ldrh	r3, [r3, #8]
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d14a      	bne.n	8007fba <CircularQueue_Add+0x3ae>
          {
            /* reset the size of current element to the nb bytes fitting at the end of buffer */
             q->qBuff[curBuffPosition-2] = NbBytesToCopy & 0xFF;
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	681a      	ldr	r2, [r3, #0]
 8007f28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f2a:	3b02      	subs	r3, #2
 8007f2c:	4413      	add	r3, r2
 8007f2e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007f30:	b2d2      	uxtb	r2, r2
 8007f32:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition-1] = (NbBytesToCopy & 0xFF00) >> 8 ;
 8007f34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f36:	0a19      	lsrs	r1, r3, #8
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	681a      	ldr	r2, [r3, #0]
 8007f3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f3e:	3b01      	subs	r3, #1
 8007f40:	4413      	add	r3, r2
 8007f42:	b2ca      	uxtb	r2, r1
 8007f44:	701a      	strb	r2, [r3, #0]
             /* copy the bytes */ 
             memcpy(&q->qBuff[curBuffPosition],&x[i*elementSize],NbBytesToCopy);
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	681a      	ldr	r2, [r3, #0]
 8007f4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f4c:	18d0      	adds	r0, r2, r3
 8007f4e:	88fb      	ldrh	r3, [r7, #6]
 8007f50:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007f52:	fb02 f303 	mul.w	r3, r2, r3
 8007f56:	68ba      	ldr	r2, [r7, #8]
 8007f58:	4413      	add	r3, r2
 8007f5a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007f5c:	4619      	mov	r1, r3
 8007f5e:	f001 fc03 	bl	8009768 <memcpy>
             q->byteCount += NbBytesToCopy; 
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	695a      	ldr	r2, [r3, #20]
 8007f66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f68:	441a      	add	r2, r3
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	615a      	str	r2, [r3, #20]
             /* set the number of copied bytes */
             NbCopiedBytes = NbBytesToCopy;             
 8007f6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f70:	627b      	str	r3, [r7, #36]	; 0x24
             /* set rest of data to be copied to begnning of buffer */
             NbBytesToCopy = elementSize - NbBytesToCopy;
 8007f72:	88fa      	ldrh	r2, [r7, #6]
 8007f74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f76:	1ad3      	subs	r3, r2, r3
 8007f78:	62bb      	str	r3, [r7, #40]	; 0x28
             /* one element more dur to split in 2 elements */
             q->elementCount++;
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	699b      	ldr	r3, [r3, #24]
 8007f7e:	1c5a      	adds	r2, r3, #1
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	619a      	str	r2, [r3, #24]
             /* Wrap */
             curBuffPosition = 0; 
 8007f84:	2300      	movs	r3, #0
 8007f86:	633b      	str	r3, [r7, #48]	; 0x30
             /* Set new size for rest of data */
             q->qBuff[curBuffPosition++] = NbBytesToCopy & 0xFF;
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	681a      	ldr	r2, [r3, #0]
 8007f8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f8e:	1c59      	adds	r1, r3, #1
 8007f90:	6339      	str	r1, [r7, #48]	; 0x30
 8007f92:	4413      	add	r3, r2
 8007f94:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007f96:	b2d2      	uxtb	r2, r2
 8007f98:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition++] = (NbBytesToCopy & 0xFF00) >> 8 ;
 8007f9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f9c:	0a18      	lsrs	r0, r3, #8
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	681a      	ldr	r2, [r3, #0]
 8007fa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fa4:	1c59      	adds	r1, r3, #1
 8007fa6:	6339      	str	r1, [r7, #48]	; 0x30
 8007fa8:	4413      	add	r3, r2
 8007faa:	b2c2      	uxtb	r2, r0
 8007fac:	701a      	strb	r2, [r3, #0]
             q->byteCount += 2;              
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	695b      	ldr	r3, [r3, #20]
 8007fb2:	1c9a      	adds	r2, r3, #2
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	615a      	str	r2, [r3, #20]
 8007fb8:	e001      	b.n	8007fbe <CircularQueue_Add+0x3b2>
          else
          {
            /* Should not occur */
            /* can not manage split Flag on Fixed size element */
            /* Buffer is corrupted */
            return NULL;
 8007fba:	2300      	movs	r3, #0
 8007fbc:	e049      	b.n	8008052 <CircularQueue_Add+0x446>
          }
        }
        curElementSize = (NbBytesToCopy) + elemSizeStorageRoom ;
 8007fbe:	7ffb      	ldrb	r3, [r7, #31]
 8007fc0:	b29a      	uxth	r2, r3
 8007fc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fc4:	b29b      	uxth	r3, r3
 8007fc6:	4413      	add	r3, r2
 8007fc8:	86fb      	strh	r3, [r7, #54]	; 0x36
        q->last = 0;        
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	2200      	movs	r2, #0
 8007fce:	611a      	str	r2, [r3, #16]
      }  
      
      /* some remaning byte to copy */
      if (NbBytesToCopy)      
 8007fd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d015      	beq.n	8008002 <CircularQueue_Add+0x3f6>
      {
        memcpy(&q->qBuff[curBuffPosition],&x[(i*elementSize)+NbCopiedBytes],NbBytesToCopy);
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	681a      	ldr	r2, [r3, #0]
 8007fda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fdc:	18d0      	adds	r0, r2, r3
 8007fde:	88fb      	ldrh	r3, [r7, #6]
 8007fe0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007fe2:	fb02 f203 	mul.w	r2, r2, r3
 8007fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fe8:	4413      	add	r3, r2
 8007fea:	68ba      	ldr	r2, [r7, #8]
 8007fec:	4413      	add	r3, r2
 8007fee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007ff0:	4619      	mov	r1, r3
 8007ff2:	f001 fbb9 	bl	8009768 <memcpy>
        q->byteCount += NbBytesToCopy;
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	695a      	ldr	r2, [r3, #20]
 8007ffa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ffc:	441a      	add	r2, r3
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	615a      	str	r2, [r3, #20]
      }      
      
      /* One more element */
      q->elementCount++;
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	699b      	ldr	r3, [r3, #24]
 8008006:	1c5a      	adds	r2, r3, #1
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	619a      	str	r2, [r3, #24]
    for (i=0; i < nbElements; i++) 
 800800c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800800e:	3301      	adds	r3, #1
 8008010:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008012:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008014:	683b      	ldr	r3, [r7, #0]
 8008016:	429a      	cmp	r2, r3
 8008018:	f4ff aeb0 	bcc.w	8007d7c <CircularQueue_Add+0x170>
    }
    
    ptr = q->qBuff + (MOD((q->last+elemSizeStorageRoom ),q->queueMaxSize));
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	681a      	ldr	r2, [r3, #0]
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	6919      	ldr	r1, [r3, #16]
 8008024:	7ffb      	ldrb	r3, [r7, #31]
 8008026:	4419      	add	r1, r3
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	685b      	ldr	r3, [r3, #4]
 800802c:	4299      	cmp	r1, r3
 800802e:	d307      	bcc.n	8008040 <CircularQueue_Add+0x434>
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	6919      	ldr	r1, [r3, #16]
 8008034:	7ffb      	ldrb	r3, [r7, #31]
 8008036:	4419      	add	r1, r3
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	685b      	ldr	r3, [r3, #4]
 800803c:	1acb      	subs	r3, r1, r3
 800803e:	e003      	b.n	8008048 <CircularQueue_Add+0x43c>
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	6919      	ldr	r1, [r3, #16]
 8008044:	7ffb      	ldrb	r3, [r7, #31]
 8008046:	440b      	add	r3, r1
 8008048:	4413      	add	r3, r2
 800804a:	623b      	str	r3, [r7, #32]
  /* for Breakpoint only...to remove */
  else
  {
    return NULL;
  }
  return ptr;
 800804c:	6a3b      	ldr	r3, [r7, #32]
 800804e:	e000      	b.n	8008052 <CircularQueue_Add+0x446>
    return NULL;
 8008050:	2300      	movs	r3, #0
}
 8008052:	4618      	mov	r0, r3
 8008054:	3738      	adds	r7, #56	; 0x38
 8008056:	46bd      	mov	sp, r7
 8008058:	bd80      	pop	{r7, pc}

0800805a <CircularQueue_Remove>:
  * @param  q: pointer on queue structure  to be handled
  * @param  elementSize: Pointer to return Size of element to be removed (ignored if NULL)
  * @retval Pointer on removed element. NULL if queue was empty
  */
uint8_t* CircularQueue_Remove(queue_t *q, uint16_t* elementSize)
{
 800805a:	b480      	push	{r7}
 800805c:	b085      	sub	sp, #20
 800805e:	af00      	add	r7, sp, #0
 8008060:	6078      	str	r0, [r7, #4]
 8008062:	6039      	str	r1, [r7, #0]
  uint8_t  elemSizeStorageRoom = 0;
 8008064:	2300      	movs	r3, #0
 8008066:	727b      	strb	r3, [r7, #9]
  uint8_t* ptr= NULL;
 8008068:	2300      	movs	r3, #0
 800806a:	60fb      	str	r3, [r7, #12]
  elemSizeStorageRoom = (q->elementSize == 0) ? 2 : 0;
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	891b      	ldrh	r3, [r3, #8]
 8008070:	2b00      	cmp	r3, #0
 8008072:	d101      	bne.n	8008078 <CircularQueue_Remove+0x1e>
 8008074:	2302      	movs	r3, #2
 8008076:	e000      	b.n	800807a <CircularQueue_Remove+0x20>
 8008078:	2300      	movs	r3, #0
 800807a:	727b      	strb	r3, [r7, #9]
  uint16_t eltSize = 0;
 800807c:	2300      	movs	r3, #0
 800807e:	817b      	strh	r3, [r7, #10]
  if (q->byteCount > 0) 
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	695b      	ldr	r3, [r3, #20]
 8008084:	2b00      	cmp	r3, #0
 8008086:	f000 80cc 	beq.w	8008222 <CircularQueue_Remove+0x1c8>
  {
    /* retreive element Size */
    eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	891b      	ldrh	r3, [r3, #8]
 800808e:	2b00      	cmp	r3, #0
 8008090:	d121      	bne.n	80080d6 <CircularQueue_Remove+0x7c>
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	681a      	ldr	r2, [r3, #0]
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	68db      	ldr	r3, [r3, #12]
 800809a:	4413      	add	r3, r2
 800809c:	781b      	ldrb	r3, [r3, #0]
 800809e:	b29a      	uxth	r2, r3
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	6819      	ldr	r1, [r3, #0]
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	68db      	ldr	r3, [r3, #12]
 80080a8:	1c58      	adds	r0, r3, #1
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	685b      	ldr	r3, [r3, #4]
 80080ae:	4298      	cmp	r0, r3
 80080b0:	d306      	bcc.n	80080c0 <CircularQueue_Remove+0x66>
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	68d8      	ldr	r0, [r3, #12]
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	685b      	ldr	r3, [r3, #4]
 80080ba:	1ac3      	subs	r3, r0, r3
 80080bc:	3301      	adds	r3, #1
 80080be:	e002      	b.n	80080c6 <CircularQueue_Remove+0x6c>
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	68db      	ldr	r3, [r3, #12]
 80080c4:	3301      	adds	r3, #1
 80080c6:	440b      	add	r3, r1
 80080c8:	781b      	ldrb	r3, [r3, #0]
 80080ca:	b29b      	uxth	r3, r3
 80080cc:	021b      	lsls	r3, r3, #8
 80080ce:	b29b      	uxth	r3, r3
 80080d0:	4413      	add	r3, r2
 80080d2:	b29b      	uxth	r3, r3
 80080d4:	e001      	b.n	80080da <CircularQueue_Remove+0x80>
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	891b      	ldrh	r3, [r3, #8]
 80080da:	817b      	strh	r3, [r7, #10]

     if ((q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG) && !(q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG))
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	7f1b      	ldrb	r3, [r3, #28]
 80080e0:	f003 0301 	and.w	r3, r3, #1
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d057      	beq.n	8008198 <CircularQueue_Remove+0x13e>
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	7f1b      	ldrb	r3, [r3, #28]
 80080ec:	f003 0302 	and.w	r3, r3, #2
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d151      	bne.n	8008198 <CircularQueue_Remove+0x13e>
     {
       if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 80080f4:	897b      	ldrh	r3, [r7, #10]
 80080f6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80080fa:	4293      	cmp	r3, r2
 80080fc:	d103      	bne.n	8008106 <CircularQueue_Remove+0xac>
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	891b      	ldrh	r3, [r3, #8]
 8008102:	2b00      	cmp	r3, #0
 8008104:	d012      	beq.n	800812c <CircularQueue_Remove+0xd2>
           ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	68da      	ldr	r2, [r3, #12]
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	691b      	ldr	r3, [r3, #16]
       if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 800810e:	429a      	cmp	r2, r3
 8008110:	d942      	bls.n	8008198 <CircularQueue_Remove+0x13e>
           ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	891b      	ldrh	r3, [r3, #8]
 8008116:	2b00      	cmp	r3, #0
 8008118:	d03e      	beq.n	8008198 <CircularQueue_Remove+0x13e>
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	685a      	ldr	r2, [r3, #4]
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	68db      	ldr	r3, [r3, #12]
 8008122:	1ad3      	subs	r3, r2, r3
 8008124:	687a      	ldr	r2, [r7, #4]
 8008126:	8912      	ldrh	r2, [r2, #8]
 8008128:	4293      	cmp	r3, r2
 800812a:	d235      	bcs.n	8008198 <CircularQueue_Remove+0x13e>
       {
          /* all data from current position up to the end of buffer are invalid */
          q->byteCount -= (q->queueMaxSize - q->first);
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	695a      	ldr	r2, [r3, #20]
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	68d9      	ldr	r1, [r3, #12]
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	685b      	ldr	r3, [r3, #4]
 8008138:	1acb      	subs	r3, r1, r3
 800813a:	441a      	add	r2, r3
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	615a      	str	r2, [r3, #20]
          /* Adjust first element pos */
          q->first = 0;
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	2200      	movs	r2, #0
 8008144:	60da      	str	r2, [r3, #12]
          /* retrieve the rigth size after the wrap [if varaible size element] */
          eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	891b      	ldrh	r3, [r3, #8]
 800814a:	2b00      	cmp	r3, #0
 800814c:	d121      	bne.n	8008192 <CircularQueue_Remove+0x138>
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	681a      	ldr	r2, [r3, #0]
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	68db      	ldr	r3, [r3, #12]
 8008156:	4413      	add	r3, r2
 8008158:	781b      	ldrb	r3, [r3, #0]
 800815a:	b29a      	uxth	r2, r3
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	6819      	ldr	r1, [r3, #0]
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	68db      	ldr	r3, [r3, #12]
 8008164:	1c58      	adds	r0, r3, #1
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	685b      	ldr	r3, [r3, #4]
 800816a:	4298      	cmp	r0, r3
 800816c:	d306      	bcc.n	800817c <CircularQueue_Remove+0x122>
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	68d8      	ldr	r0, [r3, #12]
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	685b      	ldr	r3, [r3, #4]
 8008176:	1ac3      	subs	r3, r0, r3
 8008178:	3301      	adds	r3, #1
 800817a:	e002      	b.n	8008182 <CircularQueue_Remove+0x128>
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	68db      	ldr	r3, [r3, #12]
 8008180:	3301      	adds	r3, #1
 8008182:	440b      	add	r3, r1
 8008184:	781b      	ldrb	r3, [r3, #0]
 8008186:	b29b      	uxth	r3, r3
 8008188:	021b      	lsls	r3, r3, #8
 800818a:	b29b      	uxth	r3, r3
 800818c:	4413      	add	r3, r2
 800818e:	b29b      	uxth	r3, r3
 8008190:	e001      	b.n	8008196 <CircularQueue_Remove+0x13c>
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	891b      	ldrh	r3, [r3, #8]
 8008196:	817b      	strh	r3, [r7, #10]
       }
     }

    /* retreive element */
    ptr = q->qBuff + (MOD((q->first + elemSizeStorageRoom), q->queueMaxSize));
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	681a      	ldr	r2, [r3, #0]
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	68d9      	ldr	r1, [r3, #12]
 80081a0:	7a7b      	ldrb	r3, [r7, #9]
 80081a2:	4419      	add	r1, r3
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	685b      	ldr	r3, [r3, #4]
 80081a8:	4299      	cmp	r1, r3
 80081aa:	d307      	bcc.n	80081bc <CircularQueue_Remove+0x162>
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	68d9      	ldr	r1, [r3, #12]
 80081b0:	7a7b      	ldrb	r3, [r7, #9]
 80081b2:	4419      	add	r1, r3
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	685b      	ldr	r3, [r3, #4]
 80081b8:	1acb      	subs	r3, r1, r3
 80081ba:	e003      	b.n	80081c4 <CircularQueue_Remove+0x16a>
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	68d9      	ldr	r1, [r3, #12]
 80081c0:	7a7b      	ldrb	r3, [r7, #9]
 80081c2:	440b      	add	r3, r1
 80081c4:	4413      	add	r3, r2
 80081c6:	60fb      	str	r3, [r7, #12]

    /* adjust byte count */
    q->byteCount -= (eltSize + elemSizeStorageRoom) ;
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	695b      	ldr	r3, [r3, #20]
 80081cc:	8979      	ldrh	r1, [r7, #10]
 80081ce:	7a7a      	ldrb	r2, [r7, #9]
 80081d0:	440a      	add	r2, r1
 80081d2:	1a9a      	subs	r2, r3, r2
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	615a      	str	r2, [r3, #20]
    
    /* Adjust q->first */
    if (q->byteCount > 0)
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	695b      	ldr	r3, [r3, #20]
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d01b      	beq.n	8008218 <CircularQueue_Remove+0x1be>
    {
      q->first = MOD((q->first+ eltSize + elemSizeStorageRoom ), q->queueMaxSize);
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	68da      	ldr	r2, [r3, #12]
 80081e4:	897b      	ldrh	r3, [r7, #10]
 80081e6:	441a      	add	r2, r3
 80081e8:	7a7b      	ldrb	r3, [r7, #9]
 80081ea:	441a      	add	r2, r3
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	685b      	ldr	r3, [r3, #4]
 80081f0:	429a      	cmp	r2, r3
 80081f2:	d309      	bcc.n	8008208 <CircularQueue_Remove+0x1ae>
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	68da      	ldr	r2, [r3, #12]
 80081f8:	897b      	ldrh	r3, [r7, #10]
 80081fa:	441a      	add	r2, r3
 80081fc:	7a7b      	ldrb	r3, [r7, #9]
 80081fe:	441a      	add	r2, r3
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	685b      	ldr	r3, [r3, #4]
 8008204:	1ad3      	subs	r3, r2, r3
 8008206:	e005      	b.n	8008214 <CircularQueue_Remove+0x1ba>
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	68da      	ldr	r2, [r3, #12]
 800820c:	897b      	ldrh	r3, [r7, #10]
 800820e:	441a      	add	r2, r3
 8008210:	7a7b      	ldrb	r3, [r7, #9]
 8008212:	4413      	add	r3, r2
 8008214:	687a      	ldr	r2, [r7, #4]
 8008216:	60d3      	str	r3, [r2, #12]
    }    
    /* adjust element count */    
    --q->elementCount;    
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	699b      	ldr	r3, [r3, #24]
 800821c:	1e5a      	subs	r2, r3, #1
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	619a      	str	r2, [r3, #24]
  }
  if (elementSize != NULL)
 8008222:	683b      	ldr	r3, [r7, #0]
 8008224:	2b00      	cmp	r3, #0
 8008226:	d002      	beq.n	800822e <CircularQueue_Remove+0x1d4>
  {
    *elementSize = eltSize;
 8008228:	683b      	ldr	r3, [r7, #0]
 800822a:	897a      	ldrh	r2, [r7, #10]
 800822c:	801a      	strh	r2, [r3, #0]
  }
  return ptr;
 800822e:	68fb      	ldr	r3, [r7, #12]
}
 8008230:	4618      	mov	r0, r3
 8008232:	3714      	adds	r7, #20
 8008234:	46bd      	mov	sp, r7
 8008236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800823a:	4770      	bx	lr

0800823c <CircularQueue_Sense>:
  * @param  q: pointer on queue structure  to be handled
  * @param  elementSize:  Pointer to return Size of element to be removed (ignored if NULL)
  * @retval Pointer on sensed element. NULL if queue was empty
  */
uint8_t* CircularQueue_Sense(queue_t *q, uint16_t* elementSize)
{
 800823c:	b480      	push	{r7}
 800823e:	b087      	sub	sp, #28
 8008240:	af00      	add	r7, sp, #0
 8008242:	6078      	str	r0, [r7, #4]
 8008244:	6039      	str	r1, [r7, #0]
  uint8_t  elemSizeStorageRoom = 0;
 8008246:	2300      	movs	r3, #0
 8008248:	72fb      	strb	r3, [r7, #11]
  uint8_t* x= NULL;
 800824a:	2300      	movs	r3, #0
 800824c:	617b      	str	r3, [r7, #20]
  elemSizeStorageRoom = (q->elementSize == 0) ? 2 : 0;
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	891b      	ldrh	r3, [r3, #8]
 8008252:	2b00      	cmp	r3, #0
 8008254:	d101      	bne.n	800825a <CircularQueue_Sense+0x1e>
 8008256:	2302      	movs	r3, #2
 8008258:	e000      	b.n	800825c <CircularQueue_Sense+0x20>
 800825a:	2300      	movs	r3, #0
 800825c:	72fb      	strb	r3, [r7, #11]
  uint16_t eltSize = 0;
 800825e:	2300      	movs	r3, #0
 8008260:	827b      	strh	r3, [r7, #18]
  uint32_t FirstElemetPos = 0;
 8008262:	2300      	movs	r3, #0
 8008264:	60fb      	str	r3, [r7, #12]
    
  if (q->byteCount > 0) 
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	695b      	ldr	r3, [r3, #20]
 800826a:	2b00      	cmp	r3, #0
 800826c:	f000 8090 	beq.w	8008390 <CircularQueue_Sense+0x154>
  {
    FirstElemetPos = q->first;
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	68db      	ldr	r3, [r3, #12]
 8008274:	60fb      	str	r3, [r7, #12]
    eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	891b      	ldrh	r3, [r3, #8]
 800827a:	2b00      	cmp	r3, #0
 800827c:	d121      	bne.n	80082c2 <CircularQueue_Sense+0x86>
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	681a      	ldr	r2, [r3, #0]
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	68db      	ldr	r3, [r3, #12]
 8008286:	4413      	add	r3, r2
 8008288:	781b      	ldrb	r3, [r3, #0]
 800828a:	b29a      	uxth	r2, r3
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	6819      	ldr	r1, [r3, #0]
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	68db      	ldr	r3, [r3, #12]
 8008294:	1c58      	adds	r0, r3, #1
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	685b      	ldr	r3, [r3, #4]
 800829a:	4298      	cmp	r0, r3
 800829c:	d306      	bcc.n	80082ac <CircularQueue_Sense+0x70>
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	68d8      	ldr	r0, [r3, #12]
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	685b      	ldr	r3, [r3, #4]
 80082a6:	1ac3      	subs	r3, r0, r3
 80082a8:	3301      	adds	r3, #1
 80082aa:	e002      	b.n	80082b2 <CircularQueue_Sense+0x76>
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	68db      	ldr	r3, [r3, #12]
 80082b0:	3301      	adds	r3, #1
 80082b2:	440b      	add	r3, r1
 80082b4:	781b      	ldrb	r3, [r3, #0]
 80082b6:	b29b      	uxth	r3, r3
 80082b8:	021b      	lsls	r3, r3, #8
 80082ba:	b29b      	uxth	r3, r3
 80082bc:	4413      	add	r3, r2
 80082be:	b29b      	uxth	r3, r3
 80082c0:	e001      	b.n	80082c6 <CircularQueue_Sense+0x8a>
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	891b      	ldrh	r3, [r3, #8]
 80082c6:	827b      	strh	r3, [r7, #18]
    
    if ((q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG) && !(q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG))
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	7f1b      	ldrb	r3, [r3, #28]
 80082cc:	f003 0301 	and.w	r3, r3, #1
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d048      	beq.n	8008366 <CircularQueue_Sense+0x12a>
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	7f1b      	ldrb	r3, [r3, #28]
 80082d8:	f003 0302 	and.w	r3, r3, #2
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d142      	bne.n	8008366 <CircularQueue_Sense+0x12a>
    { 
      if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 80082e0:	8a7b      	ldrh	r3, [r7, #18]
 80082e2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80082e6:	4293      	cmp	r3, r2
 80082e8:	d103      	bne.n	80082f2 <CircularQueue_Sense+0xb6>
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	891b      	ldrh	r3, [r3, #8]
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d012      	beq.n	8008318 <CircularQueue_Sense+0xdc>
          ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	68da      	ldr	r2, [r3, #12]
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	691b      	ldr	r3, [r3, #16]
      if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 80082fa:	429a      	cmp	r2, r3
 80082fc:	d933      	bls.n	8008366 <CircularQueue_Sense+0x12a>
          ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	891b      	ldrh	r3, [r3, #8]
 8008302:	2b00      	cmp	r3, #0
 8008304:	d02f      	beq.n	8008366 <CircularQueue_Sense+0x12a>
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	685a      	ldr	r2, [r3, #4]
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	68db      	ldr	r3, [r3, #12]
 800830e:	1ad3      	subs	r3, r2, r3
 8008310:	687a      	ldr	r2, [r7, #4]
 8008312:	8912      	ldrh	r2, [r2, #8]
 8008314:	4293      	cmp	r3, r2
 8008316:	d226      	bcs.n	8008366 <CircularQueue_Sense+0x12a>

      {
        /* all data from current position up to the end of buffer are invalid */
        FirstElemetPos = 0; /* wrap to the begiining of buffer */
 8008318:	2300      	movs	r3, #0
 800831a:	60fb      	str	r3, [r7, #12]

        /* retrieve the rigth size after the wrap [if varaible size element] */
        eltSize = (q->elementSize == 0) ? q->qBuff[FirstElemetPos]+ ((q->qBuff[MOD((FirstElemetPos+1), q->queueMaxSize)])<<8) : q->elementSize;
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	891b      	ldrh	r3, [r3, #8]
 8008320:	2b00      	cmp	r3, #0
 8008322:	d11d      	bne.n	8008360 <CircularQueue_Sense+0x124>
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	681a      	ldr	r2, [r3, #0]
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	4413      	add	r3, r2
 800832c:	781b      	ldrb	r3, [r3, #0]
 800832e:	b29a      	uxth	r2, r3
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	6819      	ldr	r1, [r3, #0]
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	1c58      	adds	r0, r3, #1
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	685b      	ldr	r3, [r3, #4]
 800833c:	4298      	cmp	r0, r3
 800833e:	d305      	bcc.n	800834c <CircularQueue_Sense+0x110>
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	685b      	ldr	r3, [r3, #4]
 8008344:	68f8      	ldr	r0, [r7, #12]
 8008346:	1ac3      	subs	r3, r0, r3
 8008348:	3301      	adds	r3, #1
 800834a:	e001      	b.n	8008350 <CircularQueue_Sense+0x114>
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	3301      	adds	r3, #1
 8008350:	440b      	add	r3, r1
 8008352:	781b      	ldrb	r3, [r3, #0]
 8008354:	b29b      	uxth	r3, r3
 8008356:	021b      	lsls	r3, r3, #8
 8008358:	b29b      	uxth	r3, r3
 800835a:	4413      	add	r3, r2
 800835c:	b29b      	uxth	r3, r3
 800835e:	e001      	b.n	8008364 <CircularQueue_Sense+0x128>
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	891b      	ldrh	r3, [r3, #8]
 8008364:	827b      	strh	r3, [r7, #18]
      }
   }
   /* retrieve element */
    x = q->qBuff + (MOD((FirstElemetPos + elemSizeStorageRoom), q->queueMaxSize));
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	681a      	ldr	r2, [r3, #0]
 800836a:	7af9      	ldrb	r1, [r7, #11]
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	4419      	add	r1, r3
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	685b      	ldr	r3, [r3, #4]
 8008374:	4299      	cmp	r1, r3
 8008376:	d306      	bcc.n	8008386 <CircularQueue_Sense+0x14a>
 8008378:	7af9      	ldrb	r1, [r7, #11]
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	4419      	add	r1, r3
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	685b      	ldr	r3, [r3, #4]
 8008382:	1acb      	subs	r3, r1, r3
 8008384:	e002      	b.n	800838c <CircularQueue_Sense+0x150>
 8008386:	7af9      	ldrb	r1, [r7, #11]
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	440b      	add	r3, r1
 800838c:	4413      	add	r3, r2
 800838e:	617b      	str	r3, [r7, #20]
  }
  if (elementSize != NULL)
 8008390:	683b      	ldr	r3, [r7, #0]
 8008392:	2b00      	cmp	r3, #0
 8008394:	d002      	beq.n	800839c <CircularQueue_Sense+0x160>
  {
    *elementSize = eltSize;
 8008396:	683b      	ldr	r3, [r7, #0]
 8008398:	8a7a      	ldrh	r2, [r7, #18]
 800839a:	801a      	strh	r2, [r3, #0]
  }
  return x;
 800839c:	697b      	ldr	r3, [r7, #20]
}
 800839e:	4618      	mov	r0, r3
 80083a0:	371c      	adds	r7, #28
 80083a2:	46bd      	mov	sp, r7
 80083a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a8:	4770      	bx	lr
	...

080083ac <LL_FLASH_GetUDN>:
  * @note   The 64-bit UID64 may be used by Firmware to derive BLE 48-bit Device Address EUI-48 or
  *         802.15.4 64-bit Device Address EUI-64.
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 80083ac:	b480      	push	{r7}
 80083ae:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)UID64_BASE)));
 80083b0:	4b03      	ldr	r3, [pc, #12]	; (80083c0 <LL_FLASH_GetUDN+0x14>)
 80083b2:	681b      	ldr	r3, [r3, #0]
}
 80083b4:	4618      	mov	r0, r3
 80083b6:	46bd      	mov	sp, r7
 80083b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083bc:	4770      	bx	lr
 80083be:	bf00      	nop
 80083c0:	1fff7580 	.word	0x1fff7580

080083c4 <LL_FLASH_GetDeviceID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the device ID is 0x26
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x26 fo STM32WB55x)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 80083c4:	b480      	push	{r7}
 80083c6:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 80083c8:	4b03      	ldr	r3, [pc, #12]	; (80083d8 <LL_FLASH_GetDeviceID+0x14>)
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	b2db      	uxtb	r3, r3
}
 80083ce:	4618      	mov	r0, r3
 80083d0:	46bd      	mov	sp, r7
 80083d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d6:	4770      	bx	lr
 80083d8:	1fff7584 	.word	0x1fff7584

080083dc <LL_FLASH_GetSTCompanyID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the ST Compagny ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Compagny ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 80083dc:	b480      	push	{r7}
 80083de:	af00      	add	r7, sp, #0
  return (uint32_t)(((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U ) & 0x00FFFFFFU);
 80083e0:	4b03      	ldr	r3, [pc, #12]	; (80083f0 <LL_FLASH_GetSTCompanyID+0x14>)
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	0a1b      	lsrs	r3, r3, #8
}
 80083e6:	4618      	mov	r0, r3
 80083e8:	46bd      	mov	sp, r7
 80083ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ee:	4770      	bx	lr
 80083f0:	1fff7584 	.word	0x1fff7584

080083f4 <APP_BLE_Init>:

/* USER CODE END EV */

/* Functions Definition ------------------------------------------------------*/
void APP_BLE_Init( void )
{
 80083f4:	b5b0      	push	{r4, r5, r7, lr}
 80083f6:	b08c      	sub	sp, #48	; 0x30
 80083f8:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APP_BLE_Init_1 */

/* USER CODE END APP_BLE_Init_1 */
  SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 80083fa:	4b21      	ldr	r3, [pc, #132]	; (8008480 <APP_BLE_Init+0x8c>)
 80083fc:	463c      	mov	r4, r7
 80083fe:	461d      	mov	r5, r3
 8008400:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008402:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008404:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008406:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008408:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800840c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  };

  /**
   * Initialize Ble Transport Layer
   */
  Ble_Tl_Init( );
 8008410:	f000 f978 	bl	8008704 <Ble_Tl_Init>

  /**
   * Do not allow standby in the application
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP_BLE, UTIL_LPM_DISABLE);
 8008414:	2101      	movs	r1, #1
 8008416:	2002      	movs	r0, #2
 8008418:	f000 ff1e 	bl	8009258 <UTIL_LPM_SetOffMode>

  /**
   * Register the hci transport layer to handle BLE User Asynchronous Events
   */
  UTIL_SEQ_RegTask( 1<<CFG_TASK_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, hci_user_evt_proc);
 800841c:	4a19      	ldr	r2, [pc, #100]	; (8008484 <APP_BLE_Init+0x90>)
 800841e:	2100      	movs	r1, #0
 8008420:	2002      	movs	r0, #2
 8008422:	f001 f833 	bl	800948c <UTIL_SEQ_RegTask>

  /**
   * Starts the BLE Stack on CPU2
   */
  if (SHCI_C2_BLE_Init( &ble_init_cmd_packet ) != SHCI_Success)
 8008426:	463b      	mov	r3, r7
 8008428:	4618      	mov	r0, r3
 800842a:	f7fe fcb9 	bl	8006da0 <SHCI_C2_BLE_Init>
 800842e:	4603      	mov	r3, r0
 8008430:	2b00      	cmp	r3, #0
 8008432:	d001      	beq.n	8008438 <APP_BLE_Init+0x44>
  {
    Error_Handler();
 8008434:	f7f8 ff76 	bl	8001324 <Error_Handler>
  }

  /**
   * Initialization of HCI & GATT & GAP layer
   */
  Ble_Hci_Gap_Gatt_Init();
 8008438:	f000 f97a 	bl	8008730 <Ble_Hci_Gap_Gatt_Init>

  /**
   * Initialization of the BLE Services
   */
  SVCCTL_Init();
 800843c:	f7fe fc0a 	bl	8006c54 <SVCCTL_Init>

  /**
   * Initialization of the BLE App Context
   */
  BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8008440:	4b11      	ldr	r3, [pc, #68]	; (8008488 <APP_BLE_Init+0x94>)
 8008442:	2200      	movs	r2, #0
 8008444:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0xFFFF;
 8008448:	4b0f      	ldr	r3, [pc, #60]	; (8008488 <APP_BLE_Init+0x94>)
 800844a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800844e:	82da      	strh	r2, [r3, #22]
  /**
   * From here, all initialization are BLE application specific
   */
  UTIL_SEQ_RegTask( 1<<CFG_TASK_ADV_CANCEL_ID, UTIL_SEQ_RFU, Adv_Cancel);
 8008450:	4a0e      	ldr	r2, [pc, #56]	; (800848c <APP_BLE_Init+0x98>)
 8008452:	2100      	movs	r1, #0
 8008454:	2001      	movs	r0, #1
 8008456:	f001 f819 	bl	800948c <UTIL_SEQ_RegTask>
  /**
   * Initialization of ADV - Ad Manufacturer Element - Support OTA Bit Mask
   */
#if(RADIO_ACTIVITY_EVENT != 0)
  aci_hal_set_radio_activity_mask(0x0006);
 800845a:	2006      	movs	r0, #6
 800845c:	f7fe fa8e 	bl	800697c <aci_hal_set_radio_activity_mask>
  mutex = 1;
#endif
  /**
   * Initialize Custom Template Application
   */
  Custom_APP_Init();
 8008460:	f000 fb78 	bl	8008b54 <Custom_APP_Init>
/* USER CODE END APP_BLE_Init_3 */

  /**
   * Make device discoverable
   */
  BleApplicationContext.BleApplicationContext_legacy.advtServUUID[0] = NULL;
 8008464:	4b08      	ldr	r3, [pc, #32]	; (8008488 <APP_BLE_Init+0x94>)
 8008466:	2200      	movs	r2, #0
 8008468:	765a      	strb	r2, [r3, #25]
  BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen = 0;
 800846a:	4b07      	ldr	r3, [pc, #28]	; (8008488 <APP_BLE_Init+0x94>)
 800846c:	2200      	movs	r2, #0
 800846e:	761a      	strb	r2, [r3, #24]

  /**
   * Start to Advertise to be connected by a Client
   */
   Adv_Request(APP_BLE_FAST_ADV);
 8008470:	2001      	movs	r0, #1
 8008472:	f000 f9f7 	bl	8008864 <Adv_Request>

/* USER CODE BEGIN APP_BLE_Init_2 */

/* USER CODE END APP_BLE_Init_2 */
  return;
 8008476:	bf00      	nop
}
 8008478:	3730      	adds	r7, #48	; 0x30
 800847a:	46bd      	mov	sp, r7
 800847c:	bdb0      	pop	{r4, r5, r7, pc}
 800847e:	bf00      	nop
 8008480:	0800a7cc 	.word	0x0800a7cc
 8008484:	08006e35 	.word	0x08006e35
 8008488:	2000017c 	.word	0x2000017c
 800848c:	080089a1 	.word	0x080089a1

08008490 <SVCCTL_App_Notification>:

SVCCTL_UserEvtFlowStatus_t SVCCTL_App_Notification( void *pckt )
{
 8008490:	b580      	push	{r7, lr}
 8008492:	b08a      	sub	sp, #40	; 0x28
 8008494:	af00      	add	r7, sp, #0
 8008496:	6078      	str	r0, [r7, #4]
  hci_event_pckt *event_pckt;
  evt_le_meta_event *meta_evt;
  evt_blecore_aci *blecore_evt;

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	3301      	adds	r3, #1
 800849c:	627b      	str	r3, [r7, #36]	; 0x24

  /* USER CODE BEGIN SVCCTL_App_Notification */

  /* USER CODE END SVCCTL_App_Notification */

  switch (event_pckt->evt)
 800849e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084a0:	781b      	ldrb	r3, [r3, #0]
 80084a2:	2bff      	cmp	r3, #255	; 0xff
 80084a4:	f000 8082 	beq.w	80085ac <SVCCTL_App_Notification+0x11c>
 80084a8:	2bff      	cmp	r3, #255	; 0xff
 80084aa:	f300 8108 	bgt.w	80086be <SVCCTL_App_Notification+0x22e>
 80084ae:	2b05      	cmp	r3, #5
 80084b0:	d002      	beq.n	80084b8 <SVCCTL_App_Notification+0x28>
 80084b2:	2b3e      	cmp	r3, #62	; 0x3e
 80084b4:	d02d      	beq.n	8008512 <SVCCTL_App_Notification+0x82>

      default:
      /* USER CODE BEGIN ECODE_DEFAULT*/

      /* USER CODE END ECODE_DEFAULT*/
      break;
 80084b6:	e102      	b.n	80086be <SVCCTL_App_Notification+0x22e>
      disconnection_complete_event = (hci_disconnection_complete_event_rp0 *) event_pckt->data;
 80084b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084ba:	3302      	adds	r3, #2
 80084bc:	60bb      	str	r3, [r7, #8]
      if (disconnection_complete_event->Connection_Handle == BleApplicationContext.BleApplicationContext_legacy.connectionHandle)
 80084be:	68bb      	ldr	r3, [r7, #8]
 80084c0:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80084c4:	b29a      	uxth	r2, r3
 80084c6:	4b82      	ldr	r3, [pc, #520]	; (80086d0 <SVCCTL_App_Notification+0x240>)
 80084c8:	8adb      	ldrh	r3, [r3, #22]
 80084ca:	429a      	cmp	r2, r3
 80084cc:	d113      	bne.n	80084f6 <SVCCTL_App_Notification+0x66>
        BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0;
 80084ce:	4b80      	ldr	r3, [pc, #512]	; (80086d0 <SVCCTL_App_Notification+0x240>)
 80084d0:	2200      	movs	r2, #0
 80084d2:	82da      	strh	r2, [r3, #22]
        BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 80084d4:	4b7e      	ldr	r3, [pc, #504]	; (80086d0 <SVCCTL_App_Notification+0x240>)
 80084d6:	2200      	movs	r2, #0
 80084d8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
        APP_DBG_MSG("\r\n\r** DISCONNECTION EVENT WITH CLIENT \n");
 80084dc:	487d      	ldr	r0, [pc, #500]	; (80086d4 <SVCCTL_App_Notification+0x244>)
 80084de:	f7ff f99f 	bl	8007820 <DbgTraceGetFileName>
 80084e2:	4601      	mov	r1, r0
 80084e4:	f44f 73c6 	mov.w	r3, #396	; 0x18c
 80084e8:	4a7b      	ldr	r2, [pc, #492]	; (80086d8 <SVCCTL_App_Notification+0x248>)
 80084ea:	487c      	ldr	r0, [pc, #496]	; (80086dc <SVCCTL_App_Notification+0x24c>)
 80084ec:	f001 f952 	bl	8009794 <iprintf>
 80084f0:	487b      	ldr	r0, [pc, #492]	; (80086e0 <SVCCTL_App_Notification+0x250>)
 80084f2:	f001 f9d5 	bl	80098a0 <puts>
      Adv_Request(APP_BLE_FAST_ADV);
 80084f6:	2001      	movs	r0, #1
 80084f8:	f000 f9b4 	bl	8008864 <Adv_Request>
      handleNotification.Custom_Evt_Opcode = CUSTOM_DISCON_HANDLE_EVT;
 80084fc:	4b79      	ldr	r3, [pc, #484]	; (80086e4 <SVCCTL_App_Notification+0x254>)
 80084fe:	2201      	movs	r2, #1
 8008500:	701a      	strb	r2, [r3, #0]
      handleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 8008502:	4b73      	ldr	r3, [pc, #460]	; (80086d0 <SVCCTL_App_Notification+0x240>)
 8008504:	8ada      	ldrh	r2, [r3, #22]
 8008506:	4b77      	ldr	r3, [pc, #476]	; (80086e4 <SVCCTL_App_Notification+0x254>)
 8008508:	805a      	strh	r2, [r3, #2]
      Custom_APP_Notification(&handleNotification);
 800850a:	4876      	ldr	r0, [pc, #472]	; (80086e4 <SVCCTL_App_Notification+0x254>)
 800850c:	f000 fb0e 	bl	8008b2c <Custom_APP_Notification>
    break; /* HCI_DISCONNECTION_COMPLETE_EVT_CODE */
 8008510:	e0d8      	b.n	80086c4 <SVCCTL_App_Notification+0x234>
      meta_evt = (evt_le_meta_event*) event_pckt->data;
 8008512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008514:	3302      	adds	r3, #2
 8008516:	613b      	str	r3, [r7, #16]
      switch (meta_evt->subevent)
 8008518:	693b      	ldr	r3, [r7, #16]
 800851a:	781b      	ldrb	r3, [r3, #0]
 800851c:	2b01      	cmp	r3, #1
 800851e:	d00f      	beq.n	8008540 <SVCCTL_App_Notification+0xb0>
 8008520:	2b03      	cmp	r3, #3
 8008522:	d141      	bne.n	80085a8 <SVCCTL_App_Notification+0x118>
          APP_DBG_MSG("\r\n\r** CONNECTION UPDATE EVENT WITH CLIENT \n");
 8008524:	486b      	ldr	r0, [pc, #428]	; (80086d4 <SVCCTL_App_Notification+0x244>)
 8008526:	f7ff f97b 	bl	8007820 <DbgTraceGetFileName>
 800852a:	4601      	mov	r1, r0
 800852c:	f44f 73d4 	mov.w	r3, #424	; 0x1a8
 8008530:	4a69      	ldr	r2, [pc, #420]	; (80086d8 <SVCCTL_App_Notification+0x248>)
 8008532:	486a      	ldr	r0, [pc, #424]	; (80086dc <SVCCTL_App_Notification+0x24c>)
 8008534:	f001 f92e 	bl	8009794 <iprintf>
 8008538:	486b      	ldr	r0, [pc, #428]	; (80086e8 <SVCCTL_App_Notification+0x258>)
 800853a:	f001 f9b1 	bl	80098a0 <puts>
          break;
 800853e:	e034      	b.n	80085aa <SVCCTL_App_Notification+0x11a>
          connection_complete_event = (hci_le_connection_complete_event_rp0 *) meta_evt->data;
 8008540:	693b      	ldr	r3, [r7, #16]
 8008542:	3301      	adds	r3, #1
 8008544:	60fb      	str	r3, [r7, #12]
          APP_DBG_MSG("HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE for connection handle 0x%x\n", connection_complete_event->Connection_Handle);
 8008546:	4863      	ldr	r0, [pc, #396]	; (80086d4 <SVCCTL_App_Notification+0x244>)
 8008548:	f7ff f96a 	bl	8007820 <DbgTraceGetFileName>
 800854c:	4601      	mov	r1, r0
 800854e:	f240 13b7 	movw	r3, #439	; 0x1b7
 8008552:	4a61      	ldr	r2, [pc, #388]	; (80086d8 <SVCCTL_App_Notification+0x248>)
 8008554:	4861      	ldr	r0, [pc, #388]	; (80086dc <SVCCTL_App_Notification+0x24c>)
 8008556:	f001 f91d 	bl	8009794 <iprintf>
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8008560:	b29b      	uxth	r3, r3
 8008562:	4619      	mov	r1, r3
 8008564:	4861      	ldr	r0, [pc, #388]	; (80086ec <SVCCTL_App_Notification+0x25c>)
 8008566:	f001 f915 	bl	8009794 <iprintf>
          if (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_CONNECTING)
 800856a:	4b59      	ldr	r3, [pc, #356]	; (80086d0 <SVCCTL_App_Notification+0x240>)
 800856c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008570:	2b04      	cmp	r3, #4
 8008572:	d104      	bne.n	800857e <SVCCTL_App_Notification+0xee>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_CLIENT;
 8008574:	4b56      	ldr	r3, [pc, #344]	; (80086d0 <SVCCTL_App_Notification+0x240>)
 8008576:	2206      	movs	r2, #6
 8008578:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
 800857c:	e003      	b.n	8008586 <SVCCTL_App_Notification+0xf6>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_SERVER;
 800857e:	4b54      	ldr	r3, [pc, #336]	; (80086d0 <SVCCTL_App_Notification+0x240>)
 8008580:	2205      	movs	r2, #5
 8008582:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
          BleApplicationContext.BleApplicationContext_legacy.connectionHandle = connection_complete_event->Connection_Handle;
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800858c:	b29a      	uxth	r2, r3
 800858e:	4b50      	ldr	r3, [pc, #320]	; (80086d0 <SVCCTL_App_Notification+0x240>)
 8008590:	82da      	strh	r2, [r3, #22]
          handleNotification.Custom_Evt_Opcode = CUSTOM_CONN_HANDLE_EVT;
 8008592:	4b54      	ldr	r3, [pc, #336]	; (80086e4 <SVCCTL_App_Notification+0x254>)
 8008594:	2200      	movs	r2, #0
 8008596:	701a      	strb	r2, [r3, #0]
          handleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 8008598:	4b4d      	ldr	r3, [pc, #308]	; (80086d0 <SVCCTL_App_Notification+0x240>)
 800859a:	8ada      	ldrh	r2, [r3, #22]
 800859c:	4b51      	ldr	r3, [pc, #324]	; (80086e4 <SVCCTL_App_Notification+0x254>)
 800859e:	805a      	strh	r2, [r3, #2]
          Custom_APP_Notification(&handleNotification);
 80085a0:	4850      	ldr	r0, [pc, #320]	; (80086e4 <SVCCTL_App_Notification+0x254>)
 80085a2:	f000 fac3 	bl	8008b2c <Custom_APP_Notification>
        break; /* HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE */
 80085a6:	e000      	b.n	80085aa <SVCCTL_App_Notification+0x11a>
          break;
 80085a8:	bf00      	nop
    break; /* HCI_LE_META_EVT_CODE */
 80085aa:	e08b      	b.n	80086c4 <SVCCTL_App_Notification+0x234>
      blecore_evt = (evt_blecore_aci*) event_pckt->data;
 80085ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085ae:	3302      	adds	r3, #2
 80085b0:	623b      	str	r3, [r7, #32]
      switch (blecore_evt->ecode)
 80085b2:	6a3b      	ldr	r3, [r7, #32]
 80085b4:	881b      	ldrh	r3, [r3, #0]
 80085b6:	b29b      	uxth	r3, r3
 80085b8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80085bc:	d07b      	beq.n	80086b6 <SVCCTL_App_Notification+0x226>
 80085be:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80085c2:	dc7e      	bgt.n	80086c2 <SVCCTL_App_Notification+0x232>
 80085c4:	2b04      	cmp	r3, #4
 80085c6:	d078      	beq.n	80086ba <SVCCTL_App_Notification+0x22a>
 80085c8:	2b04      	cmp	r3, #4
 80085ca:	db7a      	blt.n	80086c2 <SVCCTL_App_Notification+0x232>
 80085cc:	f240 420a 	movw	r2, #1034	; 0x40a
 80085d0:	4293      	cmp	r3, r2
 80085d2:	dc76      	bgt.n	80086c2 <SVCCTL_App_Notification+0x232>
 80085d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80085d8:	dd73      	ble.n	80086c2 <SVCCTL_App_Notification+0x232>
 80085da:	f2a3 4301 	subw	r3, r3, #1025	; 0x401
 80085de:	2b09      	cmp	r3, #9
 80085e0:	d86f      	bhi.n	80086c2 <SVCCTL_App_Notification+0x232>
 80085e2:	a201      	add	r2, pc, #4	; (adr r2, 80085e8 <SVCCTL_App_Notification+0x158>)
 80085e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085e8:	0800868f 	.word	0x0800868f
 80085ec:	08008649 	.word	0x08008649
 80085f0:	080086c3 	.word	0x080086c3
 80085f4:	080086c3 	.word	0x080086c3
 80085f8:	080086c3 	.word	0x080086c3
 80085fc:	080086c3 	.word	0x080086c3
 8008600:	08008611 	.word	0x08008611
 8008604:	080086c3 	.word	0x080086c3
 8008608:	08008657 	.word	0x08008657
 800860c:	0800862d 	.word	0x0800862d
        APP_DBG_MSG("\r\n\r** ACI_GAP_PROC_COMPLETE_VSEVT_CODE \n");
 8008610:	4830      	ldr	r0, [pc, #192]	; (80086d4 <SVCCTL_App_Notification+0x244>)
 8008612:	f7ff f905 	bl	8007820 <DbgTraceGetFileName>
 8008616:	4601      	mov	r1, r0
 8008618:	f44f 73f9 	mov.w	r3, #498	; 0x1f2
 800861c:	4a2e      	ldr	r2, [pc, #184]	; (80086d8 <SVCCTL_App_Notification+0x248>)
 800861e:	482f      	ldr	r0, [pc, #188]	; (80086dc <SVCCTL_App_Notification+0x24c>)
 8008620:	f001 f8b8 	bl	8009794 <iprintf>
 8008624:	4832      	ldr	r0, [pc, #200]	; (80086f0 <SVCCTL_App_Notification+0x260>)
 8008626:	f001 f93b 	bl	80098a0 <puts>
          break; /* ACI_GAP_PROC_COMPLETE_VSEVT_CODE */
 800862a:	e047      	b.n	80086bc <SVCCTL_App_Notification+0x22c>
         APP_DBG_MSG("\r\n\r** ACI_GAP_KEYPRESS_NOTIFICATION_VSEVT_CODE \n");
 800862c:	4829      	ldr	r0, [pc, #164]	; (80086d4 <SVCCTL_App_Notification+0x244>)
 800862e:	f7ff f8f7 	bl	8007820 <DbgTraceGetFileName>
 8008632:	4601      	mov	r1, r0
 8008634:	f240 2301 	movw	r3, #513	; 0x201
 8008638:	4a27      	ldr	r2, [pc, #156]	; (80086d8 <SVCCTL_App_Notification+0x248>)
 800863a:	4828      	ldr	r0, [pc, #160]	; (80086dc <SVCCTL_App_Notification+0x24c>)
 800863c:	f001 f8aa 	bl	8009794 <iprintf>
 8008640:	482c      	ldr	r0, [pc, #176]	; (80086f4 <SVCCTL_App_Notification+0x264>)
 8008642:	f001 f92d 	bl	80098a0 <puts>
        break;
 8008646:	e039      	b.n	80086bc <SVCCTL_App_Notification+0x22c>
            aci_gap_pass_key_resp(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, CFG_FIXED_PIN);
 8008648:	4b21      	ldr	r3, [pc, #132]	; (80086d0 <SVCCTL_App_Notification+0x240>)
 800864a:	8adb      	ldrh	r3, [r3, #22]
 800864c:	492a      	ldr	r1, [pc, #168]	; (80086f8 <SVCCTL_App_Notification+0x268>)
 800864e:	4618      	mov	r0, r3
 8008650:	f7fd fcd6 	bl	8006000 <aci_gap_pass_key_resp>
        break;
 8008654:	e032      	b.n	80086bc <SVCCTL_App_Notification+0x22c>
            evt_numeric_value = (aci_gap_numeric_comparison_value_event_rp0 *)blecore_evt->data;
 8008656:	6a3b      	ldr	r3, [r7, #32]
 8008658:	3302      	adds	r3, #2
 800865a:	61fb      	str	r3, [r7, #28]
            numeric_value = evt_numeric_value->Numeric_Value;
 800865c:	69fb      	ldr	r3, [r7, #28]
 800865e:	f8d3 3002 	ldr.w	r3, [r3, #2]
 8008662:	61bb      	str	r3, [r7, #24]
            APP_DBG_MSG("numeric_value = %ld\n", numeric_value);
 8008664:	481b      	ldr	r0, [pc, #108]	; (80086d4 <SVCCTL_App_Notification+0x244>)
 8008666:	f7ff f8db 	bl	8007820 <DbgTraceGetFileName>
 800866a:	4601      	mov	r1, r0
 800866c:	f240 230b 	movw	r3, #523	; 0x20b
 8008670:	4a19      	ldr	r2, [pc, #100]	; (80086d8 <SVCCTL_App_Notification+0x248>)
 8008672:	481a      	ldr	r0, [pc, #104]	; (80086dc <SVCCTL_App_Notification+0x24c>)
 8008674:	f001 f88e 	bl	8009794 <iprintf>
 8008678:	69b9      	ldr	r1, [r7, #24]
 800867a:	4820      	ldr	r0, [pc, #128]	; (80086fc <SVCCTL_App_Notification+0x26c>)
 800867c:	f001 f88a 	bl	8009794 <iprintf>
            aci_gap_numeric_comparison_value_confirm_yesno(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, YES);
 8008680:	4b13      	ldr	r3, [pc, #76]	; (80086d0 <SVCCTL_App_Notification+0x240>)
 8008682:	8adb      	ldrh	r3, [r3, #22]
 8008684:	2101      	movs	r1, #1
 8008686:	4618      	mov	r0, r3
 8008688:	f7fd fe1c 	bl	80062c4 <aci_gap_numeric_comparison_value_confirm_yesno>
        break;
 800868c:	e016      	b.n	80086bc <SVCCTL_App_Notification+0x22c>
            pairing_complete = (aci_gap_pairing_complete_event_rp0*)blecore_evt->data;
 800868e:	6a3b      	ldr	r3, [r7, #32]
 8008690:	3302      	adds	r3, #2
 8008692:	617b      	str	r3, [r7, #20]
            APP_DBG_MSG("BLE_CTRL_App_Notification: ACI_GAP_PAIRING_COMPLETE_VSEVT_CODE, pairing_complete->Status = %d\n",pairing_complete->Status);
 8008694:	480f      	ldr	r0, [pc, #60]	; (80086d4 <SVCCTL_App_Notification+0x244>)
 8008696:	f7ff f8c3 	bl	8007820 <DbgTraceGetFileName>
 800869a:	4601      	mov	r1, r0
 800869c:	f240 2311 	movw	r3, #529	; 0x211
 80086a0:	4a0d      	ldr	r2, [pc, #52]	; (80086d8 <SVCCTL_App_Notification+0x248>)
 80086a2:	480e      	ldr	r0, [pc, #56]	; (80086dc <SVCCTL_App_Notification+0x24c>)
 80086a4:	f001 f876 	bl	8009794 <iprintf>
 80086a8:	697b      	ldr	r3, [r7, #20]
 80086aa:	789b      	ldrb	r3, [r3, #2]
 80086ac:	4619      	mov	r1, r3
 80086ae:	4814      	ldr	r0, [pc, #80]	; (8008700 <SVCCTL_App_Notification+0x270>)
 80086b0:	f001 f870 	bl	8009794 <iprintf>
        break;
 80086b4:	e002      	b.n	80086bc <SVCCTL_App_Notification+0x22c>
      break;
 80086b6:	bf00      	nop
 80086b8:	e003      	b.n	80086c2 <SVCCTL_App_Notification+0x232>
          break; /* ACI_HAL_END_OF_RADIO_ACTIVITY_VSEVT_CODE */
 80086ba:	bf00      	nop
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 80086bc:	e001      	b.n	80086c2 <SVCCTL_App_Notification+0x232>
      break;
 80086be:	bf00      	nop
 80086c0:	e000      	b.n	80086c4 <SVCCTL_App_Notification+0x234>
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 80086c2:	bf00      	nop
  }

  return (SVCCTL_UserEvtFlowEnable);
 80086c4:	2301      	movs	r3, #1
}
 80086c6:	4618      	mov	r0, r3
 80086c8:	3728      	adds	r7, #40	; 0x28
 80086ca:	46bd      	mov	sp, r7
 80086cc:	bd80      	pop	{r7, pc}
 80086ce:	bf00      	nop
 80086d0:	2000017c 	.word	0x2000017c
 80086d4:	0800a7fc 	.word	0x0800a7fc
 80086d8:	0800ac40 	.word	0x0800ac40
 80086dc:	0800a818 	.word	0x0800a818
 80086e0:	0800a82c 	.word	0x0800a82c
 80086e4:	200014d0 	.word	0x200014d0
 80086e8:	0800a854 	.word	0x0800a854
 80086ec:	0800a880 	.word	0x0800a880
 80086f0:	0800a8c4 	.word	0x0800a8c4
 80086f4:	0800a8ec 	.word	0x0800a8ec
 80086f8:	0001b207 	.word	0x0001b207
 80086fc:	0800a91c 	.word	0x0800a91c
 8008700:	0800a934 	.word	0x0800a934

08008704 <Ble_Tl_Init>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Ble_Tl_Init( void )
{
 8008704:	b580      	push	{r7, lr}
 8008706:	b082      	sub	sp, #8
 8008708:	af00      	add	r7, sp, #0
  HCI_TL_HciInitConf_t Hci_Tl_Init_Conf;

  Hci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&BleCmdBuffer;
 800870a:	4b06      	ldr	r3, [pc, #24]	; (8008724 <Ble_Tl_Init+0x20>)
 800870c:	603b      	str	r3, [r7, #0]
  Hci_Tl_Init_Conf.StatusNotCallBack = BLE_StatusNot;
 800870e:	4b06      	ldr	r3, [pc, #24]	; (8008728 <Ble_Tl_Init+0x24>)
 8008710:	607b      	str	r3, [r7, #4]
  hci_init(BLE_UserEvtRx, (void*) &Hci_Tl_Init_Conf);
 8008712:	463b      	mov	r3, r7
 8008714:	4619      	mov	r1, r3
 8008716:	4805      	ldr	r0, [pc, #20]	; (800872c <Ble_Tl_Init+0x28>)
 8008718:	f7fe fb70 	bl	8006dfc <hci_init>

  return;
 800871c:	bf00      	nop
}
 800871e:	3708      	adds	r7, #8
 8008720:	46bd      	mov	sp, r7
 8008722:	bd80      	pop	{r7, pc}
 8008724:	200300d4 	.word	0x200300d4
 8008728:	08008abd 	.word	0x08008abd
 800872c:	08008a85 	.word	0x08008a85

08008730 <Ble_Hci_Gap_Gatt_Init>:

static void Ble_Hci_Gap_Gatt_Init(void){
 8008730:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008732:	b08d      	sub	sp, #52	; 0x34
 8008734:	af06      	add	r7, sp, #24

  uint8_t role;
  uint16_t gap_service_handle, gap_dev_name_char_handle, gap_appearance_char_handle;
  const uint8_t *bd_addr;
  uint16_t appearance[1] = { BLE_CFG_GAP_APPEARANCE };
 8008736:	2300      	movs	r3, #0
 8008738:	80bb      	strh	r3, [r7, #4]

  /**
   * Initialize HCI layer
   */
  /*HCI Reset to synchronise BLE Stack*/
  hci_reset();
 800873a:	f7fe f969 	bl	8006a10 <hci_reset>

  /**
   * Write the BD Address
   */

  bd_addr = BleGetBdAddress();
 800873e:	f000 f8eb 	bl	8008918 <BleGetBdAddress>
 8008742:	6178      	str	r0, [r7, #20]
  aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET,
 8008744:	697a      	ldr	r2, [r7, #20]
 8008746:	2106      	movs	r1, #6
 8008748:	2000      	movs	r0, #0
 800874a:	f7fe f857 	bl	80067fc <aci_hal_write_config_data>
#endif

  /**
   * Write Identity root key used to derive LTK and CSRK
   */
  aci_hal_write_config_data( CONFIG_DATA_IR_OFFSET, CONFIG_DATA_IR_LEN, (uint8_t*)BLE_CFG_IR_VALUE );
 800874e:	4a40      	ldr	r2, [pc, #256]	; (8008850 <Ble_Hci_Gap_Gatt_Init+0x120>)
 8008750:	2110      	movs	r1, #16
 8008752:	2018      	movs	r0, #24
 8008754:	f7fe f852 	bl	80067fc <aci_hal_write_config_data>

  /**
   * Write Encryption root key used to derive LTK and CSRK
   */
  aci_hal_write_config_data( CONFIG_DATA_ER_OFFSET, CONFIG_DATA_ER_LEN, (uint8_t*)BLE_CFG_ER_VALUE );
 8008758:	4a3e      	ldr	r2, [pc, #248]	; (8008854 <Ble_Hci_Gap_Gatt_Init+0x124>)
 800875a:	2110      	movs	r1, #16
 800875c:	2008      	movs	r0, #8
 800875e:	f7fe f84d 	bl	80067fc <aci_hal_write_config_data>

  /**
   * Set TX Power to 0dBm.
   */
  aci_hal_set_tx_power_level(1, CFG_TX_POWER);
 8008762:	2118      	movs	r1, #24
 8008764:	2001      	movs	r0, #1
 8008766:	f7fe f8b2 	bl	80068ce <aci_hal_set_tx_power_level>

  /**
   * Initialize GATT interface
   */
  aci_gatt_init();
 800876a:	f7fd fe02 	bl	8006372 <aci_gatt_init>

  /**
   * Initialize GAP interface
   */
  role = 0;
 800876e:	2300      	movs	r3, #0
 8008770:	74fb      	strb	r3, [r7, #19]

#if (BLE_CFG_PERIPHERAL == 1)
  role |= GAP_PERIPHERAL_ROLE;
 8008772:	7cfb      	ldrb	r3, [r7, #19]
 8008774:	f043 0301 	orr.w	r3, r3, #1
 8008778:	74fb      	strb	r3, [r7, #19]

#if (BLE_CFG_CENTRAL == 1)
  role |= GAP_CENTRAL_ROLE;
#endif

  if (role > 0)
 800877a:	7cfb      	ldrb	r3, [r7, #19]
 800877c:	2b00      	cmp	r3, #0
 800877e:	d01d      	beq.n	80087bc <Ble_Hci_Gap_Gatt_Init+0x8c>
  {
    const char *name = CFG_GAP_DEVICE_NAME;
 8008780:	4b35      	ldr	r3, [pc, #212]	; (8008858 <Ble_Hci_Gap_Gatt_Init+0x128>)
 8008782:	60fb      	str	r3, [r7, #12]
    aci_gap_init(role,
 8008784:	f107 020a 	add.w	r2, r7, #10
 8008788:	7cf8      	ldrb	r0, [r7, #19]
 800878a:	1dbb      	adds	r3, r7, #6
 800878c:	9301      	str	r3, [sp, #4]
 800878e:	f107 0308 	add.w	r3, r7, #8
 8008792:	9300      	str	r3, [sp, #0]
 8008794:	4613      	mov	r3, r2
 8008796:	2209      	movs	r2, #9
 8008798:	2100      	movs	r1, #0
 800879a:	f7fd fc88 	bl	80060ae <aci_gap_init>
                 CFG_GAP_DEVICE_NAME_LENGTH,
                 &gap_service_handle,
                 &gap_dev_name_char_handle,
                 &gap_appearance_char_handle);

    if (aci_gatt_update_char_value(gap_service_handle, gap_dev_name_char_handle, 0, strlen(name), (uint8_t *) name))
 800879e:	897c      	ldrh	r4, [r7, #10]
 80087a0:	893d      	ldrh	r5, [r7, #8]
 80087a2:	68f8      	ldr	r0, [r7, #12]
 80087a4:	f7f7 fcec 	bl	8000180 <strlen>
 80087a8:	4603      	mov	r3, r0
 80087aa:	b2da      	uxtb	r2, r3
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	9300      	str	r3, [sp, #0]
 80087b0:	4613      	mov	r3, r2
 80087b2:	2200      	movs	r2, #0
 80087b4:	4629      	mov	r1, r5
 80087b6:	4620      	mov	r0, r4
 80087b8:	f7fd ff99 	bl	80066ee <aci_gatt_update_char_value>
    {
      BLE_DBG_SVCCTL_MSG("Device Name aci_gatt_update_char_value failed.\n");
    }
  }

  if(aci_gatt_update_char_value(gap_service_handle,
 80087bc:	8978      	ldrh	r0, [r7, #10]
 80087be:	88f9      	ldrh	r1, [r7, #6]
 80087c0:	1d3b      	adds	r3, r7, #4
 80087c2:	9300      	str	r3, [sp, #0]
 80087c4:	2302      	movs	r3, #2
 80087c6:	2200      	movs	r2, #0
 80087c8:	f7fd ff91 	bl	80066ee <aci_gatt_update_char_value>
    BLE_DBG_SVCCTL_MSG("Appearance aci_gatt_update_char_value failed.\n");
  }
  /**
   * Initialize Default PHY
   */
  hci_le_set_default_phy(ALL_PHYS_PREFERENCE,TX_2M_PREFERRED,RX_2M_PREFERRED);
 80087cc:	2202      	movs	r2, #2
 80087ce:	2102      	movs	r1, #2
 80087d0:	2000      	movs	r0, #0
 80087d2:	f7fe f941 	bl	8006a58 <hci_le_set_default_phy>

  /**
   * Initialize IO capability
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability = CFG_IO_CAPABILITY;
 80087d6:	4b21      	ldr	r3, [pc, #132]	; (800885c <Ble_Hci_Gap_Gatt_Init+0x12c>)
 80087d8:	2201      	movs	r2, #1
 80087da:	701a      	strb	r2, [r3, #0]
  aci_gap_set_io_capability(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability);
 80087dc:	4b1f      	ldr	r3, [pc, #124]	; (800885c <Ble_Hci_Gap_Gatt_Init+0x12c>)
 80087de:	781b      	ldrb	r3, [r3, #0]
 80087e0:	4618      	mov	r0, r3
 80087e2:	f7fd fb1b 	bl	8005e1c <aci_gap_set_io_capability>

  /**
   * Initialize authentication
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.mitm_mode = CFG_MITM_PROTECTION;
 80087e6:	4b1d      	ldr	r3, [pc, #116]	; (800885c <Ble_Hci_Gap_Gatt_Init+0x12c>)
 80087e8:	2201      	movs	r2, #1
 80087ea:	705a      	strb	r2, [r3, #1]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin = CFG_ENCRYPTION_KEY_SIZE_MIN;
 80087ec:	4b1b      	ldr	r3, [pc, #108]	; (800885c <Ble_Hci_Gap_Gatt_Init+0x12c>)
 80087ee:	2208      	movs	r2, #8
 80087f0:	711a      	strb	r2, [r3, #4]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax = CFG_ENCRYPTION_KEY_SIZE_MAX;
 80087f2:	4b1a      	ldr	r3, [pc, #104]	; (800885c <Ble_Hci_Gap_Gatt_Init+0x12c>)
 80087f4:	2210      	movs	r2, #16
 80087f6:	715a      	strb	r2, [r3, #5]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin = CFG_USED_FIXED_PIN;
 80087f8:	4b18      	ldr	r3, [pc, #96]	; (800885c <Ble_Hci_Gap_Gatt_Init+0x12c>)
 80087fa:	2200      	movs	r2, #0
 80087fc:	70da      	strb	r2, [r3, #3]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin = CFG_FIXED_PIN;
 80087fe:	4b17      	ldr	r3, [pc, #92]	; (800885c <Ble_Hci_Gap_Gatt_Init+0x12c>)
 8008800:	4a17      	ldr	r2, [pc, #92]	; (8008860 <Ble_Hci_Gap_Gatt_Init+0x130>)
 8008802:	609a      	str	r2, [r3, #8]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode = CFG_BONDING_MODE;
 8008804:	4b15      	ldr	r3, [pc, #84]	; (800885c <Ble_Hci_Gap_Gatt_Init+0x12c>)
 8008806:	2200      	movs	r2, #0
 8008808:	709a      	strb	r2, [r3, #2]

  aci_gap_set_authentication_requirement(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode,
 800880a:	4b14      	ldr	r3, [pc, #80]	; (800885c <Ble_Hci_Gap_Gatt_Init+0x12c>)
 800880c:	789c      	ldrb	r4, [r3, #2]
 800880e:	4b13      	ldr	r3, [pc, #76]	; (800885c <Ble_Hci_Gap_Gatt_Init+0x12c>)
 8008810:	785d      	ldrb	r5, [r3, #1]
 8008812:	4b12      	ldr	r3, [pc, #72]	; (800885c <Ble_Hci_Gap_Gatt_Init+0x12c>)
 8008814:	791b      	ldrb	r3, [r3, #4]
 8008816:	4a11      	ldr	r2, [pc, #68]	; (800885c <Ble_Hci_Gap_Gatt_Init+0x12c>)
 8008818:	7952      	ldrb	r2, [r2, #5]
 800881a:	4910      	ldr	r1, [pc, #64]	; (800885c <Ble_Hci_Gap_Gatt_Init+0x12c>)
 800881c:	78c9      	ldrb	r1, [r1, #3]
 800881e:	480f      	ldr	r0, [pc, #60]	; (800885c <Ble_Hci_Gap_Gatt_Init+0x12c>)
 8008820:	6880      	ldr	r0, [r0, #8]
 8008822:	2600      	movs	r6, #0
 8008824:	9604      	str	r6, [sp, #16]
 8008826:	9003      	str	r0, [sp, #12]
 8008828:	9102      	str	r1, [sp, #8]
 800882a:	9201      	str	r2, [sp, #4]
 800882c:	9300      	str	r3, [sp, #0]
 800882e:	2300      	movs	r3, #0
 8008830:	2201      	movs	r2, #1
 8008832:	4629      	mov	r1, r5
 8008834:	4620      	mov	r0, r4
 8008836:	f7fd fb3b 	bl	8005eb0 <aci_gap_set_authentication_requirement>
                                         );

  /**
   * Initialize whitelist
   */
   if (BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode)
 800883a:	4b08      	ldr	r3, [pc, #32]	; (800885c <Ble_Hci_Gap_Gatt_Init+0x12c>)
 800883c:	789b      	ldrb	r3, [r3, #2]
 800883e:	2b00      	cmp	r3, #0
 8008840:	d001      	beq.n	8008846 <Ble_Hci_Gap_Gatt_Init+0x116>
   {
     aci_gap_configure_whitelist();
 8008842:	f7fd fd1b 	bl	800627c <aci_gap_configure_whitelist>
   }
}
 8008846:	bf00      	nop
 8008848:	371c      	adds	r7, #28
 800884a:	46bd      	mov	sp, r7
 800884c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800884e:	bf00      	nop
 8008850:	0800ac20 	.word	0x0800ac20
 8008854:	0800ac30 	.word	0x0800ac30
 8008858:	0800a994 	.word	0x0800a994
 800885c:	2000017c 	.word	0x2000017c
 8008860:	0001b207 	.word	0x0001b207

08008864 <Adv_Request>:

static void Adv_Request(APP_BLE_ConnStatus_t New_Status)
{
 8008864:	b580      	push	{r7, lr}
 8008866:	b08c      	sub	sp, #48	; 0x30
 8008868:	af08      	add	r7, sp, #32
 800886a:	4603      	mov	r3, r0
 800886c:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800886e:	2342      	movs	r3, #66	; 0x42
 8008870:	73fb      	strb	r3, [r7, #15]

    BleApplicationContext.Device_Connection_Status = New_Status;
 8008872:	4a22      	ldr	r2, [pc, #136]	; (80088fc <Adv_Request+0x98>)
 8008874:	79fb      	ldrb	r3, [r7, #7]
 8008876:	f882 3080 	strb.w	r3, [r2, #128]	; 0x80
    /* Start Fast or Low Power Advertising */
    ret = aci_gap_set_discoverable(
 800887a:	2300      	movs	r3, #0
 800887c:	9306      	str	r3, [sp, #24]
 800887e:	2300      	movs	r3, #0
 8008880:	9305      	str	r3, [sp, #20]
 8008882:	2300      	movs	r3, #0
 8008884:	9304      	str	r3, [sp, #16]
 8008886:	2300      	movs	r3, #0
 8008888:	9303      	str	r3, [sp, #12]
 800888a:	2300      	movs	r3, #0
 800888c:	9302      	str	r3, [sp, #8]
 800888e:	2300      	movs	r3, #0
 8008890:	9301      	str	r3, [sp, #4]
 8008892:	2300      	movs	r3, #0
 8008894:	9300      	str	r3, [sp, #0]
 8008896:	2300      	movs	r3, #0
 8008898:	22a0      	movs	r2, #160	; 0xa0
 800889a:	2180      	movs	r1, #128	; 0x80
 800889c:	2000      	movs	r0, #0
 800889e:	f7fd f9df 	bl	8005c60 <aci_gap_set_discoverable>
 80088a2:	4603      	mov	r3, r0
 80088a4:	73fb      	strb	r3, [r7, #15]
        0,
        0,
        0);

    /* Update Advertising data */
    ret = aci_gap_update_adv_data(sizeof(ad_data), (uint8_t*) ad_data);
 80088a6:	4916      	ldr	r1, [pc, #88]	; (8008900 <Adv_Request+0x9c>)
 80088a8:	200f      	movs	r0, #15
 80088aa:	f7fd fc8b 	bl	80061c4 <aci_gap_update_adv_data>
 80088ae:	4603      	mov	r3, r0
 80088b0:	73fb      	strb	r3, [r7, #15]

    if (ret == BLE_STATUS_SUCCESS)
 80088b2:	7bfb      	ldrb	r3, [r7, #15]
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d10d      	bne.n	80088d4 <Adv_Request+0x70>
    {
        APP_DBG_MSG("Successfully Start Fast Advertising \n" );
 80088b8:	4812      	ldr	r0, [pc, #72]	; (8008904 <Adv_Request+0xa0>)
 80088ba:	f7fe ffb1 	bl	8007820 <DbgTraceGetFileName>
 80088be:	4601      	mov	r1, r0
 80088c0:	f240 3305 	movw	r3, #773	; 0x305
 80088c4:	4a10      	ldr	r2, [pc, #64]	; (8008908 <Adv_Request+0xa4>)
 80088c6:	4811      	ldr	r0, [pc, #68]	; (800890c <Adv_Request+0xa8>)
 80088c8:	f000 ff64 	bl	8009794 <iprintf>
 80088cc:	4810      	ldr	r0, [pc, #64]	; (8008910 <Adv_Request+0xac>)
 80088ce:	f000 ffe7 	bl	80098a0 <puts>
    else
    {
        APP_DBG_MSG("Start Fast Advertising Failed , result: %d \n", ret);
    }

  return;
 80088d2:	e00f      	b.n	80088f4 <Adv_Request+0x90>
        APP_DBG_MSG("Start Fast Advertising Failed , result: %d \n", ret);
 80088d4:	480b      	ldr	r0, [pc, #44]	; (8008904 <Adv_Request+0xa0>)
 80088d6:	f7fe ffa3 	bl	8007820 <DbgTraceGetFileName>
 80088da:	4601      	mov	r1, r0
 80088dc:	f240 3309 	movw	r3, #777	; 0x309
 80088e0:	4a09      	ldr	r2, [pc, #36]	; (8008908 <Adv_Request+0xa4>)
 80088e2:	480a      	ldr	r0, [pc, #40]	; (800890c <Adv_Request+0xa8>)
 80088e4:	f000 ff56 	bl	8009794 <iprintf>
 80088e8:	7bfb      	ldrb	r3, [r7, #15]
 80088ea:	4619      	mov	r1, r3
 80088ec:	4809      	ldr	r0, [pc, #36]	; (8008914 <Adv_Request+0xb0>)
 80088ee:	f000 ff51 	bl	8009794 <iprintf>
  return;
 80088f2:	bf00      	nop
}
 80088f4:	3710      	adds	r7, #16
 80088f6:	46bd      	mov	sp, r7
 80088f8:	bd80      	pop	{r7, pc}
 80088fa:	bf00      	nop
 80088fc:	2000017c 	.word	0x2000017c
 8008900:	20000010 	.word	0x20000010
 8008904:	0800a7fc 	.word	0x0800a7fc
 8008908:	0800ac58 	.word	0x0800ac58
 800890c:	0800a818 	.word	0x0800a818
 8008910:	0800a9a0 	.word	0x0800a9a0
 8008914:	0800a9c8 	.word	0x0800a9c8

08008918 <BleGetBdAddress>:

const uint8_t* BleGetBdAddress( void )
{
 8008918:	b580      	push	{r7, lr}
 800891a:	b086      	sub	sp, #24
 800891c:	af00      	add	r7, sp, #0
  const uint8_t *bd_addr;
  uint32_t udn;
  uint32_t company_id;
  uint32_t device_id;

  udn = LL_FLASH_GetUDN();
 800891e:	f7ff fd45 	bl	80083ac <LL_FLASH_GetUDN>
 8008922:	6138      	str	r0, [r7, #16]

  if(udn != 0xFFFFFFFF)
 8008924:	693b      	ldr	r3, [r7, #16]
 8008926:	f1b3 3fff 	cmp.w	r3, #4294967295
 800892a:	d023      	beq.n	8008974 <BleGetBdAddress+0x5c>
  {
    company_id = LL_FLASH_GetSTCompanyID();
 800892c:	f7ff fd56 	bl	80083dc <LL_FLASH_GetSTCompanyID>
 8008930:	60b8      	str	r0, [r7, #8]
    device_id = LL_FLASH_GetDeviceID();
 8008932:	f7ff fd47 	bl	80083c4 <LL_FLASH_GetDeviceID>
 8008936:	6078      	str	r0, [r7, #4]
 * bit[23:16] : Device ID.
 * bit[15:0] : The last 16bits from the UDN
 * Note: In order to use the Public Address in a final product, a dedicated
 * 24bits company ID (OUI) shall be bought.
 */
    bd_addr_udn[0] = (uint8_t)(udn & 0x000000FF);
 8008938:	693b      	ldr	r3, [r7, #16]
 800893a:	b2da      	uxtb	r2, r3
 800893c:	4b16      	ldr	r3, [pc, #88]	; (8008998 <BleGetBdAddress+0x80>)
 800893e:	701a      	strb	r2, [r3, #0]
    bd_addr_udn[1] = (uint8_t)( (udn & 0x0000FF00) >> 8 );
 8008940:	693b      	ldr	r3, [r7, #16]
 8008942:	0a1b      	lsrs	r3, r3, #8
 8008944:	b2da      	uxtb	r2, r3
 8008946:	4b14      	ldr	r3, [pc, #80]	; (8008998 <BleGetBdAddress+0x80>)
 8008948:	705a      	strb	r2, [r3, #1]
    bd_addr_udn[2] = (uint8_t)device_id;
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	b2da      	uxtb	r2, r3
 800894e:	4b12      	ldr	r3, [pc, #72]	; (8008998 <BleGetBdAddress+0x80>)
 8008950:	709a      	strb	r2, [r3, #2]
    bd_addr_udn[3] = (uint8_t)(company_id & 0x000000FF);
 8008952:	68bb      	ldr	r3, [r7, #8]
 8008954:	b2da      	uxtb	r2, r3
 8008956:	4b10      	ldr	r3, [pc, #64]	; (8008998 <BleGetBdAddress+0x80>)
 8008958:	70da      	strb	r2, [r3, #3]
    bd_addr_udn[4] = (uint8_t)( (company_id & 0x0000FF00) >> 8 );
 800895a:	68bb      	ldr	r3, [r7, #8]
 800895c:	0a1b      	lsrs	r3, r3, #8
 800895e:	b2da      	uxtb	r2, r3
 8008960:	4b0d      	ldr	r3, [pc, #52]	; (8008998 <BleGetBdAddress+0x80>)
 8008962:	711a      	strb	r2, [r3, #4]
    bd_addr_udn[5] = (uint8_t)( (company_id & 0x00FF0000) >> 16 );
 8008964:	68bb      	ldr	r3, [r7, #8]
 8008966:	0c1b      	lsrs	r3, r3, #16
 8008968:	b2da      	uxtb	r2, r3
 800896a:	4b0b      	ldr	r3, [pc, #44]	; (8008998 <BleGetBdAddress+0x80>)
 800896c:	715a      	strb	r2, [r3, #5]

    bd_addr = (const uint8_t *)bd_addr_udn;
 800896e:	4b0a      	ldr	r3, [pc, #40]	; (8008998 <BleGetBdAddress+0x80>)
 8008970:	617b      	str	r3, [r7, #20]
 8008972:	e00b      	b.n	800898c <BleGetBdAddress+0x74>
  }
  else
  {
    otp_addr = OTP_Read(0);
 8008974:	2000      	movs	r0, #0
 8008976:	f7ff f831 	bl	80079dc <OTP_Read>
 800897a:	60f8      	str	r0, [r7, #12]
    if(otp_addr)
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	2b00      	cmp	r3, #0
 8008980:	d002      	beq.n	8008988 <BleGetBdAddress+0x70>
    {
      bd_addr = ((OTP_ID0_t*)otp_addr)->bd_address;
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	617b      	str	r3, [r7, #20]
 8008986:	e001      	b.n	800898c <BleGetBdAddress+0x74>
    }
    else
    {
      bd_addr = M_bd_addr;
 8008988:	4b04      	ldr	r3, [pc, #16]	; (800899c <BleGetBdAddress+0x84>)
 800898a:	617b      	str	r3, [r7, #20]
    }
  }

  return bd_addr;
 800898c:	697b      	ldr	r3, [r7, #20]
}
 800898e:	4618      	mov	r0, r3
 8008990:	3718      	adds	r7, #24
 8008992:	46bd      	mov	sp, r7
 8008994:	bd80      	pop	{r7, pc}
 8008996:	bf00      	nop
 8008998:	200012b8 	.word	0x200012b8
 800899c:	0800ac18 	.word	0x0800ac18

080089a0 <Adv_Cancel>:
 *
 *SPECIFIC FUNCTIONS FOR CUSTOM
 *
 *************************************************************/
static void Adv_Cancel( void )
{
 80089a0:	b580      	push	{r7, lr}
 80089a2:	b082      	sub	sp, #8
 80089a4:	af00      	add	r7, sp, #0
/* USER CODE BEGIN Adv_Cancel_1 */

/* USER CODE END Adv_Cancel_1 */

  if (BleApplicationContext.Device_Connection_Status != APP_BLE_CONNECTED_SERVER)
 80089a6:	4b1f      	ldr	r3, [pc, #124]	; (8008a24 <Adv_Cancel+0x84>)
 80089a8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80089ac:	2b05      	cmp	r3, #5
 80089ae:	d035      	beq.n	8008a1c <Adv_Cancel+0x7c>

  {

    tBleStatus result = 0x00;
 80089b0:	2300      	movs	r3, #0
 80089b2:	71fb      	strb	r3, [r7, #7]

    result = aci_gap_set_non_discoverable();
 80089b4:	f7fd f930 	bl	8005c18 <aci_gap_set_non_discoverable>
 80089b8:	4603      	mov	r3, r0
 80089ba:	71fb      	strb	r3, [r7, #7]

    BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 80089bc:	4b19      	ldr	r3, [pc, #100]	; (8008a24 <Adv_Cancel+0x84>)
 80089be:	2200      	movs	r2, #0
 80089c0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    if (result == BLE_STATUS_SUCCESS)
 80089c4:	79fb      	ldrb	r3, [r7, #7]
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d11a      	bne.n	8008a00 <Adv_Cancel+0x60>
    {
      APP_DBG_MSG("  \r\n\r");APP_DBG_MSG("** STOP ADVERTISING **  \r\n\r");
 80089ca:	4817      	ldr	r0, [pc, #92]	; (8008a28 <Adv_Cancel+0x88>)
 80089cc:	f7fe ff28 	bl	8007820 <DbgTraceGetFileName>
 80089d0:	4601      	mov	r1, r0
 80089d2:	f240 3359 	movw	r3, #857	; 0x359
 80089d6:	4a15      	ldr	r2, [pc, #84]	; (8008a2c <Adv_Cancel+0x8c>)
 80089d8:	4815      	ldr	r0, [pc, #84]	; (8008a30 <Adv_Cancel+0x90>)
 80089da:	f000 fedb 	bl	8009794 <iprintf>
 80089de:	4815      	ldr	r0, [pc, #84]	; (8008a34 <Adv_Cancel+0x94>)
 80089e0:	f000 fed8 	bl	8009794 <iprintf>
 80089e4:	4810      	ldr	r0, [pc, #64]	; (8008a28 <Adv_Cancel+0x88>)
 80089e6:	f7fe ff1b 	bl	8007820 <DbgTraceGetFileName>
 80089ea:	4601      	mov	r1, r0
 80089ec:	f240 3359 	movw	r3, #857	; 0x359
 80089f0:	4a0e      	ldr	r2, [pc, #56]	; (8008a2c <Adv_Cancel+0x8c>)
 80089f2:	480f      	ldr	r0, [pc, #60]	; (8008a30 <Adv_Cancel+0x90>)
 80089f4:	f000 fece 	bl	8009794 <iprintf>
 80089f8:	480f      	ldr	r0, [pc, #60]	; (8008a38 <Adv_Cancel+0x98>)
 80089fa:	f000 fecb 	bl	8009794 <iprintf>
  }

/* USER CODE BEGIN Adv_Cancel_2 */

/* USER CODE END Adv_Cancel_2 */
  return;
 80089fe:	e00d      	b.n	8008a1c <Adv_Cancel+0x7c>
      APP_DBG_MSG("** STOP ADVERTISING **  Failed \r\n\r");
 8008a00:	4809      	ldr	r0, [pc, #36]	; (8008a28 <Adv_Cancel+0x88>)
 8008a02:	f7fe ff0d 	bl	8007820 <DbgTraceGetFileName>
 8008a06:	4601      	mov	r1, r0
 8008a08:	f240 335d 	movw	r3, #861	; 0x35d
 8008a0c:	4a07      	ldr	r2, [pc, #28]	; (8008a2c <Adv_Cancel+0x8c>)
 8008a0e:	4808      	ldr	r0, [pc, #32]	; (8008a30 <Adv_Cancel+0x90>)
 8008a10:	f000 fec0 	bl	8009794 <iprintf>
 8008a14:	4809      	ldr	r0, [pc, #36]	; (8008a3c <Adv_Cancel+0x9c>)
 8008a16:	f000 febd 	bl	8009794 <iprintf>
  return;
 8008a1a:	bf00      	nop
 8008a1c:	bf00      	nop
}
 8008a1e:	3708      	adds	r7, #8
 8008a20:	46bd      	mov	sp, r7
 8008a22:	bd80      	pop	{r7, pc}
 8008a24:	2000017c 	.word	0x2000017c
 8008a28:	0800a7fc 	.word	0x0800a7fc
 8008a2c:	0800ac64 	.word	0x0800ac64
 8008a30:	0800a818 	.word	0x0800a818
 8008a34:	0800a9f8 	.word	0x0800a9f8
 8008a38:	0800aa00 	.word	0x0800aa00
 8008a3c:	0800aa1c 	.word	0x0800aa1c

08008a40 <hci_notify_asynch_evt>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void hci_notify_asynch_evt(void* pdata)
{
 8008a40:	b580      	push	{r7, lr}
 8008a42:	b082      	sub	sp, #8
 8008a44:	af00      	add	r7, sp, #0
 8008a46:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1 << CFG_TASK_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 8008a48:	2100      	movs	r1, #0
 8008a4a:	2002      	movs	r0, #2
 8008a4c:	f000 fd40 	bl	80094d0 <UTIL_SEQ_SetTask>
  return;
 8008a50:	bf00      	nop
}
 8008a52:	3708      	adds	r7, #8
 8008a54:	46bd      	mov	sp, r7
 8008a56:	bd80      	pop	{r7, pc}

08008a58 <hci_cmd_resp_release>:

void hci_cmd_resp_release(uint32_t flag)
{
 8008a58:	b580      	push	{r7, lr}
 8008a5a:	b082      	sub	sp, #8
 8008a5c:	af00      	add	r7, sp, #0
 8008a5e:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 8008a60:	2001      	movs	r0, #1
 8008a62:	f000 fda1 	bl	80095a8 <UTIL_SEQ_SetEvt>
  return;
 8008a66:	bf00      	nop
}
 8008a68:	3708      	adds	r7, #8
 8008a6a:	46bd      	mov	sp, r7
 8008a6c:	bd80      	pop	{r7, pc}

08008a6e <hci_cmd_resp_wait>:

void hci_cmd_resp_wait(uint32_t timeout)
{
 8008a6e:	b580      	push	{r7, lr}
 8008a70:	b082      	sub	sp, #8
 8008a72:	af00      	add	r7, sp, #0
 8008a74:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 8008a76:	2001      	movs	r0, #1
 8008a78:	f000 fdb6 	bl	80095e8 <UTIL_SEQ_WaitEvt>
  return;
 8008a7c:	bf00      	nop
}
 8008a7e:	3708      	adds	r7, #8
 8008a80:	46bd      	mov	sp, r7
 8008a82:	bd80      	pop	{r7, pc}

08008a84 <BLE_UserEvtRx>:

static void BLE_UserEvtRx( void * pPayload )
{
 8008a84:	b580      	push	{r7, lr}
 8008a86:	b084      	sub	sp, #16
 8008a88:	af00      	add	r7, sp, #0
 8008a8a:	6078      	str	r0, [r7, #4]
  SVCCTL_UserEvtFlowStatus_t svctl_return_status;
  tHCI_UserEvtRxParam *pParam;

  pParam = (tHCI_UserEvtRxParam *)pPayload;
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	60fb      	str	r3, [r7, #12]

  svctl_return_status = SVCCTL_UserEvtRx((void *)&(pParam->pckt->evtserial));
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	685b      	ldr	r3, [r3, #4]
 8008a94:	3308      	adds	r3, #8
 8008a96:	4618      	mov	r0, r3
 8008a98:	f7fe f92e 	bl	8006cf8 <SVCCTL_UserEvtRx>
 8008a9c:	4603      	mov	r3, r0
 8008a9e:	72fb      	strb	r3, [r7, #11]
  if (svctl_return_status != SVCCTL_UserEvtFlowDisable)
 8008aa0:	7afb      	ldrb	r3, [r7, #11]
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d003      	beq.n	8008aae <BLE_UserEvtRx+0x2a>
  {
    pParam->status = HCI_TL_UserEventFlow_Enable;
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	2201      	movs	r2, #1
 8008aaa:	701a      	strb	r2, [r3, #0]
  }
  else
  {
    pParam->status = HCI_TL_UserEventFlow_Disable;
  }
}
 8008aac:	e002      	b.n	8008ab4 <BLE_UserEvtRx+0x30>
    pParam->status = HCI_TL_UserEventFlow_Disable;
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	2200      	movs	r2, #0
 8008ab2:	701a      	strb	r2, [r3, #0]
}
 8008ab4:	bf00      	nop
 8008ab6:	3710      	adds	r7, #16
 8008ab8:	46bd      	mov	sp, r7
 8008aba:	bd80      	pop	{r7, pc}

08008abc <BLE_StatusNot>:

static void BLE_StatusNot( HCI_TL_CmdStatus_t status )
{
 8008abc:	b580      	push	{r7, lr}
 8008abe:	b084      	sub	sp, #16
 8008ac0:	af00      	add	r7, sp, #0
 8008ac2:	4603      	mov	r3, r0
 8008ac4:	71fb      	strb	r3, [r7, #7]
  uint32_t task_id_list;
  switch (status)
 8008ac6:	79fb      	ldrb	r3, [r7, #7]
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d002      	beq.n	8008ad2 <BLE_StatusNot+0x16>
 8008acc:	2b01      	cmp	r3, #1
 8008ace:	d006      	beq.n	8008ade <BLE_StatusNot+0x22>
      UTIL_SEQ_ResumeTask(task_id_list);

      break;

    default:
      break;
 8008ad0:	e00b      	b.n	8008aea <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 8008ad2:	2303      	movs	r3, #3
 8008ad4:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_PauseTask(task_id_list);
 8008ad6:	68f8      	ldr	r0, [r7, #12]
 8008ad8:	f000 fd26 	bl	8009528 <UTIL_SEQ_PauseTask>
      break;
 8008adc:	e005      	b.n	8008aea <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 8008ade:	2303      	movs	r3, #3
 8008ae0:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_ResumeTask(task_id_list);
 8008ae2:	68f8      	ldr	r0, [r7, #12]
 8008ae4:	f000 fd40 	bl	8009568 <UTIL_SEQ_ResumeTask>
      break;
 8008ae8:	bf00      	nop
  }
  return;
 8008aea:	bf00      	nop
}
 8008aec:	3710      	adds	r7, #16
 8008aee:	46bd      	mov	sp, r7
 8008af0:	bd80      	pop	{r7, pc}
	...

08008af4 <Custom_STM_App_Notification>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void Custom_STM_App_Notification(Custom_STM_App_Notification_evt_t *pNotification)
{
 8008af4:	b480      	push	{r7}
 8008af6:	b083      	sub	sp, #12
 8008af8:	af00      	add	r7, sp, #0
 8008afa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CUSTOM_STM_App_Notification_1 */

  /* USER CODE END CUSTOM_STM_App_Notification_1 */
  switch(pNotification->Custom_Evt_Opcode)
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	781b      	ldrb	r3, [r3, #0]
 8008b00:	2b03      	cmp	r3, #3
 8008b02:	d80b      	bhi.n	8008b1c <Custom_STM_App_Notification+0x28>
 8008b04:	a201      	add	r2, pc, #4	; (adr r2, 8008b0c <Custom_STM_App_Notification+0x18>)
 8008b06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b0a:	bf00      	nop
 8008b0c:	08008b1d 	.word	0x08008b1d
 8008b10:	08008b1d 	.word	0x08008b1d
 8008b14:	08008b1d 	.word	0x08008b1d
 8008b18:	08008b1d 	.word	0x08008b1d

    default:
      /* USER CODE BEGIN CUSTOM_STM_App_Notification_default */

      /* USER CODE END CUSTOM_STM_App_Notification_default */
      break;
 8008b1c:	bf00      	nop
  }
  /* USER CODE BEGIN CUSTOM_STM_App_Notification_2 */

  /* USER CODE END CUSTOM_STM_App_Notification_2 */
  return;
 8008b1e:	bf00      	nop
}
 8008b20:	370c      	adds	r7, #12
 8008b22:	46bd      	mov	sp, r7
 8008b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b28:	4770      	bx	lr
 8008b2a:	bf00      	nop

08008b2c <Custom_APP_Notification>:

void Custom_APP_Notification(Custom_App_ConnHandle_Not_evt_t *pNotification)
{
 8008b2c:	b480      	push	{r7}
 8008b2e:	b083      	sub	sp, #12
 8008b30:	af00      	add	r7, sp, #0
 8008b32:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CUSTOM_APP_Notification_1 */

  /* USER CODE END CUSTOM_APP_Notification_1 */

  switch(pNotification->Custom_Evt_Opcode)
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	781b      	ldrb	r3, [r3, #0]
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d002      	beq.n	8008b42 <Custom_APP_Notification+0x16>
 8008b3c:	2b01      	cmp	r3, #1
 8008b3e:	d002      	beq.n	8008b46 <Custom_APP_Notification+0x1a>

    default:
      /* USER CODE BEGIN CUSTOM_APP_Notification_default */

      /* USER CODE END CUSTOM_APP_Notification_default */
      break;
 8008b40:	e002      	b.n	8008b48 <Custom_APP_Notification+0x1c>
      break;
 8008b42:	bf00      	nop
 8008b44:	e000      	b.n	8008b48 <Custom_APP_Notification+0x1c>
      break;
 8008b46:	bf00      	nop

  /* USER CODE BEGIN CUSTOM_APP_Notification_2 */

  /* USER CODE END CUSTOM_APP_Notification_2 */

  return;
 8008b48:	bf00      	nop
}
 8008b4a:	370c      	adds	r7, #12
 8008b4c:	46bd      	mov	sp, r7
 8008b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b52:	4770      	bx	lr

08008b54 <Custom_APP_Init>:

void Custom_APP_Init(void)
{
 8008b54:	b480      	push	{r7}
 8008b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CUSTOM_APP_Init */

  /* USER CODE END CUSTOM_APP_Init */
  return;
 8008b58:	bf00      	nop
}
 8008b5a:	46bd      	mov	sp, r7
 8008b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b60:	4770      	bx	lr
	...

08008b64 <Custom_STM_Event_Handler>:
 * @brief  Event handler
 * @param  Event: Address of the buffer holding the Event
 * @retval Ack: Return whether the Event has been managed or not
 */
static SVCCTL_EvtAckStatus_t Custom_STM_Event_Handler(void *Event)
{
 8008b64:	b580      	push	{r7, lr}
 8008b66:	b08a      	sub	sp, #40	; 0x28
 8008b68:	af00      	add	r7, sp, #0
 8008b6a:	6078      	str	r0, [r7, #4]
  Custom_STM_App_Notification_evt_t     Notification;
  /* USER CODE BEGIN Custom_STM_Event_Handler_1 */

  /* USER CODE END Custom_STM_Event_Handler_1 */

  return_value = SVCCTL_EvtNotAck;
 8008b6c:	2300      	movs	r3, #0
 8008b6e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  event_pckt = (hci_event_pckt *)(((hci_uart_pckt*)Event)->data);
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	3301      	adds	r3, #1
 8008b76:	623b      	str	r3, [r7, #32]

  switch(event_pckt->evt)
 8008b78:	6a3b      	ldr	r3, [r7, #32]
 8008b7a:	781b      	ldrb	r3, [r3, #0]
 8008b7c:	2bff      	cmp	r3, #255	; 0xff
 8008b7e:	d14f      	bne.n	8008c20 <Custom_STM_Event_Handler+0xbc>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
      blecore_evt = (evt_blecore_aci*)event_pckt->data;
 8008b80:	6a3b      	ldr	r3, [r7, #32]
 8008b82:	3302      	adds	r3, #2
 8008b84:	61fb      	str	r3, [r7, #28]
      switch(blecore_evt->ecode)
 8008b86:	69fb      	ldr	r3, [r7, #28]
 8008b88:	881b      	ldrh	r3, [r3, #0]
 8008b8a:	b29b      	uxth	r3, r3
 8008b8c:	f640 4214 	movw	r2, #3092	; 0xc14
 8008b90:	4293      	cmp	r3, r2
 8008b92:	d03f      	beq.n	8008c14 <Custom_STM_Event_Handler+0xb0>
 8008b94:	f640 4214 	movw	r2, #3092	; 0xc14
 8008b98:	4293      	cmp	r3, r2
 8008b9a:	dc3d      	bgt.n	8008c18 <Custom_STM_Event_Handler+0xb4>
 8008b9c:	f640 4201 	movw	r2, #3073	; 0xc01
 8008ba0:	4293      	cmp	r3, r2
 8008ba2:	d003      	beq.n	8008bac <Custom_STM_Event_Handler+0x48>
 8008ba4:	f640 4213 	movw	r2, #3091	; 0xc13
 8008ba8:	4293      	cmp	r3, r2

          /* USER CODE END EVT_BLUE_GATT_WRITE_PERMIT_REQ_BEGIN */
          /* USER CODE BEGIN EVT_BLUE_GATT_WRITE_PERMIT_REQ_END */

          /* USER CODE END EVT_BLUE_GATT_WRITE_PERMIT_REQ_END */
          break;
 8008baa:	e038      	b.n	8008c1e <Custom_STM_Event_Handler+0xba>
          attribute_modified = (aci_gatt_attribute_modified_event_rp0*)blecore_evt->data;
 8008bac:	69fb      	ldr	r3, [r7, #28]
 8008bae:	3302      	adds	r3, #2
 8008bb0:	61bb      	str	r3, [r7, #24]
          if(attribute_modified->Attr_Handle == (CustomContext.CustomButton_CHdle + CHARACTERISTIC_DESCRIPTOR_ATTRIBUTE_OFFSET))
 8008bb2:	69bb      	ldr	r3, [r7, #24]
 8008bb4:	885b      	ldrh	r3, [r3, #2]
 8008bb6:	b29b      	uxth	r3, r3
 8008bb8:	461a      	mov	r2, r3
 8008bba:	4b1d      	ldr	r3, [pc, #116]	; (8008c30 <Custom_STM_Event_Handler+0xcc>)
 8008bbc:	889b      	ldrh	r3, [r3, #4]
 8008bbe:	3302      	adds	r3, #2
 8008bc0:	429a      	cmp	r2, r3
 8008bc2:	d119      	bne.n	8008bf8 <Custom_STM_Event_Handler+0x94>
            return_value = SVCCTL_EvtAckFlowEnable;
 8008bc4:	2301      	movs	r3, #1
 8008bc6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            switch(attribute_modified->Attr_Data[0])
 8008bca:	69bb      	ldr	r3, [r7, #24]
 8008bcc:	7a1b      	ldrb	r3, [r3, #8]
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d002      	beq.n	8008bd8 <Custom_STM_Event_Handler+0x74>
 8008bd2:	2b01      	cmp	r3, #1
 8008bd4:	d008      	beq.n	8008be8 <Custom_STM_Event_Handler+0x84>
              break;
 8008bd6:	e01c      	b.n	8008c12 <Custom_STM_Event_Handler+0xae>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_BUTTON_C_NOTIFY_DISABLED_EVT;
 8008bd8:	2303      	movs	r3, #3
 8008bda:	723b      	strb	r3, [r7, #8]
                Custom_STM_App_Notification(&Notification);
 8008bdc:	f107 0308 	add.w	r3, r7, #8
 8008be0:	4618      	mov	r0, r3
 8008be2:	f7ff ff87 	bl	8008af4 <Custom_STM_App_Notification>
                break;
 8008be6:	e014      	b.n	8008c12 <Custom_STM_Event_Handler+0xae>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_BUTTON_C_NOTIFY_ENABLED_EVT;
 8008be8:	2302      	movs	r3, #2
 8008bea:	723b      	strb	r3, [r7, #8]
                Custom_STM_App_Notification(&Notification);
 8008bec:	f107 0308 	add.w	r3, r7, #8
 8008bf0:	4618      	mov	r0, r3
 8008bf2:	f7ff ff7f 	bl	8008af4 <Custom_STM_App_Notification>
                break;
 8008bf6:	e00c      	b.n	8008c12 <Custom_STM_Event_Handler+0xae>
          else if(attribute_modified->Attr_Handle == (CustomContext.CustomLed_CHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))
 8008bf8:	69bb      	ldr	r3, [r7, #24]
 8008bfa:	885b      	ldrh	r3, [r3, #2]
 8008bfc:	b29b      	uxth	r3, r3
 8008bfe:	461a      	mov	r2, r3
 8008c00:	4b0b      	ldr	r3, [pc, #44]	; (8008c30 <Custom_STM_Event_Handler+0xcc>)
 8008c02:	885b      	ldrh	r3, [r3, #2]
 8008c04:	3301      	adds	r3, #1
 8008c06:	429a      	cmp	r2, r3
 8008c08:	d108      	bne.n	8008c1c <Custom_STM_Event_Handler+0xb8>
            return_value = SVCCTL_EvtAckFlowEnable;
 8008c0a:	2301      	movs	r3, #1
 8008c0c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          break;
 8008c10:	e004      	b.n	8008c1c <Custom_STM_Event_Handler+0xb8>
 8008c12:	e003      	b.n	8008c1c <Custom_STM_Event_Handler+0xb8>
          break;
 8008c14:	bf00      	nop
 8008c16:	e004      	b.n	8008c22 <Custom_STM_Event_Handler+0xbe>
        /* USER CODE END BLECORE_EVT */
        default:
          /* USER CODE BEGIN EVT_DEFAULT */

          /* USER CODE END EVT_DEFAULT */
          break;
 8008c18:	bf00      	nop
 8008c1a:	e002      	b.n	8008c22 <Custom_STM_Event_Handler+0xbe>
          break;
 8008c1c:	bf00      	nop
      }
      /* USER CODE BEGIN EVT_VENDOR*/

      /* USER CODE END EVT_VENDOR*/
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 8008c1e:	e000      	b.n	8008c22 <Custom_STM_Event_Handler+0xbe>

    default:
      /* USER CODE BEGIN EVENT_PCKT*/

      /* USER CODE END EVENT_PCKT*/
      break;
 8008c20:	bf00      	nop

  /* USER CODE BEGIN Custom_STM_Event_Handler_2 */

  /* USER CODE END Custom_STM_Event_Handler_2 */

  return(return_value);
 8008c22:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}/* end Custom_STM_Event_Handler */
 8008c26:	4618      	mov	r0, r3
 8008c28:	3728      	adds	r7, #40	; 0x28
 8008c2a:	46bd      	mov	sp, r7
 8008c2c:	bd80      	pop	{r7, pc}
 8008c2e:	bf00      	nop
 8008c30:	20000160 	.word	0x20000160

08008c34 <SVCCTL_InitCustomSvc>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void SVCCTL_InitCustomSvc(void)
{
 8008c34:	b580      	push	{r7, lr}
 8008c36:	b08a      	sub	sp, #40	; 0x28
 8008c38:	af06      	add	r7, sp, #24
  /* USER CODE END SVCCTL_InitCustomSvc_1 */

  /**
   *  Register the event handler to the BLE controller
   */
  SVCCTL_RegisterSvcHandler(Custom_STM_Event_Handler);
 8008c3a:	484b      	ldr	r0, [pc, #300]	; (8008d68 <SVCCTL_InitCustomSvc+0x134>)
 8008c3c:	f7fe f842 	bl	8006cc4 <SVCCTL_RegisterSvcHandler>
   *                                2 for My_Button_Char +
   *                                1 for My_Button_Char configuration descriptor +
   *                              = 6
   */

  COPY_MY_P2P_SERVER_UUID(uuid.Char_UUID_128);
 8008c40:	238f      	movs	r3, #143	; 0x8f
 8008c42:	703b      	strb	r3, [r7, #0]
 8008c44:	23e5      	movs	r3, #229	; 0xe5
 8008c46:	707b      	strb	r3, [r7, #1]
 8008c48:	23b3      	movs	r3, #179	; 0xb3
 8008c4a:	70bb      	strb	r3, [r7, #2]
 8008c4c:	23d5      	movs	r3, #213	; 0xd5
 8008c4e:	70fb      	strb	r3, [r7, #3]
 8008c50:	232e      	movs	r3, #46	; 0x2e
 8008c52:	713b      	strb	r3, [r7, #4]
 8008c54:	237f      	movs	r3, #127	; 0x7f
 8008c56:	717b      	strb	r3, [r7, #5]
 8008c58:	234a      	movs	r3, #74	; 0x4a
 8008c5a:	71bb      	strb	r3, [r7, #6]
 8008c5c:	2398      	movs	r3, #152	; 0x98
 8008c5e:	71fb      	strb	r3, [r7, #7]
 8008c60:	232a      	movs	r3, #42	; 0x2a
 8008c62:	723b      	strb	r3, [r7, #8]
 8008c64:	2348      	movs	r3, #72	; 0x48
 8008c66:	727b      	strb	r3, [r7, #9]
 8008c68:	237a      	movs	r3, #122	; 0x7a
 8008c6a:	72bb      	strb	r3, [r7, #10]
 8008c6c:	23cc      	movs	r3, #204	; 0xcc
 8008c6e:	72fb      	strb	r3, [r7, #11]
 8008c70:	2340      	movs	r3, #64	; 0x40
 8008c72:	733b      	strb	r3, [r7, #12]
 8008c74:	23fe      	movs	r3, #254	; 0xfe
 8008c76:	737b      	strb	r3, [r7, #13]
 8008c78:	2300      	movs	r3, #0
 8008c7a:	73bb      	strb	r3, [r7, #14]
 8008c7c:	2300      	movs	r3, #0
 8008c7e:	73fb      	strb	r3, [r7, #15]
  aci_gatt_add_service(UUID_TYPE_128,
 8008c80:	4639      	mov	r1, r7
 8008c82:	4b3a      	ldr	r3, [pc, #232]	; (8008d6c <SVCCTL_InitCustomSvc+0x138>)
 8008c84:	9300      	str	r3, [sp, #0]
 8008c86:	2306      	movs	r3, #6
 8008c88:	2201      	movs	r2, #1
 8008c8a:	2002      	movs	r0, #2
 8008c8c:	f7fd fb96 	bl	80063bc <aci_gatt_add_service>
                       &(CustomContext.CustomMy_P2PsHdle));

  /**
   *  My_LED_Char
   */
  COPY_MY_LED_CHAR_UUID(uuid.Char_UUID_128);
 8008c90:	2319      	movs	r3, #25
 8008c92:	703b      	strb	r3, [r7, #0]
 8008c94:	23ed      	movs	r3, #237	; 0xed
 8008c96:	707b      	strb	r3, [r7, #1]
 8008c98:	2382      	movs	r3, #130	; 0x82
 8008c9a:	70bb      	strb	r3, [r7, #2]
 8008c9c:	23ae      	movs	r3, #174	; 0xae
 8008c9e:	70fb      	strb	r3, [r7, #3]
 8008ca0:	23ed      	movs	r3, #237	; 0xed
 8008ca2:	713b      	strb	r3, [r7, #4]
 8008ca4:	2321      	movs	r3, #33	; 0x21
 8008ca6:	717b      	strb	r3, [r7, #5]
 8008ca8:	234c      	movs	r3, #76	; 0x4c
 8008caa:	71bb      	strb	r3, [r7, #6]
 8008cac:	239d      	movs	r3, #157	; 0x9d
 8008cae:	71fb      	strb	r3, [r7, #7]
 8008cb0:	2341      	movs	r3, #65	; 0x41
 8008cb2:	723b      	strb	r3, [r7, #8]
 8008cb4:	2345      	movs	r3, #69	; 0x45
 8008cb6:	727b      	strb	r3, [r7, #9]
 8008cb8:	2322      	movs	r3, #34	; 0x22
 8008cba:	72bb      	strb	r3, [r7, #10]
 8008cbc:	238e      	movs	r3, #142	; 0x8e
 8008cbe:	72fb      	strb	r3, [r7, #11]
 8008cc0:	2341      	movs	r3, #65	; 0x41
 8008cc2:	733b      	strb	r3, [r7, #12]
 8008cc4:	23fe      	movs	r3, #254	; 0xfe
 8008cc6:	737b      	strb	r3, [r7, #13]
 8008cc8:	2300      	movs	r3, #0
 8008cca:	73bb      	strb	r3, [r7, #14]
 8008ccc:	2300      	movs	r3, #0
 8008cce:	73fb      	strb	r3, [r7, #15]
  aci_gatt_add_char(CustomContext.CustomMy_P2PsHdle,
 8008cd0:	4b26      	ldr	r3, [pc, #152]	; (8008d6c <SVCCTL_InitCustomSvc+0x138>)
 8008cd2:	8818      	ldrh	r0, [r3, #0]
 8008cd4:	2302      	movs	r3, #2
 8008cd6:	b29b      	uxth	r3, r3
 8008cd8:	463a      	mov	r2, r7
 8008cda:	4925      	ldr	r1, [pc, #148]	; (8008d70 <SVCCTL_InitCustomSvc+0x13c>)
 8008cdc:	9105      	str	r1, [sp, #20]
 8008cde:	2101      	movs	r1, #1
 8008ce0:	9104      	str	r1, [sp, #16]
 8008ce2:	2110      	movs	r1, #16
 8008ce4:	9103      	str	r1, [sp, #12]
 8008ce6:	2101      	movs	r1, #1
 8008ce8:	9102      	str	r1, [sp, #8]
 8008cea:	2100      	movs	r1, #0
 8008cec:	9101      	str	r1, [sp, #4]
 8008cee:	2106      	movs	r1, #6
 8008cf0:	9100      	str	r1, [sp, #0]
 8008cf2:	2102      	movs	r1, #2
 8008cf4:	f7fd fc11 	bl	800651a <aci_gatt_add_char>
                    CHAR_VALUE_LEN_VARIABLE,
                    &(CustomContext.CustomLed_CHdle));
  /**
   *  My_Button_Char
   */
  COPY_MY_BUTTON_CHAR_UUID(uuid.Char_UUID_128);
 8008cf8:	2319      	movs	r3, #25
 8008cfa:	703b      	strb	r3, [r7, #0]
 8008cfc:	23ed      	movs	r3, #237	; 0xed
 8008cfe:	707b      	strb	r3, [r7, #1]
 8008d00:	2382      	movs	r3, #130	; 0x82
 8008d02:	70bb      	strb	r3, [r7, #2]
 8008d04:	23ae      	movs	r3, #174	; 0xae
 8008d06:	70fb      	strb	r3, [r7, #3]
 8008d08:	23ed      	movs	r3, #237	; 0xed
 8008d0a:	713b      	strb	r3, [r7, #4]
 8008d0c:	2321      	movs	r3, #33	; 0x21
 8008d0e:	717b      	strb	r3, [r7, #5]
 8008d10:	234c      	movs	r3, #76	; 0x4c
 8008d12:	71bb      	strb	r3, [r7, #6]
 8008d14:	239d      	movs	r3, #157	; 0x9d
 8008d16:	71fb      	strb	r3, [r7, #7]
 8008d18:	2341      	movs	r3, #65	; 0x41
 8008d1a:	723b      	strb	r3, [r7, #8]
 8008d1c:	2345      	movs	r3, #69	; 0x45
 8008d1e:	727b      	strb	r3, [r7, #9]
 8008d20:	2322      	movs	r3, #34	; 0x22
 8008d22:	72bb      	strb	r3, [r7, #10]
 8008d24:	238e      	movs	r3, #142	; 0x8e
 8008d26:	72fb      	strb	r3, [r7, #11]
 8008d28:	2342      	movs	r3, #66	; 0x42
 8008d2a:	733b      	strb	r3, [r7, #12]
 8008d2c:	23fe      	movs	r3, #254	; 0xfe
 8008d2e:	737b      	strb	r3, [r7, #13]
 8008d30:	2300      	movs	r3, #0
 8008d32:	73bb      	strb	r3, [r7, #14]
 8008d34:	2300      	movs	r3, #0
 8008d36:	73fb      	strb	r3, [r7, #15]
  aci_gatt_add_char(CustomContext.CustomMy_P2PsHdle,
 8008d38:	4b0c      	ldr	r3, [pc, #48]	; (8008d6c <SVCCTL_InitCustomSvc+0x138>)
 8008d3a:	8818      	ldrh	r0, [r3, #0]
 8008d3c:	2302      	movs	r3, #2
 8008d3e:	b29b      	uxth	r3, r3
 8008d40:	463a      	mov	r2, r7
 8008d42:	490c      	ldr	r1, [pc, #48]	; (8008d74 <SVCCTL_InitCustomSvc+0x140>)
 8008d44:	9105      	str	r1, [sp, #20]
 8008d46:	2101      	movs	r1, #1
 8008d48:	9104      	str	r1, [sp, #16]
 8008d4a:	2110      	movs	r1, #16
 8008d4c:	9103      	str	r1, [sp, #12]
 8008d4e:	2101      	movs	r1, #1
 8008d50:	9102      	str	r1, [sp, #8]
 8008d52:	2100      	movs	r1, #0
 8008d54:	9101      	str	r1, [sp, #4]
 8008d56:	2110      	movs	r1, #16
 8008d58:	9100      	str	r1, [sp, #0]
 8008d5a:	2102      	movs	r1, #2
 8008d5c:	f7fd fbdd 	bl	800651a <aci_gatt_add_char>

  /* USER CODE BEGIN SVCCTL_InitCustomSvc_2 */

  /* USER CODE END SVCCTL_InitCustomSvc_2 */

  return;
 8008d60:	bf00      	nop
}
 8008d62:	3710      	adds	r7, #16
 8008d64:	46bd      	mov	sp, r7
 8008d66:	bd80      	pop	{r7, pc}
 8008d68:	08008b65 	.word	0x08008b65
 8008d6c:	20000160 	.word	0x20000160
 8008d70:	20000162 	.word	0x20000162
 8008d74:	20000164 	.word	0x20000164

08008d78 <LL_PWR_EnableBootC2>:
{
 8008d78:	b480      	push	{r7}
 8008d7a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 8008d7c:	4b05      	ldr	r3, [pc, #20]	; (8008d94 <LL_PWR_EnableBootC2+0x1c>)
 8008d7e:	68db      	ldr	r3, [r3, #12]
 8008d80:	4a04      	ldr	r2, [pc, #16]	; (8008d94 <LL_PWR_EnableBootC2+0x1c>)
 8008d82:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008d86:	60d3      	str	r3, [r2, #12]
}
 8008d88:	bf00      	nop
 8008d8a:	46bd      	mov	sp, r7
 8008d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d90:	4770      	bx	lr
 8008d92:	bf00      	nop
 8008d94:	58000400 	.word	0x58000400

08008d98 <LL_C2_EXTI_EnableEvent_32_63>:
{
 8008d98:	b480      	push	{r7}
 8008d9a:	b083      	sub	sp, #12
 8008d9c:	af00      	add	r7, sp, #0
 8008d9e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 8008da0:	4b06      	ldr	r3, [pc, #24]	; (8008dbc <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 8008da2:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8008da6:	4905      	ldr	r1, [pc, #20]	; (8008dbc <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	4313      	orrs	r3, r2
 8008dac:	f8c1 30d4 	str.w	r3, [r1, #212]	; 0xd4
}
 8008db0:	bf00      	nop
 8008db2:	370c      	adds	r7, #12
 8008db4:	46bd      	mov	sp, r7
 8008db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dba:	4770      	bx	lr
 8008dbc:	58000800 	.word	0x58000800

08008dc0 <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 8008dc0:	b480      	push	{r7}
 8008dc2:	b083      	sub	sp, #12
 8008dc4:	af00      	add	r7, sp, #0
 8008dc6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8008dc8:	4b05      	ldr	r3, [pc, #20]	; (8008de0 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8008dca:	6a1a      	ldr	r2, [r3, #32]
 8008dcc:	4904      	ldr	r1, [pc, #16]	; (8008de0 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	4313      	orrs	r3, r2
 8008dd2:	620b      	str	r3, [r1, #32]
}
 8008dd4:	bf00      	nop
 8008dd6:	370c      	adds	r7, #12
 8008dd8:	46bd      	mov	sp, r7
 8008dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dde:	4770      	bx	lr
 8008de0:	58000800 	.word	0x58000800

08008de4 <LL_AHB3_GRP1_EnableClock>:
{
 8008de4:	b480      	push	{r7}
 8008de6:	b085      	sub	sp, #20
 8008de8:	af00      	add	r7, sp, #0
 8008dea:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8008dec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008df0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008df2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	4313      	orrs	r3, r2
 8008dfa:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8008dfc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008e00:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	4013      	ands	r3, r2
 8008e06:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8008e08:	68fb      	ldr	r3, [r7, #12]
}
 8008e0a:	bf00      	nop
 8008e0c:	3714      	adds	r7, #20
 8008e0e:	46bd      	mov	sp, r7
 8008e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e14:	4770      	bx	lr

08008e16 <LL_C2_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_FLASH
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 8008e16:	b480      	push	{r7}
 8008e18:	b085      	sub	sp, #20
 8008e1a:	af00      	add	r7, sp, #0
 8008e1c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB3ENR, Periphs);
 8008e1e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008e22:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 8008e26:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	4313      	orrs	r3, r2
 8008e2e:	f8c1 3150 	str.w	r3, [r1, #336]	; 0x150
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB3ENR, Periphs);
 8008e32:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008e36:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	4013      	ands	r3, r2
 8008e3e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8008e40:	68fb      	ldr	r3, [r7, #12]
}
 8008e42:	bf00      	nop
 8008e44:	3714      	adds	r7, #20
 8008e46:	46bd      	mov	sp, r7
 8008e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e4c:	4770      	bx	lr

08008e4e <LL_C1_IPCC_EnableIT_TXF>:
{
 8008e4e:	b480      	push	{r7}
 8008e50:	b083      	sub	sp, #12
 8008e52:	af00      	add	r7, sp, #0
 8008e54:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	601a      	str	r2, [r3, #0]
}
 8008e62:	bf00      	nop
 8008e64:	370c      	adds	r7, #12
 8008e66:	46bd      	mov	sp, r7
 8008e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e6c:	4770      	bx	lr

08008e6e <LL_C1_IPCC_EnableIT_RXO>:
{
 8008e6e:	b480      	push	{r7}
 8008e70:	b083      	sub	sp, #12
 8008e72:	af00      	add	r7, sp, #0
 8008e74:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	f043 0201 	orr.w	r2, r3, #1
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	601a      	str	r2, [r3, #0]
}
 8008e82:	bf00      	nop
 8008e84:	370c      	adds	r7, #12
 8008e86:	46bd      	mov	sp, r7
 8008e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e8c:	4770      	bx	lr

08008e8e <LL_C1_IPCC_EnableTransmitChannel>:
{
 8008e8e:	b480      	push	{r7}
 8008e90:	b083      	sub	sp, #12
 8008e92:	af00      	add	r7, sp, #0
 8008e94:	6078      	str	r0, [r7, #4]
 8008e96:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	685a      	ldr	r2, [r3, #4]
 8008e9c:	683b      	ldr	r3, [r7, #0]
 8008e9e:	041b      	lsls	r3, r3, #16
 8008ea0:	43db      	mvns	r3, r3
 8008ea2:	401a      	ands	r2, r3
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	605a      	str	r2, [r3, #4]
}
 8008ea8:	bf00      	nop
 8008eaa:	370c      	adds	r7, #12
 8008eac:	46bd      	mov	sp, r7
 8008eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eb2:	4770      	bx	lr

08008eb4 <LL_C1_IPCC_DisableTransmitChannel>:
{
 8008eb4:	b480      	push	{r7}
 8008eb6:	b083      	sub	sp, #12
 8008eb8:	af00      	add	r7, sp, #0
 8008eba:	6078      	str	r0, [r7, #4]
 8008ebc:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	685a      	ldr	r2, [r3, #4]
 8008ec2:	683b      	ldr	r3, [r7, #0]
 8008ec4:	041b      	lsls	r3, r3, #16
 8008ec6:	431a      	orrs	r2, r3
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	605a      	str	r2, [r3, #4]
}
 8008ecc:	bf00      	nop
 8008ece:	370c      	adds	r7, #12
 8008ed0:	46bd      	mov	sp, r7
 8008ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ed6:	4770      	bx	lr

08008ed8 <LL_C1_IPCC_EnableReceiveChannel>:
{
 8008ed8:	b480      	push	{r7}
 8008eda:	b083      	sub	sp, #12
 8008edc:	af00      	add	r7, sp, #0
 8008ede:	6078      	str	r0, [r7, #4]
 8008ee0:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	685a      	ldr	r2, [r3, #4]
 8008ee6:	683b      	ldr	r3, [r7, #0]
 8008ee8:	43db      	mvns	r3, r3
 8008eea:	401a      	ands	r2, r3
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	605a      	str	r2, [r3, #4]
}
 8008ef0:	bf00      	nop
 8008ef2:	370c      	adds	r7, #12
 8008ef4:	46bd      	mov	sp, r7
 8008ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008efa:	4770      	bx	lr

08008efc <LL_C1_IPCC_ClearFlag_CHx>:
{
 8008efc:	b480      	push	{r7}
 8008efe:	b083      	sub	sp, #12
 8008f00:	af00      	add	r7, sp, #0
 8008f02:	6078      	str	r0, [r7, #4]
 8008f04:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	683a      	ldr	r2, [r7, #0]
 8008f0a:	609a      	str	r2, [r3, #8]
}
 8008f0c:	bf00      	nop
 8008f0e:	370c      	adds	r7, #12
 8008f10:	46bd      	mov	sp, r7
 8008f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f16:	4770      	bx	lr

08008f18 <LL_C1_IPCC_SetFlag_CHx>:
{
 8008f18:	b480      	push	{r7}
 8008f1a:	b083      	sub	sp, #12
 8008f1c:	af00      	add	r7, sp, #0
 8008f1e:	6078      	str	r0, [r7, #4]
 8008f20:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 8008f22:	683b      	ldr	r3, [r7, #0]
 8008f24:	041a      	lsls	r2, r3, #16
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	609a      	str	r2, [r3, #8]
}
 8008f2a:	bf00      	nop
 8008f2c:	370c      	adds	r7, #12
 8008f2e:	46bd      	mov	sp, r7
 8008f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f34:	4770      	bx	lr

08008f36 <LL_C1_IPCC_IsActiveFlag_CHx>:
{
 8008f36:	b480      	push	{r7}
 8008f38:	b083      	sub	sp, #12
 8008f3a:	af00      	add	r7, sp, #0
 8008f3c:	6078      	str	r0, [r7, #4]
 8008f3e:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	68da      	ldr	r2, [r3, #12]
 8008f44:	683b      	ldr	r3, [r7, #0]
 8008f46:	4013      	ands	r3, r2
 8008f48:	683a      	ldr	r2, [r7, #0]
 8008f4a:	429a      	cmp	r2, r3
 8008f4c:	d101      	bne.n	8008f52 <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 8008f4e:	2301      	movs	r3, #1
 8008f50:	e000      	b.n	8008f54 <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 8008f52:	2300      	movs	r3, #0
}
 8008f54:	4618      	mov	r0, r3
 8008f56:	370c      	adds	r7, #12
 8008f58:	46bd      	mov	sp, r7
 8008f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f5e:	4770      	bx	lr

08008f60 <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 8008f60:	b480      	push	{r7}
 8008f62:	b083      	sub	sp, #12
 8008f64:	af00      	add	r7, sp, #0
 8008f66:	6078      	str	r0, [r7, #4]
 8008f68:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	69da      	ldr	r2, [r3, #28]
 8008f6e:	683b      	ldr	r3, [r7, #0]
 8008f70:	4013      	ands	r3, r2
 8008f72:	683a      	ldr	r2, [r7, #0]
 8008f74:	429a      	cmp	r2, r3
 8008f76:	d101      	bne.n	8008f7c <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 8008f78:	2301      	movs	r3, #1
 8008f7a:	e000      	b.n	8008f7e <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 8008f7c:	2300      	movs	r3, #0
}
 8008f7e:	4618      	mov	r0, r3
 8008f80:	370c      	adds	r7, #12
 8008f82:	46bd      	mov	sp, r7
 8008f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f88:	4770      	bx	lr
	...

08008f8c <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 8008f8c:	b580      	push	{r7, lr}
 8008f8e:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 8008f90:	2102      	movs	r1, #2
 8008f92:	4819      	ldr	r0, [pc, #100]	; (8008ff8 <HW_IPCC_Rx_Handler+0x6c>)
 8008f94:	f7ff ffe4 	bl	8008f60 <LL_C2_IPCC_IsActiveFlag_CHx>
 8008f98:	4603      	mov	r3, r0
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d009      	beq.n	8008fb2 <HW_IPCC_Rx_Handler+0x26>
 8008f9e:	4b16      	ldr	r3, [pc, #88]	; (8008ff8 <HW_IPCC_Rx_Handler+0x6c>)
 8008fa0:	685b      	ldr	r3, [r3, #4]
 8008fa2:	43db      	mvns	r3, r3
 8008fa4:	f003 0302 	and.w	r3, r3, #2
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d002      	beq.n	8008fb2 <HW_IPCC_Rx_Handler+0x26>
  {
      HW_IPCC_SYS_EvtHandler();
 8008fac:	f000 f8ea 	bl	8009184 <HW_IPCC_SYS_EvtHandler>
 8008fb0:	e01f      	b.n	8008ff2 <HW_IPCC_Rx_Handler+0x66>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL ))
  {
    HW_IPCC_ZIGBEE_StackM0RequestHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 8008fb2:	2101      	movs	r1, #1
 8008fb4:	4810      	ldr	r0, [pc, #64]	; (8008ff8 <HW_IPCC_Rx_Handler+0x6c>)
 8008fb6:	f7ff ffd3 	bl	8008f60 <LL_C2_IPCC_IsActiveFlag_CHx>
 8008fba:	4603      	mov	r3, r0
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d008      	beq.n	8008fd2 <HW_IPCC_Rx_Handler+0x46>
 8008fc0:	4b0d      	ldr	r3, [pc, #52]	; (8008ff8 <HW_IPCC_Rx_Handler+0x6c>)
 8008fc2:	685b      	ldr	r3, [r3, #4]
 8008fc4:	f003 0301 	and.w	r3, r3, #1
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d102      	bne.n	8008fd2 <HW_IPCC_Rx_Handler+0x46>
  {
    HW_IPCC_BLE_EvtHandler();
 8008fcc:	f000 f89e 	bl	800910c <HW_IPCC_BLE_EvtHandler>
 8008fd0:	e00f      	b.n	8008ff2 <HW_IPCC_Rx_Handler+0x66>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 8008fd2:	2108      	movs	r1, #8
 8008fd4:	4808      	ldr	r0, [pc, #32]	; (8008ff8 <HW_IPCC_Rx_Handler+0x6c>)
 8008fd6:	f7ff ffc3 	bl	8008f60 <LL_C2_IPCC_IsActiveFlag_CHx>
 8008fda:	4603      	mov	r3, r0
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d009      	beq.n	8008ff4 <HW_IPCC_Rx_Handler+0x68>
 8008fe0:	4b05      	ldr	r3, [pc, #20]	; (8008ff8 <HW_IPCC_Rx_Handler+0x6c>)
 8008fe2:	685b      	ldr	r3, [r3, #4]
 8008fe4:	43db      	mvns	r3, r3
 8008fe6:	f003 0308 	and.w	r3, r3, #8
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d002      	beq.n	8008ff4 <HW_IPCC_Rx_Handler+0x68>
  {
    HW_IPCC_TRACES_EvtHandler();
 8008fee:	f000 f915 	bl	800921c <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 8008ff2:	bf00      	nop
 8008ff4:	bf00      	nop
}
 8008ff6:	bd80      	pop	{r7, pc}
 8008ff8:	58000c00 	.word	0x58000c00

08008ffc <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 8008ffc:	b580      	push	{r7, lr}
 8008ffe:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 8009000:	2102      	movs	r1, #2
 8009002:	4822      	ldr	r0, [pc, #136]	; (800908c <HW_IPCC_Tx_Handler+0x90>)
 8009004:	f7ff ff97 	bl	8008f36 <LL_C1_IPCC_IsActiveFlag_CHx>
 8009008:	4603      	mov	r3, r0
 800900a:	2b00      	cmp	r3, #0
 800900c:	d109      	bne.n	8009022 <HW_IPCC_Tx_Handler+0x26>
 800900e:	4b1f      	ldr	r3, [pc, #124]	; (800908c <HW_IPCC_Tx_Handler+0x90>)
 8009010:	685b      	ldr	r3, [r3, #4]
 8009012:	43db      	mvns	r3, r3
 8009014:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009018:	2b00      	cmp	r3, #0
 800901a:	d002      	beq.n	8009022 <HW_IPCC_Tx_Handler+0x26>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 800901c:	f000 f8a6 	bl	800916c <HW_IPCC_SYS_CmdEvtHandler>
 8009020:	e031      	b.n	8009086 <HW_IPCC_Tx_Handler+0x8a>
  if (HW_IPCC_TX_PENDING( HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 8009022:	2102      	movs	r1, #2
 8009024:	4819      	ldr	r0, [pc, #100]	; (800908c <HW_IPCC_Tx_Handler+0x90>)
 8009026:	f7ff ff86 	bl	8008f36 <LL_C1_IPCC_IsActiveFlag_CHx>
 800902a:	4603      	mov	r3, r0
 800902c:	2b00      	cmp	r3, #0
 800902e:	d109      	bne.n	8009044 <HW_IPCC_Tx_Handler+0x48>
 8009030:	4b16      	ldr	r3, [pc, #88]	; (800908c <HW_IPCC_Tx_Handler+0x90>)
 8009032:	685b      	ldr	r3, [r3, #4]
 8009034:	43db      	mvns	r3, r3
 8009036:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800903a:	2b00      	cmp	r3, #0
 800903c:	d002      	beq.n	8009044 <HW_IPCC_Tx_Handler+0x48>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 800903e:	f000 f895 	bl	800916c <HW_IPCC_SYS_CmdEvtHandler>
 8009042:	e020      	b.n	8009086 <HW_IPCC_Tx_Handler+0x8a>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 8009044:	2108      	movs	r1, #8
 8009046:	4811      	ldr	r0, [pc, #68]	; (800908c <HW_IPCC_Tx_Handler+0x90>)
 8009048:	f7ff ff75 	bl	8008f36 <LL_C1_IPCC_IsActiveFlag_CHx>
 800904c:	4603      	mov	r3, r0
 800904e:	2b00      	cmp	r3, #0
 8009050:	d109      	bne.n	8009066 <HW_IPCC_Tx_Handler+0x6a>
 8009052:	4b0e      	ldr	r3, [pc, #56]	; (800908c <HW_IPCC_Tx_Handler+0x90>)
 8009054:	685b      	ldr	r3, [r3, #4]
 8009056:	43db      	mvns	r3, r3
 8009058:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800905c:	2b00      	cmp	r3, #0
 800905e:	d002      	beq.n	8009066 <HW_IPCC_Tx_Handler+0x6a>
  {
    HW_IPCC_MM_FreeBufHandler();
 8009060:	f000 f8be 	bl	80091e0 <HW_IPCC_MM_FreeBufHandler>
 8009064:	e00f      	b.n	8009086 <HW_IPCC_Tx_Handler+0x8a>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 8009066:	2120      	movs	r1, #32
 8009068:	4808      	ldr	r0, [pc, #32]	; (800908c <HW_IPCC_Tx_Handler+0x90>)
 800906a:	f7ff ff64 	bl	8008f36 <LL_C1_IPCC_IsActiveFlag_CHx>
 800906e:	4603      	mov	r3, r0
 8009070:	2b00      	cmp	r3, #0
 8009072:	d109      	bne.n	8009088 <HW_IPCC_Tx_Handler+0x8c>
 8009074:	4b05      	ldr	r3, [pc, #20]	; (800908c <HW_IPCC_Tx_Handler+0x90>)
 8009076:	685b      	ldr	r3, [r3, #4]
 8009078:	43db      	mvns	r3, r3
 800907a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800907e:	2b00      	cmp	r3, #0
 8009080:	d002      	beq.n	8009088 <HW_IPCC_Tx_Handler+0x8c>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 8009082:	f000 f84f 	bl	8009124 <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 8009086:	bf00      	nop
 8009088:	bf00      	nop
}
 800908a:	bd80      	pop	{r7, pc}
 800908c:	58000c00 	.word	0x58000c00

08009090 <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 8009090:	b580      	push	{r7, lr}
 8009092:	af00      	add	r7, sp, #0
  /**
  * Such as IPCC IP available to the CPU2, it is required to keep the IPCC clock running
    when FUS is running on CPU2 and CPU1 enters deep sleep mode
  */
  LL_C2_AHB3_GRP1_EnableClock(LL_C2_AHB3_GRP1_PERIPH_IPCC);
 8009094:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8009098:	f7ff febd 	bl	8008e16 <LL_C2_AHB3_GRP1_EnableClock>

   /**
   * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
   */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 800909c:	f44f 7000 	mov.w	r0, #512	; 0x200
 80090a0:	f7ff fe7a 	bl	8008d98 <LL_C2_EXTI_EnableEvent_32_63>
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 80090a4:	f44f 7000 	mov.w	r0, #512	; 0x200
 80090a8:	f7ff fe8a 	bl	8008dc0 <LL_EXTI_EnableRisingTrig_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 80090ac:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 80090ae:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 80090b0:	f7ff fe62 	bl	8008d78 <LL_PWR_EnableBootC2>

  return;
 80090b4:	bf00      	nop
}
 80090b6:	bd80      	pop	{r7, pc}

080090b8 <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 80090b8:	b580      	push	{r7, lr}
 80090ba:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 80090bc:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80090c0:	f7ff fe90 	bl	8008de4 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 80090c4:	4806      	ldr	r0, [pc, #24]	; (80090e0 <HW_IPCC_Init+0x28>)
 80090c6:	f7ff fed2 	bl	8008e6e <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 80090ca:	4805      	ldr	r0, [pc, #20]	; (80090e0 <HW_IPCC_Init+0x28>)
 80090cc:	f7ff febf 	bl	8008e4e <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 80090d0:	202c      	movs	r0, #44	; 0x2c
 80090d2:	f7f8 fdfa 	bl	8001cca <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 80090d6:	202d      	movs	r0, #45	; 0x2d
 80090d8:	f7f8 fdf7 	bl	8001cca <HAL_NVIC_EnableIRQ>

  return;
 80090dc:	bf00      	nop
}
 80090de:	bd80      	pop	{r7, pc}
 80090e0:	58000c00 	.word	0x58000c00

080090e4 <HW_IPCC_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
void HW_IPCC_BLE_Init( void )
{
 80090e4:	b580      	push	{r7, lr}
 80090e6:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 80090e8:	2101      	movs	r1, #1
 80090ea:	4802      	ldr	r0, [pc, #8]	; (80090f4 <HW_IPCC_BLE_Init+0x10>)
 80090ec:	f7ff fef4 	bl	8008ed8 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 80090f0:	bf00      	nop
}
 80090f2:	bd80      	pop	{r7, pc}
 80090f4:	58000c00 	.word	0x58000c00

080090f8 <HW_IPCC_BLE_SendCmd>:

void HW_IPCC_BLE_SendCmd( void )
{
 80090f8:	b580      	push	{r7, lr}
 80090fa:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_BLE_CMD_CHANNEL );
 80090fc:	2101      	movs	r1, #1
 80090fe:	4802      	ldr	r0, [pc, #8]	; (8009108 <HW_IPCC_BLE_SendCmd+0x10>)
 8009100:	f7ff ff0a 	bl	8008f18 <LL_C1_IPCC_SetFlag_CHx>

  return;
 8009104:	bf00      	nop
}
 8009106:	bd80      	pop	{r7, pc}
 8009108:	58000c00 	.word	0x58000c00

0800910c <HW_IPCC_BLE_EvtHandler>:

static void HW_IPCC_BLE_EvtHandler( void )
{
 800910c:	b580      	push	{r7, lr}
 800910e:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 8009110:	f7fe f9ce 	bl	80074b0 <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 8009114:	2101      	movs	r1, #1
 8009116:	4802      	ldr	r0, [pc, #8]	; (8009120 <HW_IPCC_BLE_EvtHandler+0x14>)
 8009118:	f7ff fef0 	bl	8008efc <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800911c:	bf00      	nop
}
 800911e:	bd80      	pop	{r7, pc}
 8009120:	58000c00 	.word	0x58000c00

08009124 <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 8009124:	b580      	push	{r7, lr}
 8009126:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 8009128:	2120      	movs	r1, #32
 800912a:	4803      	ldr	r0, [pc, #12]	; (8009138 <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 800912c:	f7ff fec2 	bl	8008eb4 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_BLE_AclDataAckNot();
 8009130:	f7fe f9ee 	bl	8007510 <HW_IPCC_BLE_AclDataAckNot>

  return;
 8009134:	bf00      	nop
}
 8009136:	bd80      	pop	{r7, pc}
 8009138:	58000c00 	.word	0x58000c00

0800913c <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 800913c:	b580      	push	{r7, lr}
 800913e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8009140:	2102      	movs	r1, #2
 8009142:	4802      	ldr	r0, [pc, #8]	; (800914c <HW_IPCC_SYS_Init+0x10>)
 8009144:	f7ff fec8 	bl	8008ed8 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8009148:	bf00      	nop
}
 800914a:	bd80      	pop	{r7, pc}
 800914c:	58000c00 	.word	0x58000c00

08009150 <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 8009150:	b580      	push	{r7, lr}
 8009152:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8009154:	2102      	movs	r1, #2
 8009156:	4804      	ldr	r0, [pc, #16]	; (8009168 <HW_IPCC_SYS_SendCmd+0x18>)
 8009158:	f7ff fede 	bl	8008f18 <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800915c:	2102      	movs	r1, #2
 800915e:	4802      	ldr	r0, [pc, #8]	; (8009168 <HW_IPCC_SYS_SendCmd+0x18>)
 8009160:	f7ff fe95 	bl	8008e8e <LL_C1_IPCC_EnableTransmitChannel>

  return;
 8009164:	bf00      	nop
}
 8009166:	bd80      	pop	{r7, pc}
 8009168:	58000c00 	.word	0x58000c00

0800916c <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 800916c:	b580      	push	{r7, lr}
 800916e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8009170:	2102      	movs	r1, #2
 8009172:	4803      	ldr	r0, [pc, #12]	; (8009180 <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 8009174:	f7ff fe9e 	bl	8008eb4 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_SYS_CmdEvtNot();
 8009178:	f7fe fa1a 	bl	80075b0 <HW_IPCC_SYS_CmdEvtNot>

  return;
 800917c:	bf00      	nop
}
 800917e:	bd80      	pop	{r7, pc}
 8009180:	58000c00 	.word	0x58000c00

08009184 <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 8009184:	b580      	push	{r7, lr}
 8009186:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 8009188:	f7fe fa28 	bl	80075dc <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 800918c:	2102      	movs	r1, #2
 800918e:	4802      	ldr	r0, [pc, #8]	; (8009198 <HW_IPCC_SYS_EvtHandler+0x14>)
 8009190:	f7ff feb4 	bl	8008efc <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8009194:	bf00      	nop
}
 8009196:	bd80      	pop	{r7, pc}
 8009198:	58000c00 	.word	0x58000c00

0800919c <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 800919c:	b580      	push	{r7, lr}
 800919e:	b082      	sub	sp, #8
 80091a0:	af00      	add	r7, sp, #0
 80091a2:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 80091a4:	2108      	movs	r1, #8
 80091a6:	480c      	ldr	r0, [pc, #48]	; (80091d8 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 80091a8:	f7ff fec5 	bl	8008f36 <LL_C1_IPCC_IsActiveFlag_CHx>
 80091ac:	4603      	mov	r3, r0
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d007      	beq.n	80091c2 <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 80091b2:	4a0a      	ldr	r2, [pc, #40]	; (80091dc <HW_IPCC_MM_SendFreeBuf+0x40>)
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 80091b8:	2108      	movs	r1, #8
 80091ba:	4807      	ldr	r0, [pc, #28]	; (80091d8 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 80091bc:	f7ff fe67 	bl	8008e8e <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 80091c0:	e006      	b.n	80091d0 <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	4798      	blx	r3
    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 80091c6:	2108      	movs	r1, #8
 80091c8:	4803      	ldr	r0, [pc, #12]	; (80091d8 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 80091ca:	f7ff fea5 	bl	8008f18 <LL_C1_IPCC_SetFlag_CHx>
  return;
 80091ce:	bf00      	nop
}
 80091d0:	3708      	adds	r7, #8
 80091d2:	46bd      	mov	sp, r7
 80091d4:	bd80      	pop	{r7, pc}
 80091d6:	bf00      	nop
 80091d8:	58000c00 	.word	0x58000c00
 80091dc:	200012c0 	.word	0x200012c0

080091e0 <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 80091e0:	b580      	push	{r7, lr}
 80091e2:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 80091e4:	2108      	movs	r1, #8
 80091e6:	4806      	ldr	r0, [pc, #24]	; (8009200 <HW_IPCC_MM_FreeBufHandler+0x20>)
 80091e8:	f7ff fe64 	bl	8008eb4 <LL_C1_IPCC_DisableTransmitChannel>

  FreeBufCb();
 80091ec:	4b05      	ldr	r3, [pc, #20]	; (8009204 <HW_IPCC_MM_FreeBufHandler+0x24>)
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	4798      	blx	r3

  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 80091f2:	2108      	movs	r1, #8
 80091f4:	4802      	ldr	r0, [pc, #8]	; (8009200 <HW_IPCC_MM_FreeBufHandler+0x20>)
 80091f6:	f7ff fe8f 	bl	8008f18 <LL_C1_IPCC_SetFlag_CHx>

  return;
 80091fa:	bf00      	nop
}
 80091fc:	bd80      	pop	{r7, pc}
 80091fe:	bf00      	nop
 8009200:	58000c00 	.word	0x58000c00
 8009204:	200012c0 	.word	0x200012c0

08009208 <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 8009208:	b580      	push	{r7, lr}
 800920a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 800920c:	2108      	movs	r1, #8
 800920e:	4802      	ldr	r0, [pc, #8]	; (8009218 <HW_IPCC_TRACES_Init+0x10>)
 8009210:	f7ff fe62 	bl	8008ed8 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8009214:	bf00      	nop
}
 8009216:	bd80      	pop	{r7, pc}
 8009218:	58000c00 	.word	0x58000c00

0800921c <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 800921c:	b580      	push	{r7, lr}
 800921e:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 8009220:	f7fe fa84 	bl	800772c <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 8009224:	2108      	movs	r1, #8
 8009226:	4802      	ldr	r0, [pc, #8]	; (8009230 <HW_IPCC_TRACES_EvtHandler+0x14>)
 8009228:	f7ff fe68 	bl	8008efc <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800922c:	bf00      	nop
}
 800922e:	bd80      	pop	{r7, pc}
 8009230:	58000c00 	.word	0x58000c00

08009234 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 8009234:	b480      	push	{r7}
 8009236:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 8009238:	4b05      	ldr	r3, [pc, #20]	; (8009250 <UTIL_LPM_Init+0x1c>)
 800923a:	2200      	movs	r2, #0
 800923c:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 800923e:	4b05      	ldr	r3, [pc, #20]	; (8009254 <UTIL_LPM_Init+0x20>)
 8009240:	2200      	movs	r2, #0
 8009242:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 8009244:	bf00      	nop
 8009246:	46bd      	mov	sp, r7
 8009248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800924c:	4770      	bx	lr
 800924e:	bf00      	nop
 8009250:	200012c4 	.word	0x200012c4
 8009254:	200012c8 	.word	0x200012c8

08009258 <UTIL_LPM_SetOffMode>:
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 8009258:	b480      	push	{r7}
 800925a:	b087      	sub	sp, #28
 800925c:	af00      	add	r7, sp, #0
 800925e:	6078      	str	r0, [r7, #4]
 8009260:	460b      	mov	r3, r1
 8009262:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009264:	f3ef 8310 	mrs	r3, PRIMASK
 8009268:	613b      	str	r3, [r7, #16]
  return(result);
 800926a:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 800926c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800926e:	b672      	cpsid	i
}
 8009270:	bf00      	nop
  
  switch(state)
 8009272:	78fb      	ldrb	r3, [r7, #3]
 8009274:	2b00      	cmp	r3, #0
 8009276:	d008      	beq.n	800928a <UTIL_LPM_SetOffMode+0x32>
 8009278:	2b01      	cmp	r3, #1
 800927a:	d10e      	bne.n	800929a <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 800927c:	4b0d      	ldr	r3, [pc, #52]	; (80092b4 <UTIL_LPM_SetOffMode+0x5c>)
 800927e:	681a      	ldr	r2, [r3, #0]
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	4313      	orrs	r3, r2
 8009284:	4a0b      	ldr	r2, [pc, #44]	; (80092b4 <UTIL_LPM_SetOffMode+0x5c>)
 8009286:	6013      	str	r3, [r2, #0]
      break;
 8009288:	e008      	b.n	800929c <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	43da      	mvns	r2, r3
 800928e:	4b09      	ldr	r3, [pc, #36]	; (80092b4 <UTIL_LPM_SetOffMode+0x5c>)
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	4013      	ands	r3, r2
 8009294:	4a07      	ldr	r2, [pc, #28]	; (80092b4 <UTIL_LPM_SetOffMode+0x5c>)
 8009296:	6013      	str	r3, [r2, #0]
      break;
 8009298:	e000      	b.n	800929c <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 800929a:	bf00      	nop
 800929c:	697b      	ldr	r3, [r7, #20]
 800929e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	f383 8810 	msr	PRIMASK, r3
}
 80092a6:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 80092a8:	bf00      	nop
 80092aa:	371c      	adds	r7, #28
 80092ac:	46bd      	mov	sp, r7
 80092ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092b2:	4770      	bx	lr
 80092b4:	200012c8 	.word	0x200012c8

080092b8 <UTIL_SEQ_Run>:
 * This function can be nested.
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 80092b8:	b580      	push	{r7, lr}
 80092ba:	b08c      	sub	sp, #48	; 0x30
 80092bc:	af00      	add	r7, sp, #0
 80092be:	6078      	str	r0, [r7, #4]
  /**
   *  When this function is nested, the mask to be applied cannot be larger than the first call
   *  The mask is always getting smaller and smaller
   *  A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 80092c0:	4b6a      	ldr	r3, [pc, #424]	; (800946c <UTIL_SEQ_Run+0x1b4>)
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	627b      	str	r3, [r7, #36]	; 0x24
  SuperMask &= Mask_bm;
 80092c6:	4b69      	ldr	r3, [pc, #420]	; (800946c <UTIL_SEQ_Run+0x1b4>)
 80092c8:	681a      	ldr	r2, [r3, #0]
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	4013      	ands	r3, r2
 80092ce:	4a67      	ldr	r2, [pc, #412]	; (800946c <UTIL_SEQ_Run+0x1b4>)
 80092d0:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 80092d2:	4b67      	ldr	r3, [pc, #412]	; (8009470 <UTIL_SEQ_Run+0x1b8>)
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	62bb      	str	r3, [r7, #40]	; 0x28
  while(((local_taskset & TaskMask & SuperMask) != 0U) && ((EvtSet & EvtWaited)==0U))
 80092d8:	e086      	b.n	80093e8 <UTIL_SEQ_Run+0x130>
  {
    counter = 0U;
 80092da:	2300      	movs	r3, #0
 80092dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    /**
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & TaskMask & SuperMask)== 0U)
 80092de:	e002      	b.n	80092e6 <UTIL_SEQ_Run+0x2e>
    {
      counter++;
 80092e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092e2:	3301      	adds	r3, #1
 80092e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    while((TaskPrio[counter].priority & TaskMask & SuperMask)== 0U)
 80092e6:	4a63      	ldr	r2, [pc, #396]	; (8009474 <UTIL_SEQ_Run+0x1bc>)
 80092e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092ea:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80092ee:	4b62      	ldr	r3, [pc, #392]	; (8009478 <UTIL_SEQ_Run+0x1c0>)
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	401a      	ands	r2, r3
 80092f4:	4b5d      	ldr	r3, [pc, #372]	; (800946c <UTIL_SEQ_Run+0x1b4>)
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	4013      	ands	r3, r2
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d0f0      	beq.n	80092e0 <UTIL_SEQ_Run+0x28>
    }

    current_task_set = TaskPrio[counter].priority & TaskMask & SuperMask;
 80092fe:	4a5d      	ldr	r2, [pc, #372]	; (8009474 <UTIL_SEQ_Run+0x1bc>)
 8009300:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009302:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8009306:	4b5c      	ldr	r3, [pc, #368]	; (8009478 <UTIL_SEQ_Run+0x1c0>)
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	401a      	ands	r2, r3
 800930c:	4b57      	ldr	r3, [pc, #348]	; (800946c <UTIL_SEQ_Run+0x1b4>)
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	4013      	ands	r3, r2
 8009312:	623b      	str	r3, [r7, #32]
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 8009314:	4a57      	ldr	r2, [pc, #348]	; (8009474 <UTIL_SEQ_Run+0x1bc>)
 8009316:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009318:	00db      	lsls	r3, r3, #3
 800931a:	4413      	add	r3, r2
 800931c:	685a      	ldr	r2, [r3, #4]
 800931e:	6a3b      	ldr	r3, [r7, #32]
 8009320:	4013      	ands	r3, r2
 8009322:	2b00      	cmp	r3, #0
 8009324:	d106      	bne.n	8009334 <UTIL_SEQ_Run+0x7c>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 8009326:	4a53      	ldr	r2, [pc, #332]	; (8009474 <UTIL_SEQ_Run+0x1bc>)
 8009328:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800932a:	00db      	lsls	r3, r3, #3
 800932c:	4413      	add	r3, r2
 800932e:	f04f 32ff 	mov.w	r2, #4294967295
 8009332:	605a      	str	r2, [r3, #4]

    /** Read the flag index of the task to be executed
	 *  Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 *  before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 8009334:	4a4f      	ldr	r2, [pc, #316]	; (8009474 <UTIL_SEQ_Run+0x1bc>)
 8009336:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009338:	00db      	lsls	r3, r3, #3
 800933a:	4413      	add	r3, r2
 800933c:	685a      	ldr	r2, [r3, #4]
 800933e:	6a3b      	ldr	r3, [r7, #32]
 8009340:	4013      	ands	r3, r2
 8009342:	4618      	mov	r0, r3
 8009344:	f000 f9ac 	bl	80096a0 <SEQ_BitPosition>
 8009348:	4603      	mov	r3, r0
 800934a:	461a      	mov	r2, r3
 800934c:	4b4b      	ldr	r3, [pc, #300]	; (800947c <UTIL_SEQ_Run+0x1c4>)
 800934e:	601a      	str	r2, [r3, #0]

    /** remove from the roun_robin mask the task that has been selected to be executed */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 8009350:	4a48      	ldr	r2, [pc, #288]	; (8009474 <UTIL_SEQ_Run+0x1bc>)
 8009352:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009354:	00db      	lsls	r3, r3, #3
 8009356:	4413      	add	r3, r2
 8009358:	685a      	ldr	r2, [r3, #4]
 800935a:	4b48      	ldr	r3, [pc, #288]	; (800947c <UTIL_SEQ_Run+0x1c4>)
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	2101      	movs	r1, #1
 8009360:	fa01 f303 	lsl.w	r3, r1, r3
 8009364:	43db      	mvns	r3, r3
 8009366:	401a      	ands	r2, r3
 8009368:	4942      	ldr	r1, [pc, #264]	; (8009474 <UTIL_SEQ_Run+0x1bc>)
 800936a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800936c:	00db      	lsls	r3, r3, #3
 800936e:	440b      	add	r3, r1
 8009370:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009372:	f3ef 8310 	mrs	r3, PRIMASK
 8009376:	617b      	str	r3, [r7, #20]
  return(result);
 8009378:	697b      	ldr	r3, [r7, #20]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800937a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800937c:	b672      	cpsid	i
}
 800937e:	bf00      	nop
    /** remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 8009380:	4b3e      	ldr	r3, [pc, #248]	; (800947c <UTIL_SEQ_Run+0x1c4>)
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	2201      	movs	r2, #1
 8009386:	fa02 f303 	lsl.w	r3, r2, r3
 800938a:	43da      	mvns	r2, r3
 800938c:	4b38      	ldr	r3, [pc, #224]	; (8009470 <UTIL_SEQ_Run+0x1b8>)
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	4013      	ands	r3, r2
 8009392:	4a37      	ldr	r2, [pc, #220]	; (8009470 <UTIL_SEQ_Run+0x1b8>)
 8009394:	6013      	str	r3, [r2, #0]
    /** remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 8009396:	2302      	movs	r3, #2
 8009398:	62fb      	str	r3, [r7, #44]	; 0x2c
 800939a:	e013      	b.n	80093c4 <UTIL_SEQ_Run+0x10c>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 800939c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800939e:	3b01      	subs	r3, #1
 80093a0:	4a34      	ldr	r2, [pc, #208]	; (8009474 <UTIL_SEQ_Run+0x1bc>)
 80093a2:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 80093a6:	4b35      	ldr	r3, [pc, #212]	; (800947c <UTIL_SEQ_Run+0x1c4>)
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	2201      	movs	r2, #1
 80093ac:	fa02 f303 	lsl.w	r3, r2, r3
 80093b0:	43da      	mvns	r2, r3
 80093b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093b4:	3b01      	subs	r3, #1
 80093b6:	400a      	ands	r2, r1
 80093b8:	492e      	ldr	r1, [pc, #184]	; (8009474 <UTIL_SEQ_Run+0x1bc>)
 80093ba:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 80093be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093c0:	3b01      	subs	r3, #1
 80093c2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80093c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d1e8      	bne.n	800939c <UTIL_SEQ_Run+0xe4>
 80093ca:	69fb      	ldr	r3, [r7, #28]
 80093cc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80093ce:	693b      	ldr	r3, [r7, #16]
 80093d0:	f383 8810 	msr	PRIMASK, r3
}
 80093d4:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );
    /** Execute the task */
    TaskCb[CurrentTaskIdx]( );
 80093d6:	4b29      	ldr	r3, [pc, #164]	; (800947c <UTIL_SEQ_Run+0x1c4>)
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	4a29      	ldr	r2, [pc, #164]	; (8009480 <UTIL_SEQ_Run+0x1c8>)
 80093dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80093e0:	4798      	blx	r3
    
    local_taskset = TaskSet;
 80093e2:	4b23      	ldr	r3, [pc, #140]	; (8009470 <UTIL_SEQ_Run+0x1b8>)
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	62bb      	str	r3, [r7, #40]	; 0x28
  while(((local_taskset & TaskMask & SuperMask) != 0U) && ((EvtSet & EvtWaited)==0U))
 80093e8:	4b23      	ldr	r3, [pc, #140]	; (8009478 <UTIL_SEQ_Run+0x1c0>)
 80093ea:	681a      	ldr	r2, [r3, #0]
 80093ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093ee:	401a      	ands	r2, r3
 80093f0:	4b1e      	ldr	r3, [pc, #120]	; (800946c <UTIL_SEQ_Run+0x1b4>)
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	4013      	ands	r3, r2
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	d007      	beq.n	800940a <UTIL_SEQ_Run+0x152>
 80093fa:	4b22      	ldr	r3, [pc, #136]	; (8009484 <UTIL_SEQ_Run+0x1cc>)
 80093fc:	681a      	ldr	r2, [r3, #0]
 80093fe:	4b22      	ldr	r3, [pc, #136]	; (8009488 <UTIL_SEQ_Run+0x1d0>)
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	4013      	ands	r3, r2
 8009404:	2b00      	cmp	r3, #0
 8009406:	f43f af68 	beq.w	80092da <UTIL_SEQ_Run+0x22>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 800940a:	4b1c      	ldr	r3, [pc, #112]	; (800947c <UTIL_SEQ_Run+0x1c4>)
 800940c:	f04f 32ff 	mov.w	r2, #4294967295
 8009410:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 8009412:	f000 f937 	bl	8009684 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009416:	f3ef 8310 	mrs	r3, PRIMASK
 800941a:	60fb      	str	r3, [r7, #12]
  return(result);
 800941c:	68fb      	ldr	r3, [r7, #12]
  
  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 800941e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
 8009420:	b672      	cpsid	i
}
 8009422:	bf00      	nop
  local_taskset = TaskSet;
 8009424:	4b12      	ldr	r3, [pc, #72]	; (8009470 <UTIL_SEQ_Run+0x1b8>)
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	62bb      	str	r3, [r7, #40]	; 0x28
  if (!(((local_taskset & TaskMask & SuperMask) != 0U) || ((EvtSet & EvtWaited)!= 0U))) 
 800942a:	4b13      	ldr	r3, [pc, #76]	; (8009478 <UTIL_SEQ_Run+0x1c0>)
 800942c:	681a      	ldr	r2, [r3, #0]
 800942e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009430:	401a      	ands	r2, r3
 8009432:	4b0e      	ldr	r3, [pc, #56]	; (800946c <UTIL_SEQ_Run+0x1b4>)
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	4013      	ands	r3, r2
 8009438:	2b00      	cmp	r3, #0
 800943a:	d108      	bne.n	800944e <UTIL_SEQ_Run+0x196>
 800943c:	4b11      	ldr	r3, [pc, #68]	; (8009484 <UTIL_SEQ_Run+0x1cc>)
 800943e:	681a      	ldr	r2, [r3, #0]
 8009440:	4b11      	ldr	r3, [pc, #68]	; (8009488 <UTIL_SEQ_Run+0x1d0>)
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	4013      	ands	r3, r2
 8009446:	2b00      	cmp	r3, #0
 8009448:	d101      	bne.n	800944e <UTIL_SEQ_Run+0x196>
  {
	UTIL_SEQ_Idle( );
 800944a:	f7f7 fc7c 	bl	8000d46 <UTIL_SEQ_Idle>
 800944e:	69bb      	ldr	r3, [r7, #24]
 8009450:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009452:	68bb      	ldr	r3, [r7, #8]
 8009454:	f383 8810 	msr	PRIMASK, r3
}
 8009458:	bf00      	nop
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );
  
  UTIL_SEQ_PostIdle( );
 800945a:	f000 f91a 	bl	8009692 <UTIL_SEQ_PostIdle>

  /** restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 800945e:	4a03      	ldr	r2, [pc, #12]	; (800946c <UTIL_SEQ_Run+0x1b4>)
 8009460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009462:	6013      	str	r3, [r2, #0]

  return;
 8009464:	bf00      	nop
}
 8009466:	3730      	adds	r7, #48	; 0x30
 8009468:	46bd      	mov	sp, r7
 800946a:	bd80      	pop	{r7, pc}
 800946c:	20000024 	.word	0x20000024
 8009470:	200012cc 	.word	0x200012cc
 8009474:	2000135c 	.word	0x2000135c
 8009478:	20000020 	.word	0x20000020
 800947c:	200012d8 	.word	0x200012d8
 8009480:	200012dc 	.word	0x200012dc
 8009484:	200012d0 	.word	0x200012d0
 8009488:	200012d4 	.word	0x200012d4

0800948c <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 800948c:	b580      	push	{r7, lr}
 800948e:	b088      	sub	sp, #32
 8009490:	af00      	add	r7, sp, #0
 8009492:	60f8      	str	r0, [r7, #12]
 8009494:	60b9      	str	r1, [r7, #8]
 8009496:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009498:	f3ef 8310 	mrs	r3, PRIMASK
 800949c:	617b      	str	r3, [r7, #20]
  return(result);
 800949e:	697b      	ldr	r3, [r7, #20]
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 80094a0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 80094a2:	b672      	cpsid	i
}
 80094a4:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 80094a6:	68f8      	ldr	r0, [r7, #12]
 80094a8:	f000 f8fa 	bl	80096a0 <SEQ_BitPosition>
 80094ac:	4603      	mov	r3, r0
 80094ae:	4619      	mov	r1, r3
 80094b0:	4a06      	ldr	r2, [pc, #24]	; (80094cc <UTIL_SEQ_RegTask+0x40>)
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 80094b8:	69fb      	ldr	r3, [r7, #28]
 80094ba:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80094bc:	69bb      	ldr	r3, [r7, #24]
 80094be:	f383 8810 	msr	PRIMASK, r3
}
 80094c2:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 80094c4:	bf00      	nop
}
 80094c6:	3720      	adds	r7, #32
 80094c8:	46bd      	mov	sp, r7
 80094ca:	bd80      	pop	{r7, pc}
 80094cc:	200012dc 	.word	0x200012dc

080094d0 <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 80094d0:	b480      	push	{r7}
 80094d2:	b087      	sub	sp, #28
 80094d4:	af00      	add	r7, sp, #0
 80094d6:	6078      	str	r0, [r7, #4]
 80094d8:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80094da:	f3ef 8310 	mrs	r3, PRIMASK
 80094de:	60fb      	str	r3, [r7, #12]
  return(result);
 80094e0:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 80094e2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80094e4:	b672      	cpsid	i
}
 80094e6:	bf00      	nop

  TaskSet |= TaskId_bm;
 80094e8:	4b0d      	ldr	r3, [pc, #52]	; (8009520 <UTIL_SEQ_SetTask+0x50>)
 80094ea:	681a      	ldr	r2, [r3, #0]
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	4313      	orrs	r3, r2
 80094f0:	4a0b      	ldr	r2, [pc, #44]	; (8009520 <UTIL_SEQ_SetTask+0x50>)
 80094f2:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 80094f4:	4a0b      	ldr	r2, [pc, #44]	; (8009524 <UTIL_SEQ_SetTask+0x54>)
 80094f6:	683b      	ldr	r3, [r7, #0]
 80094f8:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	431a      	orrs	r2, r3
 8009500:	4908      	ldr	r1, [pc, #32]	; (8009524 <UTIL_SEQ_SetTask+0x54>)
 8009502:	683b      	ldr	r3, [r7, #0]
 8009504:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 8009508:	697b      	ldr	r3, [r7, #20]
 800950a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800950c:	693b      	ldr	r3, [r7, #16]
 800950e:	f383 8810 	msr	PRIMASK, r3
}
 8009512:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8009514:	bf00      	nop
}
 8009516:	371c      	adds	r7, #28
 8009518:	46bd      	mov	sp, r7
 800951a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800951e:	4770      	bx	lr
 8009520:	200012cc 	.word	0x200012cc
 8009524:	2000135c 	.word	0x2000135c

08009528 <UTIL_SEQ_PauseTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION();
  return _status;
}

void UTIL_SEQ_PauseTask( UTIL_SEQ_bm_t TaskId_bm )
{
 8009528:	b480      	push	{r7}
 800952a:	b087      	sub	sp, #28
 800952c:	af00      	add	r7, sp, #0
 800952e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009530:	f3ef 8310 	mrs	r3, PRIMASK
 8009534:	60fb      	str	r3, [r7, #12]
  return(result);
 8009536:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8009538:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800953a:	b672      	cpsid	i
}
 800953c:	bf00      	nop

  TaskMask &= (~TaskId_bm);
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	43da      	mvns	r2, r3
 8009542:	4b08      	ldr	r3, [pc, #32]	; (8009564 <UTIL_SEQ_PauseTask+0x3c>)
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	4013      	ands	r3, r2
 8009548:	4a06      	ldr	r2, [pc, #24]	; (8009564 <UTIL_SEQ_PauseTask+0x3c>)
 800954a:	6013      	str	r3, [r2, #0]
 800954c:	697b      	ldr	r3, [r7, #20]
 800954e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009550:	693b      	ldr	r3, [r7, #16]
 8009552:	f383 8810 	msr	PRIMASK, r3
}
 8009556:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8009558:	bf00      	nop
}
 800955a:	371c      	adds	r7, #28
 800955c:	46bd      	mov	sp, r7
 800955e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009562:	4770      	bx	lr
 8009564:	20000020 	.word	0x20000020

08009568 <UTIL_SEQ_ResumeTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION( );
  return _status;
}

void UTIL_SEQ_ResumeTask( UTIL_SEQ_bm_t TaskId_bm )
{
 8009568:	b480      	push	{r7}
 800956a:	b087      	sub	sp, #28
 800956c:	af00      	add	r7, sp, #0
 800956e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009570:	f3ef 8310 	mrs	r3, PRIMASK
 8009574:	60fb      	str	r3, [r7, #12]
  return(result);
 8009576:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8009578:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800957a:	b672      	cpsid	i
}
 800957c:	bf00      	nop

  TaskMask |= TaskId_bm;
 800957e:	4b09      	ldr	r3, [pc, #36]	; (80095a4 <UTIL_SEQ_ResumeTask+0x3c>)
 8009580:	681a      	ldr	r2, [r3, #0]
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	4313      	orrs	r3, r2
 8009586:	4a07      	ldr	r2, [pc, #28]	; (80095a4 <UTIL_SEQ_ResumeTask+0x3c>)
 8009588:	6013      	str	r3, [r2, #0]
 800958a:	697b      	ldr	r3, [r7, #20]
 800958c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800958e:	693b      	ldr	r3, [r7, #16]
 8009590:	f383 8810 	msr	PRIMASK, r3
}
 8009594:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8009596:	bf00      	nop
}
 8009598:	371c      	adds	r7, #28
 800959a:	46bd      	mov	sp, r7
 800959c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095a0:	4770      	bx	lr
 80095a2:	bf00      	nop
 80095a4:	20000020 	.word	0x20000020

080095a8 <UTIL_SEQ_SetEvt>:

void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t EvtId_bm )
{
 80095a8:	b480      	push	{r7}
 80095aa:	b087      	sub	sp, #28
 80095ac:	af00      	add	r7, sp, #0
 80095ae:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80095b0:	f3ef 8310 	mrs	r3, PRIMASK
 80095b4:	60fb      	str	r3, [r7, #12]
  return(result);
 80095b6:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 80095b8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80095ba:	b672      	cpsid	i
}
 80095bc:	bf00      	nop

  EvtSet |= EvtId_bm;
 80095be:	4b09      	ldr	r3, [pc, #36]	; (80095e4 <UTIL_SEQ_SetEvt+0x3c>)
 80095c0:	681a      	ldr	r2, [r3, #0]
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	4313      	orrs	r3, r2
 80095c6:	4a07      	ldr	r2, [pc, #28]	; (80095e4 <UTIL_SEQ_SetEvt+0x3c>)
 80095c8:	6013      	str	r3, [r2, #0]
 80095ca:	697b      	ldr	r3, [r7, #20]
 80095cc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80095ce:	693b      	ldr	r3, [r7, #16]
 80095d0:	f383 8810 	msr	PRIMASK, r3
}
 80095d4:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 80095d6:	bf00      	nop
}
 80095d8:	371c      	adds	r7, #28
 80095da:	46bd      	mov	sp, r7
 80095dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095e0:	4770      	bx	lr
 80095e2:	bf00      	nop
 80095e4:	200012d0 	.word	0x200012d0

080095e8 <UTIL_SEQ_WaitEvt>:

  return;
}

void UTIL_SEQ_WaitEvt(UTIL_SEQ_bm_t EvtId_bm)
{
 80095e8:	b580      	push	{r7, lr}
 80095ea:	b088      	sub	sp, #32
 80095ec:	af00      	add	r7, sp, #0
 80095ee:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_bm_t current_task_idx;
  UTIL_SEQ_bm_t wait_task_idx;
  /** store in local the current_task_id_bm as the global variable CurrentTaskIdx
   *  may be overwritten in case there are nested call of UTIL_SEQ_Run()
   */
  current_task_idx = CurrentTaskIdx;
 80095f0:	4b21      	ldr	r3, [pc, #132]	; (8009678 <UTIL_SEQ_WaitEvt+0x90>)
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	61bb      	str	r3, [r7, #24]
  if(UTIL_SEQ_NOTASKRUNNING == CurrentTaskIdx)
 80095f6:	4b20      	ldr	r3, [pc, #128]	; (8009678 <UTIL_SEQ_WaitEvt+0x90>)
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80095fe:	d102      	bne.n	8009606 <UTIL_SEQ_WaitEvt+0x1e>
  {
    wait_task_idx = 0;
 8009600:	2300      	movs	r3, #0
 8009602:	61fb      	str	r3, [r7, #28]
 8009604:	e005      	b.n	8009612 <UTIL_SEQ_WaitEvt+0x2a>
  }
  else
  {
    wait_task_idx = 1 << CurrentTaskIdx;
 8009606:	4b1c      	ldr	r3, [pc, #112]	; (8009678 <UTIL_SEQ_WaitEvt+0x90>)
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	2201      	movs	r2, #1
 800960c:	fa02 f303 	lsl.w	r3, r2, r3
 8009610:	61fb      	str	r3, [r7, #28]
  }

  /** backup the event id that was currently waited */
  event_waited_id_backup = EvtWaited;
 8009612:	4b1a      	ldr	r3, [pc, #104]	; (800967c <UTIL_SEQ_WaitEvt+0x94>)
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	617b      	str	r3, [r7, #20]
  EvtWaited = EvtId_bm;
 8009618:	4a18      	ldr	r2, [pc, #96]	; (800967c <UTIL_SEQ_WaitEvt+0x94>)
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	6013      	str	r3, [r2, #0]
   *  the while loop below.
   *  The system is waiting only for the last waited event.
   *  When it will go out, it will wait again from the previous one.
   *  It case it occurs while waiting for the second one, the while loop will exit immediately
   */
  while ((EvtSet & EvtWaited) == 0U)
 800961e:	e005      	b.n	800962c <UTIL_SEQ_WaitEvt+0x44>
  {
    UTIL_SEQ_EvtIdle(wait_task_idx, EvtWaited);
 8009620:	4b16      	ldr	r3, [pc, #88]	; (800967c <UTIL_SEQ_WaitEvt+0x94>)
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	4619      	mov	r1, r3
 8009626:	69f8      	ldr	r0, [r7, #28]
 8009628:	f7f7 fb94 	bl	8000d54 <UTIL_SEQ_EvtIdle>
  while ((EvtSet & EvtWaited) == 0U)
 800962c:	4b14      	ldr	r3, [pc, #80]	; (8009680 <UTIL_SEQ_WaitEvt+0x98>)
 800962e:	681a      	ldr	r2, [r3, #0]
 8009630:	4b12      	ldr	r3, [pc, #72]	; (800967c <UTIL_SEQ_WaitEvt+0x94>)
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	4013      	ands	r3, r2
 8009636:	2b00      	cmp	r3, #0
 8009638:	d0f2      	beq.n	8009620 <UTIL_SEQ_WaitEvt+0x38>
  /**
   * Restore the CurrentTaskIdx that may have been modified by call of UTIL_SEQ_Run() from UTIL_SEQ_EvtIdle()
   * This is required so that a second call of UTIL_SEQ_WaitEvt() in the same process pass the correct current_task_id_bm
   * in the call of UTIL_SEQ_EvtIdle()
   */
  CurrentTaskIdx = current_task_idx;
 800963a:	4a0f      	ldr	r2, [pc, #60]	; (8009678 <UTIL_SEQ_WaitEvt+0x90>)
 800963c:	69bb      	ldr	r3, [r7, #24]
 800963e:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009640:	f3ef 8310 	mrs	r3, PRIMASK
 8009644:	60bb      	str	r3, [r7, #8]
  return(result);
 8009646:	68bb      	ldr	r3, [r7, #8]

  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8009648:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800964a:	b672      	cpsid	i
}
 800964c:	bf00      	nop

  EvtSet &= (~EvtWaited);
 800964e:	4b0b      	ldr	r3, [pc, #44]	; (800967c <UTIL_SEQ_WaitEvt+0x94>)
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	43da      	mvns	r2, r3
 8009654:	4b0a      	ldr	r3, [pc, #40]	; (8009680 <UTIL_SEQ_WaitEvt+0x98>)
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	4013      	ands	r3, r2
 800965a:	4a09      	ldr	r2, [pc, #36]	; (8009680 <UTIL_SEQ_WaitEvt+0x98>)
 800965c:	6013      	str	r3, [r2, #0]
 800965e:	693b      	ldr	r3, [r7, #16]
 8009660:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	f383 8810 	msr	PRIMASK, r3
}
 8009668:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  EvtWaited = event_waited_id_backup;
 800966a:	4a04      	ldr	r2, [pc, #16]	; (800967c <UTIL_SEQ_WaitEvt+0x94>)
 800966c:	697b      	ldr	r3, [r7, #20]
 800966e:	6013      	str	r3, [r2, #0]

  return;
 8009670:	bf00      	nop
}
 8009672:	3720      	adds	r7, #32
 8009674:	46bd      	mov	sp, r7
 8009676:	bd80      	pop	{r7, pc}
 8009678:	200012d8 	.word	0x200012d8
 800967c:	200012d4 	.word	0x200012d4
 8009680:	200012d0 	.word	0x200012d0

08009684 <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 8009684:	b480      	push	{r7}
 8009686:	af00      	add	r7, sp, #0
  /**
   * Unless specified by the application, there is nothing to be done
   */
  return;
 8009688:	bf00      	nop
}
 800968a:	46bd      	mov	sp, r7
 800968c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009690:	4770      	bx	lr

08009692 <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 8009692:	b480      	push	{r7}
 8009694:	af00      	add	r7, sp, #0
  /**
   * Unless specified by the application, there is nothing to be done
   */
  return;
 8009696:	bf00      	nop
}
 8009698:	46bd      	mov	sp, r7
 800969a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800969e:	4770      	bx	lr

080096a0 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 80096a0:	b480      	push	{r7}
 80096a2:	b085      	sub	sp, #20
 80096a4:	af00      	add	r7, sp, #0
 80096a6:	6078      	str	r0, [r7, #4]
  uint8_t n = 0U;
 80096a8:	2300      	movs	r3, #0
 80096aa:	73fb      	strb	r3, [r7, #15]

  if ((Value & 0xFFFF0000U) == 0U)  { n  = 16U; Value <<= 16U;  }
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	0c1b      	lsrs	r3, r3, #16
 80096b0:	041b      	lsls	r3, r3, #16
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d104      	bne.n	80096c0 <SEQ_BitPosition+0x20>
 80096b6:	2310      	movs	r3, #16
 80096b8:	73fb      	strb	r3, [r7, #15]
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	041b      	lsls	r3, r3, #16
 80096be:	607b      	str	r3, [r7, #4]
  if ((Value & 0xFF000000U) == 0U)  { n +=  8U; Value <<=  8U;  }
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d105      	bne.n	80096d6 <SEQ_BitPosition+0x36>
 80096ca:	7bfb      	ldrb	r3, [r7, #15]
 80096cc:	3308      	adds	r3, #8
 80096ce:	73fb      	strb	r3, [r7, #15]
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	021b      	lsls	r3, r3, #8
 80096d4:	607b      	str	r3, [r7, #4]
  if ((Value & 0xF0000000U) == 0U)  { n +=  4U; Value <<=  4U;  }
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80096dc:	2b00      	cmp	r3, #0
 80096de:	d105      	bne.n	80096ec <SEQ_BitPosition+0x4c>
 80096e0:	7bfb      	ldrb	r3, [r7, #15]
 80096e2:	3304      	adds	r3, #4
 80096e4:	73fb      	strb	r3, [r7, #15]
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	011b      	lsls	r3, r3, #4
 80096ea:	607b      	str	r3, [r7, #4]

  n += SEQ_clz_table_4bit[Value >> (32-4)];
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	0f1b      	lsrs	r3, r3, #28
 80096f0:	4a07      	ldr	r2, [pc, #28]	; (8009710 <SEQ_BitPosition+0x70>)
 80096f2:	5cd2      	ldrb	r2, [r2, r3]
 80096f4:	7bfb      	ldrb	r3, [r7, #15]
 80096f6:	4413      	add	r3, r2
 80096f8:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 80096fa:	7bfb      	ldrb	r3, [r7, #15]
 80096fc:	f1c3 031f 	rsb	r3, r3, #31
 8009700:	b2db      	uxtb	r3, r3
}
 8009702:	4618      	mov	r0, r3
 8009704:	3714      	adds	r7, #20
 8009706:	46bd      	mov	sp, r7
 8009708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800970c:	4770      	bx	lr
 800970e:	bf00      	nop
 8009710:	0800ac70 	.word	0x0800ac70

08009714 <__errno>:
 8009714:	4b01      	ldr	r3, [pc, #4]	; (800971c <__errno+0x8>)
 8009716:	6818      	ldr	r0, [r3, #0]
 8009718:	4770      	bx	lr
 800971a:	bf00      	nop
 800971c:	20000028 	.word	0x20000028

08009720 <__libc_init_array>:
 8009720:	b570      	push	{r4, r5, r6, lr}
 8009722:	4d0d      	ldr	r5, [pc, #52]	; (8009758 <__libc_init_array+0x38>)
 8009724:	4c0d      	ldr	r4, [pc, #52]	; (800975c <__libc_init_array+0x3c>)
 8009726:	1b64      	subs	r4, r4, r5
 8009728:	10a4      	asrs	r4, r4, #2
 800972a:	2600      	movs	r6, #0
 800972c:	42a6      	cmp	r6, r4
 800972e:	d109      	bne.n	8009744 <__libc_init_array+0x24>
 8009730:	4d0b      	ldr	r5, [pc, #44]	; (8009760 <__libc_init_array+0x40>)
 8009732:	4c0c      	ldr	r4, [pc, #48]	; (8009764 <__libc_init_array+0x44>)
 8009734:	f001 f81a 	bl	800a76c <_init>
 8009738:	1b64      	subs	r4, r4, r5
 800973a:	10a4      	asrs	r4, r4, #2
 800973c:	2600      	movs	r6, #0
 800973e:	42a6      	cmp	r6, r4
 8009740:	d105      	bne.n	800974e <__libc_init_array+0x2e>
 8009742:	bd70      	pop	{r4, r5, r6, pc}
 8009744:	f855 3b04 	ldr.w	r3, [r5], #4
 8009748:	4798      	blx	r3
 800974a:	3601      	adds	r6, #1
 800974c:	e7ee      	b.n	800972c <__libc_init_array+0xc>
 800974e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009752:	4798      	blx	r3
 8009754:	3601      	adds	r6, #1
 8009756:	e7f2      	b.n	800973e <__libc_init_array+0x1e>
 8009758:	0800ad20 	.word	0x0800ad20
 800975c:	0800ad20 	.word	0x0800ad20
 8009760:	0800ad20 	.word	0x0800ad20
 8009764:	0800ad24 	.word	0x0800ad24

08009768 <memcpy>:
 8009768:	440a      	add	r2, r1
 800976a:	4291      	cmp	r1, r2
 800976c:	f100 33ff 	add.w	r3, r0, #4294967295
 8009770:	d100      	bne.n	8009774 <memcpy+0xc>
 8009772:	4770      	bx	lr
 8009774:	b510      	push	{r4, lr}
 8009776:	f811 4b01 	ldrb.w	r4, [r1], #1
 800977a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800977e:	4291      	cmp	r1, r2
 8009780:	d1f9      	bne.n	8009776 <memcpy+0xe>
 8009782:	bd10      	pop	{r4, pc}

08009784 <memset>:
 8009784:	4402      	add	r2, r0
 8009786:	4603      	mov	r3, r0
 8009788:	4293      	cmp	r3, r2
 800978a:	d100      	bne.n	800978e <memset+0xa>
 800978c:	4770      	bx	lr
 800978e:	f803 1b01 	strb.w	r1, [r3], #1
 8009792:	e7f9      	b.n	8009788 <memset+0x4>

08009794 <iprintf>:
 8009794:	b40f      	push	{r0, r1, r2, r3}
 8009796:	4b0a      	ldr	r3, [pc, #40]	; (80097c0 <iprintf+0x2c>)
 8009798:	b513      	push	{r0, r1, r4, lr}
 800979a:	681c      	ldr	r4, [r3, #0]
 800979c:	b124      	cbz	r4, 80097a8 <iprintf+0x14>
 800979e:	69a3      	ldr	r3, [r4, #24]
 80097a0:	b913      	cbnz	r3, 80097a8 <iprintf+0x14>
 80097a2:	4620      	mov	r0, r4
 80097a4:	f000 fa72 	bl	8009c8c <__sinit>
 80097a8:	ab05      	add	r3, sp, #20
 80097aa:	9a04      	ldr	r2, [sp, #16]
 80097ac:	68a1      	ldr	r1, [r4, #8]
 80097ae:	9301      	str	r3, [sp, #4]
 80097b0:	4620      	mov	r0, r4
 80097b2:	f000 fc43 	bl	800a03c <_vfiprintf_r>
 80097b6:	b002      	add	sp, #8
 80097b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80097bc:	b004      	add	sp, #16
 80097be:	4770      	bx	lr
 80097c0:	20000028 	.word	0x20000028

080097c4 <_puts_r>:
 80097c4:	b570      	push	{r4, r5, r6, lr}
 80097c6:	460e      	mov	r6, r1
 80097c8:	4605      	mov	r5, r0
 80097ca:	b118      	cbz	r0, 80097d4 <_puts_r+0x10>
 80097cc:	6983      	ldr	r3, [r0, #24]
 80097ce:	b90b      	cbnz	r3, 80097d4 <_puts_r+0x10>
 80097d0:	f000 fa5c 	bl	8009c8c <__sinit>
 80097d4:	69ab      	ldr	r3, [r5, #24]
 80097d6:	68ac      	ldr	r4, [r5, #8]
 80097d8:	b913      	cbnz	r3, 80097e0 <_puts_r+0x1c>
 80097da:	4628      	mov	r0, r5
 80097dc:	f000 fa56 	bl	8009c8c <__sinit>
 80097e0:	4b2c      	ldr	r3, [pc, #176]	; (8009894 <_puts_r+0xd0>)
 80097e2:	429c      	cmp	r4, r3
 80097e4:	d120      	bne.n	8009828 <_puts_r+0x64>
 80097e6:	686c      	ldr	r4, [r5, #4]
 80097e8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80097ea:	07db      	lsls	r3, r3, #31
 80097ec:	d405      	bmi.n	80097fa <_puts_r+0x36>
 80097ee:	89a3      	ldrh	r3, [r4, #12]
 80097f0:	0598      	lsls	r0, r3, #22
 80097f2:	d402      	bmi.n	80097fa <_puts_r+0x36>
 80097f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80097f6:	f000 fae7 	bl	8009dc8 <__retarget_lock_acquire_recursive>
 80097fa:	89a3      	ldrh	r3, [r4, #12]
 80097fc:	0719      	lsls	r1, r3, #28
 80097fe:	d51d      	bpl.n	800983c <_puts_r+0x78>
 8009800:	6923      	ldr	r3, [r4, #16]
 8009802:	b1db      	cbz	r3, 800983c <_puts_r+0x78>
 8009804:	3e01      	subs	r6, #1
 8009806:	68a3      	ldr	r3, [r4, #8]
 8009808:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800980c:	3b01      	subs	r3, #1
 800980e:	60a3      	str	r3, [r4, #8]
 8009810:	bb39      	cbnz	r1, 8009862 <_puts_r+0x9e>
 8009812:	2b00      	cmp	r3, #0
 8009814:	da38      	bge.n	8009888 <_puts_r+0xc4>
 8009816:	4622      	mov	r2, r4
 8009818:	210a      	movs	r1, #10
 800981a:	4628      	mov	r0, r5
 800981c:	f000 f85c 	bl	80098d8 <__swbuf_r>
 8009820:	3001      	adds	r0, #1
 8009822:	d011      	beq.n	8009848 <_puts_r+0x84>
 8009824:	250a      	movs	r5, #10
 8009826:	e011      	b.n	800984c <_puts_r+0x88>
 8009828:	4b1b      	ldr	r3, [pc, #108]	; (8009898 <_puts_r+0xd4>)
 800982a:	429c      	cmp	r4, r3
 800982c:	d101      	bne.n	8009832 <_puts_r+0x6e>
 800982e:	68ac      	ldr	r4, [r5, #8]
 8009830:	e7da      	b.n	80097e8 <_puts_r+0x24>
 8009832:	4b1a      	ldr	r3, [pc, #104]	; (800989c <_puts_r+0xd8>)
 8009834:	429c      	cmp	r4, r3
 8009836:	bf08      	it	eq
 8009838:	68ec      	ldreq	r4, [r5, #12]
 800983a:	e7d5      	b.n	80097e8 <_puts_r+0x24>
 800983c:	4621      	mov	r1, r4
 800983e:	4628      	mov	r0, r5
 8009840:	f000 f89c 	bl	800997c <__swsetup_r>
 8009844:	2800      	cmp	r0, #0
 8009846:	d0dd      	beq.n	8009804 <_puts_r+0x40>
 8009848:	f04f 35ff 	mov.w	r5, #4294967295
 800984c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800984e:	07da      	lsls	r2, r3, #31
 8009850:	d405      	bmi.n	800985e <_puts_r+0x9a>
 8009852:	89a3      	ldrh	r3, [r4, #12]
 8009854:	059b      	lsls	r3, r3, #22
 8009856:	d402      	bmi.n	800985e <_puts_r+0x9a>
 8009858:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800985a:	f000 fab6 	bl	8009dca <__retarget_lock_release_recursive>
 800985e:	4628      	mov	r0, r5
 8009860:	bd70      	pop	{r4, r5, r6, pc}
 8009862:	2b00      	cmp	r3, #0
 8009864:	da04      	bge.n	8009870 <_puts_r+0xac>
 8009866:	69a2      	ldr	r2, [r4, #24]
 8009868:	429a      	cmp	r2, r3
 800986a:	dc06      	bgt.n	800987a <_puts_r+0xb6>
 800986c:	290a      	cmp	r1, #10
 800986e:	d004      	beq.n	800987a <_puts_r+0xb6>
 8009870:	6823      	ldr	r3, [r4, #0]
 8009872:	1c5a      	adds	r2, r3, #1
 8009874:	6022      	str	r2, [r4, #0]
 8009876:	7019      	strb	r1, [r3, #0]
 8009878:	e7c5      	b.n	8009806 <_puts_r+0x42>
 800987a:	4622      	mov	r2, r4
 800987c:	4628      	mov	r0, r5
 800987e:	f000 f82b 	bl	80098d8 <__swbuf_r>
 8009882:	3001      	adds	r0, #1
 8009884:	d1bf      	bne.n	8009806 <_puts_r+0x42>
 8009886:	e7df      	b.n	8009848 <_puts_r+0x84>
 8009888:	6823      	ldr	r3, [r4, #0]
 800988a:	250a      	movs	r5, #10
 800988c:	1c5a      	adds	r2, r3, #1
 800988e:	6022      	str	r2, [r4, #0]
 8009890:	701d      	strb	r5, [r3, #0]
 8009892:	e7db      	b.n	800984c <_puts_r+0x88>
 8009894:	0800aca4 	.word	0x0800aca4
 8009898:	0800acc4 	.word	0x0800acc4
 800989c:	0800ac84 	.word	0x0800ac84

080098a0 <puts>:
 80098a0:	4b02      	ldr	r3, [pc, #8]	; (80098ac <puts+0xc>)
 80098a2:	4601      	mov	r1, r0
 80098a4:	6818      	ldr	r0, [r3, #0]
 80098a6:	f7ff bf8d 	b.w	80097c4 <_puts_r>
 80098aa:	bf00      	nop
 80098ac:	20000028 	.word	0x20000028

080098b0 <strrchr>:
 80098b0:	b538      	push	{r3, r4, r5, lr}
 80098b2:	4603      	mov	r3, r0
 80098b4:	460c      	mov	r4, r1
 80098b6:	b969      	cbnz	r1, 80098d4 <strrchr+0x24>
 80098b8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80098bc:	f000 bed5 	b.w	800a66a <strchr>
 80098c0:	1c43      	adds	r3, r0, #1
 80098c2:	4605      	mov	r5, r0
 80098c4:	4621      	mov	r1, r4
 80098c6:	4618      	mov	r0, r3
 80098c8:	f000 fecf 	bl	800a66a <strchr>
 80098cc:	2800      	cmp	r0, #0
 80098ce:	d1f7      	bne.n	80098c0 <strrchr+0x10>
 80098d0:	4628      	mov	r0, r5
 80098d2:	bd38      	pop	{r3, r4, r5, pc}
 80098d4:	2500      	movs	r5, #0
 80098d6:	e7f5      	b.n	80098c4 <strrchr+0x14>

080098d8 <__swbuf_r>:
 80098d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80098da:	460e      	mov	r6, r1
 80098dc:	4614      	mov	r4, r2
 80098de:	4605      	mov	r5, r0
 80098e0:	b118      	cbz	r0, 80098ea <__swbuf_r+0x12>
 80098e2:	6983      	ldr	r3, [r0, #24]
 80098e4:	b90b      	cbnz	r3, 80098ea <__swbuf_r+0x12>
 80098e6:	f000 f9d1 	bl	8009c8c <__sinit>
 80098ea:	4b21      	ldr	r3, [pc, #132]	; (8009970 <__swbuf_r+0x98>)
 80098ec:	429c      	cmp	r4, r3
 80098ee:	d12b      	bne.n	8009948 <__swbuf_r+0x70>
 80098f0:	686c      	ldr	r4, [r5, #4]
 80098f2:	69a3      	ldr	r3, [r4, #24]
 80098f4:	60a3      	str	r3, [r4, #8]
 80098f6:	89a3      	ldrh	r3, [r4, #12]
 80098f8:	071a      	lsls	r2, r3, #28
 80098fa:	d52f      	bpl.n	800995c <__swbuf_r+0x84>
 80098fc:	6923      	ldr	r3, [r4, #16]
 80098fe:	b36b      	cbz	r3, 800995c <__swbuf_r+0x84>
 8009900:	6923      	ldr	r3, [r4, #16]
 8009902:	6820      	ldr	r0, [r4, #0]
 8009904:	1ac0      	subs	r0, r0, r3
 8009906:	6963      	ldr	r3, [r4, #20]
 8009908:	b2f6      	uxtb	r6, r6
 800990a:	4283      	cmp	r3, r0
 800990c:	4637      	mov	r7, r6
 800990e:	dc04      	bgt.n	800991a <__swbuf_r+0x42>
 8009910:	4621      	mov	r1, r4
 8009912:	4628      	mov	r0, r5
 8009914:	f000 f926 	bl	8009b64 <_fflush_r>
 8009918:	bb30      	cbnz	r0, 8009968 <__swbuf_r+0x90>
 800991a:	68a3      	ldr	r3, [r4, #8]
 800991c:	3b01      	subs	r3, #1
 800991e:	60a3      	str	r3, [r4, #8]
 8009920:	6823      	ldr	r3, [r4, #0]
 8009922:	1c5a      	adds	r2, r3, #1
 8009924:	6022      	str	r2, [r4, #0]
 8009926:	701e      	strb	r6, [r3, #0]
 8009928:	6963      	ldr	r3, [r4, #20]
 800992a:	3001      	adds	r0, #1
 800992c:	4283      	cmp	r3, r0
 800992e:	d004      	beq.n	800993a <__swbuf_r+0x62>
 8009930:	89a3      	ldrh	r3, [r4, #12]
 8009932:	07db      	lsls	r3, r3, #31
 8009934:	d506      	bpl.n	8009944 <__swbuf_r+0x6c>
 8009936:	2e0a      	cmp	r6, #10
 8009938:	d104      	bne.n	8009944 <__swbuf_r+0x6c>
 800993a:	4621      	mov	r1, r4
 800993c:	4628      	mov	r0, r5
 800993e:	f000 f911 	bl	8009b64 <_fflush_r>
 8009942:	b988      	cbnz	r0, 8009968 <__swbuf_r+0x90>
 8009944:	4638      	mov	r0, r7
 8009946:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009948:	4b0a      	ldr	r3, [pc, #40]	; (8009974 <__swbuf_r+0x9c>)
 800994a:	429c      	cmp	r4, r3
 800994c:	d101      	bne.n	8009952 <__swbuf_r+0x7a>
 800994e:	68ac      	ldr	r4, [r5, #8]
 8009950:	e7cf      	b.n	80098f2 <__swbuf_r+0x1a>
 8009952:	4b09      	ldr	r3, [pc, #36]	; (8009978 <__swbuf_r+0xa0>)
 8009954:	429c      	cmp	r4, r3
 8009956:	bf08      	it	eq
 8009958:	68ec      	ldreq	r4, [r5, #12]
 800995a:	e7ca      	b.n	80098f2 <__swbuf_r+0x1a>
 800995c:	4621      	mov	r1, r4
 800995e:	4628      	mov	r0, r5
 8009960:	f000 f80c 	bl	800997c <__swsetup_r>
 8009964:	2800      	cmp	r0, #0
 8009966:	d0cb      	beq.n	8009900 <__swbuf_r+0x28>
 8009968:	f04f 37ff 	mov.w	r7, #4294967295
 800996c:	e7ea      	b.n	8009944 <__swbuf_r+0x6c>
 800996e:	bf00      	nop
 8009970:	0800aca4 	.word	0x0800aca4
 8009974:	0800acc4 	.word	0x0800acc4
 8009978:	0800ac84 	.word	0x0800ac84

0800997c <__swsetup_r>:
 800997c:	4b32      	ldr	r3, [pc, #200]	; (8009a48 <__swsetup_r+0xcc>)
 800997e:	b570      	push	{r4, r5, r6, lr}
 8009980:	681d      	ldr	r5, [r3, #0]
 8009982:	4606      	mov	r6, r0
 8009984:	460c      	mov	r4, r1
 8009986:	b125      	cbz	r5, 8009992 <__swsetup_r+0x16>
 8009988:	69ab      	ldr	r3, [r5, #24]
 800998a:	b913      	cbnz	r3, 8009992 <__swsetup_r+0x16>
 800998c:	4628      	mov	r0, r5
 800998e:	f000 f97d 	bl	8009c8c <__sinit>
 8009992:	4b2e      	ldr	r3, [pc, #184]	; (8009a4c <__swsetup_r+0xd0>)
 8009994:	429c      	cmp	r4, r3
 8009996:	d10f      	bne.n	80099b8 <__swsetup_r+0x3c>
 8009998:	686c      	ldr	r4, [r5, #4]
 800999a:	89a3      	ldrh	r3, [r4, #12]
 800999c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80099a0:	0719      	lsls	r1, r3, #28
 80099a2:	d42c      	bmi.n	80099fe <__swsetup_r+0x82>
 80099a4:	06dd      	lsls	r5, r3, #27
 80099a6:	d411      	bmi.n	80099cc <__swsetup_r+0x50>
 80099a8:	2309      	movs	r3, #9
 80099aa:	6033      	str	r3, [r6, #0]
 80099ac:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80099b0:	81a3      	strh	r3, [r4, #12]
 80099b2:	f04f 30ff 	mov.w	r0, #4294967295
 80099b6:	e03e      	b.n	8009a36 <__swsetup_r+0xba>
 80099b8:	4b25      	ldr	r3, [pc, #148]	; (8009a50 <__swsetup_r+0xd4>)
 80099ba:	429c      	cmp	r4, r3
 80099bc:	d101      	bne.n	80099c2 <__swsetup_r+0x46>
 80099be:	68ac      	ldr	r4, [r5, #8]
 80099c0:	e7eb      	b.n	800999a <__swsetup_r+0x1e>
 80099c2:	4b24      	ldr	r3, [pc, #144]	; (8009a54 <__swsetup_r+0xd8>)
 80099c4:	429c      	cmp	r4, r3
 80099c6:	bf08      	it	eq
 80099c8:	68ec      	ldreq	r4, [r5, #12]
 80099ca:	e7e6      	b.n	800999a <__swsetup_r+0x1e>
 80099cc:	0758      	lsls	r0, r3, #29
 80099ce:	d512      	bpl.n	80099f6 <__swsetup_r+0x7a>
 80099d0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80099d2:	b141      	cbz	r1, 80099e6 <__swsetup_r+0x6a>
 80099d4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80099d8:	4299      	cmp	r1, r3
 80099da:	d002      	beq.n	80099e2 <__swsetup_r+0x66>
 80099dc:	4630      	mov	r0, r6
 80099de:	f000 fa59 	bl	8009e94 <_free_r>
 80099e2:	2300      	movs	r3, #0
 80099e4:	6363      	str	r3, [r4, #52]	; 0x34
 80099e6:	89a3      	ldrh	r3, [r4, #12]
 80099e8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80099ec:	81a3      	strh	r3, [r4, #12]
 80099ee:	2300      	movs	r3, #0
 80099f0:	6063      	str	r3, [r4, #4]
 80099f2:	6923      	ldr	r3, [r4, #16]
 80099f4:	6023      	str	r3, [r4, #0]
 80099f6:	89a3      	ldrh	r3, [r4, #12]
 80099f8:	f043 0308 	orr.w	r3, r3, #8
 80099fc:	81a3      	strh	r3, [r4, #12]
 80099fe:	6923      	ldr	r3, [r4, #16]
 8009a00:	b94b      	cbnz	r3, 8009a16 <__swsetup_r+0x9a>
 8009a02:	89a3      	ldrh	r3, [r4, #12]
 8009a04:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009a08:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009a0c:	d003      	beq.n	8009a16 <__swsetup_r+0x9a>
 8009a0e:	4621      	mov	r1, r4
 8009a10:	4630      	mov	r0, r6
 8009a12:	f000 f9ff 	bl	8009e14 <__smakebuf_r>
 8009a16:	89a0      	ldrh	r0, [r4, #12]
 8009a18:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009a1c:	f010 0301 	ands.w	r3, r0, #1
 8009a20:	d00a      	beq.n	8009a38 <__swsetup_r+0xbc>
 8009a22:	2300      	movs	r3, #0
 8009a24:	60a3      	str	r3, [r4, #8]
 8009a26:	6963      	ldr	r3, [r4, #20]
 8009a28:	425b      	negs	r3, r3
 8009a2a:	61a3      	str	r3, [r4, #24]
 8009a2c:	6923      	ldr	r3, [r4, #16]
 8009a2e:	b943      	cbnz	r3, 8009a42 <__swsetup_r+0xc6>
 8009a30:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009a34:	d1ba      	bne.n	80099ac <__swsetup_r+0x30>
 8009a36:	bd70      	pop	{r4, r5, r6, pc}
 8009a38:	0781      	lsls	r1, r0, #30
 8009a3a:	bf58      	it	pl
 8009a3c:	6963      	ldrpl	r3, [r4, #20]
 8009a3e:	60a3      	str	r3, [r4, #8]
 8009a40:	e7f4      	b.n	8009a2c <__swsetup_r+0xb0>
 8009a42:	2000      	movs	r0, #0
 8009a44:	e7f7      	b.n	8009a36 <__swsetup_r+0xba>
 8009a46:	bf00      	nop
 8009a48:	20000028 	.word	0x20000028
 8009a4c:	0800aca4 	.word	0x0800aca4
 8009a50:	0800acc4 	.word	0x0800acc4
 8009a54:	0800ac84 	.word	0x0800ac84

08009a58 <__sflush_r>:
 8009a58:	898a      	ldrh	r2, [r1, #12]
 8009a5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009a5e:	4605      	mov	r5, r0
 8009a60:	0710      	lsls	r0, r2, #28
 8009a62:	460c      	mov	r4, r1
 8009a64:	d458      	bmi.n	8009b18 <__sflush_r+0xc0>
 8009a66:	684b      	ldr	r3, [r1, #4]
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	dc05      	bgt.n	8009a78 <__sflush_r+0x20>
 8009a6c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	dc02      	bgt.n	8009a78 <__sflush_r+0x20>
 8009a72:	2000      	movs	r0, #0
 8009a74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009a78:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009a7a:	2e00      	cmp	r6, #0
 8009a7c:	d0f9      	beq.n	8009a72 <__sflush_r+0x1a>
 8009a7e:	2300      	movs	r3, #0
 8009a80:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009a84:	682f      	ldr	r7, [r5, #0]
 8009a86:	602b      	str	r3, [r5, #0]
 8009a88:	d032      	beq.n	8009af0 <__sflush_r+0x98>
 8009a8a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009a8c:	89a3      	ldrh	r3, [r4, #12]
 8009a8e:	075a      	lsls	r2, r3, #29
 8009a90:	d505      	bpl.n	8009a9e <__sflush_r+0x46>
 8009a92:	6863      	ldr	r3, [r4, #4]
 8009a94:	1ac0      	subs	r0, r0, r3
 8009a96:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009a98:	b10b      	cbz	r3, 8009a9e <__sflush_r+0x46>
 8009a9a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009a9c:	1ac0      	subs	r0, r0, r3
 8009a9e:	2300      	movs	r3, #0
 8009aa0:	4602      	mov	r2, r0
 8009aa2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009aa4:	6a21      	ldr	r1, [r4, #32]
 8009aa6:	4628      	mov	r0, r5
 8009aa8:	47b0      	blx	r6
 8009aaa:	1c43      	adds	r3, r0, #1
 8009aac:	89a3      	ldrh	r3, [r4, #12]
 8009aae:	d106      	bne.n	8009abe <__sflush_r+0x66>
 8009ab0:	6829      	ldr	r1, [r5, #0]
 8009ab2:	291d      	cmp	r1, #29
 8009ab4:	d82c      	bhi.n	8009b10 <__sflush_r+0xb8>
 8009ab6:	4a2a      	ldr	r2, [pc, #168]	; (8009b60 <__sflush_r+0x108>)
 8009ab8:	40ca      	lsrs	r2, r1
 8009aba:	07d6      	lsls	r6, r2, #31
 8009abc:	d528      	bpl.n	8009b10 <__sflush_r+0xb8>
 8009abe:	2200      	movs	r2, #0
 8009ac0:	6062      	str	r2, [r4, #4]
 8009ac2:	04d9      	lsls	r1, r3, #19
 8009ac4:	6922      	ldr	r2, [r4, #16]
 8009ac6:	6022      	str	r2, [r4, #0]
 8009ac8:	d504      	bpl.n	8009ad4 <__sflush_r+0x7c>
 8009aca:	1c42      	adds	r2, r0, #1
 8009acc:	d101      	bne.n	8009ad2 <__sflush_r+0x7a>
 8009ace:	682b      	ldr	r3, [r5, #0]
 8009ad0:	b903      	cbnz	r3, 8009ad4 <__sflush_r+0x7c>
 8009ad2:	6560      	str	r0, [r4, #84]	; 0x54
 8009ad4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009ad6:	602f      	str	r7, [r5, #0]
 8009ad8:	2900      	cmp	r1, #0
 8009ada:	d0ca      	beq.n	8009a72 <__sflush_r+0x1a>
 8009adc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009ae0:	4299      	cmp	r1, r3
 8009ae2:	d002      	beq.n	8009aea <__sflush_r+0x92>
 8009ae4:	4628      	mov	r0, r5
 8009ae6:	f000 f9d5 	bl	8009e94 <_free_r>
 8009aea:	2000      	movs	r0, #0
 8009aec:	6360      	str	r0, [r4, #52]	; 0x34
 8009aee:	e7c1      	b.n	8009a74 <__sflush_r+0x1c>
 8009af0:	6a21      	ldr	r1, [r4, #32]
 8009af2:	2301      	movs	r3, #1
 8009af4:	4628      	mov	r0, r5
 8009af6:	47b0      	blx	r6
 8009af8:	1c41      	adds	r1, r0, #1
 8009afa:	d1c7      	bne.n	8009a8c <__sflush_r+0x34>
 8009afc:	682b      	ldr	r3, [r5, #0]
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	d0c4      	beq.n	8009a8c <__sflush_r+0x34>
 8009b02:	2b1d      	cmp	r3, #29
 8009b04:	d001      	beq.n	8009b0a <__sflush_r+0xb2>
 8009b06:	2b16      	cmp	r3, #22
 8009b08:	d101      	bne.n	8009b0e <__sflush_r+0xb6>
 8009b0a:	602f      	str	r7, [r5, #0]
 8009b0c:	e7b1      	b.n	8009a72 <__sflush_r+0x1a>
 8009b0e:	89a3      	ldrh	r3, [r4, #12]
 8009b10:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009b14:	81a3      	strh	r3, [r4, #12]
 8009b16:	e7ad      	b.n	8009a74 <__sflush_r+0x1c>
 8009b18:	690f      	ldr	r7, [r1, #16]
 8009b1a:	2f00      	cmp	r7, #0
 8009b1c:	d0a9      	beq.n	8009a72 <__sflush_r+0x1a>
 8009b1e:	0793      	lsls	r3, r2, #30
 8009b20:	680e      	ldr	r6, [r1, #0]
 8009b22:	bf08      	it	eq
 8009b24:	694b      	ldreq	r3, [r1, #20]
 8009b26:	600f      	str	r7, [r1, #0]
 8009b28:	bf18      	it	ne
 8009b2a:	2300      	movne	r3, #0
 8009b2c:	eba6 0807 	sub.w	r8, r6, r7
 8009b30:	608b      	str	r3, [r1, #8]
 8009b32:	f1b8 0f00 	cmp.w	r8, #0
 8009b36:	dd9c      	ble.n	8009a72 <__sflush_r+0x1a>
 8009b38:	6a21      	ldr	r1, [r4, #32]
 8009b3a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009b3c:	4643      	mov	r3, r8
 8009b3e:	463a      	mov	r2, r7
 8009b40:	4628      	mov	r0, r5
 8009b42:	47b0      	blx	r6
 8009b44:	2800      	cmp	r0, #0
 8009b46:	dc06      	bgt.n	8009b56 <__sflush_r+0xfe>
 8009b48:	89a3      	ldrh	r3, [r4, #12]
 8009b4a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009b4e:	81a3      	strh	r3, [r4, #12]
 8009b50:	f04f 30ff 	mov.w	r0, #4294967295
 8009b54:	e78e      	b.n	8009a74 <__sflush_r+0x1c>
 8009b56:	4407      	add	r7, r0
 8009b58:	eba8 0800 	sub.w	r8, r8, r0
 8009b5c:	e7e9      	b.n	8009b32 <__sflush_r+0xda>
 8009b5e:	bf00      	nop
 8009b60:	20400001 	.word	0x20400001

08009b64 <_fflush_r>:
 8009b64:	b538      	push	{r3, r4, r5, lr}
 8009b66:	690b      	ldr	r3, [r1, #16]
 8009b68:	4605      	mov	r5, r0
 8009b6a:	460c      	mov	r4, r1
 8009b6c:	b913      	cbnz	r3, 8009b74 <_fflush_r+0x10>
 8009b6e:	2500      	movs	r5, #0
 8009b70:	4628      	mov	r0, r5
 8009b72:	bd38      	pop	{r3, r4, r5, pc}
 8009b74:	b118      	cbz	r0, 8009b7e <_fflush_r+0x1a>
 8009b76:	6983      	ldr	r3, [r0, #24]
 8009b78:	b90b      	cbnz	r3, 8009b7e <_fflush_r+0x1a>
 8009b7a:	f000 f887 	bl	8009c8c <__sinit>
 8009b7e:	4b14      	ldr	r3, [pc, #80]	; (8009bd0 <_fflush_r+0x6c>)
 8009b80:	429c      	cmp	r4, r3
 8009b82:	d11b      	bne.n	8009bbc <_fflush_r+0x58>
 8009b84:	686c      	ldr	r4, [r5, #4]
 8009b86:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	d0ef      	beq.n	8009b6e <_fflush_r+0xa>
 8009b8e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009b90:	07d0      	lsls	r0, r2, #31
 8009b92:	d404      	bmi.n	8009b9e <_fflush_r+0x3a>
 8009b94:	0599      	lsls	r1, r3, #22
 8009b96:	d402      	bmi.n	8009b9e <_fflush_r+0x3a>
 8009b98:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009b9a:	f000 f915 	bl	8009dc8 <__retarget_lock_acquire_recursive>
 8009b9e:	4628      	mov	r0, r5
 8009ba0:	4621      	mov	r1, r4
 8009ba2:	f7ff ff59 	bl	8009a58 <__sflush_r>
 8009ba6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009ba8:	07da      	lsls	r2, r3, #31
 8009baa:	4605      	mov	r5, r0
 8009bac:	d4e0      	bmi.n	8009b70 <_fflush_r+0xc>
 8009bae:	89a3      	ldrh	r3, [r4, #12]
 8009bb0:	059b      	lsls	r3, r3, #22
 8009bb2:	d4dd      	bmi.n	8009b70 <_fflush_r+0xc>
 8009bb4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009bb6:	f000 f908 	bl	8009dca <__retarget_lock_release_recursive>
 8009bba:	e7d9      	b.n	8009b70 <_fflush_r+0xc>
 8009bbc:	4b05      	ldr	r3, [pc, #20]	; (8009bd4 <_fflush_r+0x70>)
 8009bbe:	429c      	cmp	r4, r3
 8009bc0:	d101      	bne.n	8009bc6 <_fflush_r+0x62>
 8009bc2:	68ac      	ldr	r4, [r5, #8]
 8009bc4:	e7df      	b.n	8009b86 <_fflush_r+0x22>
 8009bc6:	4b04      	ldr	r3, [pc, #16]	; (8009bd8 <_fflush_r+0x74>)
 8009bc8:	429c      	cmp	r4, r3
 8009bca:	bf08      	it	eq
 8009bcc:	68ec      	ldreq	r4, [r5, #12]
 8009bce:	e7da      	b.n	8009b86 <_fflush_r+0x22>
 8009bd0:	0800aca4 	.word	0x0800aca4
 8009bd4:	0800acc4 	.word	0x0800acc4
 8009bd8:	0800ac84 	.word	0x0800ac84

08009bdc <std>:
 8009bdc:	2300      	movs	r3, #0
 8009bde:	b510      	push	{r4, lr}
 8009be0:	4604      	mov	r4, r0
 8009be2:	e9c0 3300 	strd	r3, r3, [r0]
 8009be6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009bea:	6083      	str	r3, [r0, #8]
 8009bec:	8181      	strh	r1, [r0, #12]
 8009bee:	6643      	str	r3, [r0, #100]	; 0x64
 8009bf0:	81c2      	strh	r2, [r0, #14]
 8009bf2:	6183      	str	r3, [r0, #24]
 8009bf4:	4619      	mov	r1, r3
 8009bf6:	2208      	movs	r2, #8
 8009bf8:	305c      	adds	r0, #92	; 0x5c
 8009bfa:	f7ff fdc3 	bl	8009784 <memset>
 8009bfe:	4b05      	ldr	r3, [pc, #20]	; (8009c14 <std+0x38>)
 8009c00:	6263      	str	r3, [r4, #36]	; 0x24
 8009c02:	4b05      	ldr	r3, [pc, #20]	; (8009c18 <std+0x3c>)
 8009c04:	62a3      	str	r3, [r4, #40]	; 0x28
 8009c06:	4b05      	ldr	r3, [pc, #20]	; (8009c1c <std+0x40>)
 8009c08:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009c0a:	4b05      	ldr	r3, [pc, #20]	; (8009c20 <std+0x44>)
 8009c0c:	6224      	str	r4, [r4, #32]
 8009c0e:	6323      	str	r3, [r4, #48]	; 0x30
 8009c10:	bd10      	pop	{r4, pc}
 8009c12:	bf00      	nop
 8009c14:	0800a5e5 	.word	0x0800a5e5
 8009c18:	0800a607 	.word	0x0800a607
 8009c1c:	0800a63f 	.word	0x0800a63f
 8009c20:	0800a663 	.word	0x0800a663

08009c24 <_cleanup_r>:
 8009c24:	4901      	ldr	r1, [pc, #4]	; (8009c2c <_cleanup_r+0x8>)
 8009c26:	f000 b8af 	b.w	8009d88 <_fwalk_reent>
 8009c2a:	bf00      	nop
 8009c2c:	08009b65 	.word	0x08009b65

08009c30 <__sfmoreglue>:
 8009c30:	b570      	push	{r4, r5, r6, lr}
 8009c32:	1e4a      	subs	r2, r1, #1
 8009c34:	2568      	movs	r5, #104	; 0x68
 8009c36:	4355      	muls	r5, r2
 8009c38:	460e      	mov	r6, r1
 8009c3a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009c3e:	f000 f979 	bl	8009f34 <_malloc_r>
 8009c42:	4604      	mov	r4, r0
 8009c44:	b140      	cbz	r0, 8009c58 <__sfmoreglue+0x28>
 8009c46:	2100      	movs	r1, #0
 8009c48:	e9c0 1600 	strd	r1, r6, [r0]
 8009c4c:	300c      	adds	r0, #12
 8009c4e:	60a0      	str	r0, [r4, #8]
 8009c50:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009c54:	f7ff fd96 	bl	8009784 <memset>
 8009c58:	4620      	mov	r0, r4
 8009c5a:	bd70      	pop	{r4, r5, r6, pc}

08009c5c <__sfp_lock_acquire>:
 8009c5c:	4801      	ldr	r0, [pc, #4]	; (8009c64 <__sfp_lock_acquire+0x8>)
 8009c5e:	f000 b8b3 	b.w	8009dc8 <__retarget_lock_acquire_recursive>
 8009c62:	bf00      	nop
 8009c64:	200014dc 	.word	0x200014dc

08009c68 <__sfp_lock_release>:
 8009c68:	4801      	ldr	r0, [pc, #4]	; (8009c70 <__sfp_lock_release+0x8>)
 8009c6a:	f000 b8ae 	b.w	8009dca <__retarget_lock_release_recursive>
 8009c6e:	bf00      	nop
 8009c70:	200014dc 	.word	0x200014dc

08009c74 <__sinit_lock_acquire>:
 8009c74:	4801      	ldr	r0, [pc, #4]	; (8009c7c <__sinit_lock_acquire+0x8>)
 8009c76:	f000 b8a7 	b.w	8009dc8 <__retarget_lock_acquire_recursive>
 8009c7a:	bf00      	nop
 8009c7c:	200014d7 	.word	0x200014d7

08009c80 <__sinit_lock_release>:
 8009c80:	4801      	ldr	r0, [pc, #4]	; (8009c88 <__sinit_lock_release+0x8>)
 8009c82:	f000 b8a2 	b.w	8009dca <__retarget_lock_release_recursive>
 8009c86:	bf00      	nop
 8009c88:	200014d7 	.word	0x200014d7

08009c8c <__sinit>:
 8009c8c:	b510      	push	{r4, lr}
 8009c8e:	4604      	mov	r4, r0
 8009c90:	f7ff fff0 	bl	8009c74 <__sinit_lock_acquire>
 8009c94:	69a3      	ldr	r3, [r4, #24]
 8009c96:	b11b      	cbz	r3, 8009ca0 <__sinit+0x14>
 8009c98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009c9c:	f7ff bff0 	b.w	8009c80 <__sinit_lock_release>
 8009ca0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009ca4:	6523      	str	r3, [r4, #80]	; 0x50
 8009ca6:	4b13      	ldr	r3, [pc, #76]	; (8009cf4 <__sinit+0x68>)
 8009ca8:	4a13      	ldr	r2, [pc, #76]	; (8009cf8 <__sinit+0x6c>)
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	62a2      	str	r2, [r4, #40]	; 0x28
 8009cae:	42a3      	cmp	r3, r4
 8009cb0:	bf04      	itt	eq
 8009cb2:	2301      	moveq	r3, #1
 8009cb4:	61a3      	streq	r3, [r4, #24]
 8009cb6:	4620      	mov	r0, r4
 8009cb8:	f000 f820 	bl	8009cfc <__sfp>
 8009cbc:	6060      	str	r0, [r4, #4]
 8009cbe:	4620      	mov	r0, r4
 8009cc0:	f000 f81c 	bl	8009cfc <__sfp>
 8009cc4:	60a0      	str	r0, [r4, #8]
 8009cc6:	4620      	mov	r0, r4
 8009cc8:	f000 f818 	bl	8009cfc <__sfp>
 8009ccc:	2200      	movs	r2, #0
 8009cce:	60e0      	str	r0, [r4, #12]
 8009cd0:	2104      	movs	r1, #4
 8009cd2:	6860      	ldr	r0, [r4, #4]
 8009cd4:	f7ff ff82 	bl	8009bdc <std>
 8009cd8:	68a0      	ldr	r0, [r4, #8]
 8009cda:	2201      	movs	r2, #1
 8009cdc:	2109      	movs	r1, #9
 8009cde:	f7ff ff7d 	bl	8009bdc <std>
 8009ce2:	68e0      	ldr	r0, [r4, #12]
 8009ce4:	2202      	movs	r2, #2
 8009ce6:	2112      	movs	r1, #18
 8009ce8:	f7ff ff78 	bl	8009bdc <std>
 8009cec:	2301      	movs	r3, #1
 8009cee:	61a3      	str	r3, [r4, #24]
 8009cf0:	e7d2      	b.n	8009c98 <__sinit+0xc>
 8009cf2:	bf00      	nop
 8009cf4:	0800ac80 	.word	0x0800ac80
 8009cf8:	08009c25 	.word	0x08009c25

08009cfc <__sfp>:
 8009cfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009cfe:	4607      	mov	r7, r0
 8009d00:	f7ff ffac 	bl	8009c5c <__sfp_lock_acquire>
 8009d04:	4b1e      	ldr	r3, [pc, #120]	; (8009d80 <__sfp+0x84>)
 8009d06:	681e      	ldr	r6, [r3, #0]
 8009d08:	69b3      	ldr	r3, [r6, #24]
 8009d0a:	b913      	cbnz	r3, 8009d12 <__sfp+0x16>
 8009d0c:	4630      	mov	r0, r6
 8009d0e:	f7ff ffbd 	bl	8009c8c <__sinit>
 8009d12:	3648      	adds	r6, #72	; 0x48
 8009d14:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009d18:	3b01      	subs	r3, #1
 8009d1a:	d503      	bpl.n	8009d24 <__sfp+0x28>
 8009d1c:	6833      	ldr	r3, [r6, #0]
 8009d1e:	b30b      	cbz	r3, 8009d64 <__sfp+0x68>
 8009d20:	6836      	ldr	r6, [r6, #0]
 8009d22:	e7f7      	b.n	8009d14 <__sfp+0x18>
 8009d24:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009d28:	b9d5      	cbnz	r5, 8009d60 <__sfp+0x64>
 8009d2a:	4b16      	ldr	r3, [pc, #88]	; (8009d84 <__sfp+0x88>)
 8009d2c:	60e3      	str	r3, [r4, #12]
 8009d2e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009d32:	6665      	str	r5, [r4, #100]	; 0x64
 8009d34:	f000 f847 	bl	8009dc6 <__retarget_lock_init_recursive>
 8009d38:	f7ff ff96 	bl	8009c68 <__sfp_lock_release>
 8009d3c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009d40:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009d44:	6025      	str	r5, [r4, #0]
 8009d46:	61a5      	str	r5, [r4, #24]
 8009d48:	2208      	movs	r2, #8
 8009d4a:	4629      	mov	r1, r5
 8009d4c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009d50:	f7ff fd18 	bl	8009784 <memset>
 8009d54:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009d58:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009d5c:	4620      	mov	r0, r4
 8009d5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009d60:	3468      	adds	r4, #104	; 0x68
 8009d62:	e7d9      	b.n	8009d18 <__sfp+0x1c>
 8009d64:	2104      	movs	r1, #4
 8009d66:	4638      	mov	r0, r7
 8009d68:	f7ff ff62 	bl	8009c30 <__sfmoreglue>
 8009d6c:	4604      	mov	r4, r0
 8009d6e:	6030      	str	r0, [r6, #0]
 8009d70:	2800      	cmp	r0, #0
 8009d72:	d1d5      	bne.n	8009d20 <__sfp+0x24>
 8009d74:	f7ff ff78 	bl	8009c68 <__sfp_lock_release>
 8009d78:	230c      	movs	r3, #12
 8009d7a:	603b      	str	r3, [r7, #0]
 8009d7c:	e7ee      	b.n	8009d5c <__sfp+0x60>
 8009d7e:	bf00      	nop
 8009d80:	0800ac80 	.word	0x0800ac80
 8009d84:	ffff0001 	.word	0xffff0001

08009d88 <_fwalk_reent>:
 8009d88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009d8c:	4606      	mov	r6, r0
 8009d8e:	4688      	mov	r8, r1
 8009d90:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009d94:	2700      	movs	r7, #0
 8009d96:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009d9a:	f1b9 0901 	subs.w	r9, r9, #1
 8009d9e:	d505      	bpl.n	8009dac <_fwalk_reent+0x24>
 8009da0:	6824      	ldr	r4, [r4, #0]
 8009da2:	2c00      	cmp	r4, #0
 8009da4:	d1f7      	bne.n	8009d96 <_fwalk_reent+0xe>
 8009da6:	4638      	mov	r0, r7
 8009da8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009dac:	89ab      	ldrh	r3, [r5, #12]
 8009dae:	2b01      	cmp	r3, #1
 8009db0:	d907      	bls.n	8009dc2 <_fwalk_reent+0x3a>
 8009db2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009db6:	3301      	adds	r3, #1
 8009db8:	d003      	beq.n	8009dc2 <_fwalk_reent+0x3a>
 8009dba:	4629      	mov	r1, r5
 8009dbc:	4630      	mov	r0, r6
 8009dbe:	47c0      	blx	r8
 8009dc0:	4307      	orrs	r7, r0
 8009dc2:	3568      	adds	r5, #104	; 0x68
 8009dc4:	e7e9      	b.n	8009d9a <_fwalk_reent+0x12>

08009dc6 <__retarget_lock_init_recursive>:
 8009dc6:	4770      	bx	lr

08009dc8 <__retarget_lock_acquire_recursive>:
 8009dc8:	4770      	bx	lr

08009dca <__retarget_lock_release_recursive>:
 8009dca:	4770      	bx	lr

08009dcc <__swhatbuf_r>:
 8009dcc:	b570      	push	{r4, r5, r6, lr}
 8009dce:	460e      	mov	r6, r1
 8009dd0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009dd4:	2900      	cmp	r1, #0
 8009dd6:	b096      	sub	sp, #88	; 0x58
 8009dd8:	4614      	mov	r4, r2
 8009dda:	461d      	mov	r5, r3
 8009ddc:	da07      	bge.n	8009dee <__swhatbuf_r+0x22>
 8009dde:	2300      	movs	r3, #0
 8009de0:	602b      	str	r3, [r5, #0]
 8009de2:	89b3      	ldrh	r3, [r6, #12]
 8009de4:	061a      	lsls	r2, r3, #24
 8009de6:	d410      	bmi.n	8009e0a <__swhatbuf_r+0x3e>
 8009de8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009dec:	e00e      	b.n	8009e0c <__swhatbuf_r+0x40>
 8009dee:	466a      	mov	r2, sp
 8009df0:	f000 fc6a 	bl	800a6c8 <_fstat_r>
 8009df4:	2800      	cmp	r0, #0
 8009df6:	dbf2      	blt.n	8009dde <__swhatbuf_r+0x12>
 8009df8:	9a01      	ldr	r2, [sp, #4]
 8009dfa:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009dfe:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009e02:	425a      	negs	r2, r3
 8009e04:	415a      	adcs	r2, r3
 8009e06:	602a      	str	r2, [r5, #0]
 8009e08:	e7ee      	b.n	8009de8 <__swhatbuf_r+0x1c>
 8009e0a:	2340      	movs	r3, #64	; 0x40
 8009e0c:	2000      	movs	r0, #0
 8009e0e:	6023      	str	r3, [r4, #0]
 8009e10:	b016      	add	sp, #88	; 0x58
 8009e12:	bd70      	pop	{r4, r5, r6, pc}

08009e14 <__smakebuf_r>:
 8009e14:	898b      	ldrh	r3, [r1, #12]
 8009e16:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009e18:	079d      	lsls	r5, r3, #30
 8009e1a:	4606      	mov	r6, r0
 8009e1c:	460c      	mov	r4, r1
 8009e1e:	d507      	bpl.n	8009e30 <__smakebuf_r+0x1c>
 8009e20:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009e24:	6023      	str	r3, [r4, #0]
 8009e26:	6123      	str	r3, [r4, #16]
 8009e28:	2301      	movs	r3, #1
 8009e2a:	6163      	str	r3, [r4, #20]
 8009e2c:	b002      	add	sp, #8
 8009e2e:	bd70      	pop	{r4, r5, r6, pc}
 8009e30:	ab01      	add	r3, sp, #4
 8009e32:	466a      	mov	r2, sp
 8009e34:	f7ff ffca 	bl	8009dcc <__swhatbuf_r>
 8009e38:	9900      	ldr	r1, [sp, #0]
 8009e3a:	4605      	mov	r5, r0
 8009e3c:	4630      	mov	r0, r6
 8009e3e:	f000 f879 	bl	8009f34 <_malloc_r>
 8009e42:	b948      	cbnz	r0, 8009e58 <__smakebuf_r+0x44>
 8009e44:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009e48:	059a      	lsls	r2, r3, #22
 8009e4a:	d4ef      	bmi.n	8009e2c <__smakebuf_r+0x18>
 8009e4c:	f023 0303 	bic.w	r3, r3, #3
 8009e50:	f043 0302 	orr.w	r3, r3, #2
 8009e54:	81a3      	strh	r3, [r4, #12]
 8009e56:	e7e3      	b.n	8009e20 <__smakebuf_r+0xc>
 8009e58:	4b0d      	ldr	r3, [pc, #52]	; (8009e90 <__smakebuf_r+0x7c>)
 8009e5a:	62b3      	str	r3, [r6, #40]	; 0x28
 8009e5c:	89a3      	ldrh	r3, [r4, #12]
 8009e5e:	6020      	str	r0, [r4, #0]
 8009e60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009e64:	81a3      	strh	r3, [r4, #12]
 8009e66:	9b00      	ldr	r3, [sp, #0]
 8009e68:	6163      	str	r3, [r4, #20]
 8009e6a:	9b01      	ldr	r3, [sp, #4]
 8009e6c:	6120      	str	r0, [r4, #16]
 8009e6e:	b15b      	cbz	r3, 8009e88 <__smakebuf_r+0x74>
 8009e70:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009e74:	4630      	mov	r0, r6
 8009e76:	f000 fc39 	bl	800a6ec <_isatty_r>
 8009e7a:	b128      	cbz	r0, 8009e88 <__smakebuf_r+0x74>
 8009e7c:	89a3      	ldrh	r3, [r4, #12]
 8009e7e:	f023 0303 	bic.w	r3, r3, #3
 8009e82:	f043 0301 	orr.w	r3, r3, #1
 8009e86:	81a3      	strh	r3, [r4, #12]
 8009e88:	89a0      	ldrh	r0, [r4, #12]
 8009e8a:	4305      	orrs	r5, r0
 8009e8c:	81a5      	strh	r5, [r4, #12]
 8009e8e:	e7cd      	b.n	8009e2c <__smakebuf_r+0x18>
 8009e90:	08009c25 	.word	0x08009c25

08009e94 <_free_r>:
 8009e94:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009e96:	2900      	cmp	r1, #0
 8009e98:	d048      	beq.n	8009f2c <_free_r+0x98>
 8009e9a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009e9e:	9001      	str	r0, [sp, #4]
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	f1a1 0404 	sub.w	r4, r1, #4
 8009ea6:	bfb8      	it	lt
 8009ea8:	18e4      	addlt	r4, r4, r3
 8009eaa:	f000 fc41 	bl	800a730 <__malloc_lock>
 8009eae:	4a20      	ldr	r2, [pc, #128]	; (8009f30 <_free_r+0x9c>)
 8009eb0:	9801      	ldr	r0, [sp, #4]
 8009eb2:	6813      	ldr	r3, [r2, #0]
 8009eb4:	4615      	mov	r5, r2
 8009eb6:	b933      	cbnz	r3, 8009ec6 <_free_r+0x32>
 8009eb8:	6063      	str	r3, [r4, #4]
 8009eba:	6014      	str	r4, [r2, #0]
 8009ebc:	b003      	add	sp, #12
 8009ebe:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009ec2:	f000 bc3b 	b.w	800a73c <__malloc_unlock>
 8009ec6:	42a3      	cmp	r3, r4
 8009ec8:	d90b      	bls.n	8009ee2 <_free_r+0x4e>
 8009eca:	6821      	ldr	r1, [r4, #0]
 8009ecc:	1862      	adds	r2, r4, r1
 8009ece:	4293      	cmp	r3, r2
 8009ed0:	bf04      	itt	eq
 8009ed2:	681a      	ldreq	r2, [r3, #0]
 8009ed4:	685b      	ldreq	r3, [r3, #4]
 8009ed6:	6063      	str	r3, [r4, #4]
 8009ed8:	bf04      	itt	eq
 8009eda:	1852      	addeq	r2, r2, r1
 8009edc:	6022      	streq	r2, [r4, #0]
 8009ede:	602c      	str	r4, [r5, #0]
 8009ee0:	e7ec      	b.n	8009ebc <_free_r+0x28>
 8009ee2:	461a      	mov	r2, r3
 8009ee4:	685b      	ldr	r3, [r3, #4]
 8009ee6:	b10b      	cbz	r3, 8009eec <_free_r+0x58>
 8009ee8:	42a3      	cmp	r3, r4
 8009eea:	d9fa      	bls.n	8009ee2 <_free_r+0x4e>
 8009eec:	6811      	ldr	r1, [r2, #0]
 8009eee:	1855      	adds	r5, r2, r1
 8009ef0:	42a5      	cmp	r5, r4
 8009ef2:	d10b      	bne.n	8009f0c <_free_r+0x78>
 8009ef4:	6824      	ldr	r4, [r4, #0]
 8009ef6:	4421      	add	r1, r4
 8009ef8:	1854      	adds	r4, r2, r1
 8009efa:	42a3      	cmp	r3, r4
 8009efc:	6011      	str	r1, [r2, #0]
 8009efe:	d1dd      	bne.n	8009ebc <_free_r+0x28>
 8009f00:	681c      	ldr	r4, [r3, #0]
 8009f02:	685b      	ldr	r3, [r3, #4]
 8009f04:	6053      	str	r3, [r2, #4]
 8009f06:	4421      	add	r1, r4
 8009f08:	6011      	str	r1, [r2, #0]
 8009f0a:	e7d7      	b.n	8009ebc <_free_r+0x28>
 8009f0c:	d902      	bls.n	8009f14 <_free_r+0x80>
 8009f0e:	230c      	movs	r3, #12
 8009f10:	6003      	str	r3, [r0, #0]
 8009f12:	e7d3      	b.n	8009ebc <_free_r+0x28>
 8009f14:	6825      	ldr	r5, [r4, #0]
 8009f16:	1961      	adds	r1, r4, r5
 8009f18:	428b      	cmp	r3, r1
 8009f1a:	bf04      	itt	eq
 8009f1c:	6819      	ldreq	r1, [r3, #0]
 8009f1e:	685b      	ldreq	r3, [r3, #4]
 8009f20:	6063      	str	r3, [r4, #4]
 8009f22:	bf04      	itt	eq
 8009f24:	1949      	addeq	r1, r1, r5
 8009f26:	6021      	streq	r1, [r4, #0]
 8009f28:	6054      	str	r4, [r2, #4]
 8009f2a:	e7c7      	b.n	8009ebc <_free_r+0x28>
 8009f2c:	b003      	add	sp, #12
 8009f2e:	bd30      	pop	{r4, r5, pc}
 8009f30:	2000136c 	.word	0x2000136c

08009f34 <_malloc_r>:
 8009f34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f36:	1ccd      	adds	r5, r1, #3
 8009f38:	f025 0503 	bic.w	r5, r5, #3
 8009f3c:	3508      	adds	r5, #8
 8009f3e:	2d0c      	cmp	r5, #12
 8009f40:	bf38      	it	cc
 8009f42:	250c      	movcc	r5, #12
 8009f44:	2d00      	cmp	r5, #0
 8009f46:	4606      	mov	r6, r0
 8009f48:	db01      	blt.n	8009f4e <_malloc_r+0x1a>
 8009f4a:	42a9      	cmp	r1, r5
 8009f4c:	d903      	bls.n	8009f56 <_malloc_r+0x22>
 8009f4e:	230c      	movs	r3, #12
 8009f50:	6033      	str	r3, [r6, #0]
 8009f52:	2000      	movs	r0, #0
 8009f54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009f56:	f000 fbeb 	bl	800a730 <__malloc_lock>
 8009f5a:	4921      	ldr	r1, [pc, #132]	; (8009fe0 <_malloc_r+0xac>)
 8009f5c:	680a      	ldr	r2, [r1, #0]
 8009f5e:	4614      	mov	r4, r2
 8009f60:	b99c      	cbnz	r4, 8009f8a <_malloc_r+0x56>
 8009f62:	4f20      	ldr	r7, [pc, #128]	; (8009fe4 <_malloc_r+0xb0>)
 8009f64:	683b      	ldr	r3, [r7, #0]
 8009f66:	b923      	cbnz	r3, 8009f72 <_malloc_r+0x3e>
 8009f68:	4621      	mov	r1, r4
 8009f6a:	4630      	mov	r0, r6
 8009f6c:	f000 fb2a 	bl	800a5c4 <_sbrk_r>
 8009f70:	6038      	str	r0, [r7, #0]
 8009f72:	4629      	mov	r1, r5
 8009f74:	4630      	mov	r0, r6
 8009f76:	f000 fb25 	bl	800a5c4 <_sbrk_r>
 8009f7a:	1c43      	adds	r3, r0, #1
 8009f7c:	d123      	bne.n	8009fc6 <_malloc_r+0x92>
 8009f7e:	230c      	movs	r3, #12
 8009f80:	6033      	str	r3, [r6, #0]
 8009f82:	4630      	mov	r0, r6
 8009f84:	f000 fbda 	bl	800a73c <__malloc_unlock>
 8009f88:	e7e3      	b.n	8009f52 <_malloc_r+0x1e>
 8009f8a:	6823      	ldr	r3, [r4, #0]
 8009f8c:	1b5b      	subs	r3, r3, r5
 8009f8e:	d417      	bmi.n	8009fc0 <_malloc_r+0x8c>
 8009f90:	2b0b      	cmp	r3, #11
 8009f92:	d903      	bls.n	8009f9c <_malloc_r+0x68>
 8009f94:	6023      	str	r3, [r4, #0]
 8009f96:	441c      	add	r4, r3
 8009f98:	6025      	str	r5, [r4, #0]
 8009f9a:	e004      	b.n	8009fa6 <_malloc_r+0x72>
 8009f9c:	6863      	ldr	r3, [r4, #4]
 8009f9e:	42a2      	cmp	r2, r4
 8009fa0:	bf0c      	ite	eq
 8009fa2:	600b      	streq	r3, [r1, #0]
 8009fa4:	6053      	strne	r3, [r2, #4]
 8009fa6:	4630      	mov	r0, r6
 8009fa8:	f000 fbc8 	bl	800a73c <__malloc_unlock>
 8009fac:	f104 000b 	add.w	r0, r4, #11
 8009fb0:	1d23      	adds	r3, r4, #4
 8009fb2:	f020 0007 	bic.w	r0, r0, #7
 8009fb6:	1ac2      	subs	r2, r0, r3
 8009fb8:	d0cc      	beq.n	8009f54 <_malloc_r+0x20>
 8009fba:	1a1b      	subs	r3, r3, r0
 8009fbc:	50a3      	str	r3, [r4, r2]
 8009fbe:	e7c9      	b.n	8009f54 <_malloc_r+0x20>
 8009fc0:	4622      	mov	r2, r4
 8009fc2:	6864      	ldr	r4, [r4, #4]
 8009fc4:	e7cc      	b.n	8009f60 <_malloc_r+0x2c>
 8009fc6:	1cc4      	adds	r4, r0, #3
 8009fc8:	f024 0403 	bic.w	r4, r4, #3
 8009fcc:	42a0      	cmp	r0, r4
 8009fce:	d0e3      	beq.n	8009f98 <_malloc_r+0x64>
 8009fd0:	1a21      	subs	r1, r4, r0
 8009fd2:	4630      	mov	r0, r6
 8009fd4:	f000 faf6 	bl	800a5c4 <_sbrk_r>
 8009fd8:	3001      	adds	r0, #1
 8009fda:	d1dd      	bne.n	8009f98 <_malloc_r+0x64>
 8009fdc:	e7cf      	b.n	8009f7e <_malloc_r+0x4a>
 8009fde:	bf00      	nop
 8009fe0:	2000136c 	.word	0x2000136c
 8009fe4:	20001370 	.word	0x20001370

08009fe8 <__sfputc_r>:
 8009fe8:	6893      	ldr	r3, [r2, #8]
 8009fea:	3b01      	subs	r3, #1
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	b410      	push	{r4}
 8009ff0:	6093      	str	r3, [r2, #8]
 8009ff2:	da08      	bge.n	800a006 <__sfputc_r+0x1e>
 8009ff4:	6994      	ldr	r4, [r2, #24]
 8009ff6:	42a3      	cmp	r3, r4
 8009ff8:	db01      	blt.n	8009ffe <__sfputc_r+0x16>
 8009ffa:	290a      	cmp	r1, #10
 8009ffc:	d103      	bne.n	800a006 <__sfputc_r+0x1e>
 8009ffe:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a002:	f7ff bc69 	b.w	80098d8 <__swbuf_r>
 800a006:	6813      	ldr	r3, [r2, #0]
 800a008:	1c58      	adds	r0, r3, #1
 800a00a:	6010      	str	r0, [r2, #0]
 800a00c:	7019      	strb	r1, [r3, #0]
 800a00e:	4608      	mov	r0, r1
 800a010:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a014:	4770      	bx	lr

0800a016 <__sfputs_r>:
 800a016:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a018:	4606      	mov	r6, r0
 800a01a:	460f      	mov	r7, r1
 800a01c:	4614      	mov	r4, r2
 800a01e:	18d5      	adds	r5, r2, r3
 800a020:	42ac      	cmp	r4, r5
 800a022:	d101      	bne.n	800a028 <__sfputs_r+0x12>
 800a024:	2000      	movs	r0, #0
 800a026:	e007      	b.n	800a038 <__sfputs_r+0x22>
 800a028:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a02c:	463a      	mov	r2, r7
 800a02e:	4630      	mov	r0, r6
 800a030:	f7ff ffda 	bl	8009fe8 <__sfputc_r>
 800a034:	1c43      	adds	r3, r0, #1
 800a036:	d1f3      	bne.n	800a020 <__sfputs_r+0xa>
 800a038:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a03c <_vfiprintf_r>:
 800a03c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a040:	460d      	mov	r5, r1
 800a042:	b09d      	sub	sp, #116	; 0x74
 800a044:	4614      	mov	r4, r2
 800a046:	4698      	mov	r8, r3
 800a048:	4606      	mov	r6, r0
 800a04a:	b118      	cbz	r0, 800a054 <_vfiprintf_r+0x18>
 800a04c:	6983      	ldr	r3, [r0, #24]
 800a04e:	b90b      	cbnz	r3, 800a054 <_vfiprintf_r+0x18>
 800a050:	f7ff fe1c 	bl	8009c8c <__sinit>
 800a054:	4b89      	ldr	r3, [pc, #548]	; (800a27c <_vfiprintf_r+0x240>)
 800a056:	429d      	cmp	r5, r3
 800a058:	d11b      	bne.n	800a092 <_vfiprintf_r+0x56>
 800a05a:	6875      	ldr	r5, [r6, #4]
 800a05c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a05e:	07d9      	lsls	r1, r3, #31
 800a060:	d405      	bmi.n	800a06e <_vfiprintf_r+0x32>
 800a062:	89ab      	ldrh	r3, [r5, #12]
 800a064:	059a      	lsls	r2, r3, #22
 800a066:	d402      	bmi.n	800a06e <_vfiprintf_r+0x32>
 800a068:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a06a:	f7ff fead 	bl	8009dc8 <__retarget_lock_acquire_recursive>
 800a06e:	89ab      	ldrh	r3, [r5, #12]
 800a070:	071b      	lsls	r3, r3, #28
 800a072:	d501      	bpl.n	800a078 <_vfiprintf_r+0x3c>
 800a074:	692b      	ldr	r3, [r5, #16]
 800a076:	b9eb      	cbnz	r3, 800a0b4 <_vfiprintf_r+0x78>
 800a078:	4629      	mov	r1, r5
 800a07a:	4630      	mov	r0, r6
 800a07c:	f7ff fc7e 	bl	800997c <__swsetup_r>
 800a080:	b1c0      	cbz	r0, 800a0b4 <_vfiprintf_r+0x78>
 800a082:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a084:	07dc      	lsls	r4, r3, #31
 800a086:	d50e      	bpl.n	800a0a6 <_vfiprintf_r+0x6a>
 800a088:	f04f 30ff 	mov.w	r0, #4294967295
 800a08c:	b01d      	add	sp, #116	; 0x74
 800a08e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a092:	4b7b      	ldr	r3, [pc, #492]	; (800a280 <_vfiprintf_r+0x244>)
 800a094:	429d      	cmp	r5, r3
 800a096:	d101      	bne.n	800a09c <_vfiprintf_r+0x60>
 800a098:	68b5      	ldr	r5, [r6, #8]
 800a09a:	e7df      	b.n	800a05c <_vfiprintf_r+0x20>
 800a09c:	4b79      	ldr	r3, [pc, #484]	; (800a284 <_vfiprintf_r+0x248>)
 800a09e:	429d      	cmp	r5, r3
 800a0a0:	bf08      	it	eq
 800a0a2:	68f5      	ldreq	r5, [r6, #12]
 800a0a4:	e7da      	b.n	800a05c <_vfiprintf_r+0x20>
 800a0a6:	89ab      	ldrh	r3, [r5, #12]
 800a0a8:	0598      	lsls	r0, r3, #22
 800a0aa:	d4ed      	bmi.n	800a088 <_vfiprintf_r+0x4c>
 800a0ac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a0ae:	f7ff fe8c 	bl	8009dca <__retarget_lock_release_recursive>
 800a0b2:	e7e9      	b.n	800a088 <_vfiprintf_r+0x4c>
 800a0b4:	2300      	movs	r3, #0
 800a0b6:	9309      	str	r3, [sp, #36]	; 0x24
 800a0b8:	2320      	movs	r3, #32
 800a0ba:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a0be:	f8cd 800c 	str.w	r8, [sp, #12]
 800a0c2:	2330      	movs	r3, #48	; 0x30
 800a0c4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a288 <_vfiprintf_r+0x24c>
 800a0c8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a0cc:	f04f 0901 	mov.w	r9, #1
 800a0d0:	4623      	mov	r3, r4
 800a0d2:	469a      	mov	sl, r3
 800a0d4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a0d8:	b10a      	cbz	r2, 800a0de <_vfiprintf_r+0xa2>
 800a0da:	2a25      	cmp	r2, #37	; 0x25
 800a0dc:	d1f9      	bne.n	800a0d2 <_vfiprintf_r+0x96>
 800a0de:	ebba 0b04 	subs.w	fp, sl, r4
 800a0e2:	d00b      	beq.n	800a0fc <_vfiprintf_r+0xc0>
 800a0e4:	465b      	mov	r3, fp
 800a0e6:	4622      	mov	r2, r4
 800a0e8:	4629      	mov	r1, r5
 800a0ea:	4630      	mov	r0, r6
 800a0ec:	f7ff ff93 	bl	800a016 <__sfputs_r>
 800a0f0:	3001      	adds	r0, #1
 800a0f2:	f000 80aa 	beq.w	800a24a <_vfiprintf_r+0x20e>
 800a0f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a0f8:	445a      	add	r2, fp
 800a0fa:	9209      	str	r2, [sp, #36]	; 0x24
 800a0fc:	f89a 3000 	ldrb.w	r3, [sl]
 800a100:	2b00      	cmp	r3, #0
 800a102:	f000 80a2 	beq.w	800a24a <_vfiprintf_r+0x20e>
 800a106:	2300      	movs	r3, #0
 800a108:	f04f 32ff 	mov.w	r2, #4294967295
 800a10c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a110:	f10a 0a01 	add.w	sl, sl, #1
 800a114:	9304      	str	r3, [sp, #16]
 800a116:	9307      	str	r3, [sp, #28]
 800a118:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a11c:	931a      	str	r3, [sp, #104]	; 0x68
 800a11e:	4654      	mov	r4, sl
 800a120:	2205      	movs	r2, #5
 800a122:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a126:	4858      	ldr	r0, [pc, #352]	; (800a288 <_vfiprintf_r+0x24c>)
 800a128:	f7f6 f832 	bl	8000190 <memchr>
 800a12c:	9a04      	ldr	r2, [sp, #16]
 800a12e:	b9d8      	cbnz	r0, 800a168 <_vfiprintf_r+0x12c>
 800a130:	06d1      	lsls	r1, r2, #27
 800a132:	bf44      	itt	mi
 800a134:	2320      	movmi	r3, #32
 800a136:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a13a:	0713      	lsls	r3, r2, #28
 800a13c:	bf44      	itt	mi
 800a13e:	232b      	movmi	r3, #43	; 0x2b
 800a140:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a144:	f89a 3000 	ldrb.w	r3, [sl]
 800a148:	2b2a      	cmp	r3, #42	; 0x2a
 800a14a:	d015      	beq.n	800a178 <_vfiprintf_r+0x13c>
 800a14c:	9a07      	ldr	r2, [sp, #28]
 800a14e:	4654      	mov	r4, sl
 800a150:	2000      	movs	r0, #0
 800a152:	f04f 0c0a 	mov.w	ip, #10
 800a156:	4621      	mov	r1, r4
 800a158:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a15c:	3b30      	subs	r3, #48	; 0x30
 800a15e:	2b09      	cmp	r3, #9
 800a160:	d94e      	bls.n	800a200 <_vfiprintf_r+0x1c4>
 800a162:	b1b0      	cbz	r0, 800a192 <_vfiprintf_r+0x156>
 800a164:	9207      	str	r2, [sp, #28]
 800a166:	e014      	b.n	800a192 <_vfiprintf_r+0x156>
 800a168:	eba0 0308 	sub.w	r3, r0, r8
 800a16c:	fa09 f303 	lsl.w	r3, r9, r3
 800a170:	4313      	orrs	r3, r2
 800a172:	9304      	str	r3, [sp, #16]
 800a174:	46a2      	mov	sl, r4
 800a176:	e7d2      	b.n	800a11e <_vfiprintf_r+0xe2>
 800a178:	9b03      	ldr	r3, [sp, #12]
 800a17a:	1d19      	adds	r1, r3, #4
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	9103      	str	r1, [sp, #12]
 800a180:	2b00      	cmp	r3, #0
 800a182:	bfbb      	ittet	lt
 800a184:	425b      	neglt	r3, r3
 800a186:	f042 0202 	orrlt.w	r2, r2, #2
 800a18a:	9307      	strge	r3, [sp, #28]
 800a18c:	9307      	strlt	r3, [sp, #28]
 800a18e:	bfb8      	it	lt
 800a190:	9204      	strlt	r2, [sp, #16]
 800a192:	7823      	ldrb	r3, [r4, #0]
 800a194:	2b2e      	cmp	r3, #46	; 0x2e
 800a196:	d10c      	bne.n	800a1b2 <_vfiprintf_r+0x176>
 800a198:	7863      	ldrb	r3, [r4, #1]
 800a19a:	2b2a      	cmp	r3, #42	; 0x2a
 800a19c:	d135      	bne.n	800a20a <_vfiprintf_r+0x1ce>
 800a19e:	9b03      	ldr	r3, [sp, #12]
 800a1a0:	1d1a      	adds	r2, r3, #4
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	9203      	str	r2, [sp, #12]
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	bfb8      	it	lt
 800a1aa:	f04f 33ff 	movlt.w	r3, #4294967295
 800a1ae:	3402      	adds	r4, #2
 800a1b0:	9305      	str	r3, [sp, #20]
 800a1b2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a298 <_vfiprintf_r+0x25c>
 800a1b6:	7821      	ldrb	r1, [r4, #0]
 800a1b8:	2203      	movs	r2, #3
 800a1ba:	4650      	mov	r0, sl
 800a1bc:	f7f5 ffe8 	bl	8000190 <memchr>
 800a1c0:	b140      	cbz	r0, 800a1d4 <_vfiprintf_r+0x198>
 800a1c2:	2340      	movs	r3, #64	; 0x40
 800a1c4:	eba0 000a 	sub.w	r0, r0, sl
 800a1c8:	fa03 f000 	lsl.w	r0, r3, r0
 800a1cc:	9b04      	ldr	r3, [sp, #16]
 800a1ce:	4303      	orrs	r3, r0
 800a1d0:	3401      	adds	r4, #1
 800a1d2:	9304      	str	r3, [sp, #16]
 800a1d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a1d8:	482c      	ldr	r0, [pc, #176]	; (800a28c <_vfiprintf_r+0x250>)
 800a1da:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a1de:	2206      	movs	r2, #6
 800a1e0:	f7f5 ffd6 	bl	8000190 <memchr>
 800a1e4:	2800      	cmp	r0, #0
 800a1e6:	d03f      	beq.n	800a268 <_vfiprintf_r+0x22c>
 800a1e8:	4b29      	ldr	r3, [pc, #164]	; (800a290 <_vfiprintf_r+0x254>)
 800a1ea:	bb1b      	cbnz	r3, 800a234 <_vfiprintf_r+0x1f8>
 800a1ec:	9b03      	ldr	r3, [sp, #12]
 800a1ee:	3307      	adds	r3, #7
 800a1f0:	f023 0307 	bic.w	r3, r3, #7
 800a1f4:	3308      	adds	r3, #8
 800a1f6:	9303      	str	r3, [sp, #12]
 800a1f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a1fa:	443b      	add	r3, r7
 800a1fc:	9309      	str	r3, [sp, #36]	; 0x24
 800a1fe:	e767      	b.n	800a0d0 <_vfiprintf_r+0x94>
 800a200:	fb0c 3202 	mla	r2, ip, r2, r3
 800a204:	460c      	mov	r4, r1
 800a206:	2001      	movs	r0, #1
 800a208:	e7a5      	b.n	800a156 <_vfiprintf_r+0x11a>
 800a20a:	2300      	movs	r3, #0
 800a20c:	3401      	adds	r4, #1
 800a20e:	9305      	str	r3, [sp, #20]
 800a210:	4619      	mov	r1, r3
 800a212:	f04f 0c0a 	mov.w	ip, #10
 800a216:	4620      	mov	r0, r4
 800a218:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a21c:	3a30      	subs	r2, #48	; 0x30
 800a21e:	2a09      	cmp	r2, #9
 800a220:	d903      	bls.n	800a22a <_vfiprintf_r+0x1ee>
 800a222:	2b00      	cmp	r3, #0
 800a224:	d0c5      	beq.n	800a1b2 <_vfiprintf_r+0x176>
 800a226:	9105      	str	r1, [sp, #20]
 800a228:	e7c3      	b.n	800a1b2 <_vfiprintf_r+0x176>
 800a22a:	fb0c 2101 	mla	r1, ip, r1, r2
 800a22e:	4604      	mov	r4, r0
 800a230:	2301      	movs	r3, #1
 800a232:	e7f0      	b.n	800a216 <_vfiprintf_r+0x1da>
 800a234:	ab03      	add	r3, sp, #12
 800a236:	9300      	str	r3, [sp, #0]
 800a238:	462a      	mov	r2, r5
 800a23a:	4b16      	ldr	r3, [pc, #88]	; (800a294 <_vfiprintf_r+0x258>)
 800a23c:	a904      	add	r1, sp, #16
 800a23e:	4630      	mov	r0, r6
 800a240:	f3af 8000 	nop.w
 800a244:	4607      	mov	r7, r0
 800a246:	1c78      	adds	r0, r7, #1
 800a248:	d1d6      	bne.n	800a1f8 <_vfiprintf_r+0x1bc>
 800a24a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a24c:	07d9      	lsls	r1, r3, #31
 800a24e:	d405      	bmi.n	800a25c <_vfiprintf_r+0x220>
 800a250:	89ab      	ldrh	r3, [r5, #12]
 800a252:	059a      	lsls	r2, r3, #22
 800a254:	d402      	bmi.n	800a25c <_vfiprintf_r+0x220>
 800a256:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a258:	f7ff fdb7 	bl	8009dca <__retarget_lock_release_recursive>
 800a25c:	89ab      	ldrh	r3, [r5, #12]
 800a25e:	065b      	lsls	r3, r3, #25
 800a260:	f53f af12 	bmi.w	800a088 <_vfiprintf_r+0x4c>
 800a264:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a266:	e711      	b.n	800a08c <_vfiprintf_r+0x50>
 800a268:	ab03      	add	r3, sp, #12
 800a26a:	9300      	str	r3, [sp, #0]
 800a26c:	462a      	mov	r2, r5
 800a26e:	4b09      	ldr	r3, [pc, #36]	; (800a294 <_vfiprintf_r+0x258>)
 800a270:	a904      	add	r1, sp, #16
 800a272:	4630      	mov	r0, r6
 800a274:	f000 f880 	bl	800a378 <_printf_i>
 800a278:	e7e4      	b.n	800a244 <_vfiprintf_r+0x208>
 800a27a:	bf00      	nop
 800a27c:	0800aca4 	.word	0x0800aca4
 800a280:	0800acc4 	.word	0x0800acc4
 800a284:	0800ac84 	.word	0x0800ac84
 800a288:	0800ace4 	.word	0x0800ace4
 800a28c:	0800acee 	.word	0x0800acee
 800a290:	00000000 	.word	0x00000000
 800a294:	0800a017 	.word	0x0800a017
 800a298:	0800acea 	.word	0x0800acea

0800a29c <_printf_common>:
 800a29c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a2a0:	4616      	mov	r6, r2
 800a2a2:	4699      	mov	r9, r3
 800a2a4:	688a      	ldr	r2, [r1, #8]
 800a2a6:	690b      	ldr	r3, [r1, #16]
 800a2a8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a2ac:	4293      	cmp	r3, r2
 800a2ae:	bfb8      	it	lt
 800a2b0:	4613      	movlt	r3, r2
 800a2b2:	6033      	str	r3, [r6, #0]
 800a2b4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a2b8:	4607      	mov	r7, r0
 800a2ba:	460c      	mov	r4, r1
 800a2bc:	b10a      	cbz	r2, 800a2c2 <_printf_common+0x26>
 800a2be:	3301      	adds	r3, #1
 800a2c0:	6033      	str	r3, [r6, #0]
 800a2c2:	6823      	ldr	r3, [r4, #0]
 800a2c4:	0699      	lsls	r1, r3, #26
 800a2c6:	bf42      	ittt	mi
 800a2c8:	6833      	ldrmi	r3, [r6, #0]
 800a2ca:	3302      	addmi	r3, #2
 800a2cc:	6033      	strmi	r3, [r6, #0]
 800a2ce:	6825      	ldr	r5, [r4, #0]
 800a2d0:	f015 0506 	ands.w	r5, r5, #6
 800a2d4:	d106      	bne.n	800a2e4 <_printf_common+0x48>
 800a2d6:	f104 0a19 	add.w	sl, r4, #25
 800a2da:	68e3      	ldr	r3, [r4, #12]
 800a2dc:	6832      	ldr	r2, [r6, #0]
 800a2de:	1a9b      	subs	r3, r3, r2
 800a2e0:	42ab      	cmp	r3, r5
 800a2e2:	dc26      	bgt.n	800a332 <_printf_common+0x96>
 800a2e4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a2e8:	1e13      	subs	r3, r2, #0
 800a2ea:	6822      	ldr	r2, [r4, #0]
 800a2ec:	bf18      	it	ne
 800a2ee:	2301      	movne	r3, #1
 800a2f0:	0692      	lsls	r2, r2, #26
 800a2f2:	d42b      	bmi.n	800a34c <_printf_common+0xb0>
 800a2f4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a2f8:	4649      	mov	r1, r9
 800a2fa:	4638      	mov	r0, r7
 800a2fc:	47c0      	blx	r8
 800a2fe:	3001      	adds	r0, #1
 800a300:	d01e      	beq.n	800a340 <_printf_common+0xa4>
 800a302:	6823      	ldr	r3, [r4, #0]
 800a304:	68e5      	ldr	r5, [r4, #12]
 800a306:	6832      	ldr	r2, [r6, #0]
 800a308:	f003 0306 	and.w	r3, r3, #6
 800a30c:	2b04      	cmp	r3, #4
 800a30e:	bf08      	it	eq
 800a310:	1aad      	subeq	r5, r5, r2
 800a312:	68a3      	ldr	r3, [r4, #8]
 800a314:	6922      	ldr	r2, [r4, #16]
 800a316:	bf0c      	ite	eq
 800a318:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a31c:	2500      	movne	r5, #0
 800a31e:	4293      	cmp	r3, r2
 800a320:	bfc4      	itt	gt
 800a322:	1a9b      	subgt	r3, r3, r2
 800a324:	18ed      	addgt	r5, r5, r3
 800a326:	2600      	movs	r6, #0
 800a328:	341a      	adds	r4, #26
 800a32a:	42b5      	cmp	r5, r6
 800a32c:	d11a      	bne.n	800a364 <_printf_common+0xc8>
 800a32e:	2000      	movs	r0, #0
 800a330:	e008      	b.n	800a344 <_printf_common+0xa8>
 800a332:	2301      	movs	r3, #1
 800a334:	4652      	mov	r2, sl
 800a336:	4649      	mov	r1, r9
 800a338:	4638      	mov	r0, r7
 800a33a:	47c0      	blx	r8
 800a33c:	3001      	adds	r0, #1
 800a33e:	d103      	bne.n	800a348 <_printf_common+0xac>
 800a340:	f04f 30ff 	mov.w	r0, #4294967295
 800a344:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a348:	3501      	adds	r5, #1
 800a34a:	e7c6      	b.n	800a2da <_printf_common+0x3e>
 800a34c:	18e1      	adds	r1, r4, r3
 800a34e:	1c5a      	adds	r2, r3, #1
 800a350:	2030      	movs	r0, #48	; 0x30
 800a352:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a356:	4422      	add	r2, r4
 800a358:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a35c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a360:	3302      	adds	r3, #2
 800a362:	e7c7      	b.n	800a2f4 <_printf_common+0x58>
 800a364:	2301      	movs	r3, #1
 800a366:	4622      	mov	r2, r4
 800a368:	4649      	mov	r1, r9
 800a36a:	4638      	mov	r0, r7
 800a36c:	47c0      	blx	r8
 800a36e:	3001      	adds	r0, #1
 800a370:	d0e6      	beq.n	800a340 <_printf_common+0xa4>
 800a372:	3601      	adds	r6, #1
 800a374:	e7d9      	b.n	800a32a <_printf_common+0x8e>
	...

0800a378 <_printf_i>:
 800a378:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a37c:	460c      	mov	r4, r1
 800a37e:	4691      	mov	r9, r2
 800a380:	7e27      	ldrb	r7, [r4, #24]
 800a382:	990c      	ldr	r1, [sp, #48]	; 0x30
 800a384:	2f78      	cmp	r7, #120	; 0x78
 800a386:	4680      	mov	r8, r0
 800a388:	469a      	mov	sl, r3
 800a38a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a38e:	d807      	bhi.n	800a3a0 <_printf_i+0x28>
 800a390:	2f62      	cmp	r7, #98	; 0x62
 800a392:	d80a      	bhi.n	800a3aa <_printf_i+0x32>
 800a394:	2f00      	cmp	r7, #0
 800a396:	f000 80d8 	beq.w	800a54a <_printf_i+0x1d2>
 800a39a:	2f58      	cmp	r7, #88	; 0x58
 800a39c:	f000 80a3 	beq.w	800a4e6 <_printf_i+0x16e>
 800a3a0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800a3a4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a3a8:	e03a      	b.n	800a420 <_printf_i+0xa8>
 800a3aa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a3ae:	2b15      	cmp	r3, #21
 800a3b0:	d8f6      	bhi.n	800a3a0 <_printf_i+0x28>
 800a3b2:	a001      	add	r0, pc, #4	; (adr r0, 800a3b8 <_printf_i+0x40>)
 800a3b4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800a3b8:	0800a411 	.word	0x0800a411
 800a3bc:	0800a425 	.word	0x0800a425
 800a3c0:	0800a3a1 	.word	0x0800a3a1
 800a3c4:	0800a3a1 	.word	0x0800a3a1
 800a3c8:	0800a3a1 	.word	0x0800a3a1
 800a3cc:	0800a3a1 	.word	0x0800a3a1
 800a3d0:	0800a425 	.word	0x0800a425
 800a3d4:	0800a3a1 	.word	0x0800a3a1
 800a3d8:	0800a3a1 	.word	0x0800a3a1
 800a3dc:	0800a3a1 	.word	0x0800a3a1
 800a3e0:	0800a3a1 	.word	0x0800a3a1
 800a3e4:	0800a531 	.word	0x0800a531
 800a3e8:	0800a455 	.word	0x0800a455
 800a3ec:	0800a513 	.word	0x0800a513
 800a3f0:	0800a3a1 	.word	0x0800a3a1
 800a3f4:	0800a3a1 	.word	0x0800a3a1
 800a3f8:	0800a553 	.word	0x0800a553
 800a3fc:	0800a3a1 	.word	0x0800a3a1
 800a400:	0800a455 	.word	0x0800a455
 800a404:	0800a3a1 	.word	0x0800a3a1
 800a408:	0800a3a1 	.word	0x0800a3a1
 800a40c:	0800a51b 	.word	0x0800a51b
 800a410:	680b      	ldr	r3, [r1, #0]
 800a412:	1d1a      	adds	r2, r3, #4
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	600a      	str	r2, [r1, #0]
 800a418:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800a41c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a420:	2301      	movs	r3, #1
 800a422:	e0a3      	b.n	800a56c <_printf_i+0x1f4>
 800a424:	6825      	ldr	r5, [r4, #0]
 800a426:	6808      	ldr	r0, [r1, #0]
 800a428:	062e      	lsls	r6, r5, #24
 800a42a:	f100 0304 	add.w	r3, r0, #4
 800a42e:	d50a      	bpl.n	800a446 <_printf_i+0xce>
 800a430:	6805      	ldr	r5, [r0, #0]
 800a432:	600b      	str	r3, [r1, #0]
 800a434:	2d00      	cmp	r5, #0
 800a436:	da03      	bge.n	800a440 <_printf_i+0xc8>
 800a438:	232d      	movs	r3, #45	; 0x2d
 800a43a:	426d      	negs	r5, r5
 800a43c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a440:	485e      	ldr	r0, [pc, #376]	; (800a5bc <_printf_i+0x244>)
 800a442:	230a      	movs	r3, #10
 800a444:	e019      	b.n	800a47a <_printf_i+0x102>
 800a446:	f015 0f40 	tst.w	r5, #64	; 0x40
 800a44a:	6805      	ldr	r5, [r0, #0]
 800a44c:	600b      	str	r3, [r1, #0]
 800a44e:	bf18      	it	ne
 800a450:	b22d      	sxthne	r5, r5
 800a452:	e7ef      	b.n	800a434 <_printf_i+0xbc>
 800a454:	680b      	ldr	r3, [r1, #0]
 800a456:	6825      	ldr	r5, [r4, #0]
 800a458:	1d18      	adds	r0, r3, #4
 800a45a:	6008      	str	r0, [r1, #0]
 800a45c:	0628      	lsls	r0, r5, #24
 800a45e:	d501      	bpl.n	800a464 <_printf_i+0xec>
 800a460:	681d      	ldr	r5, [r3, #0]
 800a462:	e002      	b.n	800a46a <_printf_i+0xf2>
 800a464:	0669      	lsls	r1, r5, #25
 800a466:	d5fb      	bpl.n	800a460 <_printf_i+0xe8>
 800a468:	881d      	ldrh	r5, [r3, #0]
 800a46a:	4854      	ldr	r0, [pc, #336]	; (800a5bc <_printf_i+0x244>)
 800a46c:	2f6f      	cmp	r7, #111	; 0x6f
 800a46e:	bf0c      	ite	eq
 800a470:	2308      	moveq	r3, #8
 800a472:	230a      	movne	r3, #10
 800a474:	2100      	movs	r1, #0
 800a476:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a47a:	6866      	ldr	r6, [r4, #4]
 800a47c:	60a6      	str	r6, [r4, #8]
 800a47e:	2e00      	cmp	r6, #0
 800a480:	bfa2      	ittt	ge
 800a482:	6821      	ldrge	r1, [r4, #0]
 800a484:	f021 0104 	bicge.w	r1, r1, #4
 800a488:	6021      	strge	r1, [r4, #0]
 800a48a:	b90d      	cbnz	r5, 800a490 <_printf_i+0x118>
 800a48c:	2e00      	cmp	r6, #0
 800a48e:	d04d      	beq.n	800a52c <_printf_i+0x1b4>
 800a490:	4616      	mov	r6, r2
 800a492:	fbb5 f1f3 	udiv	r1, r5, r3
 800a496:	fb03 5711 	mls	r7, r3, r1, r5
 800a49a:	5dc7      	ldrb	r7, [r0, r7]
 800a49c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a4a0:	462f      	mov	r7, r5
 800a4a2:	42bb      	cmp	r3, r7
 800a4a4:	460d      	mov	r5, r1
 800a4a6:	d9f4      	bls.n	800a492 <_printf_i+0x11a>
 800a4a8:	2b08      	cmp	r3, #8
 800a4aa:	d10b      	bne.n	800a4c4 <_printf_i+0x14c>
 800a4ac:	6823      	ldr	r3, [r4, #0]
 800a4ae:	07df      	lsls	r7, r3, #31
 800a4b0:	d508      	bpl.n	800a4c4 <_printf_i+0x14c>
 800a4b2:	6923      	ldr	r3, [r4, #16]
 800a4b4:	6861      	ldr	r1, [r4, #4]
 800a4b6:	4299      	cmp	r1, r3
 800a4b8:	bfde      	ittt	le
 800a4ba:	2330      	movle	r3, #48	; 0x30
 800a4bc:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a4c0:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a4c4:	1b92      	subs	r2, r2, r6
 800a4c6:	6122      	str	r2, [r4, #16]
 800a4c8:	f8cd a000 	str.w	sl, [sp]
 800a4cc:	464b      	mov	r3, r9
 800a4ce:	aa03      	add	r2, sp, #12
 800a4d0:	4621      	mov	r1, r4
 800a4d2:	4640      	mov	r0, r8
 800a4d4:	f7ff fee2 	bl	800a29c <_printf_common>
 800a4d8:	3001      	adds	r0, #1
 800a4da:	d14c      	bne.n	800a576 <_printf_i+0x1fe>
 800a4dc:	f04f 30ff 	mov.w	r0, #4294967295
 800a4e0:	b004      	add	sp, #16
 800a4e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a4e6:	4835      	ldr	r0, [pc, #212]	; (800a5bc <_printf_i+0x244>)
 800a4e8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800a4ec:	6823      	ldr	r3, [r4, #0]
 800a4ee:	680e      	ldr	r6, [r1, #0]
 800a4f0:	061f      	lsls	r7, r3, #24
 800a4f2:	f856 5b04 	ldr.w	r5, [r6], #4
 800a4f6:	600e      	str	r6, [r1, #0]
 800a4f8:	d514      	bpl.n	800a524 <_printf_i+0x1ac>
 800a4fa:	07d9      	lsls	r1, r3, #31
 800a4fc:	bf44      	itt	mi
 800a4fe:	f043 0320 	orrmi.w	r3, r3, #32
 800a502:	6023      	strmi	r3, [r4, #0]
 800a504:	b91d      	cbnz	r5, 800a50e <_printf_i+0x196>
 800a506:	6823      	ldr	r3, [r4, #0]
 800a508:	f023 0320 	bic.w	r3, r3, #32
 800a50c:	6023      	str	r3, [r4, #0]
 800a50e:	2310      	movs	r3, #16
 800a510:	e7b0      	b.n	800a474 <_printf_i+0xfc>
 800a512:	6823      	ldr	r3, [r4, #0]
 800a514:	f043 0320 	orr.w	r3, r3, #32
 800a518:	6023      	str	r3, [r4, #0]
 800a51a:	2378      	movs	r3, #120	; 0x78
 800a51c:	4828      	ldr	r0, [pc, #160]	; (800a5c0 <_printf_i+0x248>)
 800a51e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a522:	e7e3      	b.n	800a4ec <_printf_i+0x174>
 800a524:	065e      	lsls	r6, r3, #25
 800a526:	bf48      	it	mi
 800a528:	b2ad      	uxthmi	r5, r5
 800a52a:	e7e6      	b.n	800a4fa <_printf_i+0x182>
 800a52c:	4616      	mov	r6, r2
 800a52e:	e7bb      	b.n	800a4a8 <_printf_i+0x130>
 800a530:	680b      	ldr	r3, [r1, #0]
 800a532:	6826      	ldr	r6, [r4, #0]
 800a534:	6960      	ldr	r0, [r4, #20]
 800a536:	1d1d      	adds	r5, r3, #4
 800a538:	600d      	str	r5, [r1, #0]
 800a53a:	0635      	lsls	r5, r6, #24
 800a53c:	681b      	ldr	r3, [r3, #0]
 800a53e:	d501      	bpl.n	800a544 <_printf_i+0x1cc>
 800a540:	6018      	str	r0, [r3, #0]
 800a542:	e002      	b.n	800a54a <_printf_i+0x1d2>
 800a544:	0671      	lsls	r1, r6, #25
 800a546:	d5fb      	bpl.n	800a540 <_printf_i+0x1c8>
 800a548:	8018      	strh	r0, [r3, #0]
 800a54a:	2300      	movs	r3, #0
 800a54c:	6123      	str	r3, [r4, #16]
 800a54e:	4616      	mov	r6, r2
 800a550:	e7ba      	b.n	800a4c8 <_printf_i+0x150>
 800a552:	680b      	ldr	r3, [r1, #0]
 800a554:	1d1a      	adds	r2, r3, #4
 800a556:	600a      	str	r2, [r1, #0]
 800a558:	681e      	ldr	r6, [r3, #0]
 800a55a:	6862      	ldr	r2, [r4, #4]
 800a55c:	2100      	movs	r1, #0
 800a55e:	4630      	mov	r0, r6
 800a560:	f7f5 fe16 	bl	8000190 <memchr>
 800a564:	b108      	cbz	r0, 800a56a <_printf_i+0x1f2>
 800a566:	1b80      	subs	r0, r0, r6
 800a568:	6060      	str	r0, [r4, #4]
 800a56a:	6863      	ldr	r3, [r4, #4]
 800a56c:	6123      	str	r3, [r4, #16]
 800a56e:	2300      	movs	r3, #0
 800a570:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a574:	e7a8      	b.n	800a4c8 <_printf_i+0x150>
 800a576:	6923      	ldr	r3, [r4, #16]
 800a578:	4632      	mov	r2, r6
 800a57a:	4649      	mov	r1, r9
 800a57c:	4640      	mov	r0, r8
 800a57e:	47d0      	blx	sl
 800a580:	3001      	adds	r0, #1
 800a582:	d0ab      	beq.n	800a4dc <_printf_i+0x164>
 800a584:	6823      	ldr	r3, [r4, #0]
 800a586:	079b      	lsls	r3, r3, #30
 800a588:	d413      	bmi.n	800a5b2 <_printf_i+0x23a>
 800a58a:	68e0      	ldr	r0, [r4, #12]
 800a58c:	9b03      	ldr	r3, [sp, #12]
 800a58e:	4298      	cmp	r0, r3
 800a590:	bfb8      	it	lt
 800a592:	4618      	movlt	r0, r3
 800a594:	e7a4      	b.n	800a4e0 <_printf_i+0x168>
 800a596:	2301      	movs	r3, #1
 800a598:	4632      	mov	r2, r6
 800a59a:	4649      	mov	r1, r9
 800a59c:	4640      	mov	r0, r8
 800a59e:	47d0      	blx	sl
 800a5a0:	3001      	adds	r0, #1
 800a5a2:	d09b      	beq.n	800a4dc <_printf_i+0x164>
 800a5a4:	3501      	adds	r5, #1
 800a5a6:	68e3      	ldr	r3, [r4, #12]
 800a5a8:	9903      	ldr	r1, [sp, #12]
 800a5aa:	1a5b      	subs	r3, r3, r1
 800a5ac:	42ab      	cmp	r3, r5
 800a5ae:	dcf2      	bgt.n	800a596 <_printf_i+0x21e>
 800a5b0:	e7eb      	b.n	800a58a <_printf_i+0x212>
 800a5b2:	2500      	movs	r5, #0
 800a5b4:	f104 0619 	add.w	r6, r4, #25
 800a5b8:	e7f5      	b.n	800a5a6 <_printf_i+0x22e>
 800a5ba:	bf00      	nop
 800a5bc:	0800acf5 	.word	0x0800acf5
 800a5c0:	0800ad06 	.word	0x0800ad06

0800a5c4 <_sbrk_r>:
 800a5c4:	b538      	push	{r3, r4, r5, lr}
 800a5c6:	4d06      	ldr	r5, [pc, #24]	; (800a5e0 <_sbrk_r+0x1c>)
 800a5c8:	2300      	movs	r3, #0
 800a5ca:	4604      	mov	r4, r0
 800a5cc:	4608      	mov	r0, r1
 800a5ce:	602b      	str	r3, [r5, #0]
 800a5d0:	f7f6 fff4 	bl	80015bc <_sbrk>
 800a5d4:	1c43      	adds	r3, r0, #1
 800a5d6:	d102      	bne.n	800a5de <_sbrk_r+0x1a>
 800a5d8:	682b      	ldr	r3, [r5, #0]
 800a5da:	b103      	cbz	r3, 800a5de <_sbrk_r+0x1a>
 800a5dc:	6023      	str	r3, [r4, #0]
 800a5de:	bd38      	pop	{r3, r4, r5, pc}
 800a5e0:	200014e0 	.word	0x200014e0

0800a5e4 <__sread>:
 800a5e4:	b510      	push	{r4, lr}
 800a5e6:	460c      	mov	r4, r1
 800a5e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a5ec:	f000 f8ac 	bl	800a748 <_read_r>
 800a5f0:	2800      	cmp	r0, #0
 800a5f2:	bfab      	itete	ge
 800a5f4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a5f6:	89a3      	ldrhlt	r3, [r4, #12]
 800a5f8:	181b      	addge	r3, r3, r0
 800a5fa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a5fe:	bfac      	ite	ge
 800a600:	6563      	strge	r3, [r4, #84]	; 0x54
 800a602:	81a3      	strhlt	r3, [r4, #12]
 800a604:	bd10      	pop	{r4, pc}

0800a606 <__swrite>:
 800a606:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a60a:	461f      	mov	r7, r3
 800a60c:	898b      	ldrh	r3, [r1, #12]
 800a60e:	05db      	lsls	r3, r3, #23
 800a610:	4605      	mov	r5, r0
 800a612:	460c      	mov	r4, r1
 800a614:	4616      	mov	r6, r2
 800a616:	d505      	bpl.n	800a624 <__swrite+0x1e>
 800a618:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a61c:	2302      	movs	r3, #2
 800a61e:	2200      	movs	r2, #0
 800a620:	f000 f874 	bl	800a70c <_lseek_r>
 800a624:	89a3      	ldrh	r3, [r4, #12]
 800a626:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a62a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a62e:	81a3      	strh	r3, [r4, #12]
 800a630:	4632      	mov	r2, r6
 800a632:	463b      	mov	r3, r7
 800a634:	4628      	mov	r0, r5
 800a636:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a63a:	f000 b823 	b.w	800a684 <_write_r>

0800a63e <__sseek>:
 800a63e:	b510      	push	{r4, lr}
 800a640:	460c      	mov	r4, r1
 800a642:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a646:	f000 f861 	bl	800a70c <_lseek_r>
 800a64a:	1c43      	adds	r3, r0, #1
 800a64c:	89a3      	ldrh	r3, [r4, #12]
 800a64e:	bf15      	itete	ne
 800a650:	6560      	strne	r0, [r4, #84]	; 0x54
 800a652:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a656:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a65a:	81a3      	strheq	r3, [r4, #12]
 800a65c:	bf18      	it	ne
 800a65e:	81a3      	strhne	r3, [r4, #12]
 800a660:	bd10      	pop	{r4, pc}

0800a662 <__sclose>:
 800a662:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a666:	f000 b81f 	b.w	800a6a8 <_close_r>

0800a66a <strchr>:
 800a66a:	b2c9      	uxtb	r1, r1
 800a66c:	4603      	mov	r3, r0
 800a66e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a672:	b11a      	cbz	r2, 800a67c <strchr+0x12>
 800a674:	428a      	cmp	r2, r1
 800a676:	d1f9      	bne.n	800a66c <strchr+0x2>
 800a678:	4618      	mov	r0, r3
 800a67a:	4770      	bx	lr
 800a67c:	2900      	cmp	r1, #0
 800a67e:	bf18      	it	ne
 800a680:	2300      	movne	r3, #0
 800a682:	e7f9      	b.n	800a678 <strchr+0xe>

0800a684 <_write_r>:
 800a684:	b538      	push	{r3, r4, r5, lr}
 800a686:	4d07      	ldr	r5, [pc, #28]	; (800a6a4 <_write_r+0x20>)
 800a688:	4604      	mov	r4, r0
 800a68a:	4608      	mov	r0, r1
 800a68c:	4611      	mov	r1, r2
 800a68e:	2200      	movs	r2, #0
 800a690:	602a      	str	r2, [r5, #0]
 800a692:	461a      	mov	r2, r3
 800a694:	f7fd f93a 	bl	800790c <_write>
 800a698:	1c43      	adds	r3, r0, #1
 800a69a:	d102      	bne.n	800a6a2 <_write_r+0x1e>
 800a69c:	682b      	ldr	r3, [r5, #0]
 800a69e:	b103      	cbz	r3, 800a6a2 <_write_r+0x1e>
 800a6a0:	6023      	str	r3, [r4, #0]
 800a6a2:	bd38      	pop	{r3, r4, r5, pc}
 800a6a4:	200014e0 	.word	0x200014e0

0800a6a8 <_close_r>:
 800a6a8:	b538      	push	{r3, r4, r5, lr}
 800a6aa:	4d06      	ldr	r5, [pc, #24]	; (800a6c4 <_close_r+0x1c>)
 800a6ac:	2300      	movs	r3, #0
 800a6ae:	4604      	mov	r4, r0
 800a6b0:	4608      	mov	r0, r1
 800a6b2:	602b      	str	r3, [r5, #0]
 800a6b4:	f7f6 ff4d 	bl	8001552 <_close>
 800a6b8:	1c43      	adds	r3, r0, #1
 800a6ba:	d102      	bne.n	800a6c2 <_close_r+0x1a>
 800a6bc:	682b      	ldr	r3, [r5, #0]
 800a6be:	b103      	cbz	r3, 800a6c2 <_close_r+0x1a>
 800a6c0:	6023      	str	r3, [r4, #0]
 800a6c2:	bd38      	pop	{r3, r4, r5, pc}
 800a6c4:	200014e0 	.word	0x200014e0

0800a6c8 <_fstat_r>:
 800a6c8:	b538      	push	{r3, r4, r5, lr}
 800a6ca:	4d07      	ldr	r5, [pc, #28]	; (800a6e8 <_fstat_r+0x20>)
 800a6cc:	2300      	movs	r3, #0
 800a6ce:	4604      	mov	r4, r0
 800a6d0:	4608      	mov	r0, r1
 800a6d2:	4611      	mov	r1, r2
 800a6d4:	602b      	str	r3, [r5, #0]
 800a6d6:	f7f6 ff48 	bl	800156a <_fstat>
 800a6da:	1c43      	adds	r3, r0, #1
 800a6dc:	d102      	bne.n	800a6e4 <_fstat_r+0x1c>
 800a6de:	682b      	ldr	r3, [r5, #0]
 800a6e0:	b103      	cbz	r3, 800a6e4 <_fstat_r+0x1c>
 800a6e2:	6023      	str	r3, [r4, #0]
 800a6e4:	bd38      	pop	{r3, r4, r5, pc}
 800a6e6:	bf00      	nop
 800a6e8:	200014e0 	.word	0x200014e0

0800a6ec <_isatty_r>:
 800a6ec:	b538      	push	{r3, r4, r5, lr}
 800a6ee:	4d06      	ldr	r5, [pc, #24]	; (800a708 <_isatty_r+0x1c>)
 800a6f0:	2300      	movs	r3, #0
 800a6f2:	4604      	mov	r4, r0
 800a6f4:	4608      	mov	r0, r1
 800a6f6:	602b      	str	r3, [r5, #0]
 800a6f8:	f7f6 ff47 	bl	800158a <_isatty>
 800a6fc:	1c43      	adds	r3, r0, #1
 800a6fe:	d102      	bne.n	800a706 <_isatty_r+0x1a>
 800a700:	682b      	ldr	r3, [r5, #0]
 800a702:	b103      	cbz	r3, 800a706 <_isatty_r+0x1a>
 800a704:	6023      	str	r3, [r4, #0]
 800a706:	bd38      	pop	{r3, r4, r5, pc}
 800a708:	200014e0 	.word	0x200014e0

0800a70c <_lseek_r>:
 800a70c:	b538      	push	{r3, r4, r5, lr}
 800a70e:	4d07      	ldr	r5, [pc, #28]	; (800a72c <_lseek_r+0x20>)
 800a710:	4604      	mov	r4, r0
 800a712:	4608      	mov	r0, r1
 800a714:	4611      	mov	r1, r2
 800a716:	2200      	movs	r2, #0
 800a718:	602a      	str	r2, [r5, #0]
 800a71a:	461a      	mov	r2, r3
 800a71c:	f7f6 ff40 	bl	80015a0 <_lseek>
 800a720:	1c43      	adds	r3, r0, #1
 800a722:	d102      	bne.n	800a72a <_lseek_r+0x1e>
 800a724:	682b      	ldr	r3, [r5, #0]
 800a726:	b103      	cbz	r3, 800a72a <_lseek_r+0x1e>
 800a728:	6023      	str	r3, [r4, #0]
 800a72a:	bd38      	pop	{r3, r4, r5, pc}
 800a72c:	200014e0 	.word	0x200014e0

0800a730 <__malloc_lock>:
 800a730:	4801      	ldr	r0, [pc, #4]	; (800a738 <__malloc_lock+0x8>)
 800a732:	f7ff bb49 	b.w	8009dc8 <__retarget_lock_acquire_recursive>
 800a736:	bf00      	nop
 800a738:	200014d8 	.word	0x200014d8

0800a73c <__malloc_unlock>:
 800a73c:	4801      	ldr	r0, [pc, #4]	; (800a744 <__malloc_unlock+0x8>)
 800a73e:	f7ff bb44 	b.w	8009dca <__retarget_lock_release_recursive>
 800a742:	bf00      	nop
 800a744:	200014d8 	.word	0x200014d8

0800a748 <_read_r>:
 800a748:	b538      	push	{r3, r4, r5, lr}
 800a74a:	4d07      	ldr	r5, [pc, #28]	; (800a768 <_read_r+0x20>)
 800a74c:	4604      	mov	r4, r0
 800a74e:	4608      	mov	r0, r1
 800a750:	4611      	mov	r1, r2
 800a752:	2200      	movs	r2, #0
 800a754:	602a      	str	r2, [r5, #0]
 800a756:	461a      	mov	r2, r3
 800a758:	f7f6 fede 	bl	8001518 <_read>
 800a75c:	1c43      	adds	r3, r0, #1
 800a75e:	d102      	bne.n	800a766 <_read_r+0x1e>
 800a760:	682b      	ldr	r3, [r5, #0]
 800a762:	b103      	cbz	r3, 800a766 <_read_r+0x1e>
 800a764:	6023      	str	r3, [r4, #0]
 800a766:	bd38      	pop	{r3, r4, r5, pc}
 800a768:	200014e0 	.word	0x200014e0

0800a76c <_init>:
 800a76c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a76e:	bf00      	nop
 800a770:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a772:	bc08      	pop	{r3}
 800a774:	469e      	mov	lr, r3
 800a776:	4770      	bx	lr

0800a778 <_fini>:
 800a778:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a77a:	bf00      	nop
 800a77c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a77e:	bc08      	pop	{r3}
 800a780:	469e      	mov	lr, r3
 800a782:	4770      	bx	lr
